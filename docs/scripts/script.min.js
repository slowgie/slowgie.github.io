var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/// <reference path="../declarations/DataStore/BadgeCase.d.ts" />
class App {
    static start() {
        if (!App.debug) {
            Object.freeze(GameConstants);
        }
        Preload.load(App.debug).then(() => {
            ko.options.deferUpdates = true;
            console.log(`[${GameConstants.formatDate(new Date())}] %cLoading Game Data..`, 'color:#8e44ad;font-weight:900;');
            // Needs to be loaded first so save data can be updated (specifically "player" data)
            const update = new Update();
            const multiplier = new Multiplier();
            player = Save.load();
            App.game = new Game(update, new Profile(), new Breeding(multiplier), new Pokeballs(), new Wallet(multiplier), new KeyItems(), new BadgeCase(), new OakItems([20, 50, 100], multiplier), new OakItemLoadouts(), new PokemonCategories(), new Party(multiplier), new Shards(), new Underground(), new Farming(multiplier), new LogBook(), new RedeemableCodes(), new Statistics(), new Quests(), new SpecialEvents(), new Discord(), new AchievementTracker(), new Challenges(), multiplier);
            console.log(`[${GameConstants.formatDate(new Date())}] %cGame loaded`, 'color:#8e44ad;font-weight:900;');
            Notifier.notify({ message: 'Game loaded', type: NotificationConstants.NotificationOption.info });
            GameController.bindToolTips();
            GameController.addKeyListeners();
            PokedexHelper.populateFilters();
            PokedexHelper.updateList();
            App.game.initialize();
            ko.applyBindings(App.game);
            GameController.applyRouteBindings();
            Preload.hideSplashScreen();
            App.game.start();
        });
    }
}
App.debug = false;
class Evolution {
    constructor(basePokemon) {
        this.basePokemon = basePokemon;
        this.type = [];
    }
    isSatisfied() {
        // Check that evolution is within reached regions
        return PokemonHelper.calcNativeRegion(this.getEvolvedPokemon()) <= player.highestRegion();
    }
    evolve(notification = false) {
        const evolvedPokemon = this.getEvolvedPokemon();
        // This Pokemon is from a region we haven't reached yet
        if (PokemonHelper.calcNativeRegion(evolvedPokemon) > player.highestRegion()) {
            return false;
        }
        // Notify the player if they haven't already caught the evolution, or notifications are forced
        if (!App.game.party.alreadyCaughtPokemonByName(evolvedPokemon) || notification) {
            Notifier.notify({
                message: `Your ${this.basePokemon} evolved into a ${evolvedPokemon}`,
                type: NotificationConstants.NotificationOption.success,
            });
        }
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_STONE);
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(evolvedPokemon).id, shiny, true);
        return shiny;
    }
}
function restrictEvoWith(restrictionTest, type = null) {
    return function (Base) {
        return class extends Base {
            constructor(...args) {
                super(...args);
                if (type !== null) {
                    this.type.push(type);
                }
            }
            isSatisfied() {
                return restrictionTest() && super.isSatisfied();
            }
        };
    };
}
var EvolutionType;
(function (EvolutionType) {
    EvolutionType[EvolutionType["Level"] = 0] = "Level";
    EvolutionType[EvolutionType["Stone"] = 1] = "Stone";
    EvolutionType[EvolutionType["Timed"] = 2] = "Timed";
    EvolutionType[EvolutionType["Location"] = 3] = "Location";
    EvolutionType[EvolutionType["Environment"] = 4] = "Environment";
    EvolutionType[EvolutionType["Other"] = 5] = "Other";
})(EvolutionType || (EvolutionType = {}));
///<reference path="Evolution.ts"/>
///<reference path="EvolutionType.ts"/>
class StoneEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, stone) {
        super(basePokemon);
        this.evolvedPokemon = evolvedPokemon;
        this.stone = stone;
        this.type.push(EvolutionType.Stone);
    }
    getEvolvedPokemon() {
        return this.evolvedPokemon;
    }
}
///<reference path="Evolution.ts"/>
///<reference path="EvolutionType.ts"/>
class LevelEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, level) {
        super(basePokemon);
        this.evolvedPokemon = evolvedPokemon;
        this.level = level;
        this.type.push(EvolutionType.Level);
    }
    getEvolvedPokemon() {
        return this.evolvedPokemon;
    }
    isSatisfied() {
        return super.isSatisfied()
            // Check high enough level
            && App.game.party.getPokemon(PokemonHelper.getPokemonByName(this.basePokemon).id).level >= this.level;
    }
    evolve() {
        if (this.triggered) {
            return false;
        }
        this.triggered = true;
        // We have already obtained the evolution
        if (App.game.party.alreadyCaughtPokemonByName(this.getEvolvedPokemon())) {
            return false;
        }
        return super.evolve(true);
    }
}
function LocationRestricted(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.type.push(EvolutionType.Location);
        }
        isSatisfied() {
            return this.atLocation()
                && super.isSatisfied();
        }
    };
}
/// <reference path="./LocationRestriction.ts" />
function ByDungeon(Base) {
    return class extends Base {
        constructor(...args) {
            const [dungeon, ...rest] = args;
            super(...rest);
            this.dungeon = dungeon;
        }
        atLocation() {
            return App.game.gameState == GameConstants.GameState.dungeon
                && DungeonRunner.dungeon.name == this.dungeon;
        }
    };
}
function DungeonRestricted(Base) {
    return LocationRestricted(ByDungeon(Base));
}
const AnyDungeonRestricted = restrictEvoWith(() => App.game.gameState == GameConstants.GameState.dungeon, EvolutionType.Location);
/// <reference path="./LocationRestriction.ts" />
function ByGym(Base) {
    return class extends Base {
        constructor(...args) {
            const [town, ...rest] = args;
            super(...rest);
            this.town = town;
        }
        atLocation() {
            return App.game.gameState == GameConstants.GameState.gym
                && GymRunner.gymObservable().town == this.town;
        }
    };
}
function GymRestricted(Base) {
    return LocationRestricted(ByGym(Base));
}
const AnyGymRestricted = restrictEvoWith(() => App.game.gameState == GameConstants.GameState.gym, EvolutionType.Location);
function TimeRestricted(start, end, Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.startHour = start;
            this.endHour = end;
            this.type.push(EvolutionType.Timed);
        }
        isWithinTime() {
            const currentHour = new Date().getHours();
            return this.startHour < this.endHour ?
                // If the start time is before the end time, both need to be true
                currentHour >= this.startHour && currentHour < this.endHour :
                // If the start time is after the end time, only 1 needs to be true
                currentHour >= this.startHour || currentHour < this.endHour;
        }
        isSatisfied() {
            // Check current time within evolution hours
            return this.isWithinTime()
                && super.isSatisfied();
        }
    };
}
function DayTimeRestricted(Base) {
    return TimeRestricted(6, 18, Base);
}
function NightTimeRestricted(Base) {
    return TimeRestricted(18, 6, Base);
}
/// <reference path="../../GameConstants.d.ts" />
function EnvironmentRestricted(Base) {
    const Mixin = class extends Base {
        constructor(...args) {
            const [env, ...rest] = args;
            super(...rest);
            this.environment = env;
            this.type.push(EvolutionType.Environment);
        }
        isSatisfied() {
            return MapHelper.getCurrentEnvironment() == this.environment
                && super.isSatisfied();
        }
    };
    return Mixin;
}
/// <reference path="./StoneEvolution.ts" />
/// <reference path="./LevelEvolution.ts" />
/// <reference path="./DungeonRestriction.ts" />
/// <reference path="./GymRestriction.ts" />
/// <reference path="./TimedRestriction.ts" />
/// <reference path="./EnvironmentRestriction.ts" />
// Used for custom time ranges
function TimeRestrictedBase(Base) {
    return function (start, end, ...rest) {
        const tmpClass = TimeRestricted(start, end, Base);
        return new tmpClass(...rest);
    };
}
// new TimeRestrictedLevelEvolution(start: number, end: number, basePokemon: string, evolvedPokemon: string, level: number)
const TimeRestrictedLevelEvolution = TimeRestrictedBase(LevelEvolution);
// new DayTimedLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const DayTimedLevelEvolution = DayTimeRestricted(LevelEvolution);
// new NightTimedLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const NightTimedLevelEvolution = NightTimeRestricted(LevelEvolution);
// new DayTimedStoneEvolution(basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType)
const DayTimedStoneEvolution = DayTimeRestricted(StoneEvolution);
// NightTimedStoneEvolution(basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType)
const NightTimedStoneEvolution = NightTimeRestricted(StoneEvolution);
// new DungeonRestrictedLevelEvolution(dungeon: string, basePokemon: string, evolvedPokemon: string, level: number)
const DungeonRestrictedLevelEvolution = DungeonRestricted(LevelEvolution);
// new AnyDungeonLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const AnyDungeonLevelEvolution = AnyDungeonRestricted(LevelEvolution);
// new AnyGymLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const AnyGymLevelEvolution = AnyGymRestricted(LevelEvolution);
// new EnvironmentRestrictedLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
// an Environment is any key of GameConstants.Environments, eg 'Cave' or 'PowerPlant'
const EnvironmentRestrictedLevelEvolution = EnvironmentRestricted(LevelEvolution);
// new EnvironmentDungeonLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
const EnvironmentDungeonLevelEvolution = EnvironmentRestricted(AnyDungeonLevelEvolution);
// new EnvironmentGymLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
const EnvironmentGymLevelEvolution = EnvironmentRestricted(AnyGymLevelEvolution);
class WeatherRestrictedLevelEvolution extends LevelEvolution {
    constructor(basePokemon, evolvedPokemon, level, weather) {
        super(basePokemon, evolvedPokemon, level);
        this.weather = weather;
        this.type.push(EvolutionType.Other);
    }
    isSatisfied() {
        return super.isSatisfied()
            // Check Weather conditions
            && this.weather.includes(Weather.currentWeather());
    }
}
var BerryType;
(function (BerryType) {
    BerryType[BerryType["None"] = -1] = "None";
    // First generation
    BerryType[BerryType["Cheri"] = 0] = "Cheri";
    BerryType[BerryType["Chesto"] = 1] = "Chesto";
    BerryType[BerryType["Pecha"] = 2] = "Pecha";
    BerryType[BerryType["Rawst"] = 3] = "Rawst";
    BerryType[BerryType["Aspear"] = 4] = "Aspear";
    BerryType[BerryType["Leppa"] = 5] = "Leppa";
    BerryType[BerryType["Oran"] = 6] = "Oran";
    BerryType[BerryType["Sitrus"] = 7] = "Sitrus";
    // Second generation
    BerryType[BerryType["Persim"] = 8] = "Persim";
    BerryType[BerryType["Razz"] = 9] = "Razz";
    BerryType[BerryType["Bluk"] = 10] = "Bluk";
    BerryType[BerryType["Nanab"] = 11] = "Nanab";
    BerryType[BerryType["Wepear"] = 12] = "Wepear";
    BerryType[BerryType["Pinap"] = 13] = "Pinap";
    BerryType[BerryType["Figy"] = 14] = "Figy";
    BerryType[BerryType["Wiki"] = 15] = "Wiki";
    BerryType[BerryType["Mago"] = 16] = "Mago";
    BerryType[BerryType["Aguav"] = 17] = "Aguav";
    BerryType[BerryType["Iapapa"] = 18] = "Iapapa";
    BerryType[BerryType["Lum"] = 19] = "Lum";
    //Third Generation
    BerryType[BerryType["Pomeg"] = 20] = "Pomeg";
    BerryType[BerryType["Kelpsy"] = 21] = "Kelpsy";
    BerryType[BerryType["Qualot"] = 22] = "Qualot";
    BerryType[BerryType["Hondew"] = 23] = "Hondew";
    BerryType[BerryType["Grepa"] = 24] = "Grepa";
    BerryType[BerryType["Tamato"] = 25] = "Tamato";
    BerryType[BerryType["Cornn"] = 26] = "Cornn";
    BerryType[BerryType["Magost"] = 27] = "Magost";
    BerryType[BerryType["Rabuta"] = 28] = "Rabuta";
    BerryType[BerryType["Nomel"] = 29] = "Nomel";
    BerryType[BerryType["Spelon"] = 30] = "Spelon";
    BerryType[BerryType["Pamtre"] = 31] = "Pamtre";
    BerryType[BerryType["Watmel"] = 32] = "Watmel";
    BerryType[BerryType["Durin"] = 33] = "Durin";
    BerryType[BerryType["Belue"] = 34] = "Belue";
    // Fourth Generation (Typed)
    BerryType[BerryType["Occa"] = 35] = "Occa";
    BerryType[BerryType["Passho"] = 36] = "Passho";
    BerryType[BerryType["Wacan"] = 37] = "Wacan";
    BerryType[BerryType["Rindo"] = 38] = "Rindo";
    BerryType[BerryType["Yache"] = 39] = "Yache";
    BerryType[BerryType["Chople"] = 40] = "Chople";
    BerryType[BerryType["Kebia"] = 41] = "Kebia";
    BerryType[BerryType["Shuca"] = 42] = "Shuca";
    BerryType[BerryType["Coba"] = 43] = "Coba";
    BerryType[BerryType["Payapa"] = 44] = "Payapa";
    BerryType[BerryType["Tanga"] = 45] = "Tanga";
    BerryType[BerryType["Charti"] = 46] = "Charti";
    BerryType[BerryType["Kasib"] = 47] = "Kasib";
    BerryType[BerryType["Haban"] = 48] = "Haban";
    BerryType[BerryType["Colbur"] = 49] = "Colbur";
    BerryType[BerryType["Babiri"] = 50] = "Babiri";
    BerryType[BerryType["Chilan"] = 51] = "Chilan";
    BerryType[BerryType["Roseli"] = 52] = "Roseli";
    // Fifth Generation
    BerryType[BerryType["Micle"] = 53] = "Micle";
    BerryType[BerryType["Custap"] = 54] = "Custap";
    BerryType[BerryType["Jaboca"] = 55] = "Jaboca";
    BerryType[BerryType["Rowap"] = 56] = "Rowap";
    BerryType[BerryType["Kee"] = 57] = "Kee";
    BerryType[BerryType["Maranga"] = 58] = "Maranga";
    BerryType[BerryType["Liechi"] = 59] = "Liechi";
    BerryType[BerryType["Ganlon"] = 60] = "Ganlon";
    BerryType[BerryType["Salac"] = 61] = "Salac";
    BerryType[BerryType["Petaya"] = 62] = "Petaya";
    BerryType[BerryType["Apicot"] = 63] = "Apicot";
    BerryType[BerryType["Lansat"] = 64] = "Lansat";
    BerryType[BerryType["Starf"] = 65] = "Starf";
    BerryType[BerryType["Enigma"] = 66] = "Enigma";
})(BerryType || (BerryType = {}));
/// <reference path="../party/evolutions/EvolutionMethods.ts" />
/// <reference path="../party/evolutions/WeatherRestrictedLevelEvolution.ts" />
/// <reference path="../GameConstants.d.ts" />
/// <reference path="../../declarations/weather/WeatherType.d.ts" />
/// <reference path="../../declarations/enums/PokemonType.d.ts" />
/// <reference path="../../declarations/interfaces/BagItem.d.ts" />
/// <reference path="../farming/BerryType.ts" />
const pokemonBabyPrevolutionMap = {};
function createPokemonArray(...args) {
    return args;
}
const pokemonList = createPokemonArray({
    'id': 1,
    'name': 'Bulbasaur',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Bulbasaur', 'Ivysaur', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 65,
        'defense': 49,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': 2,
    'name': 'Ivysaur',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Ivysaur', 'Venusaur', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 80,
        'defense': 63,
        'specialDefense': 80,
        'speed': 60,
    },
}, {
    'id': 3,
    'name': 'Venusaur',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 100,
        'defense': 83,
        'specialDefense': 100,
        'speed': 80,
    },
}, {
    'id': 4,
    'name': 'Charmander',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Charmander', 'Charmeleon', 16)],
    'base': {
        'hitpoints': 39,
        'attack': 52,
        'specialAttack': 60,
        'defense': 43,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 5,
    'name': 'Charmeleon',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Charmeleon', 'Charizard', 36)],
    'base': {
        'hitpoints': 58,
        'attack': 64,
        'specialAttack': 80,
        'defense': 58,
        'specialDefense': 65,
        'speed': 80,
    },
}, {
    'id': 6,
    'name': 'Charizard',
    'catchRate': 45,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'eggCycles': 20,
    'base': {
        'hitpoints': 78,
        'attack': 84,
        'specialAttack': 109,
        'defense': 78,
        'specialDefense': 85,
        'speed': 100,
    },
}, {
    'id': 7,
    'name': 'Squirtle',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Squirtle', 'Wartortle', 16)],
    'base': {
        'hitpoints': 44,
        'attack': 48,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 64,
        'speed': 43,
    },
}, {
    'id': 8,
    'name': 'Wartortle',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Wartortle', 'Blastoise', 36)],
    'base': {
        'hitpoints': 59,
        'attack': 63,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 80,
        'speed': 58,
    },
}, {
    'id': 9,
    'name': 'Blastoise',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'eggCycles': 20,
    'base': {
        'hitpoints': 79,
        'attack': 83,
        'specialAttack': 85,
        'defense': 100,
        'specialDefense': 105,
        'speed': 78,
    },
}, {
    'id': 10,
    'name': 'Caterpie',
    'catchRate': 255,
    'type': [PokemonType.Bug],
    'levelType': LevelType.mediumfast,
    'exp': 39,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Caterpie', 'Metapod', 7)],
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 20,
        'defense': 35,
        'specialDefense': 20,
        'speed': 45,
    },
}, {
    'id': 11,
    'name': 'Metapod',
    'catchRate': 120,
    'type': [PokemonType.Bug],
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Metapod', 'Butterfree', 10)],
    'base': {
        'hitpoints': 50,
        'attack': 20,
        'specialAttack': 25,
        'defense': 55,
        'specialDefense': 25,
        'speed': 30,
    },
}, {
    'id': 12,
    'name': 'Butterfree',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'eggCycles': 15,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 80,
        'speed': 70,
    },
}, {
    'id': 13,
    'name': 'Weedle',
    'catchRate': 255,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 39,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Weedle', 'Kakuna', 7)],
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 20,
        'defense': 30,
        'specialDefense': 20,
        'speed': 50,
    },
}, {
    'id': 14,
    'name': 'Kakuna',
    'catchRate': 120,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Kakuna', 'Beedrill', 10)],
    'base': {
        'hitpoints': 45,
        'attack': 25,
        'specialAttack': 25,
        'defense': 50,
        'specialDefense': 25,
        'speed': 35,
    },
}, {
    'id': 15,
    'name': 'Beedrill',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'eggCycles': 15,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 45,
        'defense': 40,
        'specialDefense': 80,
        'speed': 75,
    },
}, {
    'id': 16,
    'name': 'Pidgey',
    'catchRate': 255,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 50,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Pidgey', 'Pidgeotto', 18)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 35,
        'speed': 56,
    },
}, {
    'id': 17,
    'name': 'Pidgeotto',
    'catchRate': 120,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 122,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Pidgeotto', 'Pidgeot', 36)],
    'base': {
        'hitpoints': 63,
        'attack': 60,
        'specialAttack': 50,
        'defense': 55,
        'specialDefense': 50,
        'speed': 71,
    },
}, {
    'id': 18,
    'name': 'Pidgeot',
    'catchRate': 45,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 216,
    'eggCycles': 15,
    'base': {
        'hitpoints': 83,
        'attack': 80,
        'specialAttack': 70,
        'defense': 75,
        'specialDefense': 70,
        'speed': 101,
    },
}, {
    'id': 19,
    'name': 'Rattata',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Rattata', 'Raticate', 20)],
    'base': {
        'hitpoints': 30,
        'attack': 56,
        'specialAttack': 25,
        'defense': 35,
        'specialDefense': 35,
        'speed': 72,
    },
}, {
    'id': 19.01,
    'name': 'Alolan Rattata',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Dark, PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Alolan Rattata', 'Alolan Raticate', 20)],
    'base': {
        'hitpoints': 30,
        'attack': 56,
        'specialAttack': 25,
        'defense': 35,
        'specialDefense': 35,
        'speed': 72,
    },
}, {
    'id': 20,
    'name': 'Raticate',
    'catchRate': 127,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 15,
    'base': {
        'hitpoints': 55,
        'attack': 81,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 70,
        'speed': 97,
    },
}, {
    'id': 20.01,
    'name': 'Alolan Raticate',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 127,
    'type': [PokemonType.Dark, PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 15,
    'base': {
        'hitpoints': 75,
        'attack': 71,
        'specialAttack': 40,
        'defense': 70,
        'specialDefense': 80,
        'speed': 77,
    },
}, {
    'id': 20.02,
    'name': 'Totem Alolan Raticate',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 127,
    'type': [PokemonType.Dark, PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 15,
    'base': {
        'hitpoints': 75,
        'attack': 71,
        'specialAttack': 40,
        'defense': 80,
        'specialDefense': 80,
        'speed': 77,
    },
}, {
    'id': 21,
    'name': 'Spearow',
    'catchRate': 255,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 52,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Spearow', 'Fearow', 20)],
    'base': {
        'hitpoints': 40,
        'attack': 60,
        'specialAttack': 31,
        'defense': 30,
        'specialDefense': 31,
        'speed': 70,
    },
}, {
    'id': 22,
    'name': 'Fearow',
    'catchRate': 90,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 155,
    'eggCycles': 15,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 61,
        'defense': 65,
        'specialDefense': 61,
        'speed': 100,
    },
}, {
    'id': 23,
    'name': 'Ekans',
    'catchRate': 255,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Ekans', 'Arbok', 22)],
    'base': {
        'hitpoints': 35,
        'attack': 60,
        'specialAttack': 40,
        'defense': 44,
        'specialDefense': 54,
        'speed': 55,
    },
}, {
    'id': 24,
    'name': 'Arbok',
    'catchRate': 90,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 157,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 95,
        'specialAttack': 65,
        'defense': 69,
        'specialDefense': 79,
        'speed': 80,
    },
}, {
    'id': 25,
    'name': 'Pikachu',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Pikachu', 'Raichu', GameConstants.StoneType.Thunder_stone)],
    //TODO add Alola-only evolution into Alolan Raichu using Thunderstone
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.01,
    'name': 'Pikachu (Original cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.02,
    'name': 'Pikachu (Hoenn cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.03,
    'name': 'Pikachu (Sinnoh cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.04,
    'name': 'Pikachu (Unova cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.05,
    'name': 'Pikachu (Kalos cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.06,
    'name': 'Pikachu (Alola cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.07,
    'name': 'Pikachu (Partner cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 26,
    'name': 'Raichu',
    'catchRate': 75,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 218,
    'eggCycles': 10,
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 90,
        'defense': 55,
        'specialDefense': 80,
        'speed': 110,
    },
}, {
    'id': 26.01,
    'name': 'Alolan Raichu',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Electric, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 218,
    'eggCycles': 10,
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 95,
        'defense': 50,
        'specialDefense': 85,
        'speed': 110,
    },
}, {
    'id': 27,
    'name': 'Sandshrew',
    'catchRate': 255,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Sandshrew', 'Sandslash', 22)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 20,
        'defense': 85,
        'specialDefense': 30,
        'speed': 40,
    },
}, {
    'id': 27.01,
    'name': 'Alolan Sandshrew',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Ice, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Alolan Sandshrew', 'Alolan Sandslash', GameConstants.StoneType.Ice_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 10,
        'defense': 90,
        'specialDefense': 35,
        'speed': 40,
    },
}, {
    'id': 28,
    'name': 'Sandslash',
    'catchRate': 90,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 45,
        'defense': 110,
        'specialDefense': 55,
        'speed': 65,
    },
}, {
    'id': 28.01,
    'name': 'Alolan Sandslash',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 90,
    'type': [PokemonType.Ice, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 25,
        'defense': 120,
        'specialDefense': 65,
        'speed': 65,
    },
}, {
    'id': 29,
    'name': 'Nidoran(F)',
    'catchRate': 235,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Nidoran(F)', 'Nidorina', 16)],
    'base': {
        'hitpoints': 55,
        'attack': 47,
        'specialAttack': 40,
        'defense': 120,
        'specialDefense': 40,
        'speed': 41,
    },
}, {
    'id': 30,
    'name': 'Nidorina',
    'catchRate': 120,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 128,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Nidorina', 'Nidoqueen', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 70,
        'attack': 62,
        'specialAttack': 55,
        'defense': 67,
        'specialDefense': 55,
        'speed': 56,
    },
}, {
    'id': 31,
    'name': 'Nidoqueen',
    'catchRate': 45,
    'type': [PokemonType.Poison, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 92,
        'specialAttack': 75,
        'defense': 87,
        'specialDefense': 85,
        'speed': 76,
    },
}, {
    'id': 32,
    'name': 'Nidoran(M)',
    'catchRate': 235,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Nidoran(M)', 'Nidorino', 16)],
    'base': {
        'hitpoints': 46,
        'attack': 57,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 50,
    },
}, {
    'id': 33,
    'name': 'Nidorino',
    'catchRate': 120,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 128,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Nidorino', 'Nidoking', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 61,
        'attack': 72,
        'specialAttack': 55,
        'defense': 57,
        'specialDefense': 55,
        'speed': 65,
    },
}, {
    'id': 34,
    'name': 'Nidoking',
    'catchRate': 45,
    'type': [PokemonType.Poison, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'eggCycles': 20,
    'base': {
        'hitpoints': 81,
        'attack': 102,
        'specialAttack': 85,
        'defense': 77,
        'specialDefense': 75,
        'speed': 85,
    },
}, {
    'id': 35,
    'name': 'Clefairy',
    'catchRate': 150,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 113,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Clefairy', 'Clefable', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 70,
        'attack': 45,
        'specialAttack': 60,
        'defense': 48,
        'specialDefense': 65,
        'speed': 35,
    },
    'heldItem': { type: ItemType.item, id: 'Moon_stone' },
}, {
    'id': 36,
    'name': 'Clefable',
    'catchRate': 25,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 217,
    'eggCycles': 10,
    'base': {
        'hitpoints': 95,
        'attack': 70,
        'specialAttack': 95,
        'defense': 73,
        'specialDefense': 90,
        'speed': 60,
    },
    'heldItem': { type: ItemType.item, id: 'Moon_stone' },
}, {
    'id': 37,
    'name': 'Vulpix',
    'catchRate': 190,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Vulpix', 'Ninetales', GameConstants.StoneType.Fire_stone)],
    'base': {
        'hitpoints': 38,
        'attack': 41,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 65,
        'speed': 65,
    },
}, {
    'id': 37.01,
    'name': 'Alolan Vulpix',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 190,
    'type': [PokemonType.Ice],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Alolan Vulpix', 'Alolan Ninetales', GameConstants.StoneType.Ice_stone)],
    'base': {
        'hitpoints': 38,
        'attack': 41,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 65,
        'speed': 65,
    },
}, {
    'id': 38,
    'name': 'Ninetales',
    'catchRate': 75,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'eggCycles': 20,
    'base': {
        'hitpoints': 73,
        'attack': 76,
        'specialAttack': 81,
        'defense': 75,
        'specialDefense': 100,
        'speed': 100,
    },
}, {
    'id': 38.01,
    'name': 'Alolan Ninetales',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Ice, PokemonType.Fairy],
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'eggCycles': 20,
    'base': {
        'hitpoints': 73,
        'attack': 67,
        'specialAttack': 81,
        'defense': 75,
        'specialDefense': 100,
        'speed': 109,
    },
}, {
    'id': 39,
    'name': 'Jigglypuff',
    'catchRate': 170,
    'type': [PokemonType.Normal, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 95,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Jigglypuff', 'Wigglytuff', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 115,
        'attack': 45,
        'specialAttack': 45,
        'defense': 20,
        'specialDefense': 25,
        'speed': 20,
    },
}, {
    'id': 40,
    'name': 'Wigglytuff',
    'catchRate': 50,
    'type': [PokemonType.Normal, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 196,
    'eggCycles': 10,
    'base': {
        'hitpoints': 140,
        'attack': 70,
        'specialAttack': 85,
        'defense': 45,
        'specialDefense': 50,
        'speed': 45,
    },
}, {
    'id': 41,
    'name': 'Zubat',
    'catchRate': 255,
    'type': [PokemonType.Poison, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 49,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Zubat', 'Golbat', 22)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 30,
        'defense': 35,
        'specialDefense': 40,
        'speed': 55,
    },
}, {
    'id': 42,
    'name': 'Golbat',
    'catchRate': 90,
    'type': [PokemonType.Poison, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 15,
    'evolutions': [new StoneEvolution('Golbat', 'Crobat', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 75,
        'speed': 90,
    },
}, {
    'id': 43,
    'name': 'Oddish',
    'catchRate': 255,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Oddish', 'Gloom', 21)],
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 75,
        'defense': 55,
        'specialDefense': 65,
        'speed': 30,
    },
}, {
    'id': 44,
    'name': 'Gloom',
    'catchRate': 120,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 138,
    'eggCycles': 20,
    'evolutions': [
        new StoneEvolution('Gloom', 'Vileplume', GameConstants.StoneType.Leaf_stone),
        new StoneEvolution('Gloom', 'Bellossom', GameConstants.StoneType.Sun_stone),
    ],
    'base': {
        'hitpoints': 60,
        'attack': 65,
        'specialAttack': 85,
        'defense': 70,
        'specialDefense': 75,
        'speed': 40,
    },
}, {
    'id': 45,
    'name': 'Vileplume',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 110,
        'defense': 85,
        'specialDefense': 90,
        'speed': 50,
    },
}, {
    'id': 46,
    'name': 'Paras',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Grass],
    'levelType': LevelType.mediumfast,
    'exp': 57,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Paras', 'Parasect', 24)],
    'base': {
        'hitpoints': 35,
        'attack': 70,
        'specialAttack': 45,
        'defense': 55,
        'specialDefense': 55,
        'speed': 25,
    },
}, {
    'id': 47,
    'name': 'Parasect',
    'catchRate': 75,
    'type': [PokemonType.Bug, PokemonType.Grass],
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 95,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 80,
        'speed': 30,
    },
}, {
    'id': 48,
    'name': 'Venonat',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Venonat', 'Venomoth', 31)],
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 55,
        'speed': 45,
    },
}, {
    'id': 49,
    'name': 'Venomoth',
    'catchRate': 75,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'attack': 65,
        'specialAttack': 90,
        'defense': 60,
        'specialDefense': 75,
        'speed': 90,
    },
}, {
    'id': 50,
    'name': 'Diglett',
    'catchRate': 255,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Diglett', 'Dugtrio', 26)],
    'base': {
        'hitpoints': 10,
        'attack': 55,
        'specialAttack': 35,
        'defense': 25,
        'specialDefense': 45,
        'speed': 95,
    },
}, {
    'id': 50.01,
    'name': 'Alolan Diglett',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Ground, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Alolan Diglett', 'Alolan Dugtrio', 26)],
    'base': {
        'hitpoints': 10,
        'attack': 55,
        'specialAttack': 35,
        'defense': 30,
        'specialDefense': 45,
        'speed': 90,
    },
}, {
    'id': 51,
    'name': 'Dugtrio',
    'catchRate': 50,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 100,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 70,
        'speed': 120,
    },
}, {
    'id': 51.01,
    'name': 'Alolan Dugtrio',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 50,
    'type': [PokemonType.Ground, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 100,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 70,
        'speed': 110,
    },
}, {
    'id': 52,
    'name': 'Meowth',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Meowth', 'Persian', 28)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 40,
        'defense': 35,
        'specialDefense': 40,
        'speed': 90,
    },
}, {
    'id': 52.01,
    'name': 'Alolan Meowth',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Alolan Meowth', 'Alolan Persian', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 50,
        'defense': 35,
        'specialDefense': 40,
        'speed': 90,
    },
}, {
    'id': 52.2,
    'name': 'Galarian Meowth',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Galarian Meowth', 'Perrserker', 28)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 40,
        'speed': 50,
    },
}, {
    'id': 53,
    'name': 'Persian',
    'catchRate': 90,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 70,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 65,
        'speed': 115,
    },
}, {
    'id': 53.01,
    'name': 'Alolan Persian',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 90,
    'type': [PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 75,
        'defense': 60,
        'specialDefense': 65,
        'speed': 115,
    },
}, {
    'id': 54,
    'name': 'Psyduck',
    'catchRate': 190,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Psyduck', 'Golduck', 33)],
    'base': {
        'hitpoints': 50,
        'attack': 52,
        'specialAttack': 65,
        'defense': 48,
        'specialDefense': 50,
        'speed': 55,
    },
}, {
    'id': 55,
    'name': 'Golduck',
    'catchRate': 75,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 95,
        'defense': 78,
        'specialDefense': 80,
        'speed': 85,
    },
}, {
    'id': 56,
    'name': 'Mankey',
    'catchRate': 190,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Mankey', 'Primeape', 28)],
    'base': {
        'hitpoints': 40,
        'attack': 80,
        'specialAttack': 35,
        'defense': 35,
        'specialDefense': 45,
        'speed': 70,
    },
}, {
    'id': 57,
    'name': 'Primeape',
    'catchRate': 75,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 105,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 58,
    'name': 'Growlithe',
    'catchRate': 190,
    'type': [PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 70,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Growlithe', 'Arcanine', GameConstants.StoneType.Fire_stone)],
    'base': {
        'hitpoints': 55,
        'attack': 70,
        'specialAttack': 70,
        'defense': 45,
        'specialDefense': 50,
        'speed': 60,
    },
}, {
    'id': 59,
    'name': 'Arcanine',
    'catchRate': 75,
    'type': [PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 110,
        'specialAttack': 100,
        'defense': 80,
        'specialDefense': 80,
        'speed': 95,
    },
}, {
    'id': 60,
    'name': 'Poliwag',
    'catchRate': 255,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Poliwag', 'Poliwhirl', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 50,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 90,
    },
}, {
    'id': 61,
    'name': 'Poliwhirl',
    'catchRate': 120,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 135,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Poliwhirl', 'Poliwrath', GameConstants.StoneType.Water_stone), new StoneEvolution('Poliwhirl', 'Politoed', GameConstants.StoneType.Kings_rock)],
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 50,
        'speed': 90,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 62,
    'name': 'Poliwrath',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 230,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 95,
        'specialAttack': 70,
        'defense': 95,
        'specialDefense': 90,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 63,
    'name': 'Abra',
    'catchRate': 200,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Abra', 'Kadabra', 16)],
    'base': {
        'hitpoints': 25,
        'attack': 20,
        'specialAttack': 105,
        'defense': 15,
        'specialDefense': 55,
        'speed': 90,
    },
}, {
    'id': 64,
    'name': 'Kadabra',
    'catchRate': 100,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumslow,
    'exp': 140,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Kadabra', 'Alakazam', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 120,
        'defense': 30,
        'specialDefense': 70,
        'speed': 105,
    },
}, {
    'id': 65,
    'name': 'Alakazam',
    'catchRate': 50,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 50,
        'specialAttack': 135,
        'defense': 45,
        'specialDefense': 95,
        'speed': 120,
    },
}, {
    'id': 66,
    'name': 'Machop',
    'catchRate': 180,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Machop', 'Machoke', 28)],
    'base': {
        'hitpoints': 70,
        'attack': 80,
        'specialAttack': 35,
        'defense': 50,
        'specialDefense': 35,
        'speed': 35,
    },
}, {
    'id': 67,
    'name': 'Machoke',
    'catchRate': 90,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Machoke', 'Machamp', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 50,
        'defense': 70,
        'specialDefense': 60,
        'speed': 45,
    },
}, {
    'id': 68,
    'name': 'Machamp',
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 130,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 85,
        'speed': 55,
    },
}, {
    'id': 69,
    'name': 'Bellsprout',
    'catchRate': 255,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Bellsprout', 'Weepinbell', 21)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 70,
        'defense': 35,
        'specialDefense': 30,
        'speed': 40,
    },
}, {
    'id': 70,
    'name': 'Weepinbell',
    'catchRate': 120,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Weepinbell', 'Victreebel', GameConstants.StoneType.Leaf_stone)],
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 85,
        'defense': 50,
        'specialDefense': 45,
        'speed': 55,
    },
}, {
    'id': 71,
    'name': 'Victreebel',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 105,
        'specialAttack': 100,
        'defense': 65,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 72,
    'name': 'Tentacool',
    'catchRate': 190,
    'type': [PokemonType.Water, PokemonType.Poison],
    'levelType': LevelType.slow,
    'exp': 67,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Tentacool', 'Tentacruel', 30)],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 50,
        'defense': 35,
        'specialDefense': 100,
        'speed': 70,
    },
}, {
    'id': 73,
    'name': 'Tentacruel',
    'catchRate': 60,
    'type': [PokemonType.Water, PokemonType.Poison],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 70,
        'specialAttack': 80,
        'defense': 65,
        'specialDefense': 120,
        'speed': 100,
    },
}, {
    'id': 74,
    'name': 'Geodude',
    'catchRate': 255,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Geodude', 'Graveler', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 80,
        'specialAttack': 30,
        'defense': 100,
        'specialDefense': 30,
        'speed': 20,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 74.01,
    'name': 'Alolan Geodude',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Rock, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Alolan Geodude', 'Alolan Graveler', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 80,
        'specialAttack': 30,
        'defense': 100,
        'specialDefense': 30,
        'speed': 20,
    },
}, {
    'id': 75,
    'name': 'Graveler',
    'catchRate': 120,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'eggCycles': 15,
    'evolutions': [new StoneEvolution('Graveler', 'Golem', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 55,
        'attack': 95,
        'specialAttack': 45,
        'defense': 115,
        'specialDefense': 45,
        'speed': 35,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 75.01,
    'name': 'Alolan Graveler',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 120,
    'type': [PokemonType.Rock, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'eggCycles': 15,
    'evolutions': [new StoneEvolution('Alolan Graveler', 'Alolan Golem', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 55,
        'attack': 95,
        'specialAttack': 45,
        'defense': 115,
        'specialDefense': 45,
        'speed': 35,
    },
}, {
    'id': 76,
    'name': 'Golem',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 223,
    'eggCycles': 15,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 55,
        'defense': 130,
        'specialDefense': 65,
        'speed': 45,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 76.01,
    'name': 'Alolan Golem',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 223,
    'eggCycles': 15,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 55,
        'defense': 130,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': 77,
    'name': 'Ponyta',
    'catchRate': 190,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Ponyta', 'Rapidash', 40)],
    'base': {
        'hitpoints': 50,
        'attack': 85,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 65,
        'speed': 90,
    },
}, {
    'id': 77.1,
    'name': 'Galarian Ponyta',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 190,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Galarian Ponyta', 'Galarian Rapidash', 40)],
    'base': {
        'hitpoints': 50,
        'attack': 85,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 65,
        'speed': 90,
    },
}, {
    'id': 78,
    'name': 'Rapidash',
    'catchRate': 60,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 100,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 80,
        'speed': 105,
    },
}, {
    'id': 78.1,
    'name': 'Galarian Rapidash',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 60,
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 100,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 80,
        'speed': 105,
    },
}, {
    'id': 79,
    'name': 'Slowpoke',
    'catchRate': 190,
    'type': [PokemonType.Water, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [
        new LevelEvolution('Slowpoke', 'Slowbro', 37),
        new StoneEvolution('Slowpoke', 'Slowking', GameConstants.StoneType.Kings_rock),
    ],
    'base': {
        'hitpoints': 90,
        'attack': 65,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 40,
        'speed': 15,
    },
}, {
    'id': 79.1,
    'name': 'Galarian Slowpoke',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 190,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 65,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 40,
        'speed': 15,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 80,
    'name': 'Slowbro',
    'catchRate': 75,
    'type': [PokemonType.Water, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 75,
        'specialAttack': 100,
        'defense': 110,
        'specialDefense': 80,
        'speed': 30,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 80.1,
    'name': 'Galarian Slowbro',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 75,
    'type': [PokemonType.Poison, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 100,
        'specialAttack': 100,
        'defense': 95,
        'specialDefense': 70,
        'speed': 30,
    },
}, {
    'id': 81,
    'name': 'Magnemite',
    'catchRate': 190,
    'type': [PokemonType.Electric, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Magnemite', 'Magneton', 30)],
    'base': {
        'hitpoints': 25,
        'attack': 35,
        'specialAttack': 95,
        'defense': 70,
        'specialDefense': 55,
        'speed': 45,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 82,
    'name': 'Magneton',
    'catchRate': 60,
    'type': [PokemonType.Electric, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'eggCycles': 20,
    'evolutions': [
        new DungeonRestrictedLevelEvolution('Mt. Coronet North', 'Magneton', 'Magnezone', 20),
        new DungeonRestrictedLevelEvolution('Mt. Coronet South', 'Magneton', 'Magnezone', 20),
    ],
    'base': {
        'hitpoints': 50,
        'attack': 60,
        'specialAttack': 120,
        'defense': 95,
        'specialDefense': 70,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 83,
    'name': 'Farfetch\'d',
    'catchRate': 45,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 132,
    'eggCycles': 20,
    'base': {
        'hitpoints': 52,
        'attack': 90,
        'specialAttack': 58,
        'defense': 55,
        'specialDefense': 62,
        'speed': 60,
    },
}, {
    'id': 83.1,
    'name': 'Galarian Farfetch\'d',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 132,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Galarian Farfetch\'d', 'Sirfetch\'d', 20)],
    'base': {
        'hitpoints': 52,
        'attack': 95,
        'specialAttack': 58,
        'defense': 55,
        'specialDefense': 62,
        'speed': 55,
    },
}, {
    'id': 84,
    'name': 'Doduo',
    'catchRate': 190,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Doduo', 'Dodrio', 31)],
    'base': {
        'hitpoints': 35,
        'attack': 85,
        'specialAttack': 35,
        'defense': 45,
        'specialDefense': 35,
        'speed': 75,
    },
}, {
    'id': 85,
    'name': 'Dodrio',
    'catchRate': 45,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 110,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 60,
        'speed': 110,
    },
}, {
    'id': 86,
    'name': 'Seel',
    'catchRate': 190,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Seel', 'Dewgong', 34)],
    'base': {
        'hitpoints': 65,
        'attack': 45,
        'specialAttack': 45,
        'defense': 55,
        'specialDefense': 70,
        'speed': 45,
    },
}, {
    'id': 87,
    'name': 'Dewgong',
    'catchRate': 75,
    'type': [PokemonType.Water, PokemonType.Ice],
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 70,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 95,
        'speed': 70,
    },
}, {
    'id': 88,
    'name': 'Grimer',
    'catchRate': 190,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Grimer', 'Muk', 38)],
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 25,
    },
}, {
    'id': 88.01,
    'name': 'Alolan Grimer',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 190,
    'type': [PokemonType.Poison, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Alolan Grimer', 'Alolan Muk', 38)],
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 25,
    },
}, {
    'id': 89,
    'name': 'Muk',
    'catchRate': 75,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 105,
        'attack': 105,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 100,
        'speed': 50,
    },
}, {
    'id': 89.01,
    'name': 'Alolan Muk',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Poison, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 105,
        'attack': 105,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 100,
        'speed': 50,
    },
}, {
    'id': 90,
    'name': 'Shellder',
    'catchRate': 190,
    'type': [PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Shellder', 'Cloyster', GameConstants.StoneType.Water_stone)],
    'base': {
        'hitpoints': 30,
        'attack': 65,
        'specialAttack': 45,
        'defense': 100,
        'specialDefense': 25,
        'speed': 40,
    },
}, {
    'id': 91,
    'name': 'Cloyster',
    'catchRate': 60,
    'type': [PokemonType.Water, PokemonType.Ice],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 20,
    'base': {
        'hitpoints': 50,
        'attack': 95,
        'specialAttack': 85,
        'defense': 180,
        'specialDefense': 45,
        'speed': 70,
    },
}, {
    'id': 92,
    'name': 'Gastly',
    'catchRate': 190,
    'type': [PokemonType.Ghost, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Gastly', 'Haunter', 25)],
    'base': {
        'hitpoints': 30,
        'attack': 35,
        'specialAttack': 100,
        'defense': 30,
        'specialDefense': 35,
        'speed': 80,
    },
}, {
    'id': 93,
    'name': 'Haunter',
    'catchRate': 90,
    'type': [PokemonType.Ghost, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Haunter', 'Gengar', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 115,
        'defense': 45,
        'specialDefense': 55,
        'speed': 95,
    },
}, {
    'id': 94,
    'name': 'Gengar',
    'catchRate': 45,
    'type': [PokemonType.Ghost, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 65,
        'specialAttack': 130,
        'defense': 60,
        'specialDefense': 75,
        'speed': 110,
    },
}, {
    'id': 95,
    'name': 'Onix',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 77,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Onix', 'Steelix', GameConstants.StoneType.Metal_coat)],
    'base': {
        'hitpoints': 35,
        'attack': 45,
        'specialAttack': 30,
        'defense': 160,
        'specialDefense': 45,
        'speed': 70,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 96,
    'name': 'Drowzee',
    'catchRate': 190,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Drowzee', 'Hypno', 26)],
    'base': {
        'hitpoints': 60,
        'attack': 48,
        'specialAttack': 43,
        'defense': 45,
        'specialDefense': 90,
        'speed': 42,
    },
}, {
    'id': 97,
    'name': 'Hypno',
    'catchRate': 75,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'eggCycles': 20,
    'base': {
        'hitpoints': 85,
        'attack': 73,
        'specialAttack': 73,
        'defense': 70,
        'specialDefense': 115,
        'speed': 67,
    },
}, {
    'id': 98,
    'name': 'Krabby',
    'catchRate': 225,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Krabby', 'Kingler', 28)],
    'base': {
        'hitpoints': 30,
        'attack': 105,
        'specialAttack': 25,
        'defense': 90,
        'specialDefense': 25,
        'speed': 50,
    },
}, {
    'id': 99,
    'name': 'Kingler',
    'catchRate': 60,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 130,
        'specialAttack': 50,
        'defense': 115,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 100,
    'name': 'Voltorb',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Voltorb', 'Electrode', 30)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 55,
        'speed': 100,
    },
}, {
    'id': 101,
    'name': 'Electrode',
    'catchRate': 60,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 80,
        'speed': 150,
    },
}, {
    'id': 102,
    'name': 'Exeggcute',
    'catchRate': 90,
    'type': [PokemonType.Grass, PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Exeggcute', 'Exeggutor', GameConstants.StoneType.Leaf_stone)],
    //TODO add Alola-only evolution into Alolan Exeggutor using Leafstone
    'base': {
        'hitpoints': 60,
        'attack': 40,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 45,
        'speed': 40,
    },
}, {
    'id': 103,
    'name': 'Exeggutor',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 95,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 75,
        'speed': 55,
    },
}, {
    'id': 103.01,
    'name': 'Alolan Exeggutor',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Dragon],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 105,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 75,
        'speed': 45,
    },
}, {
    'id': 104,
    'name': 'Cubone',
    'catchRate': 190,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Cubone', 'Marowak', 28)],
    //TODO add Alola-only evolution into Alolan Marowak at night at level 28
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 40,
        'defense': 95,
        'specialDefense': 50,
        'speed': 35,
    },
    'heldItem': { type: ItemType.underground, id: 'Rare Bone' },
}, {
    'id': 105,
    'name': 'Marowak',
    'catchRate': 75,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 50,
        'defense': 110,
        'specialDefense': 80,
        'speed': 45,
    },
    'heldItem': { type: ItemType.underground, id: 'Rare Bone' },
}, {
    'id': 105.01,
    'name': 'Alolan Marowak',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Fire, PokemonType.Ghost],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 50,
        'defense': 110,
        'specialDefense': 80,
        'speed': 45,
    },
}, {
    'id': 105.02,
    'name': 'Totem Alolan Marowak',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Fire, PokemonType.Ghost],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 50,
        'defense': 110,
        'specialDefense': 80,
        'speed': 65,
    },
}, {
    'id': 106,
    'name': 'Hitmonlee',
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'attack': 120,
        'specialAttack': 35,
        'defense': 53,
        'specialDefense': 110,
        'speed': 87,
    },
}, {
    'id': 107,
    'name': 'Hitmonchan',
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'attack': 105,
        'specialAttack': 35,
        'defense': 79,
        'specialDefense': 110,
        'speed': 76,
    },
}, {
    'id': 108,
    'name': 'Lickitung',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 77,
    'evolutions': [new LevelEvolution('Lickitung', 'Lickilicky', 33)],
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 55,
        'specialAttack': 60,
        'defense': 75,
        'specialDefense': 75,
        'speed': 30,
    },
}, {
    'id': 109,
    'name': 'Koffing',
    'catchRate': 190,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Koffing', 'Weezing', 35), new LevelEvolution('Koffing', 'Galarian Weezing', 35)],
    'base': {
        'hitpoints': 40,
        'attack': 65,
        'specialAttack': 60,
        'defense': 95,
        'specialDefense': 45,
        'speed': 35,
    },
}, {
    'id': 110,
    'name': 'Weezing',
    'catchRate': 60,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 85,
        'defense': 120,
        'specialDefense': 70,
        'speed': 60,
    },
}, {
    'id': 110.1,
    'name': 'Galarian Weezing',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 60,
    'type': [PokemonType.Poison, PokemonType.Fairy],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 85,
        'defense': 120,
        'specialDefense': 70,
        'speed': 60,
    },
}, {
    'id': 111,
    'name': 'Rhyhorn',
    'catchRate': 120,
    'type': [PokemonType.Ground, PokemonType.Rock],
    'levelType': LevelType.slow,
    'exp': 69,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Rhyhorn', 'Rhydon', 42)],
    'base': {
        'hitpoints': 80,
        'attack': 85,
        'specialAttack': 30,
        'defense': 95,
        'specialDefense': 30,
        'speed': 25,
    },
}, {
    'id': 112,
    'name': 'Rhydon',
    'catchRate': 60,
    'type': [PokemonType.Ground, PokemonType.Rock],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Rhydon', 'Rhyperior', GameConstants.StoneType.Protector)],
    'base': {
        'hitpoints': 105,
        'attack': 130,
        'specialAttack': 45,
        'defense': 120,
        'specialDefense': 45,
        'speed': 40,
    },
}, {
    'id': 113,
    'name': 'Chansey',
    'catchRate': 30,
    'type': [PokemonType.Normal],
    'levelType': LevelType.fast,
    'exp': 395,
    'eggCycles': 40,
    'evolutions': [new StoneEvolution('Chansey', 'Blissey', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 250,
        'attack': 5,
        'specialAttack': 35,
        'defense': 5,
        'specialDefense': 105,
        'speed': 50,
    },
    'heldItem': { type: ItemType.underground, id: 'Oval Stone' },
}, {
    'id': 114,
    'name': 'Tangela',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumfast,
    'exp': 87,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Tangela', 'Tangrowth', 33)],
    'base': {
        'hitpoints': 65,
        'attack': 55,
        'specialAttack': 100,
        'defense': 115,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 115,
    'name': 'Kangaskhan',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 105,
        'attack': 95,
        'specialAttack': 40,
        'defense': 80,
        'specialDefense': 80,
        'speed': 90,
    },
}, {
    'id': 116,
    'name': 'Horsea',
    'catchRate': 225,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 59,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Horsea', 'Seadra', 32)],
    'base': {
        'hitpoints': 30,
        'attack': 40,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 25,
        'speed': 60,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 117,
    'name': 'Seadra',
    'catchRate': 75,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Seadra', 'Kingdra', GameConstants.StoneType.Dragon_scale)],
    'base': {
        'hitpoints': 55,
        'attack': 65,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 45,
        'speed': 85,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 118,
    'name': 'Goldeen',
    'catchRate': 225,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Goldeen', 'Seaking', 33)],
    'base': {
        'hitpoints': 45,
        'attack': 67,
        'specialAttack': 35,
        'defense': 60,
        'specialDefense': 50,
        'speed': 63,
    },
}, {
    'id': 119,
    'name': 'Seaking',
    'catchRate': 60,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 92,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 80,
        'speed': 68,
    },
}, {
    'id': 120,
    'name': 'Staryu',
    'catchRate': 225,
    'type': [PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 68,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Staryu', 'Starmie', GameConstants.StoneType.Water_stone)],
    'base': {
        'hitpoints': 30,
        'attack': 45,
        'specialAttack': 70,
        'defense': 55,
        'specialDefense': 55,
        'speed': 85,
    },
}, {
    'id': 121,
    'name': 'Starmie',
    'catchRate': 60,
    'type': [PokemonType.Water, PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 75,
        'specialAttack': 100,
        'defense': 85,
        'specialDefense': 85,
        'speed': 115,
    },
}, {
    'id': 122,
    'name': 'Mr. Mime',
    'catchRate': 45,
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 100,
        'defense': 65,
        'specialDefense': 120,
        'speed': 90,
    },
}, {
    'id': 122.1,
    'name': 'Galarian Mr. Mime',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 45,
    'type': [PokemonType.Psychic, PokemonType.Ice],
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'eggCycles': 25,
    'evolutions': [new LevelEvolution('Galarian Mr. Mime', 'Mr. Rime', 42)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 90,
        'speed': 100,
    },
}, {
    'id': 123,
    'name': 'Scyther',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 100,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Scyther', 'Scizor', GameConstants.StoneType.Metal_coat)],
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 80,
        'speed': 105,
    },
}, {
    'id': 124,
    'name': 'Jynx',
    'catchRate': 45,
    'type': [PokemonType.Ice, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'attack': 50,
        'specialAttack': 115,
        'defense': 35,
        'specialDefense': 95,
        'speed': 95,
    },
}, {
    'id': 125,
    'name': 'Electabuzz',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Electabuzz', 'Electivire', GameConstants.StoneType.Electirizer)],
    'base': {
        'hitpoints': 65,
        'attack': 83,
        'specialAttack': 95,
        'defense': 57,
        'specialDefense': 85,
        'speed': 105,
    },
    'heldItem': { type: ItemType.item, id: 'Electirizer' },
}, {
    'id': 126,
    'name': 'Magmar',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Magmar', 'Magmortar', GameConstants.StoneType.Magmarizer)],
    'base': {
        'hitpoints': 65,
        'attack': 95,
        'specialAttack': 100,
        'defense': 57,
        'specialDefense': 85,
        'speed': 93,
    },
    'heldItem': { type: ItemType.item, id: 'Magmarizer' },
}, {
    'id': 127,
    'name': 'Pinsir',
    'catchRate': 45,
    'type': [PokemonType.Bug],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'attack': 125,
        'specialAttack': 55,
        'defense': 100,
        'specialDefense': 70,
        'speed': 85,
    },
}, {
    'id': 128,
    'name': 'Tauros',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 40,
        'defense': 95,
        'specialDefense': 70,
        'speed': 110,
    },
}, {
    'id': 129,
    'name': 'Magikarp',
    'catchRate': 255,
    'type': [PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 40,
    'eggCycles': 5,
    'evolutions': [new LevelEvolution('Magikarp', 'Gyarados', 20)],
    'base': {
        'hitpoints': 20,
        'attack': 10,
        'specialAttack': 15,
        'defense': 55,
        'specialDefense': 20,
        'speed': 80,
    },
}, {
    'id': 130,
    'name': 'Gyarados',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 5,
    'base': {
        'hitpoints': 95,
        'attack': 125,
        'specialAttack': 60,
        'defense': 79,
        'specialDefense': 100,
        'speed': 81,
    },
}, {
    'id': 131,
    'name': 'Lapras',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Ice],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 40,
    'base': {
        'hitpoints': 130,
        'attack': 85,
        'specialAttack': 85,
        'defense': 80,
        'specialDefense': 95,
        'speed': 60,
    },
}, {
    'id': 132,
    'name': 'Ditto',
    'catchRate': 35,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 101,
    'eggCycles': 20,
    'base': {
        'hitpoints': 48,
        'attack': 48,
        'specialAttack': 48,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 133,
    'name': 'Eevee',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 35,
    'evolutions': [
        new StoneEvolution('Eevee', 'Vaporeon', GameConstants.StoneType.Water_stone),
        new StoneEvolution('Eevee', 'Jolteon', GameConstants.StoneType.Thunder_stone),
        new StoneEvolution('Eevee', 'Flareon', GameConstants.StoneType.Fire_stone),
        new DayTimedStoneEvolution('Eevee', 'Espeon', GameConstants.StoneType.Soothe_bell),
        new NightTimedStoneEvolution('Eevee', 'Umbreon', GameConstants.StoneType.Soothe_bell),
        new DungeonRestrictedLevelEvolution('Lake Acuity', 'Eevee', 'Glaceon', 20),
        new DungeonRestrictedLevelEvolution('Eterna Forest', 'Eevee', 'Leafeon', 20),
        new LevelEvolution('Eevee', 'Sylveon', 29),
    ],
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 65,
        'speed': 55,
    },
}, {
    'id': 134,
    'name': 'Vaporeon',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 130,
        'attack': 65,
        'specialAttack': 110,
        'defense': 60,
        'specialDefense': 95,
        'speed': 65,
    },
}, {
    'id': 135,
    'name': 'Jolteon',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 110,
        'defense': 60,
        'specialDefense': 95,
        'speed': 130,
    },
}, {
    'id': 136,
    'name': 'Flareon',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 65,
        'attack': 130,
        'specialAttack': 95,
        'defense': 60,
        'specialDefense': 110,
        'speed': 65,
    },
}, {
    'id': 137,
    'name': 'Porygon',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 79,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Porygon', 'Porygon2', GameConstants.StoneType.Upgrade)],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 85,
        'defense': 70,
        'specialDefense': 75,
        'speed': 40,
    },
}, {
    'id': 138,
    'name': 'Omanyte',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'eggCycles': 30,
    'evolutions': [new LevelEvolution('Omanyte', 'Omastar', 40)],
    'base': {
        'hitpoints': 35,
        'attack': 40,
        'specialAttack': 90,
        'defense': 100,
        'specialDefense': 55,
        'speed': 35,
    },
}, {
    'id': 139,
    'name': 'Omastar',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'eggCycles': 30,
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 115,
        'defense': 125,
        'specialDefense': 70,
        'speed': 55,
    },
}, {
    'id': 140,
    'name': 'Kabuto',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'eggCycles': 30,
    'evolutions': [new LevelEvolution('Kabuto', 'Kabutops', 40)],
    'base': {
        'hitpoints': 30,
        'attack': 80,
        'specialAttack': 55,
        'defense': 90,
        'specialDefense': 45,
        'speed': 55,
    },
}, {
    'id': 141,
    'name': 'Kabutops',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'eggCycles': 30,
    'base': {
        'hitpoints': 60,
        'attack': 115,
        'specialAttack': 65,
        'defense': 105,
        'specialDefense': 70,
        'speed': 80,
    },
}, {
    'id': 142,
    'name': 'Aerodactyl',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 35,
    'base': {
        'hitpoints': 80,
        'attack': 105,
        'specialAttack': 60,
        'defense': 65,
        'specialDefense': 75,
        'speed': 130,
    },
}, {
    'id': 143,
    'name': 'Snorlax',
    'catchRate': 25,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 40,
    'base': {
        'hitpoints': 160,
        'attack': 110,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 110,
        'speed': 30,
    },
}, {
    'id': 144,
    'name': 'Articuno',
    'catchRate': 3,
    'type': [PokemonType.Ice, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 85,
        'specialAttack': 95,
        'defense': 100,
        'specialDefense': 125,
        'speed': 85,
    },
}, {
    'id': 144.1,
    'name': 'Galarian Articuno',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 3,
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 85,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 100,
        'speed': 95,
    },
}, {
    'id': 145,
    'name': 'Zapdos',
    'catchRate': 3,
    'type': [PokemonType.Electric, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 90,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 90,
        'speed': 100,
    },
}, {
    'id': 145.1,
    'name': 'Galarian Zapdos',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 3,
    'type': [PokemonType.Fighting, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 125,
        'specialAttack': 85,
        'defense': 90,
        'specialDefense': 90,
        'speed': 100,
    },
}, {
    'id': 146,
    'name': 'Moltres',
    'catchRate': 3,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 125,
        'defense': 90,
        'specialDefense': 85,
        'speed': 90,
    },
}, {
    'id': 146.1,
    'name': 'Galarian Moltres',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 3,
    'type': [PokemonType.Dark, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 85,
        'specialAttack': 100,
        'defense': 90,
        'specialDefense': 125,
        'speed': 90,
    },
}, {
    'id': 147,
    'name': 'Dratini',
    'catchRate': 45,
    'type': [PokemonType.Dragon],
    'levelType': LevelType.slow,
    'exp': 60,
    'eggCycles': 40,
    'evolutions': [new LevelEvolution('Dratini', 'Dragonair', 30)],
    'base': {
        'hitpoints': 41,
        'attack': 64,
        'specialAttack': 50,
        'defense': 45,
        'specialDefense': 50,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 148,
    'name': 'Dragonair',
    'catchRate': 45,
    'type': [PokemonType.Dragon],
    'levelType': LevelType.slow,
    'exp': 147,
    'eggCycles': 40,
    'evolutions': [new LevelEvolution('Dragonair', 'Dragonite', 55)],
    'base': {
        'hitpoints': 61,
        'attack': 84,
        'specialAttack': 70,
        'defense': 65,
        'specialDefense': 70,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 149,
    'name': 'Dragonite',
    'catchRate': 45,
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 270,
    'eggCycles': 40,
    'base': {
        'hitpoints': 91,
        'attack': 134,
        'specialAttack': 100,
        'defense': 95,
        'specialDefense': 100,
        'speed': 80,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 150,
    'name': 'Mewtwo',
    'catchRate': 3,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 306,
    'eggCycles': 120,
    'base': {
        'hitpoints': 106,
        'attack': 110,
        'specialAttack': 154,
        'defense': 90,
        'specialDefense': 90,
        'speed': 130,
    },
}, {
    'id': 151,
    'name': 'Mew',
    'catchRate': 45,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'eggCycles': 120,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Lum },
}, {
    'id': 152,
    'name': 'Chikorita',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Chikorita', 'Bayleef', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 49,
        'defense': 65,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': 153,
    'name': 'Bayleef',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Bayleef', 'Meganium', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 63,
        'defense': 80,
        'specialDefense': 80,
        'speed': 60,
    },
}, {
    'id': 154,
    'name': 'Meganium',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 83,
        'defense': 100,
        'specialDefense': 100,
        'speed': 80,
    },
}, {
    'id': 155,
    'name': 'Cyndaquil',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Cyndaquil', 'Quilava', 14)],
    'base': {
        'hitpoints': 39,
        'attack': 52,
        'specialAttack': 60,
        'defense': 43,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 156,
    'name': 'Quilava',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Quilava', 'Typhlosion', 36)],
    'base': {
        'hitpoints': 58,
        'attack': 64,
        'specialAttack': 80,
        'defense': 58,
        'specialDefense': 65,
        'speed': 80,
    },
}, {
    'id': 157,
    'name': 'Typhlosion',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'eggCycles': 20,
    'base': {
        'hitpoints': 78,
        'attack': 84,
        'specialAttack': 109,
        'defense': 78,
        'specialDefense': 85,
        'speed': 100,
    },
}, {
    'id': 158,
    'name': 'Totodile',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Totodile', 'Croconaw', 18)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 44,
        'defense': 64,
        'specialDefense': 48,
        'speed': 43,
    },
}, {
    'id': 159,
    'name': 'Croconaw',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Croconaw', 'Feraligatr', 30)],
    'base': {
        'hitpoints': 65,
        'attack': 80,
        'specialAttack': 59,
        'defense': 80,
        'specialDefense': 63,
        'speed': 58,
    },
}, {
    'id': 160,
    'name': 'Feraligatr',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'eggCycles': 20,
    'base': {
        'hitpoints': 85,
        'attack': 105,
        'specialAttack': 79,
        'defense': 100,
        'specialDefense': 83,
        'speed': 78,
    },
}, {
    'id': 161,
    'name': 'Sentret',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 43,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Sentret', 'Furret', 15)],
    'base': {
        'hitpoints': 35,
        'attack': 46,
        'specialAttack': 35,
        'defense': 34,
        'specialDefense': 45,
        'speed': 20,
    },
}, {
    'id': 162,
    'name': 'Furret',
    'catchRate': 90,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 15,
    'base': {
        'hitpoints': 85,
        'attack': 76,
        'specialAttack': 45,
        'defense': 64,
        'specialDefense': 55,
        'speed': 90,
    },
}, {
    'id': 163,
    'name': 'Hoothoot',
    'catchRate': 255,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 52,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Hoothoot', 'Noctowl', 20)],
    'base': {
        'hitpoints': 60,
        'attack': 30,
        'specialAttack': 36,
        'defense': 30,
        'specialDefense': 56,
        'speed': 50,
    },
}, {
    'id': 164,
    'name': 'Noctowl',
    'catchRate': 90,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 15,
    'base': {
        'hitpoints': 100,
        'attack': 50,
        'specialAttack': 86,
        'defense': 50,
        'specialDefense': 96,
        'speed': 70,
    },
}, {
    'id': 165,
    'name': 'Ledyba',
    'catchRate': 255,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.fast,
    'exp': 53,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Ledyba', 'Ledian', 18)],
    'base': {
        'hitpoints': 40,
        'attack': 20,
        'specialAttack': 40,
        'defense': 30,
        'specialDefense': 80,
        'speed': 55,
    },
}, {
    'id': 166,
    'name': 'Ledian',
    'catchRate': 90,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.fast,
    'exp': 137,
    'eggCycles': 15,
    'base': {
        'hitpoints': 55,
        'attack': 35,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 110,
        'speed': 85,
    },
}, {
    'id': 167,
    'name': 'Spinarak',
    'catchRate': 255,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.fast,
    'exp': 50,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Spinarak', 'Ariados', 22)],
    'base': {
        'hitpoints': 40,
        'attack': 60,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 30,
    },
}, {
    'id': 168,
    'name': 'Ariados',
    'catchRate': 90,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.fast,
    'exp': 140,
    'eggCycles': 15,
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 40,
    },
}, {
    'id': 169,
    'name': 'Crobat',
    'catchRate': 90,
    'type': [PokemonType.Poison, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 241,
    'eggCycles': 15,
    'base': {
        'hitpoints': 85,
        'attack': 90,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 80,
        'speed': 130,
    },
}, {
    'id': 170,
    'name': 'Chinchou',
    'catchRate': 190,
    'type': [PokemonType.Water, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Chinchou', 'Lanturn', 27)],
    'base': {
        'hitpoints': 75,
        'attack': 38,
        'specialAttack': 56,
        'defense': 38,
        'specialDefense': 56,
        'speed': 67,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 171,
    'name': 'Lanturn',
    'catchRate': 75,
    'type': [PokemonType.Water, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 161,
    'eggCycles': 20,
    'base': {
        'hitpoints': 125,
        'attack': 58,
        'specialAttack': 76,
        'defense': 58,
        'specialDefense': 76,
        'speed': 67,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 172,
    'name': 'Pichu',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 41,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Pichu', 'Pikachu', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 20,
        'attack': 40,
        'specialAttack': 35,
        'defense': 15,
        'specialDefense': 35,
        'speed': 60,
    },
}, {
    'id': 173,
    'name': 'Cleffa',
    'catchRate': 150,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 44,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Cleffa', 'Clefairy', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 50,
        'attack': 25,
        'specialAttack': 45,
        'defense': 28,
        'specialDefense': 55,
        'speed': 15,
    },
    'heldItem': { type: ItemType.item, id: 'Moon_stone' },
}, {
    'id': 174,
    'name': 'Igglybuff',
    'catchRate': 170,
    'type': [PokemonType.Normal, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 42,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Igglybuff', 'Jigglypuff', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 90,
        'attack': 30,
        'specialAttack': 40,
        'defense': 15,
        'specialDefense': 20,
        'speed': 15,
    },
}, {
    'id': 175,
    'name': 'Togepi',
    'catchRate': 190,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 49,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Togepi', 'Togetic', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 35,
        'attack': 20,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 65,
        'speed': 20,
    },
}, {
    'id': 176,
    'name': 'Togetic',
    'catchRate': 75,
    'type': [PokemonType.Fairy, PokemonType.Flying],
    'levelType': LevelType.fast,
    'exp': 142,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Togetic', 'Togekiss', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 55,
        'attack': 40,
        'specialAttack': 80,
        'defense': 85,
        'specialDefense': 105,
        'speed': 40,
    },
}, {
    'id': 177,
    'name': 'Natu',
    'catchRate': 190,
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Natu', 'Xatu', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 50,
        'specialAttack': 70,
        'defense': 45,
        'specialDefense': 45,
        'speed': 70,
    },
}, {
    'id': 178,
    'name': 'Xatu',
    'catchRate': 75,
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 75,
        'specialAttack': 95,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 179,
    'name': 'Mareep',
    'catchRate': 235,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 56,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Mareep', 'Flaaffy', 15)],
    'base': {
        'hitpoints': 55,
        'attack': 40,
        'specialAttack': 65,
        'defense': 40,
        'specialDefense': 45,
        'speed': 35,
    },
}, {
    'id': 180,
    'name': 'Flaaffy',
    'catchRate': 120,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 128,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Flaaffy', 'Ampharos', 30)],
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 80,
        'defense': 55,
        'specialDefense': 60,
        'speed': 45,
    },
}, {
    'id': 181,
    'name': 'Ampharos',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 230,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 75,
        'specialAttack': 115,
        'defense': 85,
        'specialDefense': 90,
        'speed': 55,
    },
}, {
    'id': 182,
    'name': 'Bellossom',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 90,
        'defense': 95,
        'specialDefense': 100,
        'speed': 50,
    },
}, {
    'id': 183,
    'name': 'Marill',
    'catchRate': 190,
    'type': [PokemonType.Water, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 88,
    'eggCycles': 10,
    'evolutions': [new LevelEvolution('Marill', 'Azumarill', 18)],
    'base': {
        'hitpoints': 70,
        'attack': 20,
        'specialAttack': 20,
        'defense': 50,
        'specialDefense': 50,
        'speed': 40,
    },
}, {
    'id': 184,
    'name': 'Azumarill',
    'catchRate': 75,
    'type': [PokemonType.Water, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 189,
    'eggCycles': 10,
    'base': {
        'hitpoints': 100,
        'attack': 50,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 80,
        'speed': 50,
    },
}, {
    'id': 185,
    'name': 'Sudowoodo',
    'catchRate': 65,
    'type': [PokemonType.Rock],
    'levelType': LevelType.mediumfast,
    'exp': 144,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'attack': 100,
        'specialAttack': 30,
        'defense': 115,
        'specialDefense': 65,
        'speed': 30,
    },
}, {
    'id': 186,
    'name': 'Politoed',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 75,
        'specialAttack': 90,
        'defense': 75,
        'specialDefense': 100,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 187,
    'name': 'Hoppip',
    'catchRate': 255,
    'type': [PokemonType.Grass, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 50,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Hoppip', 'Skiploom', 18)],
    'base': {
        'hitpoints': 35,
        'attack': 35,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 55,
        'speed': 50,
    },
}, {
    'id': 188,
    'name': 'Skiploom',
    'catchRate': 120,
    'type': [PokemonType.Grass, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Skiploom', 'Jumpluff', 27)],
    'base': {
        'hitpoints': 55,
        'attack': 45,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 65,
        'speed': 80,
    },
}, {
    'id': 189,
    'name': 'Jumpluff',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 207,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 55,
        'specialAttack': 55,
        'defense': 70,
        'specialDefense': 95,
        'speed': 110,
    },
}, {
    'id': 190,
    'name': 'Aipom',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.fast,
    'evolutions': [new LevelEvolution('Aipom', 'Ambipom', 32)],
    'exp': 72,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 70,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 55,
        'speed': 85,
    },
}, {
    'id': 191,
    'name': 'Sunkern',
    'catchRate': 235,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 36,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Sunkern', 'Sunflora', GameConstants.StoneType.Sun_stone)],
    'base': {
        'hitpoints': 30,
        'attack': 30,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 30,
    },
}, {
    'id': 192,
    'name': 'Sunflora',
    'catchRate': 120,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 105,
        'defense': 55,
        'specialDefense': 85,
        'speed': 30,
    },
}, {
    'id': 193,
    'name': 'Yanma',
    'catchRate': 75,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 78,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Yanma', 'Yanmega', 33)],
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 75,
        'defense': 45,
        'specialDefense': 45,
        'speed': 95,
    },
}, {
    'id': 194,
    'name': 'Wooper',
    'catchRate': 255,
    'type': [PokemonType.Water, PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 42,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Wooper', 'Quagsire', 20)],
    'base': {
        'hitpoints': 55,
        'attack': 45,
        'specialAttack': 25,
        'defense': 45,
        'specialDefense': 25,
        'speed': 15,
    },
}, {
    'id': 195,
    'name': 'Quagsire',
    'catchRate': 90,
    'type': [PokemonType.Water, PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 85,
        'specialAttack': 65,
        'defense': 85,
        'specialDefense': 65,
        'speed': 35,
    },
}, {
    'id': 196,
    'name': 'Espeon',
    'catchRate': 45,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 130,
        'defense': 60,
        'specialDefense': 95,
        'speed': 110,
    },
}, {
    'id': 197,
    'name': 'Umbreon',
    'catchRate': 45,
    'type': [PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 95,
        'attack': 65,
        'specialAttack': 60,
        'defense': 110,
        'specialDefense': 130,
        'speed': 65,
    },
}, {
    'id': 198,
    'name': 'Murkrow',
    'catchRate': 30,
    'type': [PokemonType.Dark, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 81,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Murkrow', 'Honchkrow', GameConstants.StoneType.Dusk_stone)],
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 85,
        'defense': 42,
        'specialDefense': 42,
        'speed': 91,
    },
}, {
    'id': 199,
    'name': 'Slowking',
    'catchRate': 70,
    'type': [PokemonType.Water, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 75,
        'specialAttack': 100,
        'defense': 80,
        'specialDefense': 110,
        'speed': 30,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 199.1,
    'name': 'Galarian Slowking',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 70,
    'type': [PokemonType.Poison, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 65,
        'specialAttack': 110,
        'defense': 80,
        'specialDefense': 110,
        'speed': 30,
    },
}, {
    'id': 200,
    'name': 'Misdreavus',
    'catchRate': 45,
    'type': [PokemonType.Ghost],
    'levelType': LevelType.fast,
    'exp': 87,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Misdreavus', 'Mismagius', GameConstants.StoneType.Dusk_stone)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 85,
        'defense': 60,
        'specialDefense': 85,
        'speed': 85,
    },
}, {
    'id': 201,
    'name': 'Unown (A)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.01,
    'name': 'Unown (B)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.02,
    'name': 'Unown (C)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.03,
    'name': 'Unown (D)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.04,
    'name': 'Unown (E)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.05,
    'name': 'Unown (F)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.06,
    'name': 'Unown (G)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.07,
    'name': 'Unown (H)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.08,
    'name': 'Unown (I)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.09,
    'name': 'Unown (J)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.10,
    'name': 'Unown (K)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.11,
    'name': 'Unown (L)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.12,
    'name': 'Unown (M)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.13,
    'name': 'Unown (N)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.14,
    'name': 'Unown (O)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.15,
    'name': 'Unown (P)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.16,
    'name': 'Unown (Q)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.17,
    'name': 'Unown (R)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.18,
    'name': 'Unown (S)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.19,
    'name': 'Unown (T)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.20,
    'name': 'Unown (U)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.21,
    'name': 'Unown (V)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.22,
    'name': 'Unown (W)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.23,
    'name': 'Unown (X)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.24,
    'name': 'Unown (Y)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.25,
    'name': 'Unown (Z)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.26,
    'name': 'Unown (!)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 201.27,
    'name': 'Unown (?)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
}, {
    'id': 202,
    'name': 'Wobbuffet',
    'catchRate': 45,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'eggCycles': 20,
    'base': {
        'hitpoints': 190,
        'attack': 33,
        'specialAttack': 33,
        'defense': 58,
        'specialDefense': 58,
        'speed': 33,
    },
}, {
    'id': 203,
    'name': 'Girafarig',
    'catchRate': 60,
    'type': [PokemonType.Normal, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'attack': 80,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 65,
        'speed': 85,
    },
}, {
    'id': 204,
    'name': 'Pineco',
    'catchRate': 190,
    'type': [PokemonType.Bug],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Pineco', 'Forretress', 31)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 35,
        'defense': 90,
        'specialDefense': 35,
        'speed': 15,
    },
}, {
    'id': 205,
    'name': 'Forretress',
    'catchRate': 75,
    'type': [PokemonType.Bug, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 90,
        'specialAttack': 60,
        'defense': 140,
        'specialDefense': 60,
        'speed': 40,
    },
}, {
    'id': 206,
    'name': 'Dunsparce',
    'catchRate': 190,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 20,
    'base': {
        'hitpoints': 100,
        'attack': 70,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': 207,
    'name': 'Gligar',
    'catchRate': 60,
    'type': [PokemonType.Ground, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 86,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Gligar', 'Gliscor', GameConstants.StoneType.Razor_fang)],
    'base': {
        'hitpoints': 65,
        'attack': 75,
        'specialAttack': 35,
        'defense': 105,
        'specialDefense': 65,
        'speed': 85,
    },
}, {
    'id': 208,
    'name': 'Steelix',
    'catchRate': 25,
    'type': [PokemonType.Steel, PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'attack': 85,
        'specialAttack': 55,
        'defense': 200,
        'specialDefense': 65,
        'speed': 30,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 209,
    'name': 'Snubbull',
    'catchRate': 190,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Snubbull', 'Granbull', 23)],
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 40,
        'speed': 30,
    },
}, {
    'id': 210,
    'name': 'Granbull',
    'catchRate': 75,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 120,
        'specialAttack': 60,
        'defense': 75,
        'specialDefense': 60,
        'speed': 45,
    },
}, {
    'id': 211,
    'name': 'Qwilfish',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 88,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 95,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 55,
        'speed': 85,
    },
}, {
    'id': 212,
    'name': 'Scizor',
    'catchRate': 25,
    'type': [PokemonType.Bug, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'attack': 130,
        'specialAttack': 55,
        'defense': 100,
        'specialDefense': 80,
        'speed': 65,
    },
}, {
    'id': 213,
    'name': 'Shuckle',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Rock],
    'levelType': LevelType.mediumslow,
    'exp': 177,
    'eggCycles': 20,
    'base': {
        'hitpoints': 20,
        'attack': 10,
        'specialAttack': 10,
        'defense': 230,
        'specialDefense': 230,
        'speed': 5,
    },
}, {
    'id': 214,
    'name': 'Heracross',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Fighting],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 80,
        'attack': 125,
        'specialAttack': 40,
        'defense': 75,
        'specialDefense': 95,
        'speed': 85,
    },
}, {
    'id': 215,
    'name': 'Sneasel',
    'catchRate': 60,
    'type': [PokemonType.Dark, PokemonType.Ice],
    'levelType': LevelType.mediumslow,
    'exp': 86,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Sneasel', 'Weavile', GameConstants.StoneType.Razor_claw)],
    'base': {
        'hitpoints': 55,
        'attack': 95,
        'specialAttack': 35,
        'defense': 55,
        'specialDefense': 75,
        'speed': 115,
    },
}, {
    'id': 216,
    'name': 'Teddiursa',
    'catchRate': 120,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Teddiursa', 'Ursaring', 30)],
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 50,
        'speed': 40,
    },
}, {
    'id': 217,
    'name': 'Ursaring',
    'catchRate': 60,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 130,
        'specialAttack': 75,
        'defense': 75,
        'specialDefense': 75,
        'speed': 55,
    },
}, {
    'id': 218,
    'name': 'Slugma',
    'catchRate': 190,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 50,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Slugma', 'Magcargo', 38)],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 70,
        'defense': 40,
        'specialDefense': 40,
        'speed': 20,
    },
}, {
    'id': 219,
    'name': 'Magcargo',
    'catchRate': 75,
    'type': [PokemonType.Fire, PokemonType.Rock],
    'levelType': LevelType.mediumfast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 90,
        'defense': 120,
        'specialDefense': 80,
        'speed': 30,
    },
}, {
    'id': 220,
    'name': 'Swinub',
    'catchRate': 225,
    'type': [PokemonType.Ice, PokemonType.Ground],
    'levelType': LevelType.slow,
    'exp': 50,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Swinub', 'Piloswine', 33)],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 30,
        'defense': 40,
        'specialDefense': 30,
        'speed': 50,
    },
}, {
    'id': 221,
    'name': 'Piloswine',
    'catchRate': 75,
    'type': [PokemonType.Ice, PokemonType.Ground],
    'levelType': LevelType.slow,
    'exp': 158,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Piloswine', 'Mamoswine', 53)],
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 60,
        'speed': 50,
    },
}, {
    'id': 222,
    'name': 'Corsola',
    'catchRate': 60,
    'type': [PokemonType.Water, PokemonType.Rock],
    'levelType': LevelType.fast,
    'exp': 144,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 55,
        'specialAttack': 65,
        'defense': 95,
        'specialDefense': 95,
        'speed': 35,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 222.1,
    'name': 'Galarian Corsola',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 60,
    'type': [PokemonType.Ghost],
    'levelType': LevelType.fast,
    'exp': 144,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Galarian Corsola', 'Cursola', 38)],
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 65,
        'defense': 100,
        'specialDefense': 100,
        'speed': 30,
    },
}, {
    'id': 223,
    'name': 'Remoraid',
    'catchRate': 190,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Remoraid', 'Octillery', 25)],
    'base': {
        'hitpoints': 35,
        'attack': 65,
        'specialAttack': 65,
        'defense': 35,
        'specialDefense': 35,
        'speed': 65,
    },
}, {
    'id': 224,
    'name': 'Octillery',
    'catchRate': 75,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 105,
        'specialAttack': 105,
        'defense': 75,
        'specialDefense': 75,
        'speed': 45,
    },
}, {
    'id': 225,
    'name': 'Delibird',
    'catchRate': 45,
    'type': [PokemonType.Ice, PokemonType.Flying],
    'levelType': LevelType.fast,
    'exp': 116,
    'eggCycles': 20,
    'base': {
        'hitpoints': 45,
        'attack': 55,
        'specialAttack': 65,
        'defense': 45,
        'specialDefense': 45,
        'speed': 75,
    },
}, {
    'id': 226,
    'name': 'Mantine',
    'catchRate': 25,
    'type': [PokemonType.Water, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 85,
        'attack': 40,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 140,
        'speed': 70,
    },
}, {
    'id': 227,
    'name': 'Skarmory',
    'catchRate': 25,
    'type': [PokemonType.Steel, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 163,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'attack': 80,
        'specialAttack': 40,
        'defense': 140,
        'specialDefense': 70,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 228,
    'name': 'Houndour',
    'catchRate': 120,
    'type': [PokemonType.Dark, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Houndour', 'Houndoom', 24)],
    'base': {
        'hitpoints': 45,
        'attack': 60,
        'specialAttack': 80,
        'defense': 30,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 229,
    'name': 'Houndoom',
    'catchRate': 45,
    'type': [PokemonType.Dark, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 90,
        'specialAttack': 110,
        'defense': 50,
        'specialDefense': 80,
        'speed': 95,
    },
}, {
    'id': 230,
    'name': 'Kingdra',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Dragon],
    'levelType': LevelType.mediumfast,
    'exp': 243,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 95,
        'speed': 85,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 231,
    'name': 'Phanpy',
    'catchRate': 120,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Phanpy', 'Donphan', 25)],
    'base': {
        'hitpoints': 90,
        'attack': 60,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 40,
        'speed': 40,
    },
}, {
    'id': 232,
    'name': 'Donphan',
    'catchRate': 60,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 120,
        'specialAttack': 60,
        'defense': 120,
        'specialDefense': 60,
        'speed': 50,
    },
}, {
    'id': 233,
    'name': 'Porygon2',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Porygon2', 'Porygon-Z', GameConstants.StoneType.Dubious_disc)],
    'base': {
        'hitpoints': 85,
        'attack': 80,
        'specialAttack': 105,
        'defense': 90,
        'specialDefense': 95,
        'speed': 60,
    },
    'heldItem': { type: ItemType.item, id: 'Upgrade' },
}, {
    'id': 234,
    'name': 'Stantler',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 163,
    'eggCycles': 20,
    'base': {
        'hitpoints': 73,
        'attack': 95,
        'specialAttack': 85,
        'defense': 62,
        'specialDefense': 65,
        'speed': 85,
    },
}, {
    'id': 235,
    'name': 'Smeargle',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.fast,
    'exp': 88,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 20,
        'specialAttack': 20,
        'defense': 35,
        'specialDefense': 45,
        'speed': 75,
    },
}, {
    'id': 236,
    'name': 'Tyrogue',
    'catchRate': 75,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 42,
    'eggCycles': 25,
    'evolutions': [
        new LevelEvolution('Tyrogue', 'Hitmonlee', 20),
        new LevelEvolution('Tyrogue', 'Hitmonchan', 20),
        new LevelEvolution('Tyrogue', 'Hitmontop', 20),
    ],
    'baby': true,
    'base': {
        'hitpoints': 35,
        'attack': 35,
        'specialAttack': 35,
        'defense': 35,
        'specialDefense': 35,
        'speed': 35,
    },
}, {
    'id': 237,
    'name': 'Hitmontop',
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'attack': 95,
        'specialAttack': 35,
        'defense': 95,
        'specialDefense': 110,
        'speed': 70,
    },
}, {
    'id': 238,
    'name': 'Smoochum',
    'catchRate': 45,
    'type': [PokemonType.Ice, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'eggCycles': 25,
    'evolutions': [new LevelEvolution('Smoochum', 'Jynx', 30)],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 85,
        'defense': 15,
        'specialDefense': 65,
        'speed': 65,
    },
}, {
    'id': 239,
    'name': 'Elekid',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'eggCycles': 25,
    'evolutions': [new LevelEvolution('Elekid', 'Electabuzz', 30)],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 63,
        'specialAttack': 65,
        'defense': 37,
        'specialDefense': 55,
        'speed': 95,
    },
    'heldItem': { type: ItemType.item, id: 'Electirizer' },
}, {
    'id': 240,
    'name': 'Magby',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 73,
    'eggCycles': 25,
    'evolutions': [new LevelEvolution('Magby', 'Magmar', 30)],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 75,
        'specialAttack': 70,
        'defense': 37,
        'specialDefense': 55,
        'speed': 83,
    },
    'heldItem': { type: ItemType.item, id: 'Magmarizer' },
}, {
    'id': 241,
    'name': 'Miltank',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 80,
        'specialAttack': 40,
        'defense': 105,
        'specialDefense': 70,
        'speed': 100,
    },
}, {
    'id': 242,
    'name': 'Blissey',
    'catchRate': 30,
    'type': [PokemonType.Normal],
    'levelType': LevelType.fast,
    'exp': 608,
    'eggCycles': 40,
    'base': {
        'hitpoints': 255,
        'attack': 10,
        'specialAttack': 75,
        'defense': 10,
        'specialDefense': 135,
        'speed': 55,
    },
    'heldItem': { type: ItemType.underground, id: 'Oval Stone' },
}, {
    'id': 243,
    'name': 'Raikou',
    'catchRate': 3,
    'type': [PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 85,
        'specialAttack': 115,
        'defense': 75,
        'specialDefense': 100,
        'speed': 115,
    },
}, {
    'id': 244,
    'name': 'Entei',
    'catchRate': 3,
    'type': [PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 115,
        'attack': 115,
        'specialAttack': 90,
        'defense': 85,
        'specialDefense': 75,
        'speed': 100,
    },
}, {
    'id': 245,
    'name': 'Suicune',
    'catchRate': 3,
    'type': [PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 100,
        'attack': 75,
        'specialAttack': 90,
        'defense': 115,
        'specialDefense': 115,
        'speed': 85,
    },
}, {
    'id': 246,
    'name': 'Larvitar',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.slow,
    'exp': 60,
    'eggCycles': 40,
    'evolutions': [new LevelEvolution('Larvitar', 'Pupitar', 30)],
    'base': {
        'hitpoints': 50,
        'attack': 64,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 50,
        'speed': 41,
    },
}, {
    'id': 247,
    'name': 'Pupitar',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.slow,
    'exp': 144,
    'eggCycles': 40,
    'evolutions': [new LevelEvolution('Pupitar', 'Tyranitar', 55)],
    'base': {
        'hitpoints': 70,
        'attack': 84,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 70,
        'speed': 51,
    },
}, {
    'id': 248,
    'name': 'Tyranitar',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 270,
    'eggCycles': 40,
    'base': {
        'hitpoints': 100,
        'attack': 134,
        'specialAttack': 95,
        'defense': 110,
        'specialDefense': 100,
        'speed': 61,
    },
}, {
    'id': 249,
    'name': 'Lugia',
    'catchRate': 3,
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 306,
    'eggCycles': 120,
    'base': {
        'hitpoints': 106,
        'attack': 90,
        'specialAttack': 90,
        'defense': 130,
        'specialDefense': 154,
        'speed': 110,
    },
}, {
    'id': 250,
    'name': 'Ho-Oh',
    'catchRate': 3,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 306,
    'eggCycles': 120,
    'base': {
        'hitpoints': 106,
        'attack': 130,
        'specialAttack': 110,
        'defense': 90,
        'specialDefense': 154,
        'speed': 90,
    },
}, {
    'id': 251,
    'name': 'Celebi',
    'catchRate': 45,
    'type': [PokemonType.Psychic, PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'eggCycles': 120,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Lum },
}, {
    'id': 252,
    'name': 'Treecko',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Treecko', 'Grovyle', 16)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 65,
        'defense': 35,
        'specialDefense': 55,
        'speed': 70,
    },
}, {
    'id': 253,
    'name': 'Grovyle',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Grovyle', 'Sceptile', 36)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 85,
        'defense': 45,
        'specialDefense': 65,
        'speed': 95,
    },
}, {
    'id': 254,
    'name': 'Sceptile',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 105,
        'defense': 65,
        'specialDefense': 85,
        'speed': 120,
    },
}, {
    'id': 255,
    'name': 'Torchic',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Torchic', 'Combusken', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 60,
        'specialAttack': 70,
        'defense': 40,
        'specialDefense': 50,
        'speed': 45,
    },
}, {
    'id': 256,
    'name': 'Combusken',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Combusken', 'Blaziken', 36)],
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 85,
        'defense': 60,
        'specialDefense': 60,
        'speed': 55,
    },
}, {
    'id': 257,
    'name': 'Blaziken',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 110,
        'defense': 70,
        'specialDefense': 70,
        'speed': 80,
    },
}, {
    'id': 258,
    'name': 'Mudkip',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Mudkip', 'Marshtomp', 16)],
    'base': {
        'hitpoints': 50,
        'attack': 70,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 50,
        'speed': 40,
    },
}, {
    'id': 259,
    'name': 'Marshtomp',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Marshtomp', 'Swampert', 36)],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 50,
    },
}, {
    'id': 260,
    'name': 'Swampert',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 241,
    'catchRate': 45,
    'base': {
        'hitpoints': 100,
        'attack': 110,
        'specialAttack': 85,
        'defense': 90,
        'specialDefense': 90,
        'speed': 60,
    },
}, {
    'id': 261,
    'name': 'Poochyena',
    'type': [PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Poochyena', 'Mightyena', 18)],
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 30,
        'defense': 35,
        'specialDefense': 30,
        'speed': 35,
    },
}, {
    'id': 262,
    'name': 'Mightyena',
    'type': [PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 127,
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 60,
        'speed': 70,
    },
}, {
    'id': 263,
    'name': 'Zigzagoon',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Zigzagoon', 'Linoone', 20)],
    'base': {
        'hitpoints': 38,
        'attack': 30,
        'specialAttack': 30,
        'defense': 41,
        'specialDefense': 41,
        'speed': 60,
    },
    'heldItem': { type: ItemType.underground, id: 'Revive' },
}, {
    'id': 263.1,
    'name': 'Galarian Zigzagoon',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Normal, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Galarian Zigzagoon', 'Galarian Linoone', 20)],
    'base': {
        'hitpoints': 38,
        'attack': 30,
        'specialAttack': 30,
        'defense': 41,
        'specialDefense': 41,
        'speed': 60,
    },
}, {
    'id': 264,
    'name': 'Linoone',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 90,
    'base': {
        'hitpoints': 78,
        'attack': 70,
        'specialAttack': 50,
        'defense': 61,
        'specialDefense': 61,
        'speed': 100,
    },
    'heldItem': { type: ItemType.underground, id: 'Max Revive' },
}, {
    'id': 264.1,
    'name': 'Galarian Linoone',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Normal, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 90,
    'evolutions': [new LevelEvolution('Galarian Linoone', 'Obstagoon', 35)],
    'base': {
        'hitpoints': 78,
        'attack': 70,
        'specialAttack': 50,
        'defense': 61,
        'specialDefense': 61,
        'speed': 100,
    },
}, {
    'id': 265,
    'name': 'Wurmple',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [
        new LevelEvolution('Wurmple', 'Silcoon', 7),
        new LevelEvolution('Wurmple', 'Cascoon', 7),
    ],
    'base': {
        'hitpoints': 45,
        'attack': 45,
        'specialAttack': 20,
        'defense': 35,
        'specialDefense': 30,
        'speed': 20,
    },
}, {
    'id': 266,
    'name': 'Silcoon',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Silcoon', 'Beautifly', 10)],
    'base': {
        'hitpoints': 50,
        'attack': 35,
        'specialAttack': 25,
        'defense': 55,
        'specialDefense': 25,
        'speed': 15,
    },
}, {
    'id': 267,
    'name': 'Beautifly',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 70,
        'specialAttack': 100,
        'defense': 50,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 268,
    'name': 'Cascoon',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Cascoon', 'Dustox', 10)],
    'base': {
        'hitpoints': 50,
        'attack': 35,
        'specialAttack': 25,
        'defense': 55,
        'specialDefense': 25,
        'speed': 15,
    },
}, {
    'id': 269,
    'name': 'Dustox',
    'type': [PokemonType.Bug, PokemonType.Poison],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 50,
        'defense': 70,
        'specialDefense': 90,
        'speed': 65,
    },
}, {
    'id': 270,
    'name': 'Lotad',
    'type': [PokemonType.Water, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 44,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Lotad', 'Lombre', 14)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 40,
        'defense': 30,
        'specialDefense': 50,
        'speed': 30,
    },
}, {
    'id': 271,
    'name': 'Lombre',
    'type': [PokemonType.Water, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Lombre', 'Ludicolo', GameConstants.StoneType.Water_stone)],
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 60,
        'defense': 50,
        'specialDefense': 70,
        'speed': 50,
    },
}, {
    'id': 272,
    'name': 'Ludicolo',
    'type': [PokemonType.Water, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 216,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 70,
        'specialAttack': 90,
        'defense': 70,
        'specialDefense': 100,
        'speed': 70,
    },
}, {
    'id': 273,
    'name': 'Seedot',
    'type': [PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 44,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Seedot', 'Nuzleaf', 14)],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 30,
        'defense': 50,
        'specialDefense': 30,
        'speed': 30,
    },
}, {
    'id': 274,
    'name': 'Nuzleaf',
    'type': [PokemonType.Grass, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Nuzleaf', 'Shiftry', GameConstants.StoneType.Leaf_stone)],
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 60,
        'defense': 40,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 275,
    'name': 'Shiftry',
    'type': [PokemonType.Grass, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 216,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 90,
        'defense': 60,
        'specialDefense': 60,
        'speed': 80,
    },
}, {
    'id': 276,
    'name': 'Taillow',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 54,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Taillow', 'Swellow', 22)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 85,
    },
}, {
    'id': 277,
    'name': 'Swellow',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 159,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 75,
        'defense': 60,
        'specialDefense': 50,
        'speed': 125,
    },
}, {
    'id': 278,
    'name': 'Wingull',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Wingull', 'Pelipper', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 55,
        'defense': 30,
        'specialDefense': 30,
        'speed': 85,
    },
}, {
    'id': 279,
    'name': 'Pelipper',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 95,
        'defense': 100,
        'specialDefense': 70,
        'speed': 65,
    },
}, {
    'id': 280,
    'name': 'Ralts',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 40,
    'catchRate': 235,
    'evolutions': [new LevelEvolution('Ralts', 'Kirlia', 20)],
    'base': {
        'hitpoints': 28,
        'attack': 25,
        'specialAttack': 45,
        'defense': 25,
        'specialDefense': 35,
        'speed': 40,
    },
}, {
    'id': 281,
    'name': 'Kirlia',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 97,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Kirlia', 'Gardevoir', 30),
        new StoneEvolution('Kirlia', 'Gallade', GameConstants.StoneType.Dawn_stone),
    ],
    'base': {
        'hitpoints': 38,
        'attack': 35,
        'specialAttack': 65,
        'defense': 35,
        'specialDefense': 55,
        'speed': 50,
    },
}, {
    'id': 282,
    'name': 'Gardevoir',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 233,
    'catchRate': 45,
    'base': {
        'hitpoints': 68,
        'attack': 65,
        'specialAttack': 125,
        'defense': 65,
        'specialDefense': 115,
        'speed': 80,
    },
}, {
    'id': 283,
    'name': 'Surskit',
    'type': [PokemonType.Bug, PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Surskit', 'Masquerain', 22)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 50,
        'defense': 32,
        'specialDefense': 52,
        'speed': 65,
    },
}, {
    'id': 284,
    'name': 'Masquerain',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 100,
        'defense': 62,
        'specialDefense': 82,
        'speed': 80,
    },
}, {
    'id': 285,
    'name': 'Shroomish',
    'type': [PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 59,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Shroomish', 'Breloom', 23)],
    'base': {
        'hitpoints': 60,
        'attack': 40,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 60,
        'speed': 35,
    },
}, {
    'id': 286,
    'name': 'Breloom',
    'type': [PokemonType.Grass, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 161,
    'catchRate': 90,
    'base': {
        'hitpoints': 60,
        'attack': 130,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 60,
        'speed': 70,
    },
}, {
    'id': 287,
    'name': 'Slakoth',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Slakoth', 'Vigoroth', 18)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 35,
        'defense': 60,
        'specialDefense': 35,
        'speed': 30,
    },
}, {
    'id': 288,
    'name': 'Vigoroth',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 154,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Vigoroth', 'Slaking', 36)],
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 55,
        'speed': 90,
    },
}, {
    'id': 289,
    'name': 'Slaking',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 252,
    'catchRate': 45,
    'base': {
        'hitpoints': 150,
        'attack': 160,
        'specialAttack': 95,
        'defense': 100,
        'specialDefense': 65,
        'speed': 100,
    },
}, {
    'id': 290,
    'name': 'Nincada',
    'type': [PokemonType.Bug, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.erratic,
    'exp': 53,
    'catchRate': 255,
    'evolutions': [
        new LevelEvolution('Nincada', 'Ninjask', 20),
        new LevelEvolution('Nincada', 'Shedinja', 20),
    ],
    'base': {
        'hitpoints': 31,
        'attack': 45,
        'specialAttack': 30,
        'defense': 90,
        'specialDefense': 30,
        'speed': 40,
    },
}, {
    'id': 291,
    'name': 'Ninjask',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.erratic,
    'exp': 160,
    'catchRate': 120,
    'base': {
        'hitpoints': 61,
        'attack': 90,
        'specialAttack': 50,
        'defense': 45,
        'specialDefense': 50,
        'speed': 160,
    },
}, {
    'id': 292,
    'name': 'Shedinja',
    'type': [PokemonType.Bug, PokemonType.Ghost],
    'eggCycles': 15,
    'levelType': LevelType.erratic,
    'exp': 83,
    'catchRate': 45,
    'base': {
        'hitpoints': 1,
        'attack': 90,
        'specialAttack': 30,
        'defense': 45,
        'specialDefense': 30,
        'speed': 40,
    },
}, {
    'id': 293,
    'name': 'Whismur',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 48,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Whismur', 'Loudred', 20)],
    'base': {
        'hitpoints': 64,
        'attack': 51,
        'specialAttack': 51,
        'defense': 23,
        'specialDefense': 23,
        'speed': 28,
    },
}, {
    'id': 294,
    'name': 'Loudred',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 126,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Loudred', 'Exploud', 40)],
    'base': {
        'hitpoints': 84,
        'attack': 71,
        'specialAttack': 71,
        'defense': 43,
        'specialDefense': 43,
        'speed': 48,
    },
}, {
    'id': 295,
    'name': 'Exploud',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'catchRate': 45,
    'base': {
        'hitpoints': 104,
        'attack': 91,
        'specialAttack': 91,
        'defense': 63,
        'specialDefense': 73,
        'speed': 68,
    },
}, {
    'id': 296,
    'name': 'Makuhita',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 47,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Makuhita', 'Hariyama', 24)],
    'base': {
        'hitpoints': 72,
        'attack': 60,
        'specialAttack': 20,
        'defense': 30,
        'specialDefense': 30,
        'speed': 25,
    },
}, {
    'id': 297,
    'name': 'Hariyama',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 166,
    'catchRate': 200,
    'base': {
        'hitpoints': 144,
        'attack': 120,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 60,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 298,
    'name': 'Azurill',
    'type': [PokemonType.Normal, PokemonType.Fairy],
    'eggCycles': 10,
    'levelType': LevelType.fast,
    'exp': 38,
    'catchRate': 150,
    'evolutions': [new StoneEvolution('Azurill', 'Marill', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 50,
        'attack': 20,
        'specialAttack': 20,
        'defense': 40,
        'specialDefense': 40,
        'speed': 20,
    },
}, {
    'id': 299,
    'name': 'Nosepass',
    'type': [PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 75,
    'catchRate': 255,
    'evolutions': [
        new DungeonRestrictedLevelEvolution('Mt. Coronet North', 'Nosepass', 'Probopass', 20),
        new DungeonRestrictedLevelEvolution('Mt. Coronet South', 'Nosepass', 'Probopass', 20),
    ],
    'base': {
        'hitpoints': 30,
        'attack': 45,
        'specialAttack': 45,
        'defense': 135,
        'specialDefense': 90,
        'speed': 30,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 300,
    'name': 'Skitty',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 52,
    'catchRate': 255,
    'evolutions': [new StoneEvolution('Skitty', 'Delcatty', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 45,
        'specialAttack': 35,
        'defense': 45,
        'specialDefense': 35,
        'speed': 50,
    },
}, {
    'id': 301,
    'name': 'Delcatty',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 140,
    'catchRate': 60,
    'base': {
        'hitpoints': 70,
        'attack': 65,
        'specialAttack': 55,
        'defense': 65,
        'specialDefense': 55,
        'speed': 90,
    },
}, {
    'id': 302,
    'name': 'Sableye',
    'type': [PokemonType.Dark, PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 133,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 65,
        'speed': 50,
    },
}, {
    'id': 303,
    'name': 'Mawile',
    'type': [PokemonType.Steel, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 133,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 85,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 55,
        'speed': 50,
    },
    'heldItem': { type: ItemType.underground, id: 'Iron Ball' },
}, {
    'id': 304,
    'name': 'Aron',
    'type': [PokemonType.Steel, PokemonType.Rock],
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 66,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Aron', 'Lairon', 32)],
    'base': {
        'hitpoints': 50,
        'attack': 70,
        'specialAttack': 40,
        'defense': 100,
        'specialDefense': 40,
        'speed': 30,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 305,
    'name': 'Lairon',
    'type': [PokemonType.Steel, PokemonType.Rock],
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 151,
    'catchRate': 90,
    'evolutions': [new LevelEvolution('Lairon', 'Aggron', 42)],
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 50,
        'defense': 140,
        'specialDefense': 50,
        'speed': 40,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 306,
    'name': 'Aggron',
    'type': [PokemonType.Steel, PokemonType.Rock],
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 60,
        'defense': 180,
        'specialDefense': 60,
        'speed': 50,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 307,
    'name': 'Meditite',
    'type': [PokemonType.Fighting, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Meditite', 'Medicham', 37)],
    'base': {
        'hitpoints': 30,
        'attack': 40,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 55,
        'speed': 60,
    },
}, {
    'id': 308,
    'name': 'Medicham',
    'type': [PokemonType.Fighting, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 144,
    'catchRate': 90,
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 60,
        'defense': 75,
        'specialDefense': 75,
        'speed': 80,
    },
}, {
    'id': 309,
    'name': 'Electrike',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 59,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Electrike', 'Manectric', 26)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 65,
        'defense': 40,
        'specialDefense': 40,
        'speed': 65,
    },
}, {
    'id': 310,
    'name': 'Manectric',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 166,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 75,
        'specialAttack': 105,
        'defense': 60,
        'specialDefense': 60,
        'speed': 105,
    },
}, {
    'id': 311,
    'name': 'Plusle',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'catchRate': 200,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 85,
        'defense': 40,
        'specialDefense': 75,
        'speed': 95,
    },
}, {
    'id': 312,
    'name': 'Minun',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'catchRate': 200,
    'base': {
        'hitpoints': 60,
        'attack': 40,
        'specialAttack': 75,
        'defense': 50,
        'specialDefense': 85,
        'speed': 95,
    },
}, {
    'id': 313,
    'name': 'Volbeat',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.erratic,
    'exp': 151,
    'catchRate': 150,
    'base': {
        'hitpoints': 65,
        'attack': 73,
        'specialAttack': 47,
        'defense': 75,
        'specialDefense': 85,
        'speed': 85,
    },
}, {
    'id': 314,
    'name': 'Illumise',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 151,
    'catchRate': 150,
    'base': {
        'hitpoints': 65,
        'attack': 47,
        'specialAttack': 73,
        'defense': 75,
        'specialDefense': 85,
        'speed': 85,
    },
}, {
    'id': 315,
    'name': 'Roselia',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 140,
    'catchRate': 150,
    'evolutions': [new StoneEvolution('Roselia', 'Roserade', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 60,
        'specialAttack': 100,
        'defense': 45,
        'specialDefense': 80,
        'speed': 65,
    },
}, {
    'id': 316,
    'name': 'Gulpin',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 60,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Gulpin', 'Swalot', 26)],
    'base': {
        'hitpoints': 70,
        'attack': 43,
        'specialAttack': 43,
        'defense': 53,
        'specialDefense': 53,
        'speed': 40,
    },
}, {
    'id': 317,
    'name': 'Swalot',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 163,
    'catchRate': 75,
    'base': {
        'hitpoints': 100,
        'attack': 73,
        'specialAttack': 73,
        'defense': 83,
        'specialDefense': 83,
        'speed': 55,
    },
}, {
    'id': 318,
    'name': 'Carvanha',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Carvanha', 'Sharpedo', 30)],
    'base': {
        'hitpoints': 45,
        'attack': 90,
        'specialAttack': 65,
        'defense': 20,
        'specialDefense': 20,
        'speed': 65,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_tooth' },
}, {
    'id': 319,
    'name': 'Sharpedo',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 161,
    'catchRate': 60,
    'base': {
        'hitpoints': 70,
        'attack': 120,
        'specialAttack': 95,
        'defense': 40,
        'specialDefense': 40,
        'speed': 95,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_tooth' },
}, {
    'id': 320,
    'name': 'Wailmer',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.fluctuating,
    'exp': 80,
    'catchRate': 125,
    'evolutions': [new LevelEvolution('Wailmer', 'Wailord', 40)],
    'base': {
        'hitpoints': 130,
        'attack': 70,
        'specialAttack': 70,
        'defense': 35,
        'specialDefense': 35,
        'speed': 60,
    },
}, {
    'id': 321,
    'name': 'Wailord',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.fluctuating,
    'exp': 175,
    'catchRate': 60,
    'base': {
        'hitpoints': 170,
        'attack': 90,
        'specialAttack': 90,
        'defense': 45,
        'specialDefense': 45,
        'speed': 60,
    },
}, {
    'id': 322,
    'name': 'Numel',
    'type': [PokemonType.Fire, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Numel', 'Camerupt', 33)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 65,
        'defense': 40,
        'specialDefense': 45,
        'speed': 35,
    },
}, {
    'id': 323,
    'name': 'Camerupt',
    'type': [PokemonType.Fire, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 150,
    'base': {
        'hitpoints': 70,
        'attack': 100,
        'specialAttack': 105,
        'defense': 70,
        'specialDefense': 75,
        'speed': 40,
    },
}, {
    'id': 324,
    'name': 'Torkoal',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 90,
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 85,
        'defense': 140,
        'specialDefense': 70,
        'speed': 20,
    },
}, {
    'id': 325,
    'name': 'Spoink',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 66,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Spoink', 'Grumpig', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 25,
        'specialAttack': 70,
        'defense': 35,
        'specialDefense': 80,
        'speed': 60,
    },
}, {
    'id': 326,
    'name': 'Grumpig',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 165,
    'catchRate': 60,
    'base': {
        'hitpoints': 80,
        'attack': 45,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 110,
        'speed': 80,
    },
}, {
    'id': 327,
    'name': 'Spinda',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 126,
    'catchRate': 255,
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 60,
        'speed': 60,
    },
}, {
    'id': 328,
    'name': 'Trapinch',
    'type': [PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Trapinch', 'Vibrava', 35)],
    'base': {
        'hitpoints': 45,
        'attack': 100,
        'specialAttack': 45,
        'defense': 45,
        'specialDefense': 45,
        'speed': 10,
    },
}, {
    'id': 329,
    'name': 'Vibrava',
    'type': [PokemonType.Ground, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Vibrava', 'Flygon', 45)],
    'base': {
        'hitpoints': 50,
        'attack': 70,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 50,
        'speed': 70,
    },
}, {
    'id': 330,
    'name': 'Flygon',
    'type': [PokemonType.Ground, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 80,
        'defense': 80,
        'specialDefense': 80,
        'speed': 100,
    },
}, {
    'id': 331,
    'name': 'Cacnea',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Cacnea', 'Cacturne', 32)],
    'base': {
        'hitpoints': 50,
        'attack': 85,
        'specialAttack': 85,
        'defense': 40,
        'specialDefense': 40,
        'speed': 35,
    },
}, {
    'id': 332,
    'name': 'Cacturne',
    'type': [PokemonType.Grass, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 166,
    'catchRate': 60,
    'base': {
        'hitpoints': 70,
        'attack': 115,
        'specialAttack': 115,
        'defense': 60,
        'specialDefense': 60,
        'speed': 55,
    },
}, {
    'id': 333,
    'name': 'Swablu',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 62,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Swablu', 'Altaria', 35)],
    'base': {
        'hitpoints': 45,
        'attack': 40,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 75,
        'speed': 50,
    },
}, {
    'id': 334,
    'name': 'Altaria',
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 70,
        'defense': 90,
        'specialDefense': 105,
        'speed': 80,
    },
}, {
    'id': 335,
    'name': 'Zangoose',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 160,
    'catchRate': 90,
    'base': {
        'hitpoints': 73,
        'attack': 115,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 60,
        'speed': 90,
    },
}, {
    'id': 336,
    'name': 'Seviper',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 160,
    'catchRate': 90,
    'base': {
        'hitpoints': 73,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 65,
    },
}, {
    'id': 337,
    'name': 'Lunatone',
    'type': [PokemonType.Rock, PokemonType.Psychic],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 161,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 55,
        'specialAttack': 95,
        'defense': 65,
        'specialDefense': 85,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Moon_stone' },
}, {
    'id': 338,
    'name': 'Solrock',
    'type': [PokemonType.Rock, PokemonType.Psychic],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 161,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 95,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 65,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Sun_stone' },
}, {
    'id': 339,
    'name': 'Barboach',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Barboach', 'Whiscash', 30)],
    'base': {
        'hitpoints': 50,
        'attack': 48,
        'specialAttack': 46,
        'defense': 43,
        'specialDefense': 41,
        'speed': 60,
    },
}, {
    'id': 340,
    'name': 'Whiscash',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 164,
    'catchRate': 75,
    'base': {
        'hitpoints': 110,
        'attack': 78,
        'specialAttack': 76,
        'defense': 73,
        'specialDefense': 71,
        'speed': 60,
    },
}, {
    'id': 341,
    'name': 'Corphish',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 62,
    'catchRate': 205,
    'evolutions': [new LevelEvolution('Corphish', 'Crawdaunt', 30)],
    'base': {
        'hitpoints': 43,
        'attack': 80,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 35,
        'speed': 35,
    },
}, {
    'id': 342,
    'name': 'Crawdaunt',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 164,
    'catchRate': 155,
    'base': {
        'hitpoints': 63,
        'attack': 120,
        'specialAttack': 90,
        'defense': 85,
        'specialDefense': 55,
        'speed': 55,
    },
}, {
    'id': 343,
    'name': 'Baltoy',
    'type': [PokemonType.Ground, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Baltoy', 'Claydol', 36)],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 70,
        'speed': 55,
    },
}, {
    'id': 344,
    'name': 'Claydol',
    'type': [PokemonType.Ground, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 90,
    'base': {
        'hitpoints': 60,
        'attack': 70,
        'specialAttack': 70,
        'defense': 105,
        'specialDefense': 120,
        'speed': 75,
    },
}, {
    'id': 345,
    'name': 'Lileep',
    'type': [PokemonType.Rock, PokemonType.Grass],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 71,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Lileep', 'Cradily', 40)],
    'base': {
        'hitpoints': 66,
        'attack': 41,
        'specialAttack': 61,
        'defense': 77,
        'specialDefense': 87,
        'speed': 23,
    },
}, {
    'id': 346,
    'name': 'Cradily',
    'type': [PokemonType.Rock, PokemonType.Grass],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 86,
        'attack': 81,
        'specialAttack': 81,
        'defense': 97,
        'specialDefense': 107,
        'speed': 43,
    },
}, {
    'id': 347,
    'name': 'Anorith',
    'type': [PokemonType.Rock, PokemonType.Bug],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 71,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Anorith', 'Armaldo', 40)],
    'base': {
        'hitpoints': 45,
        'attack': 95,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 348,
    'name': 'Armaldo',
    'type': [PokemonType.Rock, PokemonType.Bug],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 125,
        'specialAttack': 70,
        'defense': 100,
        'specialDefense': 80,
        'speed': 45,
    },
}, {
    'id': 349,
    'name': 'Feebas',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 40,
    'catchRate': 255,
    'evolutions': [new StoneEvolution('Feebas', 'Milotic', GameConstants.StoneType.Prism_scale)],
    'base': {
        'hitpoints': 20,
        'attack': 15,
        'specialAttack': 10,
        'defense': 20,
        'specialDefense': 55,
        'speed': 80,
    },
}, {
    'id': 350,
    'name': 'Milotic',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 95,
        'attack': 60,
        'specialAttack': 100,
        'defense': 79,
        'specialDefense': 125,
        'speed': 81,
    },
}, {
    'id': 351,
    'name': 'Castform',
    'type': [PokemonType.Normal],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 351.1,
    'name': 'Castform (sunny)',
    'type': [PokemonType.Fire],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 351.2,
    'name': 'Castform (rainy)',
    'type': [PokemonType.Water],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 351.3,
    'name': 'Castform (snowy)',
    'type': [PokemonType.Ice],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 352,
    'name': 'Kecleon',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 200,
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 120,
        'speed': 40,
    },
}, {
    'id': 353,
    'name': 'Shuppet',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 59,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Shuppet', 'Banette', 37)],
    'base': {
        'hitpoints': 44,
        'attack': 75,
        'specialAttack': 63,
        'defense': 35,
        'specialDefense': 33,
        'speed': 45,
    },
}, {
    'id': 354,
    'name': 'Banette',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 159,
    'catchRate': 45,
    'base': {
        'hitpoints': 64,
        'attack': 115,
        'specialAttack': 83,
        'defense': 65,
        'specialDefense': 63,
        'speed': 65,
    },
}, {
    'id': 355,
    'name': 'Duskull',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 59,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Duskull', 'Dusclops', 37)],
    'base': {
        'hitpoints': 20,
        'attack': 40,
        'specialAttack': 30,
        'defense': 90,
        'specialDefense': 90,
        'speed': 25,
    },
}, {
    'id': 356,
    'name': 'Dusclops',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 159,
    'catchRate': 90,
    'evolutions': [new StoneEvolution('Dusclops', 'Dusknoir', GameConstants.StoneType.Reaper_cloth)],
    'base': {
        'hitpoints': 40,
        'attack': 70,
        'specialAttack': 60,
        'defense': 130,
        'specialDefense': 130,
        'speed': 25,
    },
}, {
    'id': 357,
    'name': 'Tropius',
    'type': [PokemonType.Grass, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 161,
    'catchRate': 200,
    'base': {
        'hitpoints': 99,
        'attack': 68,
        'specialAttack': 72,
        'defense': 83,
        'specialDefense': 87,
        'speed': 51,
    },
}, {
    'id': 358,
    'name': 'Chimecho',
    'type': [PokemonType.Psychic],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 159,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 50,
        'specialAttack': 95,
        'defense': 80,
        'specialDefense': 90,
        'speed': 65,
    },
}, {
    'id': 359,
    'name': 'Absol',
    'type': [PokemonType.Dark],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 163,
    'catchRate': 30,
    'base': {
        'hitpoints': 65,
        'attack': 130,
        'specialAttack': 75,
        'defense': 60,
        'specialDefense': 60,
        'speed': 75,
    },
}, {
    'id': 360,
    'name': 'Wynaut',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 52,
    'catchRate': 125,
    'evolutions': [new LevelEvolution('Wynaut', 'Wobbuffet', 15)],
    'baby': true,
    'base': {
        'hitpoints': 95,
        'attack': 23,
        'specialAttack': 23,
        'defense': 48,
        'specialDefense': 48,
        'speed': 23,
    },
}, {
    'id': 361,
    'name': 'Snorunt',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 190,
    'evolutions': [
        new LevelEvolution('Snorunt', 'Glalie', 42),
        new StoneEvolution('Snorunt', 'Froslass', GameConstants.StoneType.Dawn_stone),
    ],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 50,
        'speed': 50,
    },
}, {
    'id': 362,
    'name': 'Glalie',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 80,
        'defense': 80,
        'specialDefense': 80,
        'speed': 80,
    },
}, {
    'id': 363,
    'name': 'Spheal',
    'type': [PokemonType.Ice, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Spheal', 'Sealeo', 32)],
    'base': {
        'hitpoints': 70,
        'attack': 40,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 50,
        'speed': 25,
    },
}, {
    'id': 364,
    'name': 'Sealeo',
    'type': [PokemonType.Ice, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 144,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Sealeo', 'Walrein', 44)],
    'base': {
        'hitpoints': 90,
        'attack': 60,
        'specialAttack': 75,
        'defense': 70,
        'specialDefense': 70,
        'speed': 45,
    },
}, {
    'id': 365,
    'name': 'Walrein',
    'type': [PokemonType.Ice, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 110,
        'attack': 80,
        'specialAttack': 95,
        'defense': 90,
        'specialDefense': 90,
        'speed': 65,
    },
}, {
    'id': 366,
    'name': 'Clamperl',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 69,
    'catchRate': 255,
    'evolutions': [
        new StoneEvolution('Clamperl', 'Huntail', GameConstants.StoneType.Deepsea_tooth),
        new StoneEvolution('Clamperl', 'Gorebyss', GameConstants.StoneType.Deepsea_scale),
    ],
    'base': {
        'hitpoints': 35,
        'attack': 64,
        'specialAttack': 74,
        'defense': 85,
        'specialDefense': 55,
        'speed': 32,
    },
}, {
    'id': 367,
    'name': 'Huntail',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 60,
    'base': {
        'hitpoints': 55,
        'attack': 104,
        'specialAttack': 94,
        'defense': 105,
        'specialDefense': 75,
        'speed': 52,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_tooth' },
}, {
    'id': 368,
    'name': 'Gorebyss',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 60,
    'base': {
        'hitpoints': 55,
        'attack': 84,
        'specialAttack': 114,
        'defense': 105,
        'specialDefense': 75,
        'speed': 52,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 369,
    'name': 'Relicanth',
    'type': [PokemonType.Water, PokemonType.Rock],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 170,
    'catchRate': 25,
    'base': {
        'hitpoints': 100,
        'attack': 90,
        'specialAttack': 45,
        'defense': 130,
        'specialDefense': 65,
        'speed': 55,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 370,
    'name': 'Luvdisc',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 116,
    'catchRate': 225,
    'base': {
        'hitpoints': 43,
        'attack': 30,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 65,
        'speed': 97,
    },
    'heldItem': { type: ItemType.underground, id: 'Heart Scale' },
}, {
    'id': 371,
    'name': 'Bagon',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Bagon', 'Shelgon', 30)],
    'base': {
        'hitpoints': 45,
        'attack': 75,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 30,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 372,
    'name': 'Shelgon',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Shelgon', 'Salamence', 50)],
    'base': {
        'hitpoints': 65,
        'attack': 95,
        'specialAttack': 60,
        'defense': 100,
        'specialDefense': 50,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 373,
    'name': 'Salamence',
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 135,
        'specialAttack': 110,
        'defense': 80,
        'specialDefense': 80,
        'speed': 100,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 374,
    'name': 'Beldum',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 3,
    'evolutions': [new LevelEvolution('Beldum', 'Metang', 20)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 35,
        'defense': 80,
        'specialDefense': 60,
        'speed': 30,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 375,
    'name': 'Metang',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 147,
    'catchRate': 3,
    'evolutions': [new LevelEvolution('Metang', 'Metagross', 45)],
    'base': {
        'hitpoints': 60,
        'attack': 75,
        'specialAttack': 55,
        'defense': 100,
        'specialDefense': 80,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 376,
    'name': 'Metagross',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 135,
        'specialAttack': 95,
        'defense': 130,
        'specialDefense': 90,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 377,
    'name': 'Regirock',
    'type': [PokemonType.Rock],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 50,
        'defense': 200,
        'specialDefense': 100,
        'speed': 50,
    },
}, {
    'id': 378,
    'name': 'Regice',
    'type': [PokemonType.Ice],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 50,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 200,
        'speed': 50,
    },
}, {
    'id': 379,
    'name': 'Registeel',
    'type': [PokemonType.Steel],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 75,
        'specialAttack': 75,
        'defense': 150,
        'specialDefense': 150,
        'speed': 50,
    },
}, {
    'id': 380,
    'name': 'Latias',
    'type': [PokemonType.Dragon, PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 110,
        'defense': 90,
        'specialDefense': 130,
        'speed': 110,
    },
}, {
    'id': 381,
    'name': 'Latios',
    'type': [PokemonType.Dragon, PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 90,
        'specialAttack': 130,
        'defense': 80,
        'specialDefense': 110,
        'speed': 110,
    },
}, {
    'id': 382,
    'name': 'Kyogre',
    'type': [PokemonType.Water],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 302,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 150,
        'defense': 90,
        'specialDefense': 140,
        'speed': 90,
    },
}, {
    'id': 383,
    'name': 'Groudon',
    'type': [PokemonType.Ground],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 302,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 150,
        'specialAttack': 100,
        'defense': 140,
        'specialDefense': 90,
        'speed': 90,
    },
}, {
    'id': 384,
    'name': 'Rayquaza',
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 45,
    'base': {
        'hitpoints': 105,
        'attack': 150,
        'specialAttack': 150,
        'defense': 90,
        'specialDefense': 90,
        'speed': 95,
    },
}, {
    'id': 385,
    'name': 'Jirachi',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.underground, id: 'Star Piece' },
}, {
    'id': 386,
    'name': 'Deoxys',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 150,
        'specialAttack': 150,
        'defense': 50,
        'specialDefense': 50,
        'speed': 150,
    },
}, {
    'id': 386.1,
    'name': 'Deoxys (attack)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 180,
        'specialAttack': 180,
        'defense': 20,
        'specialDefense': 20,
        'speed': 150,
    },
}, {
    'id': 386.2,
    'name': 'Deoxys (defense)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 70,
        'specialAttack': 70,
        'defense': 160,
        'specialDefense': 160,
        'speed': 90,
    },
}, {
    'id': 386.3,
    'name': 'Deoxys (speed)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 95,
        'specialAttack': 95,
        'defense': 90,
        'specialDefense': 90,
        'speed': 180,
    },
}, {
    'id': 387,
    'name': 'Turtwig',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Turtwig', 'Grotle', 18)],
    'base': {
        'hitpoints': 55,
        'attack': 68,
        'specialAttack': 45,
        'defense': 64,
        'specialDefense': 55,
        'speed': 31,
    },
}, {
    'id': 388,
    'name': 'Grotle',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Grotle', 'Torterra', 32)],
    'base': {
        'hitpoints': 75,
        'attack': 89,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 65,
        'speed': 36,
    },
}, {
    'id': 389,
    'name': 'Torterra',
    'type': [PokemonType.Grass, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 109,
        'specialAttack': 75,
        'defense': 105,
        'specialDefense': 85,
        'speed': 56,
    },
}, {
    'id': 390,
    'name': 'Chimchar',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Chimchar', 'Monferno', 14)],
    'base': {
        'hitpoints': 44,
        'attack': 58,
        'specialAttack': 58,
        'defense': 44,
        'specialDefense': 44,
        'speed': 61,
    },
}, {
    'id': 391,
    'name': 'Monferno',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Monferno', 'Infernape', 36)],
    'base': {
        'hitpoints': 64,
        'attack': 78,
        'specialAttack': 78,
        'defense': 52,
        'specialDefense': 52,
        'speed': 81,
    },
}, {
    'id': 392,
    'name': 'Infernape',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'catchRate': 45,
    'base': {
        'hitpoints': 76,
        'attack': 104,
        'specialAttack': 104,
        'defense': 71,
        'specialDefense': 71,
        'speed': 108,
    },
}, {
    'id': 393,
    'name': 'Piplup',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Piplup', 'Prinplup', 16)],
    'base': {
        'hitpoints': 53,
        'attack': 51,
        'specialAttack': 61,
        'defense': 53,
        'specialDefense': 56,
        'speed': 40,
    },
}, {
    'id': 394,
    'name': 'Prinplup',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Prinplup', 'Empoleon', 36)],
    'base': {
        'hitpoints': 64,
        'attack': 66,
        'specialAttack': 81,
        'defense': 68,
        'specialDefense': 76,
        'speed': 50,
    },
}, {
    'id': 395,
    'name': 'Empoleon',
    'type': [PokemonType.Water, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 84,
        'attack': 86,
        'specialAttack': 111,
        'defense': 88,
        'specialDefense': 101,
        'speed': 60,
    },
}, {
    'id': 396,
    'name': 'Starly',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Starly', 'Staravia', 14)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 60,
    },
}, {
    'id': 397,
    'name': 'Staravia',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Staravia', 'Staraptor', 34)],
    'base': {
        'hitpoints': 55,
        'attack': 75,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 40,
        'speed': 80,
    },
}, {
    'id': 398,
    'name': 'Staraptor',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 218,
    'catchRate': 45,
    'base': {
        'hitpoints': 85,
        'attack': 120,
        'specialAttack': 50,
        'defense': 70,
        'specialDefense': 60,
        'speed': 100,
    },
}, {
    'id': 399,
    'name': 'Bidoof',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 50,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Bidoof', 'Bibarel', 15)],
    'base': {
        'hitpoints': 59,
        'attack': 45,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 40,
        'speed': 31,
    },
}, {
    'id': 400,
    'name': 'Bibarel',
    'type': [PokemonType.Normal, PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 144,
    'catchRate': 127,
    'base': {
        'hitpoints': 79,
        'attack': 85,
        'specialAttack': 55,
        'defense': 60,
        'specialDefense': 60,
        'speed': 71,
    },
}, {
    'id': 401,
    'name': 'Kricketot',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 39,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Kricketot', 'Kricketune', 10)],
    'base': {
        'hitpoints': 37,
        'attack': 25,
        'specialAttack': 25,
        'defense': 41,
        'specialDefense': 41,
        'speed': 25,
    },
}, {
    'id': 402,
    'name': 'Kricketune',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 134,
    'catchRate': 45,
    'base': {
        'hitpoints': 77,
        'attack': 85,
        'specialAttack': 55,
        'defense': 51,
        'specialDefense': 51,
        'speed': 65,
    },
}, {
    'id': 403,
    'name': 'Shinx',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 53,
    'catchRate': 235,
    'evolutions': [new LevelEvolution('Shinx', 'Luxio', 15)],
    'base': {
        'hitpoints': 45,
        'attack': 65,
        'specialAttack': 40,
        'defense': 34,
        'specialDefense': 34,
        'speed': 45,
    },
}, {
    'id': 404,
    'name': 'Luxio',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 127,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Luxio', 'Luxray', 30)],
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 60,
        'defense': 49,
        'specialDefense': 49,
        'speed': 60,
    },
}, {
    'id': 405,
    'name': 'Luxray',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 235,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 95,
        'defense': 79,
        'specialDefense': 79,
        'speed': 70,
    },
}, {
    'id': 406,
    'name': 'Budew',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new DayTimedStoneEvolution('Budew', 'Roselia', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 50,
        'defense': 35,
        'specialDefense': 70,
        'speed': 55,
    },
}, {
    'id': 407,
    'name': 'Roserade',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 232,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 70,
        'specialAttack': 125,
        'defense': 65,
        'specialDefense': 105,
        'speed': 90,
    },
}, {
    'id': 408,
    'name': 'Cranidos',
    'type': [PokemonType.Rock],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 70,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Cranidos', 'Rampardos', 30)],
    'base': {
        'hitpoints': 67,
        'attack': 125,
        'specialAttack': 30,
        'defense': 40,
        'specialDefense': 30,
        'speed': 58,
    },
}, {
    'id': 409,
    'name': 'Rampardos',
    'type': [PokemonType.Rock],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 97,
        'attack': 165,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 50,
        'speed': 58,
    },
}, {
    'id': 410,
    'name': 'Shieldon',
    'type': [PokemonType.Rock, PokemonType.Steel],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 70,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Shieldon', 'Bastiodon', 30)],
    'base': {
        'hitpoints': 30,
        'attack': 42,
        'specialAttack': 42,
        'defense': 118,
        'specialDefense': 88,
        'speed': 30,
    },
}, {
    'id': 411,
    'name': 'Bastiodon',
    'type': [PokemonType.Rock, PokemonType.Steel],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 52,
        'specialAttack': 47,
        'defense': 168,
        'specialDefense': 138,
        'speed': 30,
    },
}, {
    'id': 412,
    'name': 'Burmy (plant)',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 45,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Burmy (plant)', 'Wormadam (plant)', 20),
        new LevelEvolution('Burmy (plant)', 'Mothim', 20),
        new EnvironmentRestrictedLevelEvolution('Cave', 'Burmy (plant)', 'Burmy (sand)', 1),
        new EnvironmentRestrictedLevelEvolution('GemCave', 'Burmy (plant)', 'Burmy (sand)', 1),
        new EnvironmentRestrictedLevelEvolution('PowerPlant', 'Burmy (plant)', 'Burmy (trash)', 1),
        new EnvironmentRestrictedLevelEvolution('Mansion', 'Burmy (plant)', 'Burmy (trash)', 1),
        new EnvironmentRestrictedLevelEvolution('Graveyard', 'Burmy (plant)', 'Burmy (trash)', 1),
    ],
    'base': {
        'hitpoints': 40,
        'attack': 29,
        'specialAttack': 29,
        'defense': 45,
        'specialDefense': 45,
        'speed': 36,
    },
}, {
    'id': 412.1,
    'name': 'Burmy (sand)',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 45,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Burmy (sand)', 'Wormadam (sand)', 20),
        new LevelEvolution('Burmy (sand)', 'Mothim', 20),
    ],
    'base': {
        'hitpoints': 40,
        'attack': 29,
        'specialAttack': 29,
        'defense': 45,
        'specialDefense': 45,
        'speed': 36,
    },
}, {
    'id': 412.2,
    'name': 'Burmy (trash)',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 45,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Burmy (trash)', 'Wormadam (trash)', 20),
        new LevelEvolution('Burmy (trash)', 'Mothim', 20),
    ],
    'base': {
        'hitpoints': 40,
        'attack': 29,
        'specialAttack': 29,
        'defense': 45,
        'specialDefense': 45,
        'speed': 36,
    },
}, {
    'id': 413,
    'name': 'Wormadam (plant)',
    'type': [PokemonType.Bug, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 59,
        'specialAttack': 79,
        'defense': 85,
        'specialDefense': 105,
        'speed': 36,
    },
}, {
    'id': 413.1,
    'name': 'Wormadam (sand)',
    'type': [PokemonType.Bug, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 79,
        'specialAttack': 59,
        'defense': 105,
        'specialDefense': 85,
        'speed': 36,
    },
}, {
    'id': 413.2,
    'name': 'Wormadam (trash)',
    'type': [PokemonType.Bug, PokemonType.Steel],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 69,
        'specialAttack': 69,
        'defense': 95,
        'specialDefense': 95,
        'speed': 36,
    },
}, {
    'id': 414,
    'name': 'Mothim',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 94,
        'specialAttack': 94,
        'defense': 50,
        'specialDefense': 50,
        'speed': 66,
    },
}, {
    'id': 415,
    'name': 'Combee',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Combee', 'Vespiquen', 21)],
    'base': {
        'hitpoints': 30,
        'attack': 30,
        'specialAttack': 30,
        'defense': 42,
        'specialDefense': 42,
        'speed': 70,
    },
}, {
    'id': 416,
    'name': 'Vespiquen',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 166,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 80,
        'specialAttack': 80,
        'defense': 102,
        'specialDefense': 102,
        'speed': 40,
    },
}, {
    'id': 417,
    'name': 'Pachirisu',
    'type': [PokemonType.Electric],
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'catchRate': 200,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 45,
        'defense': 70,
        'specialDefense': 90,
        'speed': 95,
    },
}, {
    'id': 418,
    'name': 'Buizel',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Buizel', 'Floatzel', 26)],
    'base': {
        'hitpoints': 55,
        'attack': 65,
        'specialAttack': 60,
        'defense': 35,
        'specialDefense': 30,
        'speed': 85,
    },
}, {
    'id': 419,
    'name': 'Floatzel',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 75,
    'base': {
        'hitpoints': 85,
        'attack': 105,
        'specialAttack': 85,
        'defense': 55,
        'specialDefense': 50,
        'speed': 115,
    },
}, {
    'id': 420,
    'name': 'Cherubi',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 55,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Cherubi', 'Cherrim (overcast)', 25)],
    'base': {
        'hitpoints': 45,
        'attack': 35,
        'specialAttack': 62,
        'defense': 45,
        'specialDefense': 53,
        'speed': 35,
    },
}, {
    'id': 421,
    'name': 'Cherrim (overcast)',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'catchRate': 75,
    'evolutions': [new WeatherRestrictedLevelEvolution('Cherrim (overcast)', 'Cherrim (sunshine)', 1, [WeatherType.Sunny])],
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 87,
        'defense': 70,
        'specialDefense': 78,
        'speed': 85,
    },
}, {
    'id': 421.1,
    'name': 'Cherrim (sunshine)',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 87,
        'defense': 70,
        'specialDefense': 78,
        'speed': 85,
    },
}, {
    'id': 422,
    'name': 'Shellos (west)',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Shellos (west)', 'Gastrodon (west)', 30)],
    'base': {
        'hitpoints': 76,
        'attack': 48,
        'specialAttack': 57,
        'defense': 48,
        'specialDefense': 62,
        'speed': 34,
    },
}, {
    'id': 422.1,
    'name': 'Shellos (east)',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Shellos (east)', 'Gastrodon (east)', 30)],
    'base': {
        'hitpoints': 76,
        'attack': 48,
        'specialAttack': 57,
        'defense': 48,
        'specialDefense': 62,
        'speed': 34,
    },
}, {
    'id': 423,
    'name': 'Gastrodon (west)',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 111,
        'attack': 83,
        'specialAttack': 92,
        'defense': 68,
        'specialDefense': 82,
        'speed': 39,
    },
}, {
    'id': 423.1,
    'name': 'Gastrodon (east)',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 111,
        'attack': 83,
        'specialAttack': 92,
        'defense': 68,
        'specialDefense': 82,
        'speed': 39,
    },
}, {
    'id': 424,
    'name': 'Ambipom',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': 4,
    'exp': 169,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 60,
        'defense': 66,
        'specialDefense': 66,
        'speed': 115,
    },
}, {
    'id': 425,
    'name': 'Drifloon',
    'type': [PokemonType.Ghost, PokemonType.Flying],
    'eggCycles': 30,
    'levelType': LevelType.fluctuating,
    'exp': 70,
    'catchRate': 125,
    'evolutions': [new LevelEvolution('Drifloon', 'Drifblim', 28)],
    'base': {
        'hitpoints': 90,
        'attack': 50,
        'specialAttack': 60,
        'defense': 34,
        'specialDefense': 44,
        'speed': 70,
    },
}, {
    'id': 426,
    'name': 'Drifblim',
    'type': [PokemonType.Ghost, PokemonType.Flying],
    'eggCycles': 30,
    'levelType': LevelType.fluctuating,
    'exp': 174,
    'catchRate': 60,
    'base': {
        'hitpoints': 150,
        'attack': 80,
        'specialAttack': 90,
        'defense': 44,
        'specialDefense': 54,
        'speed': 80,
    },
}, {
    'id': 427,
    'name': 'Buneary',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 70,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Buneary', 'Lopunny', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 55,
        'attack': 66,
        'specialAttack': 44,
        'defense': 44,
        'specialDefense': 56,
        'speed': 85,
    },
}, {
    'id': 428,
    'name': 'Lopunny',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 60,
    'base': {
        'hitpoints': 65,
        'attack': 76,
        'specialAttack': 54,
        'defense': 84,
        'specialDefense': 96,
        'speed': 105,
    },
}, {
    'id': 429,
    'name': 'Mismagius',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': 4,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 105,
        'defense': 60,
        'specialDefense': 105,
        'speed': 105,
    },
}, {
    'id': 430,
    'name': 'Honchkrow',
    'type': [PokemonType.Dark, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 177,
    'catchRate': 30,
    'base': {
        'hitpoints': 100,
        'attack': 125,
        'specialAttack': 105,
        'defense': 52,
        'specialDefense': 52,
        'speed': 71,
    },
}, {
    'id': 431,
    'name': 'Glameow',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': 4,
    'exp': 62,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Glameow', 'Purugly', 38)],
    'base': {
        'hitpoints': 49,
        'attack': 55,
        'specialAttack': 42,
        'defense': 42,
        'specialDefense': 37,
        'speed': 85,
    },
}, {
    'id': 432,
    'name': 'Purugly',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': 4,
    'exp': 158,
    'catchRate': 75,
    'base': {
        'hitpoints': 71,
        'attack': 82,
        'specialAttack': 64,
        'defense': 64,
        'specialDefense': 59,
        'speed': 112,
    },
}, {
    'id': 433,
    'name': 'Chingling',
    'type': [PokemonType.Psychic],
    'eggCycles': 25,
    'levelType': 4,
    'exp': 57,
    'catchRate': 120,
    'evolutions': [new NightTimedStoneEvolution('Chingling', 'Chimecho', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 65,
        'defense': 50,
        'specialDefense': 50,
        'speed': 45,
    },
}, {
    'id': 434,
    'name': 'Stunky',
    'type': [PokemonType.Poison, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Stunky', 'Skuntank', 34)],
    'base': {
        'hitpoints': 63,
        'attack': 63,
        'specialAttack': 41,
        'defense': 47,
        'specialDefense': 41,
        'speed': 74,
    },
}, {
    'id': 435,
    'name': 'Skuntank',
    'type': [PokemonType.Poison, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 60,
    'base': {
        'hitpoints': 103,
        'attack': 93,
        'specialAttack': 71,
        'defense': 67,
        'specialDefense': 61,
        'speed': 84,
    },
}, {
    'id': 436,
    'name': 'Bronzor',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Bronzor', 'Bronzong', 33)],
    'base': {
        'hitpoints': 57,
        'attack': 24,
        'specialAttack': 24,
        'defense': 86,
        'specialDefense': 86,
        'speed': 23,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 437,
    'name': 'Bronzong',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 90,
    'base': {
        'hitpoints': 67,
        'attack': 89,
        'specialAttack': 79,
        'defense': 116,
        'specialDefense': 116,
        'speed': 33,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 438,
    'name': 'Bonsly',
    'type': [PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'catchRate': 255,
    'evolutions': [
        // Evolves when leveled up while knowing Mimic
        // Learns mimic at level 16
        new LevelEvolution('Bonsly', 'Sudowoodo', 32),
    ],
    'baby': true,
    'base': {
        'hitpoints': 50,
        'attack': 80,
        'specialAttack': 10,
        'defense': 95,
        'specialDefense': 45,
        'speed': 10,
    },
}, {
    'id': 439,
    'name': 'Mime Jr.',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 62,
    'catchRate': 145,
    'evolutions': [
        // Evolves when leveled up while knowing Mimic
        // Learns mimic at level 32
        new LevelEvolution('Mime Jr.', 'Mr. Mime', 32),
    ],
    'baby': true,
    'base': {
        'hitpoints': 20,
        'attack': 25,
        'specialAttack': 70,
        'defense': 45,
        'specialDefense': 90,
        'speed': 60,
    },
}, {
    'id': 440,
    'name': 'Happiny',
    'type': [PokemonType.Normal],
    'eggCycles': 40,
    'levelType': 4,
    'exp': 110,
    'catchRate': 130,
    'evolutions': [
        // TODO: Evolves while holding an Oval Stone during the Day time
        new StoneEvolution('Happiny', 'Chansey', GameConstants.StoneType.None),
    ],
    'baby': true,
    'base': {
        'hitpoints': 100,
        'attack': 5,
        'specialAttack': 15,
        'defense': 5,
        'specialDefense': 65,
        'speed': 30,
    },
    'heldItem': { type: ItemType.underground, id: 'Oval Stone' },
}, {
    'id': 441,
    'name': 'Chatot',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 144,
    'catchRate': 30,
    'base': {
        'hitpoints': 76,
        'attack': 65,
        'specialAttack': 92,
        'defense': 45,
        'specialDefense': 42,
        'speed': 91,
    },
}, {
    'id': 442,
    'name': 'Spiritomb',
    'type': [PokemonType.Ghost, PokemonType.Dark],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 100,
    'base': {
        'hitpoints': 50,
        'attack': 92,
        'specialAttack': 92,
        'defense': 108,
        'specialDefense': 108,
        'speed': 35,
    },
}, {
    'id': 443,
    'name': 'Gible',
    'type': [PokemonType.Dragon, PokemonType.Ground],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Gible', 'Gabite', 24)],
    'base': {
        'hitpoints': 58,
        'attack': 70,
        'specialAttack': 40,
        'defense': 45,
        'specialDefense': 45,
        'speed': 42,
    },
}, {
    'id': 444,
    'name': 'Gabite',
    'type': [PokemonType.Dragon, PokemonType.Ground],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 144,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Gabite', 'Garchomp', 48)],
    'base': {
        'hitpoints': 68,
        'attack': 90,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 55,
        'speed': 82,
    },
}, {
    'id': 445,
    'name': 'Garchomp',
    'type': [PokemonType.Dragon, PokemonType.Ground],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 108,
        'attack': 130,
        'specialAttack': 80,
        'defense': 95,
        'specialDefense': 85,
        'speed': 102,
    },
}, {
    'id': 446,
    'name': 'Munchlax',
    'type': [PokemonType.Normal],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 78,
    'catchRate': 50,
    'evolutions': [new StoneEvolution('Munchlax', 'Snorlax', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 135,
        'attack': 85,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 85,
        'speed': 5,
    },
}, {
    'id': 447,
    'name': 'Riolu',
    'type': [PokemonType.Fighting],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 57,
    'catchRate': 75,
    'evolutions': [new DayTimedStoneEvolution('Riolu', 'Lucario', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 40,
        'attack': 70,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 448,
    'name': 'Lucario',
    'type': [PokemonType.Fighting, PokemonType.Steel],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 184,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 115,
        'defense': 70,
        'specialDefense': 70,
        'speed': 90,
    },
}, {
    'id': 449,
    'name': 'Hippopotas',
    'type': [PokemonType.Ground],
    'eggCycles': 30,
    'levelType': LevelType.slow,
    'exp': 66,
    'catchRate': 140,
    'evolutions': [new LevelEvolution('Hippopotas', 'Hippowdon', 34)],
    'base': {
        'hitpoints': 68,
        'attack': 72,
        'specialAttack': 38,
        'defense': 78,
        'specialDefense': 42,
        'speed': 32,
    },
}, {
    'id': 450,
    'name': 'Hippowdon',
    'type': [PokemonType.Ground],
    'eggCycles': 30,
    'levelType': LevelType.slow,
    'exp': 184,
    'catchRate': 60,
    'base': {
        'hitpoints': 108,
        'attack': 112,
        'specialAttack': 68,
        'defense': 118,
        'specialDefense': 72,
        'speed': 47,
    },
}, {
    'id': 451,
    'name': 'Skorupi',
    'type': [PokemonType.Poison, PokemonType.Bug],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 66,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Skorupi', 'Drapion', 40)],
    'base': {
        'hitpoints': 40,
        'attack': 50,
        'specialAttack': 30,
        'defense': 90,
        'specialDefense': 55,
        'speed': 65,
    },
}, {
    'id': 452,
    'name': 'Drapion',
    'type': [PokemonType.Poison, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 175,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 60,
        'defense': 110,
        'specialDefense': 75,
        'speed': 95,
    },
}, {
    'id': 453,
    'name': 'Croagunk',
    'type': [PokemonType.Poison, PokemonType.Fighting],
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 140,
    'evolutions': [new LevelEvolution('Croagunk', 'Toxicroak', 37)],
    'base': {
        'hitpoints': 48,
        'attack': 61,
        'specialAttack': 61,
        'defense': 40,
        'specialDefense': 40,
        'speed': 50,
    },
}, {
    'id': 454,
    'name': 'Toxicroak',
    'type': [PokemonType.Poison, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 75,
    'base': {
        'hitpoints': 83,
        'attack': 106,
        'specialAttack': 86,
        'defense': 65,
        'specialDefense': 65,
        'speed': 85,
    },
}, {
    'id': 455,
    'name': 'Carnivine',
    'type': [PokemonType.Grass],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 159,
    'catchRate': 200,
    'base': {
        'hitpoints': 74,
        'attack': 100,
        'specialAttack': 90,
        'defense': 72,
        'specialDefense': 72,
        'speed': 46,
    },
}, {
    'id': 456,
    'name': 'Finneon',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 66,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Finneon', 'Lumineon', 31)],
    'base': {
        'hitpoints': 49,
        'attack': 49,
        'specialAttack': 49,
        'defense': 56,
        'specialDefense': 61,
        'speed': 66,
    },
}, {
    'id': 457,
    'name': 'Lumineon',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 161,
    'catchRate': 75,
    'base': {
        'hitpoints': 69,
        'attack': 69,
        'specialAttack': 69,
        'defense': 76,
        'specialDefense': 86,
        'speed': 91,
    },
}, {
    'id': 458,
    'name': 'Mantyke',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 69,
    'catchRate': 25,
    'evolutions': [
        // TODO: Evolves when leveled up with a Remoraid in the party
        new StoneEvolution('Mantyke', 'Mantine', GameConstants.StoneType.None),
    ],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 20,
        'specialAttack': 60,
        'defense': 50,
        'specialDefense': 120,
        'speed': 50,
    },
}, {
    'id': 459,
    'name': 'Snover',
    'type': [PokemonType.Grass, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 67,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Snover', 'Abomasnow', 40)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 62,
        'defense': 50,
        'specialDefense': 60,
        'speed': 40,
    },
}, {
    'id': 460,
    'name': 'Abomasnow',
    'type': [PokemonType.Grass, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 173,
    'catchRate': 60,
    'base': {
        'hitpoints': 90,
        'attack': 92,
        'specialAttack': 92,
        'defense': 75,
        'specialDefense': 85,
        'speed': 60,
    },
}, {
    'id': 461,
    'name': 'Weavile',
    'type': [PokemonType.Dark, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 179,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 120,
        'specialAttack': 45,
        'defense': 65,
        'specialDefense': 85,
        'speed': 125,
    },
}, {
    'id': 462,
    'name': 'Magnezone',
    'type': [PokemonType.Electric, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 241,
    'catchRate': 30,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 130,
        'defense': 115,
        'specialDefense': 90,
        'speed': 60,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 463,
    'name': 'Lickilicky',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'catchRate': 30,
    'base': {
        'hitpoints': 110,
        'attack': 85,
        'specialAttack': 80,
        'defense': 95,
        'specialDefense': 95,
        'speed': 50,
    },
}, {
    'id': 464,
    'name': 'Rhyperior',
    'type': [PokemonType.Ground, PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 241,
    'catchRate': 30,
    'base': {
        'hitpoints': 115,
        'attack': 140,
        'specialAttack': 55,
        'defense': 130,
        'specialDefense': 55,
        'speed': 40,
    },
}, {
    'id': 465,
    'name': 'Tangrowth',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 187,
    'catchRate': 30,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 110,
        'defense': 125,
        'specialDefense': 50,
        'speed': 50,
    },
}, {
    'id': 466,
    'name': 'Electivire',
    'type': [PokemonType.Electric],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 243,
    'catchRate': 30,
    'base': {
        'hitpoints': 75,
        'attack': 123,
        'specialAttack': 95,
        'defense': 67,
        'specialDefense': 85,
        'speed': 95,
    },
    'heldItem': { type: ItemType.item, id: 'Electirizer' },
}, {
    'id': 467,
    'name': 'Magmortar',
    'type': [PokemonType.Fire],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 243,
    'catchRate': 30,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 125,
        'defense': 67,
        'specialDefense': 95,
        'speed': 83,
    },
    'heldItem': { type: ItemType.item, id: 'Magmarizer' },
}, {
    'id': 468,
    'name': 'Togekiss',
    'type': [PokemonType.Fairy, PokemonType.Flying],
    'eggCycles': 10,
    'levelType': 4,
    'exp': 245,
    'catchRate': 30,
    'base': {
        'hitpoints': 85,
        'attack': 50,
        'specialAttack': 120,
        'defense': 95,
        'specialDefense': 115,
        'speed': 80,
    },
}, {
    'id': 469,
    'name': 'Yanmega',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'catchRate': 30,
    'base': {
        'hitpoints': 86,
        'attack': 76,
        'specialAttack': 116,
        'defense': 86,
        'specialDefense': 56,
        'speed': 95,
    },
}, {
    'id': 470,
    'name': 'Leafeon',
    'type': [PokemonType.Grass],
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 110,
        'specialAttack': 60,
        'defense': 130,
        'specialDefense': 65,
        'speed': 95,
    },
}, {
    'id': 471,
    'name': 'Glaceon',
    'type': [PokemonType.Ice],
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 130,
        'defense': 110,
        'specialDefense': 95,
        'speed': 65,
    },
}, {
    'id': 472,
    'name': 'Gliscor',
    'type': [PokemonType.Ground, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 179,
    'catchRate': 30,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 45,
        'defense': 125,
        'specialDefense': 75,
        'speed': 95,
    },
}, {
    'id': 473,
    'name': 'Mamoswine',
    'type': [PokemonType.Ice, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 239,
    'catchRate': 50,
    'base': {
        'hitpoints': 110,
        'attack': 130,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 60,
        'speed': 80,
    },
}, {
    'id': 474,
    'name': 'Porygon-Z',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 241,
    'catchRate': 30,
    'base': {
        'hitpoints': 85,
        'attack': 80,
        'specialAttack': 135,
        'defense': 70,
        'specialDefense': 75,
        'speed': 90,
    },
}, {
    'id': 475,
    'name': 'Gallade',
    'type': [PokemonType.Psychic, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 233,
    'catchRate': 45,
    'base': {
        'hitpoints': 68,
        'attack': 125,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 115,
        'speed': 80,
    },
}, {
    'id': 476,
    'name': 'Probopass',
    'type': [PokemonType.Rock, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 60,
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 75,
        'defense': 145,
        'specialDefense': 150,
        'speed': 40,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 477,
    'name': 'Dusknoir',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': 4,
    'exp': 236,
    'catchRate': 45,
    'base': {
        'hitpoints': 45,
        'attack': 100,
        'specialAttack': 65,
        'defense': 135,
        'specialDefense': 135,
        'speed': 45,
    },
}, {
    'id': 478,
    'name': 'Froslass',
    'type': [PokemonType.Ice, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 80,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 70,
        'speed': 110,
    },
}, {
    'id': 479,
    'name': 'Rotom',
    'type': [PokemonType.Electric, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 95,
        'defense': 77,
        'specialDefense': 77,
        'speed': 91,
    },
}, {
    'id': 479.1,
    'name': 'Rotom (heat)',
    'type': [PokemonType.Electric, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
}, {
    'id': 479.2,
    'name': 'Rotom (wash)',
    'type': [PokemonType.Electric, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
}, {
    'id': 479.3,
    'name': 'Rotom (frost)',
    'type': [PokemonType.Electric, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
}, {
    'id': 479.4,
    'name': 'Rotom (fan)',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
}, {
    'id': 479.5,
    'name': 'Rotom (mow)',
    'type': [PokemonType.Electric, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
}, {
    'id': 480,
    'name': 'Uxie',
    'type': [PokemonType.Psychic],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 75,
        'defense': 130,
        'specialDefense': 130,
        'speed': 95,
    },
}, {
    'id': 481,
    'name': 'Mesprit',
    'type': [PokemonType.Psychic],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 105,
        'specialAttack': 105,
        'defense': 105,
        'specialDefense': 105,
        'speed': 80,
    },
}, {
    'id': 482,
    'name': 'Azelf',
    'type': [PokemonType.Psychic],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 75,
        'attack': 125,
        'specialAttack': 125,
        'defense': 70,
        'specialDefense': 70,
        'speed': 115,
    },
}, {
    'id': 483,
    'name': 'Dialga',
    'type': [PokemonType.Steel, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 120,
        'specialAttack': 150,
        'defense': 120,
        'specialDefense': 100,
        'speed': 90,
    },
}, {
    'id': 484,
    'name': 'Palkia',
    'type': [PokemonType.Water, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 90,
        'attack': 120,
        'specialAttack': 150,
        'defense': 100,
        'specialDefense': 120,
        'speed': 100,
    },
}, {
    'id': 485,
    'name': 'Heatran',
    'type': [PokemonType.Fire, PokemonType.Steel],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 90,
        'specialAttack': 130,
        'defense': 106,
        'specialDefense': 106,
        'speed': 77,
    },
}, {
    'id': 486,
    'name': 'Regigigas',
    'type': [PokemonType.Normal],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 302,
    'catchRate': 3,
    'base': {
        'hitpoints': 110,
        'attack': 160,
        'specialAttack': 80,
        'defense': 110,
        'specialDefense': 110,
        'speed': 100,
    },
}, {
    'id': 487,
    'name': 'Giratina (altered)',
    'type': [PokemonType.Ghost, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 150,
        'attack': 100,
        'specialAttack': 100,
        'defense': 120,
        'specialDefense': 120,
        'speed': 90,
    },
}, {
    'id': 487.1,
    'name': 'Giratina (origin)',
    'type': [PokemonType.Ghost, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 150,
        'attack': 120,
        'specialAttack': 120,
        'defense': 100,
        'specialDefense': 100,
        'speed': 90,
    },
}, {
    'id': 488,
    'name': 'Cresselia',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 70,
        'specialAttack': 75,
        'defense': 120,
        'specialDefense': 130,
        'speed': 85,
    },
}, {
    'id': 489,
    'name': 'Phione',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 216,
    // 69420 to prevent evolution ingame, evolution needed for baby form to be obtainable
    'evolutions': [new LevelEvolution('Phione', 'Manaphy', 69420)],
    'baby': true,
    'catchRate': 30,
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 80,
        'defense': 80,
        'specialDefense': 80,
        'speed': 80,
    },
}, {
    'id': 490,
    'name': 'Manaphy',
    'type': [PokemonType.Water],
    'eggCycles': 10,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
}, {
    'id': 491,
    'name': 'Darkrai',
    'type': [PokemonType.Dark],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 135,
        'defense': 90,
        'specialDefense': 90,
        'speed': 125,
    },
}, {
    'id': 492,
    'name': 'Shaymin (land)',
    'type': [PokemonType.Grass],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Lum },
}, {
    'id': 492.1,
    'name': 'Shaymin (sky)',
    'type': [PokemonType.Grass, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 100,
        'attack': 103,
        'specialAttack': 120,
        'defense': 75,
        'specialDefense': 75,
        'speed': 127,
    },
}, {
    'id': 493,
    'name': 'Arceus (normal)',
    'type': [PokemonType.Normal],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.01,
    'name': 'Arceus (fire)',
    'type': [PokemonType.Fire],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.02,
    'name': 'Arceus (water)',
    'type': [PokemonType.Water],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.03,
    'name': 'Arceus (electric)',
    'type': [PokemonType.Electric],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.04,
    'name': 'Arceus (grass)',
    'type': [PokemonType.Grass],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.05,
    'name': 'Arceus (ice)',
    'type': [PokemonType.Ice],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.06,
    'name': 'Arceus (fighting)',
    'type': [PokemonType.Fighting],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.07,
    'name': 'Arceus (poison)',
    'type': [PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.08,
    'name': 'Arceus (ground)',
    'type': [PokemonType.Ground],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.09,
    'name': 'Arceus (flying)',
    'type': [PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.10,
    'name': 'Arceus (psychic)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.11,
    'name': 'Arceus (bug)',
    'type': [PokemonType.Bug],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.12,
    'name': 'Arceus (rock)',
    'type': [PokemonType.Rock],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.13,
    'name': 'Arceus (ghost)',
    'type': [PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.14,
    'name': 'Arceus (dragon)',
    'type': [PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.15,
    'name': 'Arceus (dark)',
    'type': [PokemonType.Dark],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.16,
    'name': 'Arceus (steel)',
    'type': [PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 493.17,
    'name': 'Arceus (fairy)',
    'type': [PokemonType.Fairy],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
}, {
    'id': 494,
    'name': 'Victini',
    'type': [PokemonType.Psychic, PokemonType.Fire],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
}, {
    'id': 495,
    'name': 'Snivy',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Snivy', 'Servine', 17)],
    'base': {
        'hitpoints': 45,
        'attack': 45,
        'specialAttack': 45,
        'defense': 55,
        'specialDefense': 55,
        'speed': 63,
    },
}, {
    'id': 496,
    'name': 'Servine',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 145,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Servine', 'Serperior', 36)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 60,
        'defense': 75,
        'specialDefense': 75,
        'speed': 83,
    },
}, {
    'id': 497,
    'name': 'Serperior',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 238,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 75,
        'defense': 95,
        'specialDefense': 95,
        'speed': 113,
    },
}, {
    'id': 498,
    'name': 'Tepig',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Tepig', 'Pignite', 17)],
    'base': {
        'hitpoints': 65,
        'attack': 63,
        'specialAttack': 45,
        'defense': 45,
        'specialDefense': 45,
        'speed': 45,
    },
}, {
    'id': 499,
    'name': 'Pignite',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 146,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Pignite', 'Emboar', 36)],
    'base': {
        'hitpoints': 90,
        'attack': 93,
        'specialAttack': 70,
        'defense': 55,
        'specialDefense': 55,
        'speed': 55,
    },
}, {
    'id': 500,
    'name': 'Emboar',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 238,
    'catchRate': 45,
    'base': {
        'hitpoints': 110,
        'attack': 123,
        'specialAttack': 100,
        'defense': 65,
        'specialDefense': 65,
        'speed': 65,
    },
}, {
    'id': 501,
    'name': 'Oshawott',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Oshawott', 'Dewott', 17)],
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 63,
        'defense': 45,
        'specialDefense': 45,
        'speed': 45,
    },
}, {
    'id': 502,
    'name': 'Dewott',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 145,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Dewott', 'Samurott', 36)],
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 83,
        'defense': 60,
        'specialDefense': 60,
        'speed': 60,
    },
}, {
    'id': 503,
    'name': 'Samurott',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 238,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 100,
        'specialAttack': 108,
        'defense': 85,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 504,
    'name': 'Patrat',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Patrat', 'Watchog', 20)],
    'base': {
        'hitpoints': 45,
        'attack': 55,
        'specialAttack': 35,
        'defense': 39,
        'specialDefense': 39,
        'speed': 42,
    },
}, {
    'id': 505,
    'name': 'Watchog',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 255,
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 60,
        'defense': 69,
        'specialDefense': 69,
        'speed': 77,
    },
}, {
    'id': 506,
    'name': 'Lillipup',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Lillipup', 'Herdier', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 60,
        'specialAttack': 25,
        'defense': 45,
        'specialDefense': 45,
        'speed': 55,
    },
}, {
    'id': 507,
    'name': 'Herdier',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Herdier', 'Stoutland', 32)],
    'base': {
        'hitpoints': 65,
        'attack': 80,
        'specialAttack': 35,
        'defense': 65,
        'specialDefense': 65,
        'speed': 60,
    },
}, {
    'id': 508,
    'name': 'Stoutland',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'catchRate': 45,
    'base': {
        'hitpoints': 85,
        'attack': 110,
        'specialAttack': 45,
        'defense': 90,
        'specialDefense': 90,
        'speed': 80,
    },
}, {
    'id': 509,
    'name': 'Purrloin',
    'type': [PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Purrloin', 'Liepard', 20)],
    'base': {
        'hitpoints': 41,
        'attack': 50,
        'specialAttack': 50,
        'defense': 37,
        'specialDefense': 37,
        'speed': 66,
    },
}, {
    'id': 510,
    'name': 'Liepard',
    'type': [PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 156,
    'catchRate': 90,
    'base': {
        'hitpoints': 64,
        'attack': 88,
        'specialAttack': 88,
        'defense': 50,
        'specialDefense': 50,
        'speed': 106,
    },
}, {
    'id': 511,
    'name': 'Pansage',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Pansage', 'Simisage', GameConstants.StoneType.Leaf_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 53,
        'defense': 48,
        'specialDefense': 48,
        'speed': 64,
    },
}, {
    'id': 512,
    'name': 'Simisage',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 174,
    'catchRate': 75,
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 98,
        'defense': 63,
        'specialDefense': 63,
        'speed': 101,
    },
}, {
    'id': 513,
    'name': 'Pansear',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Pansear', 'Simisear', GameConstants.StoneType.Fire_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 53,
        'defense': 48,
        'specialDefense': 48,
        'speed': 64,
    },
}, {
    'id': 514,
    'name': 'Simisear',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 174,
    'catchRate': 75,
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 98,
        'defense': 63,
        'specialDefense': 63,
        'speed': 101,
    },
}, {
    'id': 515,
    'name': 'Panpour',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Panpour', 'Simipour', GameConstants.StoneType.Water_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 53,
        'defense': 48,
        'specialDefense': 48,
        'speed': 64,
    },
}, {
    'id': 516,
    'name': 'Simipour',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 174,
    'catchRate': 75,
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 98,
        'defense': 63,
        'specialDefense': 63,
        'speed': 101,
    },
}, {
    'id': 517,
    'name': 'Munna',
    'type': [PokemonType.Psychic],
    'eggCycles': 10,
    'levelType': 4,
    'exp': 58,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Munna', 'Musharna', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 76,
        'attack': 25,
        'specialAttack': 67,
        'defense': 45,
        'specialDefense': 55,
        'speed': 24,
    },
}, {
    'id': 518,
    'name': 'Musharna',
    'type': [PokemonType.Psychic],
    'eggCycles': 10,
    'levelType': 4,
    'exp': 170,
    'catchRate': 75,
    'base': {
        'hitpoints': 116,
        'attack': 55,
        'specialAttack': 107,
        'defense': 85,
        'specialDefense': 95,
        'speed': 29,
    },
}, {
    'id': 519,
    'name': 'Pidove',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 53,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Pidove', 'Tranquill', 21)],
    'base': {
        'hitpoints': 50,
        'attack': 55,
        'specialAttack': 36,
        'defense': 50,
        'specialDefense': 30,
        'speed': 43,
    },
}, {
    'id': 520,
    'name': 'Tranquill',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 125,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Tranquill', 'Unfezant', 32)],
    'base': {
        'hitpoints': 62,
        'attack': 77,
        'specialAttack': 50,
        'defense': 62,
        'specialDefense': 42,
        'speed': 65,
    },
}, {
    'id': 521,
    'name': 'Unfezant',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 220,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 115,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 55,
        'speed': 93,
    },
}, {
    'id': 522,
    'name': 'Blitzle',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 59,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Blitzle', 'Zebstrika', 27)],
    'base': {
        'hitpoints': 45,
        'attack': 60,
        'specialAttack': 50,
        'defense': 32,
        'specialDefense': 32,
        'speed': 76,
    },
}, {
    'id': 523,
    'name': 'Zebstrika',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 174,
    'catchRate': 75,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 80,
        'defense': 63,
        'specialDefense': 63,
        'speed': 116,
    },
}, {
    'id': 524,
    'name': 'Roggenrola',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Roggenrola', 'Boldore', 25)],
    'base': {
        'hitpoints': 55,
        'attack': 75,
        'specialAttack': 25,
        'defense': 85,
        'specialDefense': 25,
        'speed': 15,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 525,
    'name': 'Boldore',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Boldore', 'Gigalith', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 70,
        'attack': 105,
        'specialAttack': 50,
        'defense': 105,
        'specialDefense': 40,
        'speed': 20,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 526,
    'name': 'Gigalith',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 232,
    'catchRate': 45,
    'base': {
        'hitpoints': 85,
        'attack': 135,
        'specialAttack': 60,
        'defense': 130,
        'specialDefense': 80,
        'speed': 25,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 527,
    'name': 'Woobat',
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Woobat', 'Swoobat', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 65,
        'attack': 45,
        'specialAttack': 55,
        'defense': 43,
        'specialDefense': 43,
        'speed': 72,
    },
}, {
    'id': 528,
    'name': 'Swoobat',
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'catchRate': 45,
    'base': {
        'hitpoints': 67,
        'attack': 57,
        'specialAttack': 77,
        'defense': 55,
        'specialDefense': 55,
        'speed': 114,
    },
}, {
    'id': 529,
    'name': 'Drilbur',
    'type': [PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Drilbur', 'Excadrill', 31)],
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 30,
        'defense': 40,
        'specialDefense': 45,
        'speed': 68,
    },
}, {
    'id': 530,
    'name': 'Excadrill',
    'type': [PokemonType.Ground, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'catchRate': 60,
    'base': {
        'hitpoints': 110,
        'attack': 135,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 65,
        'speed': 88,
    },
}, {
    'id': 531,
    'name': 'Audino',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': 4,
    'exp': 390,
    'catchRate': 255,
    'base': {
        'hitpoints': 103,
        'attack': 60,
        'specialAttack': 60,
        'defense': 86,
        'specialDefense': 86,
        'speed': 50,
    },
}, {
    'id': 532,
    'name': 'Timburr',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 61,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Timburr', 'Gurdurr', 25)],
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 25,
        'defense': 55,
        'specialDefense': 35,
        'speed': 35,
    },
}, {
    'id': 533,
    'name': 'Gurdurr',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 90,
    'evolutions': [new StoneEvolution('Gurdurr', 'Conkeldurr', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 85,
        'attack': 105,
        'specialAttack': 40,
        'defense': 85,
        'specialDefense': 50,
        'speed': 40,
    },
}, {
    'id': 534,
    'name': 'Conkeldurr',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'catchRate': 45,
    'base': {
        'hitpoints': 105,
        'attack': 140,
        'specialAttack': 55,
        'defense': 95,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': 535,
    'name': 'Tympole',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 59,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Tympole', 'Palpitoad', 25)],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 40,
        'speed': 64,
    },
}, {
    'id': 536,
    'name': 'Palpitoad',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 134,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Palpitoad', 'Seismitoad', 36)],
    'base': {
        'hitpoints': 75,
        'attack': 65,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 55,
        'speed': 69,
    },
}, {
    'id': 537,
    'name': 'Seismitoad',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 229,
    'catchRate': 45,
    'base': {
        'hitpoints': 105,
        'attack': 95,
        'specialAttack': 85,
        'defense': 75,
        'specialDefense': 75,
        'speed': 74,
    },
}, {
    'id': 538,
    'name': 'Throh',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'catchRate': 45,
    'base': {
        'hitpoints': 120,
        'attack': 100,
        'specialAttack': 30,
        'defense': 85,
        'specialDefense': 85,
        'speed': 45,
    },
}, {
    'id': 539,
    'name': 'Sawk',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 125,
        'specialAttack': 30,
        'defense': 75,
        'specialDefense': 75,
        'speed': 85,
    },
}, {
    'id': 540,
    'name': 'Sewaddle',
    'type': [PokemonType.Bug, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Sewaddle', 'Swadloon', 20)],
    'base': {
        'hitpoints': 45,
        'attack': 53,
        'specialAttack': 40,
        'defense': 70,
        'specialDefense': 60,
        'speed': 42,
    },
}, {
    'id': 541,
    'name': 'Swadloon',
    'type': [PokemonType.Bug, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 133,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Swadloon', 'Leavanny', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 55,
        'attack': 63,
        'specialAttack': 50,
        'defense': 90,
        'specialDefense': 80,
        'speed': 42,
    },
}, {
    'id': 542,
    'name': 'Leavanny',
    'type': [PokemonType.Bug, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 103,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 80,
        'speed': 92,
    },
}, {
    'id': 543,
    'name': 'Venipede',
    'type': [PokemonType.Bug, PokemonType.Poison],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 52,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Venipede', 'Whirlipede', 22)],
    'base': {
        'hitpoints': 30,
        'attack': 45,
        'specialAttack': 30,
        'defense': 59,
        'specialDefense': 39,
        'speed': 57,
    },
}, {
    'id': 544,
    'name': 'Whirlipede',
    'type': [PokemonType.Bug, PokemonType.Poison],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 126,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Whirlipede', 'Scolipede', 30)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 40,
        'defense': 99,
        'specialDefense': 79,
        'speed': 47,
    },
}, {
    'id': 545,
    'name': 'Scolipede',
    'type': [PokemonType.Bug, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 218,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 55,
        'defense': 89,
        'specialDefense': 69,
        'speed': 112,
    },
}, {
    'id': 546,
    'name': 'Cottonee',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Cottonee', 'Whimsicott', GameConstants.StoneType.Sun_stone)],
    'base': {
        'hitpoints': 40,
        'attack': 27,
        'specialAttack': 37,
        'defense': 60,
        'specialDefense': 50,
        'speed': 66,
    },
}, {
    'id': 547,
    'name': 'Whimsicott',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 67,
        'specialAttack': 77,
        'defense': 85,
        'specialDefense': 75,
        'speed': 116,
    },
}, {
    'id': 548,
    'name': 'Petilil',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Petilil', 'Lilligant', GameConstants.StoneType.Sun_stone)],
    'base': {
        'hitpoints': 45,
        'attack': 35,
        'specialAttack': 70,
        'defense': 50,
        'specialDefense': 50,
        'speed': 30,
    },
}, {
    'id': 549,
    'name': 'Lilligant',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 75,
        'speed': 90,
    },
}, {
    'id': 550,
    'name': 'Basculin (Red-Striped)',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 25,
    'base': {
        'hitpoints': 70,
        'attack': 92,
        'specialAttack': 80,
        'defense': 65,
        'specialDefense': 55,
        'speed': 98,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_tooth' },
}, {
    'id': 550.01,
    'name': 'Basculin (Blue-Striped)',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 25,
    'base': {
        'hitpoints': 70,
        'attack': 92,
        'specialAttack': 80,
        'defense': 65,
        'specialDefense': 55,
        'speed': 98,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 551,
    'name': 'Sandile',
    'type': [PokemonType.Ground, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Sandile', 'Krokorok', 29)],
    'base': {
        'hitpoints': 50,
        'attack': 72,
        'specialAttack': 35,
        'defense': 35,
        'specialDefense': 35,
        'speed': 65,
    },
}, {
    'id': 552,
    'name': 'Krokorok',
    'type': [PokemonType.Ground, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 123,
    'catchRate': 90,
    'evolutions': [new LevelEvolution('Krokorok', 'Krookodile', 40)],
    'base': {
        'hitpoints': 60,
        'attack': 82,
        'specialAttack': 45,
        'defense': 45,
        'specialDefense': 45,
        'speed': 74,
    },
}, {
    'id': 553,
    'name': 'Krookodile',
    'type': [PokemonType.Ground, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 117,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 70,
        'speed': 92,
    },
}, {
    'id': 554,
    'name': 'Darumaka',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Darumaka', 'Darmanitan', 35)],
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 15,
        'defense': 45,
        'specialDefense': 45,
        'speed': 50,
    },
}, {
    'id': 554.1,
    'name': 'Galarian Darumaka',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Galarian Darumaka', 'Galarian Darmanitan', GameConstants.StoneType.Ice_stone)],
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 15,
        'defense': 45,
        'specialDefense': 45,
        'speed': 50,
    },
}, {
    'id': 555,
    'name': 'Darmanitan',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 105,
        'attack': 140,
        'specialAttack': 30,
        'defense': 55,
        'specialDefense': 55,
        'speed': 95,
    },
}, {
    'id': 555.1,
    'name': 'Darmanitan (Zen)',
    'type': [PokemonType.Fire, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 105,
        'attack': 30,
        'specialAttack': 140,
        'defense': 105,
        'specialDefense': 105,
        'speed': 55,
    },
}, {
    'id': 555.2,
    'name': 'Galarian Darmanitan',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 105,
        'attack': 140,
        'specialAttack': 30,
        'defense': 55,
        'specialDefense': 55,
        'speed': 95,
    },
}, {
    'id': 555.3,
    'name': 'Galarian Darmanitan (Zen)',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Fire, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 105,
        'attack': 160,
        'specialAttack': 30,
        'defense': 55,
        'specialDefense': 55,
        'speed': 135,
    },
}, {
    'id': 556,
    'name': 'Maractus',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 255,
    'base': {
        'hitpoints': 75,
        'attack': 86,
        'specialAttack': 106,
        'defense': 67,
        'specialDefense': 67,
        'speed': 60,
    },
}, {
    'id': 557,
    'name': 'Dwebble',
    'type': [PokemonType.Bug, PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Dwebble', 'Crustle', 34)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 35,
        'defense': 85,
        'specialDefense': 35,
        'speed': 55,
    },
    'heldItem': { type: ItemType.underground, id: 'Rare Bone' },
}, {
    'id': 558,
    'name': 'Crustle',
    'type': [PokemonType.Bug, PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 105,
        'specialAttack': 65,
        'defense': 125,
        'specialDefense': 75,
        'speed': 45,
    },
    'heldItem': { type: ItemType.underground, id: 'Rare Bone' },
}, {
    'id': 559,
    'name': 'Scraggy',
    'type': [PokemonType.Dark, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 70,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Scraggy', 'Scrafty', 39)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 35,
        'defense': 70,
        'specialDefense': 70,
        'speed': 48,
    },
}, {
    'id': 560,
    'name': 'Scrafty',
    'type': [PokemonType.Dark, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 171,
    'catchRate': 90,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 45,
        'defense': 115,
        'specialDefense': 115,
        'speed': 58,
    },
}, {
    'id': 561,
    'name': 'Sigilyph',
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 58,
        'specialAttack': 103,
        'defense': 80,
        'specialDefense': 80,
        'speed': 97,
    },
}, {
    'id': 562,
    'name': 'Yamask',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Yamask', 'Cofagrigus', 34)],
    'base': {
        'hitpoints': 38,
        'attack': 30,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 65,
        'speed': 30,
    },
}, {
    'id': 562.1,
    'name': 'Galarian Yamask',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Ghost, PokemonType.Ground],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new DungeonRestrictedLevelEvolution('Dusty Bowl', 'Galarian Yamask', 'Runerigus', 34)],
    'base': {
        'hitpoints': 38,
        'attack': 55,
        'specialAttack': 30,
        'defense': 85,
        'specialDefense': 65,
        'speed': 30,
    },
}, {
    'id': 563,
    'name': 'Cofagrigus',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
    'base': {
        'hitpoints': 58,
        'attack': 50,
        'specialAttack': 95,
        'defense': 145,
        'specialDefense': 105,
        'speed': 30,
    },
}, {
    'id': 564,
    'name': 'Tirtouga',
    'type': [PokemonType.Water, PokemonType.Rock],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Tirtouga', 'Carracosta', 37)],
    'base': {
        'hitpoints': 54,
        'attack': 78,
        'specialAttack': 53,
        'defense': 103,
        'specialDefense': 45,
        'speed': 22,
    },
}, {
    'id': 565,
    'name': 'Carracosta',
    'type': [PokemonType.Water, PokemonType.Rock],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 74,
        'attack': 108,
        'specialAttack': 83,
        'defense': 133,
        'specialDefense': 65,
        'speed': 32,
    },
}, {
    'id': 566,
    'name': 'Archen',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Archen', 'Archeops', 37)],
    'base': {
        'hitpoints': 55,
        'attack': 112,
        'specialAttack': 74,
        'defense': 45,
        'specialDefense': 45,
        'speed': 70,
    },
}, {
    'id': 567,
    'name': 'Archeops',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 140,
        'specialAttack': 112,
        'defense': 65,
        'specialDefense': 65,
        'speed': 110,
    },
}, {
    'id': 568,
    'name': 'Trubbish',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Trubbish', 'Garbodor', 36)],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 40,
        'defense': 62,
        'specialDefense': 62,
        'speed': 65,
    },
}, {
    'id': 569,
    'name': 'Garbodor',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 60,
    'base': {
        'hitpoints': 80,
        'attack': 95,
        'specialAttack': 60,
        'defense': 82,
        'specialDefense': 82,
        'speed': 75,
    },
}, {
    'id': 570,
    'name': 'Zorua',
    'type': [PokemonType.Dark],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 66,
    'catchRate': 75,
    'evolutions': [new LevelEvolution('Zorua', 'Zoroark', 30)],
    'base': {
        'hitpoints': 40,
        'attack': 65,
        'specialAttack': 80,
        'defense': 40,
        'specialDefense': 40,
        'speed': 65,
    },
}, {
    'id': 571,
    'name': 'Zoroark',
    'type': [PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 179,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 105,
        'specialAttack': 120,
        'defense': 60,
        'specialDefense': 60,
        'speed': 105,
    },
}, {
    'id': 572,
    'name': 'Minccino',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': 4,
    'exp': 60,
    'catchRate': 255,
    'evolutions': [new StoneEvolution('Minccino', 'Cinccino', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 55,
        'attack': 50,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 75,
    },
}, {
    'id': 573,
    'name': 'Cinccino',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': 4,
    'exp': 165,
    'catchRate': 60,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 60,
        'speed': 115,
    },
}, {
    'id': 574,
    'name': 'Gothita',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Gothita', 'Gothorita', 32)],
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': 575,
    'name': 'Gothorita',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'catchRate': 100,
    'evolutions': [new LevelEvolution('Gothorita', 'Gothitelle', 41)],
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 75,
        'defense': 70,
        'specialDefense': 85,
        'speed': 55,
    },
}, {
    'id': 576,
    'name': 'Gothitelle',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'catchRate': 50,
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 110,
        'speed': 65,
    },
}, {
    'id': 577,
    'name': 'Solosis',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Solosis', 'Duosion', 32)],
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 105,
        'defense': 40,
        'specialDefense': 50,
        'speed': 20,
    },
}, {
    'id': 578,
    'name': 'Duosion',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 130,
    'catchRate': 100,
    'evolutions': [new LevelEvolution('Duosion', 'Reuniclus', 41)],
    'base': {
        'hitpoints': 65,
        'attack': 40,
        'specialAttack': 125,
        'defense': 50,
        'specialDefense': 60,
        'speed': 30,
    },
}, {
    'id': 579,
    'name': 'Reuniclus',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'catchRate': 50,
    'base': {
        'hitpoints': 110,
        'attack': 65,
        'specialAttack': 125,
        'defense': 75,
        'specialDefense': 85,
        'speed': 30,
    },
}, {
    'id': 580,
    'name': 'Ducklett',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Ducklett', 'Swanna', 35)],
    'base': {
        'hitpoints': 62,
        'attack': 44,
        'specialAttack': 44,
        'defense': 50,
        'specialDefense': 50,
        'speed': 55,
    },
}, {
    'id': 581,
    'name': 'Swanna',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 87,
        'specialAttack': 87,
        'defense': 63,
        'specialDefense': 63,
        'speed': 98,
    },
}, {
    'id': 582,
    'name': 'Vanillite',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 61,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Vanillite', 'Vanillish', 35)],
    'base': {
        'hitpoints': 36,
        'attack': 50,
        'specialAttack': 65,
        'defense': 50,
        'specialDefense': 60,
        'speed': 44,
    },
}, {
    'id': 583,
    'name': 'Vanillish',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 138,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Vanillish', 'Vanilluxe', 47)],
    'base': {
        'hitpoints': 51,
        'attack': 65,
        'specialAttack': 80,
        'defense': 65,
        'specialDefense': 75,
        'speed': 59,
    },
}, {
    'id': 584,
    'name': 'Vanilluxe',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 241,
    'catchRate': 45,
    'base': {
        'hitpoints': 71,
        'attack': 95,
        'specialAttack': 110,
        'defense': 85,
        'specialDefense': 95,
        'speed': 79,
    },
}, {
    'id': 585,
    'name': 'Deerling (Spring)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Deerling (Spring)', 'Sawsbuck (Spring)', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 585.01,
    'name': 'Deerling (Summer)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Deerling (Summer)', 'Sawsbuck (Summer)', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 585.02,
    'name': 'Deerling (Autumn)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Deerling (Autumn)', 'Sawsbuck (Autumn)', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 585.03,
    'name': 'Deerling (Winter)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Deerling (Winter)', 'Sawsbuck (Winter)', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 586,
    'name': 'Sawsbuck (Spring)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 586.01,
    'name': 'Sawsbuck (Summer)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 586.02,
    'name': 'Sawsbuck (Autumn)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 586.03,
    'name': 'Sawsbuck (Winter)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 587,
    'name': 'Emolga',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 150,
    'catchRate': 200,
    'base': {
        'hitpoints': 55,
        'attack': 75,
        'specialAttack': 75,
        'defense': 60,
        'specialDefense': 60,
        'speed': 103,
    },
}, {
    'id': 588,
    'name': 'Karrablast',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 200,
    'evolutions': [new StoneEvolution('Karrablast', 'Escavalier', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 40,
        'defense': 45,
        'specialDefense': 45,
        'speed': 60,
    },
}, {
    'id': 589,
    'name': 'Escavalier',
    'type': [PokemonType.Bug, PokemonType.Steel],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 135,
        'specialAttack': 60,
        'defense': 105,
        'specialDefense': 105,
        'speed': 20,
    },
}, {
    'id': 590,
    'name': 'Foongus',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 59,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Foongus', 'Amoonguss', 39)],
    'base': {
        'hitpoints': 69,
        'attack': 55,
        'specialAttack': 55,
        'defense': 45,
        'specialDefense': 55,
        'speed': 15,
    },
}, {
    'id': 591,
    'name': 'Amoonguss',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 162,
    'catchRate': 75,
    'base': {
        'hitpoints': 114,
        'attack': 85,
        'specialAttack': 85,
        'defense': 70,
        'specialDefense': 80,
        'speed': 30,
    },
}, {
    'id': 592,
    'name': 'Frillish',
    'type': [PokemonType.Water, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Frillish', 'Jellicent', 40)],
    'base': {
        'hitpoints': 55,
        'attack': 40,
        'specialAttack': 65,
        'defense': 50,
        'specialDefense': 85,
        'speed': 40,
    },
}, {
    'id': 593,
    'name': 'Jellicent',
    'type': [PokemonType.Water, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 60,
    'base': {
        'hitpoints': 100,
        'attack': 60,
        'specialAttack': 85,
        'defense': 70,
        'specialDefense': 105,
        'speed': 60,
    },
}, {
    'id': 594,
    'name': 'Alomomola',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': 4,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 165,
        'attack': 75,
        'specialAttack': 40,
        'defense': 80,
        'specialDefense': 45,
        'speed': 65,
    },
}, {
    'id': 595,
    'name': 'Joltik',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Joltik', 'Galvantula', 36)],
    'base': {
        'hitpoints': 50,
        'attack': 47,
        'specialAttack': 57,
        'defense': 50,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 596,
    'name': 'Galvantula',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 77,
        'specialAttack': 97,
        'defense': 60,
        'specialDefense': 60,
        'speed': 108,
    },
}, {
    'id': 597,
    'name': 'Ferroseed',
    'type': [PokemonType.Grass, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Ferroseed', 'Ferrothorn', 40)],
    'base': {
        'hitpoints': 44,
        'attack': 50,
        'specialAttack': 24,
        'defense': 91,
        'specialDefense': 86,
        'speed': 10,
    },
}, {
    'id': 598,
    'name': 'Ferrothorn',
    'type': [PokemonType.Grass, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 171,
    'catchRate': 90,
    'base': {
        'hitpoints': 74,
        'attack': 94,
        'specialAttack': 54,
        'defense': 131,
        'specialDefense': 116,
        'speed': 20,
    },
}, {
    'id': 599,
    'name': 'Klink',
    'type': [PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'catchRate': 130,
    'evolutions': [new LevelEvolution('Klink', 'Klang', 38)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 45,
        'defense': 70,
        'specialDefense': 60,
        'speed': 30,
    },
}, {
    'id': 600,
    'name': 'Klang',
    'type': [PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 60,
    'evolutions': [new LevelEvolution('Klang', 'Klinklang', 49)],
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 70,
        'defense': 95,
        'specialDefense': 85,
        'speed': 50,
    },
}, {
    'id': 601,
    'name': 'Klinklang',
    'type': [PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 234,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 70,
        'defense': 115,
        'specialDefense': 85,
        'speed': 90,
    },
}, {
    'id': 602,
    'name': 'Tynamo',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 55,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Tynamo', 'Eelektrik', 39)],
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 45,
        'defense': 40,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 603,
    'name': 'Eelektrik',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 142,
    'catchRate': 60,
    'evolutions': [new StoneEvolution('Eelektrik', 'Eelektross', GameConstants.StoneType.Thunder_stone)],
    'base': {
        'hitpoints': 65,
        'attack': 85,
        'specialAttack': 75,
        'defense': 70,
        'specialDefense': 70,
        'speed': 40,
    },
}, {
    'id': 604,
    'name': 'Eelektross',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 232,
    'catchRate': 30,
    'base': {
        'hitpoints': 85,
        'attack': 115,
        'specialAttack': 105,
        'defense': 80,
        'specialDefense': 80,
        'speed': 50,
    },
}, {
    'id': 605,
    'name': 'Elgyem',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Elgyem', 'Beheeyem', 42)],
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 85,
        'defense': 55,
        'specialDefense': 55,
        'speed': 30,
    },
}, {
    'id': 606,
    'name': 'Beheeyem',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 90,
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 125,
        'defense': 75,
        'specialDefense': 95,
        'speed': 40,
    },
}, {
    'id': 607,
    'name': 'Litwick',
    'type': [PokemonType.Ghost, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Litwick', 'Lampent', 41)],
    'base': {
        'hitpoints': 50,
        'attack': 30,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 55,
        'speed': 20,
    },
}, {
    'id': 608,
    'name': 'Lampent',
    'type': [PokemonType.Ghost, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 130,
    'catchRate': 90,
    'evolutions': [new StoneEvolution('Lampent', 'Chandelure', GameConstants.StoneType.Dusk_stone)],
    'base': {
        'hitpoints': 60,
        'attack': 40,
        'specialAttack': 95,
        'defense': 60,
        'specialDefense': 60,
        'speed': 55,
    },
}, {
    'id': 609,
    'name': 'Chandelure',
    'type': [PokemonType.Ghost, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 145,
        'defense': 90,
        'specialDefense': 90,
        'speed': 80,
    },
}, {
    'id': 610,
    'name': 'Axew',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 64,
    'catchRate': 75,
    'evolutions': [new LevelEvolution('Axew', 'Fraxure', 38)],
    'base': {
        'hitpoints': 46,
        'attack': 87,
        'specialAttack': 30,
        'defense': 60,
        'specialDefense': 40,
        'speed': 57,
    },
}, {
    'id': 611,
    'name': 'Fraxure',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 144,
    'catchRate': 60,
    'evolutions': [new LevelEvolution('Fraxure', 'Haxorus', 48)],
    'base': {
        'hitpoints': 66,
        'attack': 117,
        'specialAttack': 40,
        'defense': 70,
        'specialDefense': 50,
        'speed': 67,
    },
}, {
    'id': 612,
    'name': 'Haxorus',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 243,
    'catchRate': 45,
    'base': {
        'hitpoints': 76,
        'attack': 147,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 70,
        'speed': 97,
    },
}, {
    'id': 613,
    'name': 'Cubchoo',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Cubchoo', 'Beartic', 37)],
    'base': {
        'hitpoints': 55,
        'attack': 70,
        'specialAttack': 60,
        'defense': 40,
        'specialDefense': 40,
        'speed': 40,
    },
}, {
    'id': 614,
    'name': 'Beartic',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'catchRate': 60,
    'base': {
        'hitpoints': 95,
        'attack': 130,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 80,
        'speed': 50,
    },
}, {
    'id': 615,
    'name': 'Cryogonal',
    'type': [PokemonType.Ice],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'catchRate': 25,
    'base': {
        'hitpoints': 80,
        'attack': 50,
        'specialAttack': 95,
        'defense': 50,
        'specialDefense': 135,
        'speed': 105,
    },
}, {
    'id': 616,
    'name': 'Shelmet',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 200,
    'evolutions': [new StoneEvolution('Shelmet', 'Accelgor', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 40,
        'specialAttack': 40,
        'defense': 85,
        'specialDefense': 65,
        'speed': 25,
    },
}, {
    'id': 617,
    'name': 'Accelgor',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 70,
        'specialAttack': 100,
        'defense': 40,
        'specialDefense': 60,
        'speed': 145,
    },
}, {
    'id': 618,
    'name': 'Stunfisk',
    'type': [PokemonType.Ground, PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 109,
        'attack': 66,
        'specialAttack': 81,
        'defense': 84,
        'specialDefense': 99,
        'speed': 32,
    },
}, {
    'id': 618.1,
    'name': 'Galarian Stunfisk',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Ground, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 109,
        'attack': 81,
        'specialAttack': 66,
        'defense': 99,
        'specialDefense': 84,
        'speed': 32,
    },
}, {
    'id': 619,
    'name': 'Mienfoo',
    'type': [PokemonType.Fighting],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 70,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Mienfoo', 'Mienshao', 50)],
    'base': {
        'hitpoints': 45,
        'attack': 85,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 620,
    'name': 'Mienshao',
    'type': [PokemonType.Fighting],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 179,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 125,
        'specialAttack': 95,
        'defense': 60,
        'specialDefense': 60,
        'speed': 105,
    },
}, {
    'id': 621,
    'name': 'Druddigon',
    'type': [PokemonType.Dragon],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 45,
    'base': {
        'hitpoints': 77,
        'attack': 120,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 90,
        'speed': 48,
    },
}, {
    'id': 622,
    'name': 'Golett',
    'type': [PokemonType.Ground, PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Golett', 'Golurk', 43)],
    'base': {
        'hitpoints': 59,
        'attack': 74,
        'specialAttack': 35,
        'defense': 50,
        'specialDefense': 50,
        'speed': 35,
    },
}, {
    'id': 623,
    'name': 'Golurk',
    'type': [PokemonType.Ground, PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
    'base': {
        'hitpoints': 89,
        'attack': 124,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 80,
        'speed': 55,
    },
}, {
    'id': 624,
    'name': 'Pawniard',
    'type': [PokemonType.Dark, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Pawniard', 'Bisharp', 52)],
    'base': {
        'hitpoints': 45,
        'attack': 85,
        'specialAttack': 40,
        'defense': 70,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 625,
    'name': 'Bisharp',
    'type': [PokemonType.Dark, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 125,
        'specialAttack': 60,
        'defense': 100,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 626,
    'name': 'Bouffalant',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 110,
        'specialAttack': 40,
        'defense': 95,
        'specialDefense': 95,
        'speed': 55,
    },
}, {
    'id': 627,
    'name': 'Rufflet',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 70,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Rufflet', 'Braviary', 54)],
    'base': {
        'hitpoints': 70,
        'attack': 83,
        'specialAttack': 37,
        'defense': 50,
        'specialDefense': 50,
        'speed': 60,
    },
}, {
    'id': 628,
    'name': 'Braviary',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 179,
    'catchRate': 60,
    'base': {
        'hitpoints': 100,
        'attack': 123,
        'specialAttack': 57,
        'defense': 75,
        'specialDefense': 75,
        'speed': 80,
    },
}, {
    'id': 629,
    'name': 'Vullaby',
    'type': [PokemonType.Dark, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 74,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Vullaby', 'Mandibuzz', 54)],
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 45,
        'defense': 75,
        'specialDefense': 65,
        'speed': 60,
    },
}, {
    'id': 630,
    'name': 'Mandibuzz',
    'type': [PokemonType.Dark, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 179,
    'catchRate': 60,
    'base': {
        'hitpoints': 110,
        'attack': 65,
        'specialAttack': 55,
        'defense': 105,
        'specialDefense': 95,
        'speed': 80,
    },
}, {
    'id': 631,
    'name': 'Heatmor',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
    'base': {
        'hitpoints': 85,
        'attack': 97,
        'specialAttack': 105,
        'defense': 66,
        'specialDefense': 66,
        'speed': 65,
    },
}, {
    'id': 632,
    'name': 'Durant',
    'type': [PokemonType.Bug, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
    'base': {
        'hitpoints': 58,
        'attack': 109,
        'specialAttack': 48,
        'defense': 112,
        'specialDefense': 48,
        'speed': 109,
    },
}, {
    'id': 633,
    'name': 'Deino',
    'type': [PokemonType.Dark, PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Deino', 'Zweilous', 50)],
    'base': {
        'hitpoints': 52,
        'attack': 65,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 50,
        'speed': 38,
    },
}, {
    'id': 634,
    'name': 'Zweilous',
    'type': [PokemonType.Dark, PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Zweilous', 'Hydreigon', 64)],
    'base': {
        'hitpoints': 72,
        'attack': 85,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 70,
        'speed': 58,
    },
}, {
    'id': 635,
    'name': 'Hydreigon',
    'type': [PokemonType.Dark, PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 92,
        'attack': 105,
        'specialAttack': 125,
        'defense': 90,
        'specialDefense': 90,
        'speed': 98,
    },
}, {
    'id': 636,
    'name': 'Larvesta',
    'type': [PokemonType.Bug, PokemonType.Fire],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 72,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Larvesta', 'Volcarona', 59)],
    'baby': true,
    'base': {
        'hitpoints': 55,
        'attack': 85,
        'specialAttack': 50,
        'defense': 55,
        'specialDefense': 55,
        'speed': 60,
    },
}, {
    'id': 637,
    'name': 'Volcarona',
    'type': [PokemonType.Bug, PokemonType.Fire],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 248,
    'catchRate': 15,
    'base': {
        'hitpoints': 85,
        'attack': 60,
        'specialAttack': 135,
        'defense': 65,
        'specialDefense': 105,
        'speed': 100,
    },
}, {
    'id': 638,
    'name': 'Cobalion',
    'type': [PokemonType.Steel, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 90,
        'specialAttack': 90,
        'defense': 129,
        'specialDefense': 72,
        'speed': 108,
    },
}, {
    'id': 639,
    'name': 'Terrakion',
    'type': [PokemonType.Rock, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 129,
        'specialAttack': 72,
        'defense': 90,
        'specialDefense': 90,
        'speed': 108,
    },
}, {
    'id': 640,
    'name': 'Virizion',
    'type': [PokemonType.Grass, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 90,
        'specialAttack': 90,
        'defense': 72,
        'specialDefense': 129,
        'speed': 108,
    },
}, {
    'id': 641,
    'name': 'Tornadus',
    'type': [PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 79,
        'attack': 115,
        'specialAttack': 125,
        'defense': 70,
        'specialDefense': 80,
        'speed': 111,
    },
}, {
    'id': 641.1,
    'name': 'Tornadus (Therian)',
    'type': [PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 79,
        'attack': 100,
        'specialAttack': 110,
        'defense': 80,
        'specialDefense': 90,
        'speed': 121,
    },
}, {
    'id': 642,
    'name': 'Thundurus',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 79,
        'attack': 115,
        'specialAttack': 125,
        'defense': 70,
        'specialDefense': 80,
        'speed': 111,
    },
}, {
    'id': 642.1,
    'name': 'Thundurus (Therian)',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 79,
        'attack': 105,
        'specialAttack': 145,
        'defense': 70,
        'specialDefense': 80,
        'speed': 101,
    },
}, {
    'id': 643,
    'name': 'Reshiram',
    'type': [PokemonType.Dragon, PokemonType.Fire],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 120,
        'specialAttack': 150,
        'defense': 100,
        'specialDefense': 120,
        'speed': 90,
    },
}, {
    'id': 644,
    'name': 'Zekrom',
    'type': [PokemonType.Dragon, PokemonType.Electric],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 150,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 100,
        'speed': 90,
    },
}, {
    'id': 645,
    'name': 'Landorus',
    'type': [PokemonType.Ground, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 89,
        'attack': 125,
        'specialAttack': 115,
        'defense': 90,
        'specialDefense': 80,
        'speed': 101,
    },
}, {
    'id': 645.1,
    'name': 'Landorus (Therian)',
    'type': [PokemonType.Ground, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 89,
        'attack': 145,
        'specialAttack': 105,
        'defense': 90,
        'specialDefense': 80,
        'speed': 91,
    },
}, {
    'id': 646,
    'name': 'Kyurem',
    'type': [PokemonType.Dragon, PokemonType.Ice],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 297,
    'catchRate': 3,
    'base': {
        'hitpoints': 125,
        'attack': 130,
        'specialAttack': 130,
        'defense': 90,
        'specialDefense': 90,
        'speed': 95,
    },
}, {
    'id': 646.1,
    'name': 'Kyurem (White)',
    'type': [PokemonType.Dragon, PokemonType.Ice],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 297,
    'catchRate': 3,
    'base': {
        'hitpoints': 125,
        'attack': 120,
        'specialAttack': 170,
        'defense': 90,
        'specialDefense': 100,
        'speed': 95,
    },
}, {
    'id': 646.2,
    'name': 'Kyurem (Black)',
    'type': [PokemonType.Dragon, PokemonType.Ice],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 297,
    'catchRate': 3,
    'base': {
        'hitpoints': 125,
        'attack': 170,
        'specialAttack': 120,
        'defense': 100,
        'specialDefense': 90,
        'speed': 95,
    },
}, {
    'id': 647,
    'name': 'Keldeo',
    'type': [PokemonType.Water, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 72,
        'specialAttack': 129,
        'defense': 90,
        'specialDefense': 90,
        'speed': 108,
    },
}, {
    'id': 647.1,
    'name': 'Keldeo (Resolute)',
    'type': [PokemonType.Water, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 72,
        'specialAttack': 129,
        'defense': 90,
        'specialDefense': 90,
        'speed': 108,
    },
}, {
    'id': 648,
    'name': 'Meloetta (aria)',
    'type': [PokemonType.Normal, PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 77,
        'specialAttack': 128,
        'defense': 77,
        'specialDefense': 128,
        'speed': 90,
    },
    'heldItem': { type: ItemType.underground, id: 'Star Piece' },
}, {
    'id': 648.1,
    'name': 'Meloetta (pirouette)',
    'type': [PokemonType.Normal, PokemonType.Fighting],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 128,
        'specialAttack': 77,
        'defense': 90,
        'specialDefense': 77,
        'speed': 128,
    },
}, {
    'id': 649,
    'name': 'Genesect',
    'type': [PokemonType.Bug, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 71,
        'attack': 120,
        'specialAttack': 120,
        'defense': 95,
        'specialDefense': 95,
        'speed': 99,
    },
}, {
    'id': 650,
    'name': 'Chespin',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Chespin', 'Quilladin', 16)],
    'base': {
        'hitpoints': 56,
        'attack': 61,
        'specialAttack': 48,
        'defense': 65,
        'specialDefense': 45,
        'speed': 38,
    },
}, {
    'id': 651,
    'name': 'Quilladin',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Quilladin', 'Chesnaught', 36)],
    'base': {
        'hitpoints': 61,
        'attack': 78,
        'specialAttack': 56,
        'defense': 95,
        'specialDefense': 58,
        'speed': 57,
    },
}, {
    'id': 652,
    'name': 'Chesnaught',
    'type': [PokemonType.Grass, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 88,
        'attack': 107,
        'specialAttack': 74,
        'defense': 122,
        'specialDefense': 75,
        'speed': 64,
    },
}, {
    'id': 653,
    'name': 'Fennekin',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 61,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Fennekin', 'Braixen', 16)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 62,
        'defense': 40,
        'specialDefense': 60,
        'speed': 60,
    },
}, {
    'id': 654,
    'name': 'Braixen',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 143,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Braixen', 'Delphox', 36)],
    'base': {
        'hitpoints': 59,
        'attack': 59,
        'specialAttack': 90,
        'defense': 58,
        'specialDefense': 70,
        'speed': 73,
    },
}, {
    'id': 655,
    'name': 'Delphox',
    'type': [PokemonType.Fire, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 69,
        'specialAttack': 114,
        'defense': 72,
        'specialDefense': 100,
        'speed': 104,
    },
}, {
    'id': 656,
    'name': 'Froakie',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Froakie', 'Frogadier', 16)],
    'base': {
        'hitpoints': 41,
        'attack': 56,
        'specialAttack': 62,
        'defense': 40,
        'specialDefense': 44,
        'speed': 71,
    },
}, {
    'id': 657,
    'name': 'Frogadier',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Frogadier', 'Greninja', 36)],
    'base': {
        'hitpoints': 54,
        'attack': 63,
        'specialAttack': 83,
        'defense': 52,
        'specialDefense': 56,
        'speed': 97,
    },
}, {
    'id': 658,
    'name': 'Greninja',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 95,
        'specialAttack': 103,
        'defense': 67,
        'specialDefense': 71,
        'speed': 122,
    },
}, {
    'id': 659,
    'name': 'Bunnelby',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 47,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Bunnelby', 'Diggersby', 20)],
    'base': {
        'hitpoints': 38,
        'attack': 36,
        'specialAttack': 32,
        'defense': 38,
        'specialDefense': 36,
        'speed': 57,
    },
}, {
    'id': 660,
    'name': 'Diggersby',
    'type': [PokemonType.Normal, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 127,
    'base': {
        'hitpoints': 85,
        'attack': 56,
        'specialAttack': 50,
        'defense': 77,
        'specialDefense': 77,
        'speed': 78,
    },
}, {
    'id': 661,
    'name': 'Fletchling',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Fletchling', 'Fletchinder', 17)],
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 40,
        'defense': 43,
        'specialDefense': 38,
        'speed': 62,
    },
}, {
    'id': 662,
    'name': 'Fletchinder',
    'type': [PokemonType.Fire, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 134,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Fletchinder', 'Talonflame', 35)],
    'base': {
        'hitpoints': 62,
        'attack': 73,
        'specialAttack': 56,
        'defense': 55,
        'specialDefense': 52,
        'speed': 84,
    },
}, {
    'id': 663,
    'name': 'Talonflame',
    'type': [PokemonType.Fire, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 175,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 81,
        'specialAttack': 74,
        'defense': 71,
        'specialDefense': 69,
        'speed': 126,
    },
}, {
    'id': 664,
    'name': 'Scatterbug',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 40,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Scatterbug', 'Spewpa', 9)],
    'base': {
        'hitpoints': 38,
        'attack': 35,
        'specialAttack': 27,
        'defense': 40,
        'specialDefense': 25,
        'speed': 35,
    },
}, {
    'id': 665,
    'name': 'Spewpa',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 75,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Spewpa', 'Vivillon', 12)],
    'base': {
        'hitpoints': 45,
        'attack': 22,
        'specialAttack': 27,
        'defense': 60,
        'specialDefense': 30,
        'speed': 29,
    },
}, {
    'id': 666,
    'name': 'Vivillon',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 667,
    'name': 'Litleo',
    'type': [PokemonType.Fire, PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 74,
    'catchRate': 220,
    'evolutions': [new LevelEvolution('Litleo', 'Pyroar', 35)],
    'base': {
        'hitpoints': 62,
        'attack': 50,
        'specialAttack': 73,
        'defense': 58,
        'specialDefense': 54,
        'speed': 72,
    },
}, {
    'id': 668,
    'name': 'Pyroar',
    'type': [PokemonType.Fire, PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 177,
    'catchRate': 65,
    'base': {
        'hitpoints': 86,
        'attack': 68,
        'specialAttack': 109,
        'defense': 72,
        'specialDefense': 66,
        'speed': 106,
    },
}, {
    'id': 669,
    'name': 'Flabébé (Red)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (Red)', 'Floette (Red)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
}, {
    'id': 669.01,
    'name': 'Flabébé (Yellow)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (Yellow)', 'Floette (Yellow)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
}, {
    'id': 669.02,
    'name': 'Flabébé (Blue)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (Blue)', 'Floette (Blue)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
}, {
    'id': 669.03,
    'name': 'Flabébé (Orange)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (Orange)', 'Floette (Orange)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
}, {
    'id': 669.04,
    'name': 'Flabébé (White)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (White)', 'Floette (White)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
}, {
    'id': 670,
    'name': 'Floette (Red)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (Red)', 'Florges (Red)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
}, {
    'id': 670.01,
    'name': 'Floette (Yellow)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (Yellow)', 'Florges (Yellow)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
}, {
    'id': 670.02,
    'name': 'Floette (Blue)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (Blue)', 'Florges (Blue)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
}, {
    'id': 670.03,
    'name': 'Floette (Orange)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (Orange)', 'Florges (Orange)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
}, {
    'id': 670.04,
    'name': 'Floette (White)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (White)', 'Florges (White)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
}, {
    'id': 670.05,
    'name': 'Floette (Eternal)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
}, {
    'id': 671,
    'name': 'Florges (Red)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
}, {
    'id': 671.01,
    'name': 'Florges (Yellow)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
}, {
    'id': 671.02,
    'name': 'Florges (Blue)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
}, {
    'id': 671.03,
    'name': 'Florges (Orange)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
}, {
    'id': 671.04,
    'name': 'Florges (White)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
}, {
    'id': 672,
    'name': 'Skiddo',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 70,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Skiddo', 'Gogoat', 32)],
    'base': {
        'hitpoints': 66,
        'attack': 65,
        'specialAttack': 62,
        'defense': 48,
        'specialDefense': 57,
        'speed': 52,
    },
}, {
    'id': 673,
    'name': 'Gogoat',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 186,
    'catchRate': 45,
    'base': {
        'hitpoints': 123,
        'attack': 100,
        'specialAttack': 97,
        'defense': 62,
        'specialDefense': 81,
        'speed': 68,
    },
}, {
    'id': 674,
    'name': 'Pancham',
    'type': [PokemonType.Fighting],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 70,
    'catchRate': 220,
    'evolutions': [new LevelEvolution('Pancham', 'Pangoro', 32)],
    'base': {
        'hitpoints': 67,
        'attack': 82,
        'specialAttack': 46,
        'defense': 62,
        'specialDefense': 48,
        'speed': 43,
    },
}, {
    'id': 675,
    'name': 'Pangoro',
    'type': [PokemonType.Fighting, PokemonType.Dark],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 65,
    'base': {
        'hitpoints': 95,
        'attack': 124,
        'specialAttack': 69,
        'defense': 78,
        'specialDefense': 71,
        'speed': 58,
    },
}, {
    'id': 676,
    'name': 'Furfrou',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 677,
    'name': 'Espurr',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Espurr', 'Meowstic', 25)],
    'base': {
        'hitpoints': 62,
        'attack': 48,
        'specialAttack': 63,
        'defense': 54,
        'specialDefense': 60,
        'speed': 68,
    },
}, {
    'id': 678,
    'name': 'Meowstic',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'catchRate': 75,
    'base': {
        'hitpoints': 74,
        'attack': 48,
        'specialAttack': 83,
        'defense': 76,
        'specialDefense': 81,
        'speed': 104,
    },
}, {
    'id': 679,
    'name': 'Honedge',
    'type': [PokemonType.Steel, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Honedge', 'Doublade', 35)],
    'base': {
        'hitpoints': 45,
        'attack': 80,
        'specialAttack': 35,
        'defense': 100,
        'specialDefense': 37,
        'speed': 28,
    },
}, {
    'id': 680,
    'name': 'Doublade',
    'type': [PokemonType.Steel, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 157,
    'catchRate': 90,
    'evolutions': [new StoneEvolution('Doublade', 'Aegislash', GameConstants.StoneType.Dusk_stone)],
    'base': {
        'hitpoints': 59,
        'attack': 110,
        'specialAttack': 45,
        'defense': 150,
        'specialDefense': 49,
        'speed': 35,
    },
}, {
    'id': 681,
    'name': 'Aegislash',
    'type': [PokemonType.Steel, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 50,
        'defense': 140,
        'specialDefense': 140,
        'speed': 60,
    },
}, {
    'id': 682,
    'name': 'Spritzee',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 200,
    'evolutions': [new StoneEvolution('Spritzee', 'Aromatisse', GameConstants.StoneType.Sachet)],
    'base': {
        'hitpoints': 78,
        'attack': 52,
        'specialAttack': 63,
        'defense': 60,
        'specialDefense': 65,
        'speed': 23,
    },
}, {
    'id': 683,
    'name': 'Aromatisse',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 162,
    'catchRate': 140,
    'base': {
        'hitpoints': 101,
        'attack': 72,
        'specialAttack': 99,
        'defense': 72,
        'specialDefense': 89,
        'speed': 29,
    },
}, {
    'id': 684,
    'name': 'Swirlix',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 200,
    'evolutions': [new StoneEvolution('Swirlix', 'Slurpuff', GameConstants.StoneType.Whipped_dream)],
    'base': {
        'hitpoints': 62,
        'attack': 48,
        'specialAttack': 59,
        'defense': 66,
        'specialDefense': 57,
        'speed': 49,
    },
}, {
    'id': 685,
    'name': 'Slurpuff',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 140,
    'base': {
        'hitpoints': 82,
        'attack': 80,
        'specialAttack': 85,
        'defense': 86,
        'specialDefense': 75,
        'speed': 72,
    },
}, {
    'id': 686,
    'name': 'Inkay',
    'type': [PokemonType.Dark, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Inkay', 'Malamar', 30)],
    'base': {
        'hitpoints': 53,
        'attack': 54,
        'specialAttack': 37,
        'defense': 53,
        'specialDefense': 46,
        'speed': 45,
    },
}, {
    'id': 687,
    'name': 'Malamar',
    'type': [PokemonType.Dark, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 80,
    'base': {
        'hitpoints': 86,
        'attack': 92,
        'specialAttack': 68,
        'defense': 88,
        'specialDefense': 75,
        'speed': 73,
    },
}, {
    'id': 688,
    'name': 'Binacle',
    'type': [PokemonType.Rock, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Binacle', 'Barbaracle', 39)],
    'base': {
        'hitpoints': 42,
        'attack': 52,
        'specialAttack': 39,
        'defense': 67,
        'specialDefense': 56,
        'speed': 50,
    },
}, {
    'id': 689,
    'name': 'Barbaracle',
    'type': [PokemonType.Rock, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 105,
        'specialAttack': 54,
        'defense': 115,
        'specialDefense': 86,
        'speed': 68,
    },
}, {
    'id': 690,
    'name': 'Skrelp',
    'type': [PokemonType.Poison, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Skrelp', 'Dragalge', 48)],
    'base': {
        'hitpoints': 50,
        'attack': 60,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 60,
        'speed': 30,
    },
}, {
    'id': 691,
    'name': 'Dragalge',
    'type': [PokemonType.Poison, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 55,
    'base': {
        'hitpoints': 65,
        'attack': 75,
        'specialAttack': 97,
        'defense': 90,
        'specialDefense': 123,
        'speed': 44,
    },
}, {
    'id': 692,
    'name': 'Clauncher',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 66,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Clauncher', 'Clawitzer', 37)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 58,
        'defense': 62,
        'specialDefense': 63,
        'speed': 44,
    },
}, {
    'id': 693,
    'name': 'Clawitzer',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 100,
    'catchRate': 55,
    'base': {
        'hitpoints': 71,
        'attack': 73,
        'specialAttack': 120,
        'defense': 88,
        'specialDefense': 89,
        'speed': 59,
    },
}, {
    'id': 694,
    'name': 'Helioptile',
    'type': [PokemonType.Electric, PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Helioptile', 'Heliolisk', GameConstants.StoneType.Sun_stone)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 33,
        'specialDefense': 43,
        'speed': 70,
    },
}, {
    'id': 695,
    'name': 'Heliolisk',
    'type': [PokemonType.Electric, PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 62,
        'attack': 55,
        'specialAttack': 109,
        'defense': 52,
        'specialDefense': 94,
        'speed': 109,
    },
}, {
    'id': 696,
    'name': 'Tyrunt',
    'type': [PokemonType.Rock, PokemonType.Dragon],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Tyrunt', 'Tyrantrum', 39)],
    'base': {
        'hitpoints': 58,
        'attack': 89,
        'specialAttack': 45,
        'defense': 77,
        'specialDefense': 45,
        'speed': 48,
    },
}, {
    'id': 697,
    'name': 'Tyrantrum',
    'type': [PokemonType.Rock, PokemonType.Dragon],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 82,
        'attack': 121,
        'specialAttack': 69,
        'defense': 119,
        'specialDefense': 59,
        'speed': 71,
    },
}, {
    'id': 698,
    'name': 'Amaura',
    'type': [PokemonType.Rock, PokemonType.Ice],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Amaura', 'Aurorus', 39)],
    'base': {
        'hitpoints': 77,
        'attack': 59,
        'specialAttack': 67,
        'defense': 50,
        'specialDefense': 63,
        'speed': 46,
    },
}, {
    'id': 699,
    'name': 'Aurorus',
    'type': [PokemonType.Rock, PokemonType.Ice],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 104,
    'catchRate': 45,
    'base': {
        'hitpoints': 123,
        'attack': 77,
        'specialAttack': 99,
        'defense': 72,
        'specialDefense': 92,
        'speed': 58,
    },
}, {
    'id': 700,
    'name': 'Sylveon',
    'type': [PokemonType.Fairy],
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 65,
        'specialAttack': 110,
        'defense': 65,
        'specialDefense': 130,
        'speed': 60,
    },
}, {
    'id': 701,
    'name': 'Hawlucha',
    'type': [PokemonType.Fighting, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 100,
    'base': {
        'hitpoints': 78,
        'attack': 92,
        'specialAttack': 74,
        'defense': 75,
        'specialDefense': 63,
        'speed': 118,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 702,
    'name': 'Dedenne',
    'type': [PokemonType.Electric, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 151,
    'catchRate': 180,
    'base': {
        'hitpoints': 67,
        'attack': 58,
        'specialAttack': 81,
        'defense': 57,
        'specialDefense': 67,
        'speed': 101,
    },
}, {
    'id': 703,
    'name': 'Carbink',
    'type': [PokemonType.Rock, PokemonType.Fairy],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 100,
    'catchRate': 60,
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 50,
        'defense': 150,
        'specialDefense': 150,
        'speed': 50,
    },
}, {
    'id': 704,
    'name': 'Goomy',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Goomy', 'Sliggoo', 40)],
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 55,
        'defense': 35,
        'specialDefense': 75,
        'speed': 40,
    },
}, {
    'id': 705,
    'name': 'Sliggoo',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 158,
    'catchRate': 45,
    'evolutions': [new WeatherRestrictedLevelEvolution('Sliggoo', 'Goodra', 50, [WeatherType.Rain, WeatherType.Fog])],
    'base': {
        'hitpoints': 68,
        'attack': 75,
        'specialAttack': 83,
        'defense': 53,
        'specialDefense': 113,
        'speed': 60,
    },
}, {
    'id': 706,
    'name': 'Goodra',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 110,
        'defense': 70,
        'specialDefense': 150,
        'speed': 80,
    },
}, {
    'id': 707,
    'name': 'Klefki',
    'type': [PokemonType.Steel, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': 4,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 57,
        'attack': 80,
        'specialAttack': 80,
        'defense': 91,
        'specialDefense': 87,
        'speed': 75,
    },
}, {
    'id': 708,
    'name': 'Phantump',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 62,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Phantump', 'Trevenant', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 43,
        'attack': 70,
        'specialAttack': 50,
        'defense': 48,
        'specialDefense': 60,
        'speed': 38,
    },
}, {
    'id': 709,
    'name': 'Trevenant',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 60,
    'base': {
        'hitpoints': 85,
        'attack': 110,
        'specialAttack': 65,
        'defense': 76,
        'specialDefense': 82,
        'speed': 56,
    },
}, {
    'id': 710,
    'name': 'Pumpkaboo',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Pumpkaboo', 'Gourgeist', GameConstants.StoneType.Trade_stone)],
    'base': {
        'hitpoints': 44,
        'attack': 66,
        'specialAttack': 44,
        'defense': 70,
        'specialDefense': 55,
        'speed': 56,
    },
}, {
    'id': 711,
    'name': 'Gourgeist',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 60,
    'base': {
        'hitpoints': 55,
        'attack': 85,
        'specialAttack': 58,
        'defense': 122,
        'specialDefense': 75,
        'speed': 99,
    },
}, {
    'id': 712,
    'name': 'Bergmite',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Bergmite', 'Avalugg', 37)],
    'base': {
        'hitpoints': 55,
        'attack': 69,
        'specialAttack': 32,
        'defense': 85,
        'specialDefense': 35,
        'speed': 28,
    },
}, {
    'id': 713,
    'name': 'Avalugg',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'catchRate': 55,
    'base': {
        'hitpoints': 95,
        'attack': 117,
        'specialAttack': 44,
        'defense': 184,
        'specialDefense': 46,
        'speed': 28,
    },
}, {
    'id': 714,
    'name': 'Noibat',
    'type': [PokemonType.Flying, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 49,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Noibat', 'Noivern', 48)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 45,
        'defense': 35,
        'specialDefense': 40,
        'speed': 55,
    },
}, {
    'id': 715,
    'name': 'Noivern',
    'type': [PokemonType.Flying, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 187,
    'catchRate': 45,
    'base': {
        'hitpoints': 85,
        'attack': 70,
        'specialAttack': 97,
        'defense': 80,
        'specialDefense': 80,
        'speed': 123,
    },
}, {
    'id': 716,
    'name': 'Xerneas',
    'type': [PokemonType.Fairy],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 45,
    'base': {
        'hitpoints': 126,
        'attack': 131,
        'specialAttack': 131,
        'defense': 95,
        'specialDefense': 98,
        'speed': 99,
    },
}, {
    'id': 717,
    'name': 'Yveltal',
    'type': [PokemonType.Dark, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 45,
    'base': {
        'hitpoints': 126,
        'attack': 131,
        'specialAttack': 131,
        'defense': 95,
        'specialDefense': 98,
        'speed': 99,
    },
}, {
    'id': 718,
    'name': 'Zygarde',
    'type': [PokemonType.Dragon, PokemonType.Ground],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 108,
        'attack': 100,
        'specialAttack': 81,
        'defense': 121,
        'specialDefense': 95,
        'speed': 95,
    },
}, {
    'id': 719,
    'name': 'Diancie',
    'type': [PokemonType.Rock, PokemonType.Fairy],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 100,
        'specialAttack': 100,
        'defense': 150,
        'specialDefense': 150,
        'speed': 50,
    },
}, {
    'id': 720,
    'name': 'Hoopa',
    'type': [PokemonType.Psychic, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 110,
        'specialAttack': 150,
        'defense': 60,
        'specialDefense': 130,
        'speed': 70,
    },
}, {
    'id': 721,
    'name': 'Volcanion',
    'type': [PokemonType.Fire, PokemonType.Water],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 110,
        'specialAttack': 130,
        'defense': 120,
        'specialDefense': 90,
        'speed': 70,
    },
}, {
    'id': 722,
    'name': 'Rowlet',
    'type': [PokemonType.Grass, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Rowlet', 'Dartrix', 17)],
    'base': {
        'hitpoints': 68,
        'attack': 55,
        'specialAttack': 50,
        'defense': 55,
        'specialDefense': 50,
        'speed': 42,
    },
}, {
    'id': 723,
    'name': 'Dartrix',
    'type': [PokemonType.Grass, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Dartrix', 'Decidueye', 34)],
    'base': {
        'hitpoints': 78,
        'attack': 75,
        'specialAttack': 70,
        'defense': 75,
        'specialDefense': 70,
        'speed': 52,
    },
}, {
    'id': 724,
    'name': 'Decidueye',
    'type': [PokemonType.Grass, PokemonType.Ghost],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 107,
        'specialAttack': 100,
        'defense': 75,
        'specialDefense': 100,
        'speed': 70,
    },
}, {
    'id': 725,
    'name': 'Litten',
    'type': [PokemonType.Fire],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Litten', 'Torracat', 17)],
    'base': {
        'hitpoints': 45,
        'attack': 65,
        'specialAttack': 60,
        'defense': 40,
        'specialDefense': 40,
        'speed': 70,
    },
}, {
    'id': 726,
    'name': 'Torracat',
    'type': [PokemonType.Fire],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Torracat', 'Incineroar', 34)],
    'base': {
        'hitpoints': 65,
        'attack': 85,
        'specialAttack': 80,
        'defense': 50,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 727,
    'name': 'Incineroar',
    'type': [PokemonType.Fire, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 115,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 90,
        'speed': 60,
    },
}, {
    'id': 728,
    'name': 'Popplio',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Popplio', 'Brionne', 17)],
    'base': {
        'hitpoints': 50,
        'attack': 54,
        'specialAttack': 66,
        'defense': 54,
        'specialDefense': 56,
        'speed': 40,
    },
}, {
    'id': 729,
    'name': 'Brionne',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Brionne', 'Primarina', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 69,
        'specialAttack': 91,
        'defense': 69,
        'specialDefense': 81,
        'speed': 50,
    },
}, {
    'id': 730,
    'name': 'Primarina',
    'type': [PokemonType.Water, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 74,
        'specialAttack': 126,
        'defense': 74,
        'specialDefense': 116,
        'speed': 60,
    },
}, {
    'id': 731,
    'name': 'Pikipek',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Pikipek', 'Trumbeak', 14)],
    'base': {
        'hitpoints': 35,
        'attack': 75,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 65,
    },
}, {
    'id': 732,
    'name': 'Trumbeak',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 124,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Trumbeak', 'Toucannon', 28)],
    'base': {
        'hitpoints': 55,
        'attack': 85,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 733,
    'name': 'Toucannon',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 218,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 75,
        'defense': 75,
        'specialDefense': 75,
        'speed': 60,
    },
}, {
    'id': 734,
    'name': 'Yungoos',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Yungoos', 'Gumshoos', 20)],
    'base': {
        'hitpoints': 48,
        'attack': 70,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 45,
    },
}, {
    'id': 735,
    'name': 'Gumshoos',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 146,
    'catchRate': 127,
    'base': {
        'hitpoints': 88,
        'attack': 110,
        'specialAttack': 55,
        'defense': 60,
        'specialDefense': 60,
        'speed': 45,
    },
}, {
    'id': 735.01,
    'name': 'Totem Gumshoos',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 146,
    'catchRate': 127,
    'base': {
        'hitpoints': 88,
        'attack': 110,
        'specialAttack': 55,
        'defense': 70,
        'specialDefense': 60,
        'speed': 45,
    },
}, {
    'id': 736,
    'name': 'Grubbin',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Grubbin', 'Charjabug', 20)],
    'base': {
        'hitpoints': 47,
        'attack': 62,
        'specialAttack': 55,
        'defense': 45,
        'specialDefense': 45,
        'speed': 46,
    },
}, {
    'id': 737,
    'name': 'Charjabug',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 140,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Charjabug', 'Vikavolt', GameConstants.StoneType.Thunder_stone)],
    'base': {
        'hitpoints': 57,
        'attack': 82,
        'specialAttack': 55,
        'defense': 95,
        'specialDefense': 75,
        'speed': 36,
    },
}, {
    'id': 738,
    'name': 'Vikavolt',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 225,
    'catchRate': 45,
    'base': {
        'hitpoints': 77,
        'attack': 70,
        'specialAttack': 145,
        'defense': 90,
        'specialDefense': 75,
        'speed': 43,
    },
}, {
    'id': 738.01,
    'name': 'Totem Vikavolt',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 225,
    'catchRate': 45,
    'base': {
        'hitpoints': 77,
        'attack': 80,
        'specialAttack': 155,
        'defense': 100,
        'specialDefense': 85,
        'speed': 53,
    },
}, {
    'id': 739,
    'name': 'Crabrawler',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 225,
    'evolutions': [new StoneEvolution('Crabrawler', 'Crabominable', GameConstants.StoneType.None)],
    'base': {
        'hitpoints': 47,
        'attack': 82,
        'specialAttack': 42,
        'defense': 57,
        'specialDefense': 47,
        'speed': 63,
    },
}, {
    'id': 740,
    'name': 'Crabominable',
    'type': [PokemonType.Fighting, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 60,
    'base': {
        'hitpoints': 97,
        'attack': 132,
        'specialAttack': 62,
        'defense': 77,
        'specialDefense': 67,
        'speed': 43,
    },
}, {
    'id': 741,
    'name': 'Oricorio (Baile)',
    'type': [PokemonType.Fire, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 98,
        'defense': 70,
        'specialDefense': 70,
        'speed': 93,
    },
}, {
    'id': 741.01,
    'name': 'Oricorio (Pom-pom)',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 98,
        'defense': 70,
        'specialDefense': 70,
        'speed': 93,
    },
}, {
    'id': 741.02,
    'name': 'Oricorio (Pa\'u)',
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 98,
        'defense': 70,
        'specialDefense': 70,
        'speed': 93,
    },
}, {
    'id': 741.03,
    'name': 'Oricorio (Sensu)',
    'type': [PokemonType.Ghost, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 98,
        'defense': 70,
        'specialDefense': 70,
        'speed': 93,
    },
}, {
    'id': 742,
    'name': 'Cutiefly',
    'type': [PokemonType.Bug, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Cutiefly', 'Ribombee', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 55,
        'defense': 40,
        'specialDefense': 40,
        'speed': 84,
    },
}, {
    'id': 743,
    'name': 'Ribombee',
    'type': [PokemonType.Bug, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 162,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 95,
        'defense': 60,
        'specialDefense': 70,
        'speed': 124,
    },
}, {
    'id': 744,
    'name': 'Rockruff',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 190,
    'evolutions': [
        TimeRestrictedLevelEvolution(6, 16, 'Rockruff', 'Lycanroc (Midday)', 25),
        TimeRestrictedLevelEvolution(16, 20, 'Rockruff', 'Lycanroc (Dusk)', 25),
        TimeRestrictedLevelEvolution(20, 6, 'Rockruff', 'Lycanroc (Midnight)', 25),
    ],
    'base': {
        'hitpoints': 45,
        'attack': 65,
        'specialAttack': 30,
        'defense': 40,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 745,
    'name': 'Lycanroc (Midday)',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 90,
    'base': {
        'hitpoints': 75,
        'attack': 115,
        'specialAttack': 55,
        'defense': 65,
        'specialDefense': 65,
        'speed': 112,
    },
}, {
    'id': 745.01,
    'name': 'Lycanroc (Midnight)',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 90,
    'base': {
        'hitpoints': 85,
        'attack': 115,
        'specialAttack': 55,
        'defense': 75,
        'specialDefense': 75,
        'speed': 82,
    },
}, {
    'id': 745.02,
    'name': 'Lycanroc (Dusk)',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 90,
    'base': {
        'hitpoints': 75,
        'attack': 117,
        'specialAttack': 55,
        'defense': 65,
        'specialDefense': 65,
        'speed': 110,
    },
}, {
    'id': 746,
    'name': 'Wishiwashi (Solo)',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': 4,
    'exp': 61,
    'catchRate': 60,
    'base': {
        'hitpoints': 45,
        'attack': 20,
        'specialAttack': 25,
        'defense': 20,
        'specialDefense': 25,
        'speed': 40,
    },
}, {
    'id': 746.01,
    'name': 'Wishiwashi (School)',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': 4,
    'exp': 61,
    'catchRate': 60,
    'base': {
        'hitpoints': 45,
        'attack': 140,
        'specialAttack': 140,
        'defense': 130,
        'specialDefense': 135,
        'speed': 30,
    },
}, {
    'id': 746.02,
    'name': 'Totem Wishiwashi (School)',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': 4,
    'exp': 61,
    'catchRate': 60,
    'base': {
        'hitpoints': 45,
        'attack': 140,
        'specialAttack': 140,
        'defense': 140,
        'specialDefense': 135,
        'speed': 30,
    },
}, {
    'id': 747,
    'name': 'Mareanie',
    'type': [PokemonType.Poison, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Mareanie', 'Toxapex', 38)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 43,
        'defense': 62,
        'specialDefense': 52,
        'speed': 45,
    },
}, {
    'id': 748,
    'name': 'Toxapex',
    'type': [PokemonType.Poison, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 75,
    'base': {
        'hitpoints': 50,
        'attack': 63,
        'specialAttack': 53,
        'defense': 152,
        'specialDefense': 142,
        'speed': 35,
    },
}, {
    'id': 749,
    'name': 'Mudbray',
    'type': [PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 77,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Mudbray', 'Mudsdale', 30)],
    'base': {
        'hitpoints': 70,
        'attack': 100,
        'specialAttack': 45,
        'defense': 70,
        'specialDefense': 55,
        'speed': 45,
    },
}, {
    'id': 750,
    'name': 'Mudsdale',
    'type': [PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 60,
    'base': {
        'hitpoints': 100,
        'attack': 125,
        'specialAttack': 55,
        'defense': 100,
        'specialDefense': 85,
        'speed': 35,
    },
}, {
    'id': 751,
    'name': 'Dewpider',
    'type': [PokemonType.Water, PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Dewpider', 'Araquanid', 22)],
    'base': {
        'hitpoints': 38,
        'attack': 40,
        'specialAttack': 40,
        'defense': 52,
        'specialDefense': 72,
        'speed': 27,
    },
}, {
    'id': 752,
    'name': 'Araquanid',
    'type': [PokemonType.Water, PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'catchRate': 100,
    'base': {
        'hitpoints': 68,
        'attack': 70,
        'specialAttack': 50,
        'defense': 92,
        'specialDefense': 132,
        'speed': 42,
    },
}, {
    'id': 752.01,
    'name': 'Totem Araquanid',
    'type': [PokemonType.Water, PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'catchRate': 100,
    'base': {
        'hitpoints': 68,
        'attack': 70,
        'specialAttack': 50,
        'defense': 92,
        'specialDefense': 132,
        'speed': 52,
    },
}, {
    'id': 753,
    'name': 'Fomantis',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 50,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Fomantis', 'Lurantis', 34)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 50,
        'defense': 35,
        'specialDefense': 35,
        'speed': 35,
    },
}, {
    'id': 754,
    'name': 'Lurantis',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 105,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 90,
        'speed': 45,
    },
}, {
    'id': 754.01,
    'name': 'Totem Lurantis',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 105,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 90,
        'speed': 65,
    },
}, {
    'id': 755,
    'name': 'Morelull',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 57,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Morelull', 'Shiinotic', 24)],
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 75,
        'speed': 15,
    },
}, {
    'id': 756,
    'name': 'Shiinotic',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 90,
        'defense': 80,
        'specialDefense': 100,
        'speed': 30,
    },
}, {
    'id': 757,
    'name': 'Salandit',
    'type': [PokemonType.Poison, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Salandit', 'Salazzle', 33)],
    'base': {
        'hitpoints': 48,
        'attack': 44,
        'specialAttack': 71,
        'defense': 40,
        'specialDefense': 40,
        'speed': 77,
    },
}, {
    'id': 758,
    'name': 'Salazzle',
    'type': [PokemonType.Poison, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 45,
    'base': {
        'hitpoints': 68,
        'attack': 64,
        'specialAttack': 111,
        'defense': 60,
        'specialDefense': 60,
        'speed': 117,
    },
}, {
    'id': 758.01,
    'name': 'Totem Salazzle',
    'type': [PokemonType.Poison, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 45,
    'base': {
        'hitpoints': 68,
        'attack': 64,
        'specialAttack': 111,
        'defense': 60,
        'specialDefense': 70,
        'speed': 117,
    },
}, {
    'id': 759,
    'name': 'Stufful',
    'type': [PokemonType.Normal, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 140,
    'evolutions': [new LevelEvolution('Stufful', 'Bewear', 27)],
    'base': {
        'hitpoints': 70,
        'attack': 75,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 50,
        'speed': 50,
    },
}, {
    'id': 760,
    'name': 'Bewear',
    'type': [PokemonType.Normal, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 70,
    'base': {
        'hitpoints': 120,
        'attack': 125,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 60,
        'speed': 60,
    },
}, {
    'id': 761,
    'name': 'Bounsweet',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 42,
    'catchRate': 235,
    'evolutions': [new LevelEvolution('Bounsweet', 'Steenee', 18)],
    'base': {
        'hitpoints': 42,
        'attack': 30,
        'specialAttack': 30,
        'defense': 38,
        'specialDefense': 38,
        'speed': 32,
    },
}, {
    'id': 762,
    'name': 'Steenee',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 102,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Steenee', 'Tsareena', GameConstants.StoneType.None)],
    'base': {
        'hitpoints': 52,
        'attack': 40,
        'specialAttack': 40,
        'defense': 48,
        'specialDefense': 48,
        'speed': 62,
    },
}, {
    'id': 763,
    'name': 'Tsareena',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 230,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 120,
        'specialAttack': 50,
        'defense': 98,
        'specialDefense': 98,
        'speed': 72,
    },
}, {
    'id': 764,
    'name': 'Comfey',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': 4,
    'exp': 170,
    'catchRate': 60,
    'base': {
        'hitpoints': 51,
        'attack': 52,
        'specialAttack': 82,
        'defense': 90,
        'specialDefense': 110,
        'speed': 100,
    },
}, {
    'id': 765,
    'name': 'Oranguru',
    'type': [PokemonType.Normal, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 60,
        'specialAttack': 90,
        'defense': 80,
        'specialDefense': 110,
        'speed': 60,
    },
}, {
    'id': 766,
    'name': 'Passimian',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 100,
        'attack': 120,
        'specialAttack': 40,
        'defense': 90,
        'specialDefense': 60,
        'speed': 80,
    },
}, {
    'id': 767,
    'name': 'Wimpod',
    'type': [PokemonType.Bug, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 46,
    'catchRate': 90,
    'evolutions': [new LevelEvolution('Wimpod', 'Golisopod', 30)],
    'base': {
        'hitpoints': 25,
        'attack': 35,
        'specialAttack': 20,
        'defense': 40,
        'specialDefense': 30,
        'speed': 80,
    },
}, {
    'id': 768,
    'name': 'Golisopod',
    'type': [PokemonType.Bug, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 186,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 125,
        'specialAttack': 60,
        'defense': 140,
        'specialDefense': 90,
        'speed': 40,
    },
}, {
    'id': 769,
    'name': 'Sandygast',
    'type': [PokemonType.Ghost, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'catchRate': 140,
    'evolutions': [new LevelEvolution('Sandygast', 'Palossand', 42)],
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 45,
        'speed': 15,
    },
}, {
    'id': 770,
    'name': 'Palossand',
    'type': [PokemonType.Ghost, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 60,
    'base': {
        'hitpoints': 85,
        'attack': 75,
        'specialAttack': 100,
        'defense': 110,
        'specialDefense': 75,
        'speed': 35,
    },
}, {
    'id': 771,
    'name': 'Pyukumuku',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': 4,
    'exp': 144,
    'catchRate': 60,
    'base': {
        'hitpoints': 55,
        'attack': 60,
        'specialAttack': 30,
        'defense': 130,
        'specialDefense': 130,
        'speed': 5,
    },
}, {
    'id': 772,
    'name': 'Type: Null',
    'type': [PokemonType.Normal],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 107,
    'catchRate': 3,
    'evolutions': [new StoneEvolution('Type: Null', 'Silvally', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 95,
        'attack': 95,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 95,
        'speed': 59,
    },
}, {
    'id': 773,
    'name': 'Silvally',
    'type': [PokemonType.Normal],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 3,
    'base': {
        'hitpoints': 95,
        'attack': 95,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 95,
        'speed': 95,
    },
}, {
    'id': 774,
    'name': 'Minior (Meteor)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 60,
        'defense': 100,
        'specialDefense': 100,
        'speed': 60,
    },
    'heldItem': { type: ItemType.underground, id: 'Star Piece' },
}, {
    'id': 774.01,
    'name': 'Minior (Blue-core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
}, {
    'id': 774.02,
    'name': 'Minior (Green-core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
}, {
    'id': 774.03,
    'name': 'Minior (Indigo-core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
}, {
    'id': 774.04,
    'name': 'Minior (Orange-core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
}, {
    'id': 774.05,
    'name': 'Minior (Red-core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
}, {
    'id': 774.06,
    'name': 'Minior (Violet-core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
}, {
    'id': 774.07,
    'name': 'Minior (Yellow-core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
}, {
    'id': 775,
    'name': 'Komala',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 168,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 115,
        'specialAttack': 75,
        'defense': 65,
        'specialDefense': 95,
        'speed': 65,
    },
}, {
    'id': 776,
    'name': 'Turtonator',
    'type': [PokemonType.Fire, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 70,
    'base': {
        'hitpoints': 60,
        'attack': 78,
        'specialAttack': 91,
        'defense': 135,
        'specialDefense': 85,
        'speed': 36,
    },
}, {
    'id': 777,
    'name': 'Togedemaru',
    'type': [PokemonType.Electric, PokemonType.Steel],
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 152,
    'catchRate': 180,
    'base': {
        'hitpoints': 65,
        'attack': 98,
        'specialAttack': 40,
        'defense': 63,
        'specialDefense': 73,
        'speed': 96,
    },
}, {
    'id': 777.01,
    'name': 'Totem Togedemaru',
    'type': [PokemonType.Electric, PokemonType.Steel],
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 152,
    'catchRate': 180,
    'base': {
        'hitpoints': 65,
        'attack': 98,
        'specialAttack': 40,
        'defense': 83,
        'specialDefense': 73,
        'speed': 96,
    },
}, {
    'id': 778,
    'name': 'Mimikyu',
    'type': [PokemonType.Ghost, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 55,
        'attack': 90,
        'specialAttack': 50,
        'defense': 80,
        'specialDefense': 105,
        'speed': 96,
    },
}, {
    'id': 778.01,
    'name': 'Totem Mimikyu',
    'type': [PokemonType.Ghost, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 55,
        'attack': 100,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 115,
        'speed': 106,
    },
}, {
    'id': 779,
    'name': 'Bruxish',
    'type': [PokemonType.Water, PokemonType.Psychic],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 80,
    'base': {
        'hitpoints': 68,
        'attack': 105,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 92,
    },
    'heldItem': { type: ItemType.item, id: 'Razor_fang' },
}, {
    'id': 780,
    'name': 'Drampa',
    'type': [PokemonType.Normal, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 70,
    'base': {
        'hitpoints': 78,
        'attack': 60,
        'specialAttack': 135,
        'defense': 85,
        'specialDefense': 91,
        'speed': 36,
    },
}, {
    'id': 781,
    'name': 'Dhelmise',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 181,
    'catchRate': 25,
    'base': {
        'hitpoints': 70,
        'attack': 131,
        'specialAttack': 86,
        'defense': 100,
        'specialDefense': 90,
        'speed': 40,
    },
}, {
    'id': 782,
    'name': 'Jangmo-o',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Jangmo-o', 'Hakamo-o', 35)],
    'base': {
        'hitpoints': 45,
        'attack': 55,
        'specialAttack': 45,
        'defense': 65,
        'specialDefense': 45,
        'speed': 45,
    },
    'heldItem': { type: ItemType.item, id: 'Razor_claw' },
}, {
    'id': 783,
    'name': 'Hakamo-o',
    'type': [PokemonType.Dragon, PokemonType.Fighting],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Hakamo-o', 'Kommo-o', 45)],
    'base': {
        'hitpoints': 55,
        'attack': 75,
        'specialAttack': 65,
        'defense': 90,
        'specialDefense': 70,
        'speed': 65,
    },
    'heldItem': { type: ItemType.item, id: 'Razor_claw' },
}, {
    'id': 784,
    'name': 'Kommo-o',
    'type': [PokemonType.Dragon, PokemonType.Fighting],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 110,
        'specialAttack': 100,
        'defense': 125,
        'specialDefense': 105,
        'speed': 85,
    },
    'heldItem': { type: ItemType.item, id: 'Razor_claw' },
}, {
    'id': 784.01,
    'name': 'Totem Kommo-o',
    'type': [PokemonType.Dragon, PokemonType.Fighting],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 120,
        'specialAttack': 110,
        'defense': 135,
        'specialDefense': 115,
        'speed': 95,
    },
}, {
    'id': 785,
    'name': 'Tapu Koko',
    'type': [PokemonType.Electric, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 115,
        'specialAttack': 95,
        'defense': 85,
        'specialDefense': 75,
        'speed': 130,
    },
}, {
    'id': 786,
    'name': 'Tapu Lele',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 130,
        'defense': 75,
        'specialDefense': 115,
        'speed': 95,
    },
}, {
    'id': 787,
    'name': 'Tapu Bulu',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 130,
        'specialAttack': 85,
        'defense': 115,
        'specialDefense': 95,
        'speed': 75,
    },
}, {
    'id': 788,
    'name': 'Tapu Fini',
    'type': [PokemonType.Water, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 75,
        'specialAttack': 95,
        'defense': 115,
        'specialDefense': 130,
        'speed': 85,
    },
}, {
    'id': 789,
    'name': 'Cosmog',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 40,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Cosmog', 'Cosmoem', 43)],
    'base': {
        'hitpoints': 43,
        'attack': 29,
        'specialAttack': 29,
        'defense': 31,
        'specialDefense': 31,
        'speed': 37,
    },
}, {
    'id': 790,
    'name': 'Cosmoem',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Cosmoem', 'Solgaleo', 53)],
    'base': {
        'hitpoints': 43,
        'attack': 29,
        'specialAttack': 29,
        'defense': 131,
        'specialDefense': 131,
        'speed': 37,
    },
}, {
    'id': 791,
    'name': 'Solgaleo',
    'type': [PokemonType.Psychic, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 137,
        'attack': 137,
        'specialAttack': 113,
        'defense': 107,
        'specialDefense': 89,
        'speed': 97,
    },
}, {
    'id': 792,
    'name': 'Lunala',
    'type': [PokemonType.Psychic, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 137,
        'attack': 113,
        'specialAttack': 137,
        'defense': 89,
        'specialDefense': 107,
        'speed': 97,
    },
}, {
    'id': 793,
    'name': 'Nihilego',
    'type': [PokemonType.Rock, PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 109,
        'attack': 53,
        'specialAttack': 127,
        'defense': 47,
        'specialDefense': 131,
        'speed': 103,
    },
}, {
    'id': 794,
    'name': 'Buzzwole',
    'type': [PokemonType.Bug, PokemonType.Fighting],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 107,
        'attack': 139,
        'specialAttack': 53,
        'defense': 139,
        'specialDefense': 53,
        'speed': 79,
    },
}, {
    'id': 795,
    'name': 'Pheromosa',
    'type': [PokemonType.Bug, PokemonType.Fighting],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 71,
        'attack': 137,
        'specialAttack': 137,
        'defense': 37,
        'specialDefense': 37,
        'speed': 151,
    },
}, {
    'id': 796,
    'name': 'Xurkitree',
    'type': [PokemonType.Electric],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 83,
        'attack': 89,
        'specialAttack': 173,
        'defense': 71,
        'specialDefense': 71,
        'speed': 83,
    },
}, {
    'id': 797,
    'name': 'Celesteela',
    'type': [PokemonType.Steel, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 97,
        'attack': 101,
        'specialAttack': 107,
        'defense': 103,
        'specialDefense': 101,
        'speed': 61,
    },
}, {
    'id': 798,
    'name': 'Kartana',
    'type': [PokemonType.Grass, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 59,
        'attack': 181,
        'specialAttack': 59,
        'defense': 131,
        'specialDefense': 31,
        'speed': 109,
    },
}, {
    'id': 799,
    'name': 'Guzzlord',
    'type': [PokemonType.Dark, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 223,
        'attack': 101,
        'specialAttack': 97,
        'defense': 53,
        'specialDefense': 53,
        'speed': 43,
    },
}, {
    'id': 800,
    'name': 'Necrozma',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 255,
    'base': {
        'hitpoints': 97,
        'attack': 107,
        'specialAttack': 127,
        'defense': 101,
        'specialDefense': 89,
        'speed': 79,
    },
}, {
    'id': 800.03,
    'name': 'Necrozma (Ultra)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 255,
    'base': {
        'hitpoints': 97,
        'attack': 167,
        'specialAttack': 167,
        'defense': 97,
        'specialDefense': 97,
        'speed': 129,
    },
}, {
    'id': 801,
    'name': 'Magearna',
    'type': [PokemonType.Steel, PokemonType.Fairy],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 95,
        'specialAttack': 130,
        'defense': 115,
        'specialDefense': 115,
        'speed': 65,
    },
}, {
    'id': 802,
    'name': 'Marshadow',
    'type': [PokemonType.Fighting, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 3,
    'base': {
        'hitpoints': 90,
        'attack': 125,
        'specialAttack': 90,
        'defense': 80,
        'specialDefense': 90,
        'speed': 125,
    },
}, {
    'id': 803,
    'name': 'Poipole',
    'type': [PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 189,
    'catchRate': 45,
    'evolutions': [new StoneEvolution('Poipole', 'Naganadel', GameConstants.StoneType.None)],
    'base': {
        'hitpoints': 67,
        'attack': 73,
        'specialAttack': 73,
        'defense': 67,
        'specialDefense': 67,
        'speed': 73,
    },
}, {
    'id': 804,
    'name': 'Naganadel',
    'type': [PokemonType.Poison, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 243,
    'catchRate': 45,
    'base': {
        'hitpoints': 73,
        'attack': 73,
        'specialAttack': 127,
        'defense': 73,
        'specialDefense': 73,
        'speed': 121,
    },
}, {
    'id': 805,
    'name': 'Stakataka',
    'type': [PokemonType.Rock, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 30,
    'base': {
        'hitpoints': 61,
        'attack': 131,
        'specialAttack': 53,
        'defense': 211,
        'specialDefense': 101,
        'speed': 13,
    },
}, {
    'id': 806,
    'name': 'Blacephalon',
    'type': [PokemonType.Fire, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 30,
    'base': {
        'hitpoints': 53,
        'attack': 127,
        'specialAttack': 151,
        'defense': 53,
        'specialDefense': 79,
        'speed': 107,
    },
}, {
    'id': 807,
    'name': 'Zeraora',
    'type': [PokemonType.Electric],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 88,
        'attack': 112,
        'specialAttack': 102,
        'defense': 75,
        'specialDefense': 80,
        'speed': 143,
    },
}, {
    'id': 808,
    'name': 'Meltan',
    'type': [PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 135,
    'catchRate': 3,
    'evolutions': [new StoneEvolution('Meltan', 'Melmetal', GameConstants.StoneType.None)],
    'base': {
        'hitpoints': 46,
        'attack': 65,
        'specialAttack': 55,
        'defense': 65,
        'specialDefense': 35,
        'speed': 34,
    },
}, {
    'id': 809,
    'name': 'Melmetal',
    'type': [PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 135,
        'attack': 143,
        'specialAttack': 80,
        'defense': 143,
        'specialDefense': 65,
        'speed': 34,
    },
}, {
    'id': 810,
    'name': 'Grookey',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 40,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Grookey', 'Thwackey', 16)],
}, {
    'id': 811,
    'name': 'Thwackey',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 55,
        'defense': 70,
        'specialDefense': 60,
        'speed': 80,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Thwackey', 'Rillaboom', 35)],
}, {
    'id': 812,
    'name': 'Rillaboom',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 100,
        'attack': 125,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 70,
        'speed': 85,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
}, {
    'id': 813,
    'name': 'Scorbunny',
    'type': [PokemonType.Fire],
    'base': {
        'hitpoints': 50,
        'attack': 71,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 69,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Scorbunny', 'Raboot', 16)],
}, {
    'id': 814,
    'name': 'Raboot',
    'type': [PokemonType.Fire],
    'base': {
        'hitpoints': 65,
        'attack': 86,
        'specialAttack': 55,
        'defense': 60,
        'specialDefense': 60,
        'speed': 94,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Raboot', 'Cinderace', 35)],
}, {
    'id': 815,
    'name': 'Cinderace',
    'type': [PokemonType.Fire],
    'base': {
        'hitpoints': 80,
        'attack': 116,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 75,
        'speed': 119,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
}, {
    'id': 816,
    'name': 'Sobble',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 50,
        'attack': 40,
        'specialAttack': 70,
        'defense': 40,
        'specialDefense': 40,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Sobble', 'Drizzile', 16)],
}, {
    'id': 817,
    'name': 'Drizzile',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 95,
        'defense': 55,
        'specialDefense': 55,
        'speed': 90,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Drizzile', 'Inteleon', 35)],
}, {
    'id': 818,
    'name': 'Inteleon',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 125,
        'defense': 65,
        'specialDefense': 65,
        'speed': 120,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
}, {
    'id': 819,
    'name': 'Skwovet',
    'type': [PokemonType.Normal],
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 35,
        'defense': 55,
        'specialDefense': 35,
        'speed': 25,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 55,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Skwovet', 'Greedent', 24)],
}, {
    'id': 820,
    'name': 'Greedent',
    'type': [PokemonType.Normal],
    'base': {
        'hitpoints': 120,
        'attack': 95,
        'specialAttack': 55,
        'defense': 95,
        'specialDefense': 75,
        'speed': 20,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 90,
}, {
    'id': 821,
    'name': 'Rookidee',
    'type': [PokemonType.Flying],
    'base': {
        'hitpoints': 38,
        'attack': 47,
        'specialAttack': 33,
        'defense': 35,
        'specialDefense': 35,
        'speed': 57,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Rookidee', 'Corvisquire', 18)],
}, {
    'id': 822,
    'name': 'Corvisquire',
    'type': [PokemonType.Flying],
    'base': {
        'hitpoints': 68,
        'attack': 67,
        'specialAttack': 43,
        'defense': 55,
        'specialDefense': 55,
        'speed': 77,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 128,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Corvisquire', 'Corviknight', 38)],
}, {
    'id': 823,
    'name': 'Corviknight',
    'type': [
        PokemonType.Flying,
        PokemonType.Steel,
    ],
    'base': {
        'hitpoints': 98,
        'attack': 87,
        'specialAttack': 53,
        'defense': 105,
        'specialDefense': 85,
        'speed': 67,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 248,
    'catchRate': 45,
}, {
    'id': 824,
    'name': 'Blipbug',
    'type': [PokemonType.Bug],
    'base': {
        'hitpoints': 25,
        'attack': 20,
        'specialAttack': 25,
        'defense': 20,
        'specialDefense': 45,
        'speed': 45,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 36,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Blipbug', 'Dottler', 10)],
}, {
    'id': 825,
    'name': 'Dottler',
    'type': [
        PokemonType.Bug,
        PokemonType.Psychic,
    ],
    'base': {
        'hitpoints': 50,
        'attack': 35,
        'specialAttack': 50,
        'defense': 80,
        'specialDefense': 90,
        'speed': 30,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 117,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Dottler', 'Orbeetle', 30)],
}, {
    'id': 826,
    'name': 'Orbeetle',
    'type': [
        PokemonType.Bug,
        PokemonType.Psychic,
    ],
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 80,
        'defense': 110,
        'specialDefense': 120,
        'speed': 90,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 253,
    'catchRate': 45,
}, {
    'id': 827,
    'name': 'Nickit',
    'type': [PokemonType.Dark],
    'base': {
        'hitpoints': 40,
        'attack': 28,
        'specialAttack': 47,
        'defense': 28,
        'specialDefense': 52,
        'speed': 50,
    },
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 49,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Nickit', 'Thievul', 18)],
}, {
    'id': 828,
    'name': 'Thievul',
    'type': [PokemonType.Dark],
    'base': {
        'hitpoints': 70,
        'attack': 58,
        'specialAttack': 87,
        'defense': 58,
        'specialDefense': 92,
        'speed': 90,
    },
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 159,
    'catchRate': 127,
}, {
    'id': 829,
    'name': 'Gossifleur',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 60,
        'speed': 10,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 50,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Gossifleur', 'Eldegoss', 20)],
}, {
    'id': 830,
    'name': 'Eldegoss',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 120,
        'speed': 60,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 75,
}, {
    'id': 831,
    'name': 'Wooloo',
    'type': [PokemonType.Normal],
    'base': {
        'hitpoints': 42,
        'attack': 40,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 45,
        'speed': 48,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 122,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Wooloo', 'Dubwool', 24)],
}, {
    'id': 832,
    'name': 'Dubwool',
    'type': [PokemonType.Normal],
    'base': {
        'hitpoints': 72,
        'attack': 80,
        'specialAttack': 60,
        'defense': 100,
        'specialDefense': 90,
        'speed': 88,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 127,
}, {
    'id': 833,
    'name': 'Chewtle',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 50,
        'attack': 64,
        'specialAttack': 38,
        'defense': 50,
        'specialDefense': 38,
        'speed': 44,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 57,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Chewtle', 'Drednaw', 22)],
}, {
    'id': 834,
    'name': 'Drednaw',
    'type': [
        PokemonType.Water,
        PokemonType.Rock,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 115,
        'specialAttack': 48,
        'defense': 90,
        'specialDefense': 68,
        'speed': 74,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 75,
}, {
    'id': 835,
    'name': 'Yamper',
    'type': [PokemonType.Electric],
    'base': {
        'hitpoints': 59,
        'attack': 45,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 26,
    },
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 54,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Yamper', 'Boltund', 25)],
}, {
    'id': 836,
    'name': 'Boltund',
    'type': [PokemonType.Electric],
    'base': {
        'hitpoints': 69,
        'attack': 90,
        'specialAttack': 90,
        'defense': 60,
        'specialDefense': 60,
        'speed': 121,
    },
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 172,
    'catchRate': 45,
}, {
    'id': 837,
    'name': 'Rolycoly',
    'type': [PokemonType.Rock],
    'base': {
        'hitpoints': 30,
        'attack': 40,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 30,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 48,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Rolycoly', 'Carkol', 18)],
}, {
    'id': 838,
    'name': 'Carkol',
    'type': [
        PokemonType.Rock,
        PokemonType.Fire,
    ],
    'base': {
        'hitpoints': 80,
        'attack': 60,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 70,
        'speed': 50,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 144,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Carkol', 'Coalossal', 34)],
}, {
    'id': 839,
    'name': 'Coalossal',
    'type': [
        PokemonType.Rock,
        PokemonType.Fire,
    ],
    'base': {
        'hitpoints': 110,
        'attack': 80,
        'specialAttack': 80,
        'defense': 120,
        'specialDefense': 90,
        'speed': 30,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 255,
    'catchRate': 45,
}, {
    'id': 840,
    'name': 'Applin',
    'type': [
        PokemonType.Grass,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 40,
        'defense': 80,
        'specialDefense': 40,
        'speed': 20,
    },
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 52,
    'catchRate': 255,
}, {
    'id': 841,
    'name': 'Flapple',
    'type': [
        PokemonType.Grass,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 95,
        'defense': 80,
        'specialDefense': 60,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 45,
}, {
    'id': 842,
    'name': 'Appletun',
    'type': [
        PokemonType.Grass,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 110,
        'attack': 85,
        'specialAttack': 100,
        'defense': 80,
        'specialDefense': 80,
        'speed': 30,
    },
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 45,
}, {
    'id': 843,
    'name': 'Silicobra',
    'type': [PokemonType.Ground],
    'base': {
        'hitpoints': 52,
        'attack': 57,
        'specialAttack': 35,
        'defense': 75,
        'specialDefense': 50,
        'speed': 46,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Silicobra', 'Sandaconda', 36)],
}, {
    'id': 844,
    'name': 'Sandaconda',
    'type': [PokemonType.Ground],
    'base': {
        'hitpoints': 72,
        'attack': 107,
        'specialAttack': 65,
        'defense': 125,
        'specialDefense': 70,
        'speed': 71,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 179,
    'catchRate': 120,
}, {
    'id': 845,
    'name': 'Cramorant',
    'type': [
        PokemonType.Flying,
        PokemonType.Water,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 85,
        'defense': 55,
        'specialDefense': 95,
        'speed': 85,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 45,
}, {
    'id': 846,
    'name': 'Arrokuda',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 41,
        'attack': 63,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 30,
        'speed': 66,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Arrokuda', 'Barraskewda', 26)],
}, {
    'id': 847,
    'name': 'Barraskewda',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 61,
        'attack': 123,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 50,
        'speed': 136,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 172,
    'catchRate': 60,
}, {
    'id': 848,
    'name': 'Toxel',
    'type': [
        PokemonType.Electric,
        PokemonType.Poison,
    ],
    'base': {
        'hitpoints': 40,
        'attack': 38,
        'specialAttack': 54,
        'defense': 35,
        'specialDefense': 35,
        'speed': 40,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 48,
    'catchRate': 75,
    'evolutions': [
        new LevelEvolution('Toxel', 'Toxtricity (Amped)', 30),
        new LevelEvolution('Toxel', 'Toxtricity (Low Key)', 30),
    ],
}, {
    'id': 849,
    'name': 'Toxtricity (Amped)',
    'type': [
        PokemonType.Electric,
        PokemonType.Poison,
    ],
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 114,
        'defense': 70,
        'specialDefense': 70,
        'speed': 75,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 176,
    'catchRate': 45,
}, {
    'id': 849.1,
    'name': 'Toxtricity (Low Key)',
    'type': [
        PokemonType.Electric,
        PokemonType.Poison,
    ],
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 114,
        'defense': 70,
        'specialDefense': 70,
        'speed': 75,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 176,
    'catchRate': 45,
}, {
    'id': 850,
    'name': 'Sizzlipede',
    'type': [
        PokemonType.Fire,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 50,
        'defense': 45,
        'specialDefense': 50,
        'speed': 45,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Sizzlipede', 'Centiskorch', 28)],
}, {
    'id': 851,
    'name': 'Centiskorch',
    'type': [
        PokemonType.Fire,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 100,
        'attack': 115,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 90,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 75,
}, {
    'id': 852,
    'name': 'Clobbopus',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 50,
        'attack': 68,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 50,
        'speed': 32,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Clobbopus', 'Grapploct', 35)],
}, {
    'id': 853,
    'name': 'Grapploct',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 80,
        'attack': 118,
        'specialAttack': 70,
        'defense': 90,
        'specialDefense': 80,
        'speed': 42,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 168,
    'catchRate': 45,
}, {
    'id': 854,
    'name': 'Sinistea',
    'type': [PokemonType.Ghost],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 74,
        'defense': 45,
        'specialDefense': 54,
        'speed': 50,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 62,
    'catchRate': 120,
}, {
    'id': 855,
    'name': 'Polteageist',
    'type': [PokemonType.Ghost],
    'base': {
        'hitpoints': 60,
        'attack': 65,
        'specialAttack': 134,
        'defense': 65,
        'specialDefense': 114,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'catchRate': 60,
}, {
    'id': 856,
    'name': 'Hatenna',
    'type': [PokemonType.Psychic],
    'base': {
        'hitpoints': 42,
        'attack': 30,
        'specialAttack': 56,
        'defense': 45,
        'specialDefense': 53,
        'speed': 39,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 53,
    'catchRate': 235,
    'evolutions': [new LevelEvolution('Hatenna', 'Hattrem', 32)],
}, {
    'id': 857,
    'name': 'Hattrem',
    'type': [PokemonType.Psychic],
    'base': {
        'hitpoints': 57,
        'attack': 40,
        'specialAttack': 86,
        'defense': 65,
        'specialDefense': 73,
        'speed': 49,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Hattrem', 'Hatterene', 42)],
}, {
    'id': 858,
    'name': 'Hatterene',
    'type': [
        PokemonType.Psychic,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 57,
        'attack': 90,
        'specialAttack': 136,
        'defense': 95,
        'specialDefense': 103,
        'speed': 29,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 255,
    'catchRate': 45,
}, {
    'id': 859,
    'name': 'Impidimp',
    'type': [
        PokemonType.Dark,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 45,
        'attack': 45,
        'specialAttack': 55,
        'defense': 30,
        'specialDefense': 40,
        'speed': 50,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Impidimp', 'Morgrem', 32)],
}, {
    'id': 860,
    'name': 'Morgrem',
    'type': [
        PokemonType.Dark,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 75,
        'defense': 45,
        'specialDefense': 55,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Morgrem', 'Grimmsnarl', 42)],
}, {
    'id': 861,
    'name': 'Grimmsnarl',
    'type': [
        PokemonType.Dark,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 95,
        'attack': 120,
        'specialAttack': 95,
        'defense': 65,
        'specialDefense': 75,
        'speed': 60,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 255,
    'catchRate': 45,
}, {
    'id': 862,
    'name': 'Obstagoon',
    'type': [
        PokemonType.Dark,
        PokemonType.Normal,
    ],
    'base': {
        'hitpoints': 93,
        'attack': 90,
        'specialAttack': 60,
        'defense': 101,
        'specialDefense': 81,
        'speed': 95,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 260,
    'catchRate': 45,
}, {
    'id': 863,
    'name': 'Perrserker',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Steel],
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 50,
        'defense': 100,
        'specialDefense': 60,
        'speed': 50,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'catchRate': 90,
}, {
    'id': 864,
    'name': 'Cursola',
    'type': [PokemonType.Ghost],
    'base': {
        'hitpoints': 60,
        'attack': 95,
        'specialAttack': 145,
        'defense': 50,
        'specialDefense': 130,
        'speed': 30,
    },
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 179,
    'catchRate': 30,
}, {
    'id': 865,
    'name': 'Sirfetch\'d',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 62,
        'attack': 135,
        'specialAttack': 68,
        'defense': 95,
        'specialDefense': 82,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'catchRate': 45,
}, {
    'id': 866,
    'name': 'Mr. Rime',
    'type': [
        PokemonType.Psychic,
        PokemonType.Ice,
    ],
    'base': {
        'hitpoints': 80,
        'attack': 85,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 100,
        'speed': 70,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
}, {
    'id': 867,
    'name': 'Runerigus',
    'type': [
        PokemonType.Ground,
        PokemonType.Ghost,
    ],
    'base': {
        'hitpoints': 58,
        'attack': 95,
        'specialAttack': 50,
        'defense': 145,
        'specialDefense': 105,
        'speed': 30,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
}, {
    'id': 868,
    'name': 'Milcery',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 45,
        'attack': 40,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 61,
        'speed': 34,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 200,
}, {
    'id': 869,
    'name': 'Alcremie (Strawberry Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.01,
    'name': 'Alcremie (Strawberry Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.02,
    'name': 'Alcremie (Strawberry Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.03,
    'name': 'Alcremie (Strawberry Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.04,
    'name': 'Alcremie (Strawberry Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.05,
    'name': 'Alcremie (Strawberry Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.06,
    'name': 'Alcremie (Strawberry Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.07,
    'name': 'Alcremie (Strawberry Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.08,
    'name': 'Alcremie (Strawberry Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.1,
    'name': 'Alcremie (Berry Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.11,
    'name': 'Alcremie (Berry Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.12,
    'name': 'Alcremie (Berry Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.13,
    'name': 'Alcremie (Berry Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.14,
    'name': 'Alcremie (Berry Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.15,
    'name': 'Alcremie (Berry Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.16,
    'name': 'Alcremie (Berry Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.17,
    'name': 'Alcremie (Berry Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.18,
    'name': 'Alcremie (Berry Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.2,
    'name': 'Alcremie (Love Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.21,
    'name': 'Alcremie (Love Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.22,
    'name': 'Alcremie (Love Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.23,
    'name': 'Alcremie (Love Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.24,
    'name': 'Alcremie (Love Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.25,
    'name': 'Alcremie (Love Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.26,
    'name': 'Alcremie (Love Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.27,
    'name': 'Alcremie (Love Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.28,
    'name': 'Alcremie (Love Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.3,
    'name': 'Alcremie (Star Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.31,
    'name': 'Alcremie (Star Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.32,
    'name': 'Alcremie (Star Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.33,
    'name': 'Alcremie (Star Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.34,
    'name': 'Alcremie (Star Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.35,
    'name': 'Alcremie (Star Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.36,
    'name': 'Alcremie (Star Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.37,
    'name': 'Alcremie (Star Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.38,
    'name': 'Alcremie (Star Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.4,
    'name': 'Alcremie (Clover Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.41,
    'name': 'Alcremie (Clover Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.42,
    'name': 'Alcremie (Clover Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.43,
    'name': 'Alcremie (Clover Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.44,
    'name': 'Alcremie (Clover Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.45,
    'name': 'Alcremie (Clover Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.46,
    'name': 'Alcremie (Clover Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.47,
    'name': 'Alcremie (Clover Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.48,
    'name': 'Alcremie (Clover Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.5,
    'name': 'Alcremie (Flower Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.51,
    'name': 'Alcremie (Flower Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.52,
    'name': 'Alcremie (Flower Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.53,
    'name': 'Alcremie (Flower Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.54,
    'name': 'Alcremie (Flower Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.55,
    'name': 'Alcremie (Flower Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.56,
    'name': 'Alcremie (Flower Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.57,
    'name': 'Alcremie (Flower Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.58,
    'name': 'Alcremie (Flower Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.6,
    'name': 'Alcremie (Ribbon Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.61,
    'name': 'Alcremie (Ribbon Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.62,
    'name': 'Alcremie (Ribbon Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.63,
    'name': 'Alcremie (Ribbon Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.64,
    'name': 'Alcremie (Ribbon Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.65,
    'name': 'Alcremie (Ribbon Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.66,
    'name': 'Alcremie (Ribbon Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.67,
    'name': 'Alcremie (Ribbon Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 869.68,
    'name': 'Alcremie (Ribbon Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
}, {
    'id': 870,
    'name': 'Falinks',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 65,
        'attack': 100,
        'specialAttack': 70,
        'defense': 100,
        'specialDefense': 60,
        'speed': 75,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 45,
}, {
    'id': 871,
    'name': 'Pincurchin',
    'type': [PokemonType.Electric],
    'base': {
        'hitpoints': 48,
        'attack': 101,
        'specialAttack': 91,
        'defense': 95,
        'specialDefense': 85,
        'speed': 15,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 152,
    'catchRate': 75,
}, {
    'id': 872,
    'name': 'Snom',
    'type': [
        PokemonType.Ice,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 30,
        'attack': 25,
        'specialAttack': 45,
        'defense': 35,
        'specialDefense': 30,
        'speed': 20,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 37,
    'catchRate': 190,
    'evolutions': [new NightTimedStoneEvolution('Snom', 'Frosmoth', GameConstants.StoneType.Soothe_bell)],
}, {
    'id': 873,
    'name': 'Frosmoth',
    'type': [
        PokemonType.Ice,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 65,
        'specialAttack': 125,
        'defense': 60,
        'specialDefense': 90,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
}, {
    'id': 874,
    'name': 'Stonjourner',
    'type': [PokemonType.Rock],
    'base': {
        'hitpoints': 100,
        'attack': 125,
        'specialAttack': 20,
        'defense': 135,
        'specialDefense': 20,
        'speed': 70,
    },
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 165,
    'catchRate': 60,
}, {
    'id': 875,
    'name': 'Eiscue',
    'type': [PokemonType.Ice],
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 110,
        'specialDefense': 90,
        'speed': 50,
    },
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 165,
    'catchRate': 60,
}, {
    'id': 875.1,
    'name': 'Eiscue (noice)',
    'type': [PokemonType.Ice],
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 50,
        'speed': 130,
    },
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 165,
    'catchRate': 60,
}, {
    'id': 876,
    'name': 'Indeedee',
    'type': [
        PokemonType.Psychic,
        PokemonType.Normal,
    ],
    'base': {
        'hitpoints': 60,
        'attack': 65,
        'specialAttack': 105,
        'defense': 55,
        'specialDefense': 95,
        'speed': 95,
    },
    'eggCycles': 40,
    'levelType': LevelType.fast,
    'exp': 166,
    'catchRate': 30,
}, {
    'id': 877,
    'name': 'Morpeko',
    'type': [
        PokemonType.Electric,
        PokemonType.Dark,
    ],
    'base': {
        'hitpoints': 58,
        'attack': 95,
        'specialAttack': 70,
        'defense': 58,
        'specialDefense': 58,
        'speed': 97,
    },
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 153,
    'catchRate': 180,
}, {
    'id': 877.1,
    'name': 'Morpeko (hangry)',
    'type': [
        PokemonType.Electric,
        PokemonType.Dark,
    ],
    'base': {
        'hitpoints': 58,
        'attack': 95,
        'specialAttack': 70,
        'defense': 58,
        'specialDefense': 58,
        'speed': 97,
    },
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 153,
    'catchRate': 180,
}, {
    'id': 878,
    'name': 'Cufant',
    'type': [PokemonType.Steel],
    'base': {
        'hitpoints': 72,
        'attack': 80,
        'specialAttack': 40,
        'defense': 49,
        'specialDefense': 49,
        'speed': 40,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Cufant', 'Copperajah', 34)],
}, {
    'id': 879,
    'name': 'Copperajah',
    'type': [PokemonType.Steel],
    'base': {
        'hitpoints': 122,
        'attack': 130,
        'specialAttack': 80,
        'defense': 69,
        'specialDefense': 69,
        'speed': 30,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 90,
}, {
    'id': 880,
    'name': 'Dracozolt',
    'type': [
        PokemonType.Electric,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 70,
        'speed': 75,
    },
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 177,
    'catchRate': 45,
}, {
    'id': 881,
    'name': 'Arctozolt',
    'type': [
        PokemonType.Electric,
        PokemonType.Ice,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 90,
        'defense': 90,
        'specialDefense': 80,
        'speed': 55,
    },
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 177,
    'catchRate': 45,
}, {
    'id': 882,
    'name': 'Dracovish',
    'type': [
        PokemonType.Water,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 90,
        'specialAttack': 70,
        'defense': 100,
        'specialDefense': 80,
        'speed': 75,
    },
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 177,
    'catchRate': 45,
}, {
    'id': 883,
    'name': 'Arctovish',
    'type': [
        PokemonType.Water,
        PokemonType.Ice,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 90,
        'specialAttack': 80,
        'defense': 100,
        'specialDefense': 90,
        'speed': 55,
    },
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 177,
    'catchRate': 45,
}, {
    'id': 884,
    'name': 'Duraludon',
    'type': [
        PokemonType.Steel,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 95,
        'specialAttack': 120,
        'defense': 115,
        'specialDefense': 50,
        'speed': 85,
    },
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 187,
    'catchRate': 45,
}, {
    'id': 885,
    'name': 'Dreepy',
    'type': [
        PokemonType.Dragon,
        PokemonType.Ghost,
    ],
    'base': {
        'hitpoints': 28,
        'attack': 60,
        'specialAttack': 40,
        'defense': 30,
        'specialDefense': 30,
        'speed': 82,
    },
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 54,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Dreepy', 'Drakloak', 50)],
}, {
    'id': 886,
    'name': 'Drakloak',
    'type': [
        PokemonType.Dragon,
        PokemonType.Ghost,
    ],
    'base': {
        'hitpoints': 68,
        'attack': 80,
        'specialAttack': 60,
        'defense': 50,
        'specialDefense': 50,
        'speed': 102,
    },
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 144,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Drakloak', 'Dragapult', 60)],
}, {
    'id': 887,
    'name': 'Dragapult',
    'type': [
        PokemonType.Dragon,
        PokemonType.Ghost,
    ],
    'base': {
        'hitpoints': 88,
        'attack': 120,
        'specialAttack': 100,
        'defense': 75,
        'specialDefense': 75,
        'speed': 142,
    },
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 300,
    'catchRate': 45,
}, {
    'id': 888,
    'name': 'Zacian (Battle Hero)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 92,
        'attack': 130,
        'specialAttack': 80,
        'defense': 115,
        'specialDefense': 115,
        'speed': 138,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'catchRate': 10,
}, {
    'id': 888.1,
    'name': 'Zacian (Crowned Sword)',
    'type': [PokemonType.Fairy, PokemonType.Steel],
    'base': {
        'hitpoints': 92,
        'attack': 170,
        'specialAttack': 80,
        'defense': 115,
        'specialDefense': 115,
        'speed': 148,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'catchRate': 10,
}, {
    'id': 889,
    'name': 'Zamazenta (Battle Hero)',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 92,
        'attack': 130,
        'specialAttack': 80,
        'defense': 115,
        'specialDefense': 115,
        'speed': 138,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'catchRate': 10,
}, {
    'id': 889.1,
    'name': 'Zamazenta (Crowned Shield)',
    'type': [PokemonType.Fighting, PokemonType.Steel],
    'base': {
        'hitpoints': 92,
        'attack': 130,
        'specialAttack': 80,
        'defense': 145,
        'specialDefense': 145,
        'speed': 128,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'catchRate': 10,
}, {
    'id': 890,
    'name': 'Eternatus',
    'type': [
        PokemonType.Poison,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 140,
        'attack': 85,
        'specialAttack': 145,
        'defense': 95,
        'specialDefense': 95,
        'speed': 130,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 345,
    'catchRate': 255,
}, {
    'id': 891,
    'name': 'Kubfu',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 53,
        'defense': 60,
        'specialDefense': 50,
        'speed': 72,
    },
    'catchRate': 3,
    'evolutions': [
        new DungeonRestrictedLevelEvolution('Tower of Water', 'Kubfu', 'Urshifu (Single Strike)', 30),
        new DungeonRestrictedLevelEvolution('Tower of Darkness', 'Kubfu', 'Urshifu (Rapid Strike)', 30),
    ],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 892,
    'name': 'Urshifu (Single Strike)',
    'type': [
        PokemonType.Fighting,
        PokemonType.Dark,
    ],
    'base': {
        'hitpoints': 100,
        'attack': 130,
        'specialAttack': 63,
        'defense': 100,
        'specialDefense': 60,
        'speed': 97,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 892.1,
    'name': 'Urshifu (Rapid Strike)',
    'type': [
        PokemonType.Fighting,
        PokemonType.Water,
    ],
    'base': {
        'hitpoints': 100,
        'attack': 130,
        'specialAttack': 63,
        'defense': 100,
        'specialDefense': 60,
        'speed': 97,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 893,
    'name': 'Zarude',
    'type': [
        PokemonType.Dark,
        PokemonType.Grass,
    ],
    'base': {
        'hitpoints': 105,
        'attack': 120,
        'specialAttack': 70,
        'defense': 105,
        'specialDefense': 95,
        'speed': 105,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 894,
    'name': 'Regieleki',
    'type': [PokemonType.Electric],
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 100,
        'defense': 50,
        'specialDefense': 50,
        'speed': 200,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 895,
    'name': 'Regidrago',
    'type': [PokemonType.Dragon],
    'base': {
        'hitpoints': 200,
        'attack': 100,
        'specialAttack': 100,
        'defense': 50,
        'specialDefense': 50,
        'speed': 80,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 896,
    'name': 'Glastrier',
    'type': [PokemonType.Ice],
    'base': {
        'hitpoints': 100,
        'attack': 145,
        'specialAttack': 65,
        'defense': 130,
        'specialDefense': 110,
        'speed': 30,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 897,
    'name': 'Spectrier',
    'type': [PokemonType.Ghost],
    'base': {
        'hitpoints': 100,
        'attack': 65,
        'specialAttack': 145,
        'defense': 60,
        'specialDefense': 80,
        'speed': 130,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 898,
    'name': 'Calyrex',
    'type': [PokemonType.Psychic, PokemonType.Grass],
    'base': {
        'hitpoints': 100,
        'attack': 80,
        'specialAttack': 80,
        'defense': 80,
        'specialDefense': 80,
        'speed': 80,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 898.1,
    'name': 'Ice Rider Calyrex',
    'type': [PokemonType.Psychic, PokemonType.Ice],
    'base': {
        'hitpoints': 100,
        'attack': 165,
        'specialAttack': 85,
        'defense': 150,
        'specialDefense': 130,
        'speed': 50,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, {
    'id': 898.2,
    'name': 'Ghost Rider Calyrex',
    'type': [PokemonType.Psychic, PokemonType.Ghost],
    'base': {
        'hitpoints': 100,
        'attack': 85,
        'specialAttack': 165,
        'defense': 80,
        'specialDefense': 100,
        'speed': 150,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
}, 
// Missingno.
{
    'id': 0,
    'name': 'MissingNo.',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Flying, PokemonType.Normal],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'base': {
        'hitpoints': 178,
        'attack': 19,
        'specialAttack': 23,
        'defense': 11,
        'specialDefense': 23,
        'speed': 0,
    },
}, 
// Event Pokemon only between -1 → -99
{
    'id': -1,
    'name': 'Flying Pikachu',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 50,
    'type': [PokemonType.Electric, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': -2,
    'name': 'Surfing Pikachu',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 50,
    'type': [PokemonType.Electric, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': -3,
    'name': 'Armored Mewtwo',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 2,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 306,
    'eggCycles': 120,
    'base': {
        'hitpoints': 106,
        'attack': 110,
        'specialAttack': 154,
        'defense': 100,
        'specialDefense': 100,
        'speed': 130,
    },
}, {
    'id': -4,
    'name': 'Santa Snorlax',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 25,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 40,
    'base': {
        'hitpoints': 160,
        'attack': 110,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 110,
        'speed': 30,
    },
}, {
    'id': -5,
    'name': 'Spooky Togepi',
    'nativeRegion': GameConstants.Region.johto,
    'catchRate': 30,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 49,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 25,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 65,
        'speed': 20,
    },
}, {
    'id': -6,
    'name': 'Spooky Bulbasaur',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 25,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 65,
        'defense': 49,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': -7,
    'name': 'Pikachu (Gengar)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 50,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': -8,
    'name': 'Let\'s Go Pikachu',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 50,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': -9,
    'name': 'Let\'s Go Eevee',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 50,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 35,
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 65,
        'speed': 55,
    },
}, {
    'id': -10,
    'name': 'Bulbasaur (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Bulbasaur (clone)', 'Ivysaur (clone)', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 65,
        'defense': 49,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': -11,
    'name': 'Ivysaur (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Ivysaur (clone)', 'Venusaur (clone)', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 80,
        'defense': 63,
        'specialDefense': 80,
        'speed': 60,
    },
}, {
    'id': -12,
    'name': 'Venusaur (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 100,
        'defense': 83,
        'specialDefense': 100,
        'speed': 80,
    },
}, {
    'id': -13,
    'name': 'Charmander (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Charmander (clone)', 'Charmeleon (clone)', 16)],
    'base': {
        'hitpoints': 39,
        'attack': 52,
        'specialAttack': 60,
        'defense': 43,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': -14,
    'name': 'Charmeleon (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Charmeleon (clone)', 'Charizard (clone)', 36)],
    'base': {
        'hitpoints': 58,
        'attack': 64,
        'specialAttack': 80,
        'defense': 58,
        'specialDefense': 65,
        'speed': 80,
    },
}, {
    'id': -15,
    'name': 'Charizard (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'eggCycles': 20,
    'base': {
        'hitpoints': 78,
        'attack': 84,
        'specialAttack': 109,
        'defense': 78,
        'specialDefense': 85,
        'speed': 100,
    },
}, {
    'id': -16,
    'name': 'Squirtle (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Squirtle (clone)', 'Wartortle (clone)', 16)],
    'base': {
        'hitpoints': 44,
        'attack': 48,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 64,
        'speed': 43,
    },
}, {
    'id': -17,
    'name': 'Wartortle (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Wartortle (clone)', 'Blastoise (clone)', 36)],
    'base': {
        'hitpoints': 59,
        'attack': 63,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 80,
        'speed': 58,
    },
}, {
    'id': -18,
    'name': 'Blastoise (clone)',
    'nativeRegion': GameConstants.Region.kanto,
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'eggCycles': 20,
    'base': {
        'hitpoints': 79,
        'attack': 83,
        'specialAttack': 85,
        'defense': 100,
        'specialDefense': 105,
        'speed': 78,
    },
}, 
// Megas only between -100 → -199
{
    'id': -100,
    'name': 'Mega Venusaur',
    'nativeRegion': GameConstants.Region.kanto,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 281,
    'catchRate': 10,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 122,
        'defense': 123,
        'specialDefense': 120,
        'speed': 80,
    },
}, {
    'id': -101,
    'name': 'Mega Charizard X',
    'nativeRegion': GameConstants.Region.kanto,
    'type': [PokemonType.Fire, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 285,
    'catchRate': 10,
    'base': {
        'hitpoints': 78,
        'attack': 130,
        'specialAttack': 130,
        'defense': 111,
        'specialDefense': 85,
        'speed': 100,
    },
}, 
// {
//     'id': -102,
//     'name': 'Mega Charizard Y',
//     'type': [PokemonType.Fire, PokemonType.Flying],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 285,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 78,
//         'attack': 104,
//         'specialAttack': 154,
//         'defense': 78,
//         'specialDefense': 115,
//         'speed': 100,
//     },
// },
// {
//     'id': -103,
//     'name': 'Mega Blastoise',
//     'type': [PokemonType.Water],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 284,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 79,
//         'attack': 103,
//         'specialAttack': 135,
//         'defense': 120,
//         'specialDefense': 115,
//         'speed': 78,
//     },
// },
// {
//     'id': -104,
//     'name': 'Mega Beedrill',
//     'type': [PokemonType.Bug, PokemonType.Poison],
//     'eggCycles': 80,
//     'levelType': LevelType.mediumfast,
//     'exp': 223,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 65,
//         'attack': 150,
//         'specialAttack': 15,
//         'defense': 40,
//         'specialDefense': 80,
//         'speed': 145,
//     },
// },
// {
//     'id': -105,
//     'name': 'Mega Pidgeot',
//     'type': [PokemonType.Normal, PokemonType.Flying],
//     'eggCycles': 80,
//     'levelType': LevelType.mediumfast,
//     'exp': 261,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 83,
//         'attack': 80,
//         'specialAttack': 135,
//         'defense': 80,
//         'specialDefense': 80,
//         'speed': 121,
//     },
// },
// {
//     'id': -106,
//     'name': 'Mega Alakazam',
//     'type': [PokemonType.Psychic],
//     'eggCycles': 80,
//     'levelType': LevelType.mediumslow,
//     'exp': 270,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 55,
//         'attack': 50,
//         'specialAttack': 175,
//         'defense': 65,
//         'specialDefense': 105,
//         'speed': 150,
//     },
// },
// {
//     'id': -107,
//     'name': 'Mega Slowbro',
//     'type': [PokemonType.Water, PokemonType.Psychic],
//     'eggCycles': 80,
//     'levelType': LevelType.mediumfast,
//     'exp': 207,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 95,
//         'attack': 75,
//         'specialAttack': 130,
//         'defense': 180,
//         'specialDefense': 80,
//         'speed': 30,
//     },
// },
// {
//     'id': -108,
//     'name': 'Mega Gengar',
//     'type': [PokemonType.Poison, PokemonType.Ghost],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 207,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 60,
//         'attack': 65,
//         'specialAttack': 170,
//         'defense': 80,
//         'specialDefense': 95,
//         'speed': 130,
//     },
// },
// {
//     'id': -109,
//     'name': 'Mega Kangaskhan',
//     'type': [PokemonType.Normal],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 207,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 105,
//         'attack': 125,
//         'specialAttack': 60,
//         'defense': 100,
//         'specialDefense': 100,
//         'speed': 100,
//     },
// },
// {
//     'id': -110,
//     'name': 'Mega Pinsir',
//     'type': [PokemonType.Bug, PokemonType.Flying],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 210,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 65,
//         'attack': 155,
//         'specialAttack': 65,
//         'defense': 120,
//         'specialDefense': 90,
//         'speed': 105,
//     },
// },
{
    'id': -111,
    'name': 'Mega Gyarados',
    'nativeRegion': GameConstants.Region.kanto,
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 224,
    'catchRate': 10,
    'base': {
        'hitpoints': 95,
        'attack': 155,
        'specialAttack': 70,
        'defense': 109,
        'specialDefense': 130,
        'speed': 81,
    },
}, 
// {
//     'id': -112,
//     'name': 'Mega Aerodactyl',
//     'type': [PokemonType.Water, PokemonType.Dark],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 215,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 80,
//         'attack': 135,
//         'specialAttack': 70,
//         'defense': 85,
//         'specialDefense': 95,
//         'speed': 150,
//     },
// },
// {
//     'id': -113,
//     'name': 'Mega Mewtwo X',
//     'type': [PokemonType.Psychic, PokemonType.Fighting],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 106,
//         'attack': 190,
//         'specialAttack': 154,
//         'defense': 100,
//         'specialDefense': 100,
//         'speed': 130,
//     },
// },
// {
//     'id': -114,
//     'name': 'Mega Mewtwo Y',
//     'type': [PokemonType.Psychic, PokemonType.Fighting],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 106,
//         'attack': 150,
//         'specialAttack': 194,
//         'defense': 70,
//         'specialDefense': 120,
//         'speed': 140,
//     },
// },
{
    'id': -115,
    'name': 'Mega Rayquaza',
    'nativeRegion': GameConstants.Region.hoenn,
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 351,
    'catchRate': 1,
    'base': {
        'hitpoints': 105,
        'attack': 180,
        'specialAttack': 180,
        'defense': 100,
        'specialDefense': 100,
        'speed': 115,
    },
}, {
    'id': -793,
    'name': '???',
    'type': [PokemonType.Rock, PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 109,
        'attack': 53,
        'specialAttack': 127,
        'defense': 47,
        'specialDefense': 131,
        'speed': 103,
    },
}
// {
//     'id': -116,
//     'name': 'Primal Groudon',
//     'type': [PokemonType.Ground, PokemonType.Fire],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 100,
//         'attack': 180,
//         'specialAttack': 150,
//         'defense': 160,
//         'specialDefense': 90,
//         'speed': 90,
//     },
// },
// {
//     'id': -117,
//     'name': 'Primal Kyogre',
//     'type': [PokemonType.Water],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 100,
//         'attack': 150,
//         'specialAttack': 180,
//         'defense': 90,
//         'specialDefense': 160,
//         'speed': 90,
//     },
// },
);
const pokemonNameIndex = {};
const maxEggCycles = Math.max(...pokemonList.map(p => p.eggCycles));
// TODO move to its own initialize method that gets called on game start.
pokemonList.forEach(p => {
    var _a, _b;
    const baseOffense = 2 * Math.round(Math.sqrt(p.base.attack * p.base.specialAttack) + Math.sqrt(p.base.speed));
    const baseDefense = 2 * Math.round(Math.sqrt(p.base.defense * p.base.specialDefense) + Math.sqrt(p.base.speed));
    const baseStamina = 2 * p.base.hitpoints;
    p.attack = Math.max(10, Math.floor(Math.sqrt(baseDefense * baseStamina) * baseOffense / 250));
    if (p.baby) {
        (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.forEach(evo => {
            pokemonBabyPrevolutionMap[evo.getEvolvedPokemon()] = evo.basePokemon;
            const poke = pokemonList.find(_p => _p.name == evo.getEvolvedPokemon());
            p.eggCycles = Math.round(poke.eggCycles * 0.8);
        });
    }
    else {
        (_b = p.evolutions) === null || _b === void 0 ? void 0 : _b.forEach(evo => {
            const poke = pokemonList.find(_p => _p.name == evo.getEvolvedPokemon());
            poke.eggCycles = Math.min(maxEggCycles, Math.round(p.eggCycles * 1.5));
        });
    }
    p.nativeRegion = p.nativeRegion || GameConstants.TotalPokemonsPerRegion.findIndex(maxRegionID => maxRegionID >= Math.floor(p.id));
    pokemonNameIndex[p.name.toLowerCase()] = p;
});
const pokemonMap = new GenericProxy(pokemonList, {
    get: (pokemon, prop) => {
        if (!isNaN(+prop)) {
            const id = +prop;
            const pokemonByID = pokemon.find(p => p.id == id);
            if (pokemonByID) {
                return pokemonByID;
            }
        }
        switch (prop) {
            case 'random':
                return (_max = 0, _min = 0) => {
                    // minimum 0
                    const min = Math.max(0, Math.min(_min, _max));
                    // maximum is same as however many pokemon are available
                    const max = Math.min(pokemon.length, Math.max(_min, _max));
                    const random = Math.floor(Math.random() * (max ? max : pokemon.length) + min);
                    return pokemon[random];
                };
            case 'randomRegion':
                return (_max = GameConstants.Region.kanto, _min = GameConstants.Region.kanto) => {
                    // minimum 0 (Kanto)
                    const min = Math.max(GameConstants.Region.kanto, Math.min(_min, _max));
                    const max = Math.max(GameConstants.Region.kanto, _min, _max);
                    const filteredPokemon = pokemon.filter(p => p.id > 0 && p.nativeRegion >= min && p.nativeRegion <= max);
                    const random = Math.floor(Math.random() * filteredPokemon.length);
                    const poke = filteredPokemon[random];
                    // return a random Pokemon or MissingNo if none found
                    return poke || pokemon.find(p => p.id == 0);
                };
            default:
                return pokemonNameIndex[prop.toLowerCase()] || pokemon[prop] || pokemon.find(p => p.id == 0);
        }
    },
});
///<reference path="PokemonList.ts"/>
///<reference path="../GameConstants.d.ts"/>
var PokemonLocationType;
(function (PokemonLocationType) {
    PokemonLocationType[PokemonLocationType["Route"] = 0] = "Route";
    PokemonLocationType[PokemonLocationType["Roaming"] = 1] = "Roaming";
    PokemonLocationType[PokemonLocationType["Dungeon"] = 2] = "Dungeon";
    PokemonLocationType[PokemonLocationType["DungeonBoss"] = 3] = "DungeonBoss";
    PokemonLocationType[PokemonLocationType["Evolution"] = 4] = "Evolution";
    PokemonLocationType[PokemonLocationType["Egg"] = 5] = "Egg";
    PokemonLocationType[PokemonLocationType["Baby"] = 6] = "Baby";
    PokemonLocationType[PokemonLocationType["Shop"] = 7] = "Shop";
    PokemonLocationType[PokemonLocationType["Fossil"] = 8] = "Fossil";
    PokemonLocationType[PokemonLocationType["Safari"] = 9] = "Safari";
    PokemonLocationType[PokemonLocationType["BattleFrontier"] = 10] = "BattleFrontier";
    PokemonLocationType[PokemonLocationType["Wandering"] = 11] = "Wandering";
})(PokemonLocationType || (PokemonLocationType = {}));
class PokemonHelper {
    static getPokemonsWithEvolution(evoType) {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            if (!partyPokemon.evolutions) {
                return false;
            }
            for (const evolution of partyPokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && evolution.isSatisfied() && PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion()) {
                    return true;
                }
            }
            return false;
        });
    }
    static getEvolution(id, evoType) {
        const pokemon = App.game.party.caughtPokemon.find(p => p.id == id);
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType) {
                    return evolution.getEvolvedPokemon();
                }
            }
        }
        return '';
    }
    static getPokemonById(id) {
        return this.getPokemonByName(pokemonMap[id].name);
    }
    static getPokemonByName(name) {
        var _a;
        const basePokemon = pokemonMap[name];
        if (!basePokemon) {
            console.warn('Could not find pokemon', name);
            return;
        }
        const type1 = basePokemon['type'][0];
        const type2 = (_a = basePokemon['type'][1]) !== null && _a !== void 0 ? _a : PokemonType.None;
        const eggCycles = basePokemon['eggCycles'] || 20;
        return new DataPokemon(basePokemon['id'], basePokemon['name'], basePokemon['catchRate'], basePokemon['evolutions'], type1, type2, basePokemon['attack'], basePokemon['levelType'], basePokemon['exp'], eggCycles, basePokemon['heldItem']);
    }
    static typeStringToId(id) {
        return PokemonType[id];
    }
    static typeIdToString(id) {
        return PokemonType[id];
    }
    static getImage(pokemon, shiny) {
        let src = 'assets/images/';
        if (shiny) {
            src += 'shiny';
        }
        src += `pokemon/${pokemon.id}.png`;
        return src;
    }
    static getPokeballImage(pokemonName) {
        let src = '';
        if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id)) {
            src = 'assets/images/pokeball/Pokeball-';
            if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id, true)) {
                src += 'shiny-';
            }
            src += 'small.png';
        }
        return src;
    }
    static calcNativeRegion(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        if (pokemon.nativeRegion != undefined) {
            return pokemon.nativeRegion;
        }
        const id = pokemon.id;
        const region = GameConstants.TotalPokemonsPerRegion.findIndex(maxRegionID => maxRegionID >= Math.floor(id));
        return region >= 0 ? region : GameConstants.Region.none;
    }
    static calcUniquePokemonsByRegion(region) {
        if (region != 0) {
            return GameConstants.TotalPokemonsPerRegion[region] - Number(GameConstants.TotalPokemonsPerRegion[region - 1]);
        }
        else {
            return GameConstants.TotalPokemonsPerRegion[region];
        }
    }
    /*
    PRETTY MUCH ONLY USED BY THE BOT BELOW
    */
    static getPokemonRegionRoutes(pokemonName, maxRegion = GameConstants.Region.none) {
        const regionRoutes = {};
        Routes.regionRoutes.forEach(routeData => {
            var _a;
            const region = routeData.region;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                return false;
            }
            Object.entries(routeData.pokemon).forEach(([encounterType, pokemon]) => {
                if (Object.values(pokemon).flat().includes(pokemonName)) {
                    if (!regionRoutes[region]) {
                        regionRoutes[region] = [];
                    }
                    regionRoutes[region].push({ route: routeData.number });
                }
            });
            (_a = routeData.pokemon.special) === null || _a === void 0 ? void 0 : _a.forEach(special => {
                if (special.pokemon.includes(pokemonName)) {
                    if (!regionRoutes[region]) {
                        regionRoutes[region] = [];
                    }
                    regionRoutes[region].push({ route: routeData.number, requirements: special.req.hint() });
                }
            });
            return true;
        });
        return regionRoutes;
    }
    static getPokemonDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Grunt
            if (dungeon.pokemonList.includes(pokemonName)) {
                dungeons.push(dungeonName);
            }
        });
        return dungeons;
    }
    static getPokemonBossDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            var _a, _b;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Boss
            const boss = dungeon.availableBosses(false, true).find(boss => boss.name == pokemonName);
            if (boss) {
                const data = {
                    dungeon: dungeonName,
                    requirements: (_b = (_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) === null || _b === void 0 ? void 0 : _b.hint(),
                };
                dungeons.push(data);
            }
        });
        return dungeons;
    }
    static getPokemonEggs(pokemonName, maxRegion = GameConstants.Region.none) {
        const eggTypes = [];
        Object.entries(App.game.breeding.hatchList).forEach(([eggType, eggArr]) => {
            eggArr.forEach((pokemonArr, region) => {
                // If we only want to check up to a maximum region
                if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                    return false;
                }
                if (pokemonArr.includes(pokemonName)) {
                    eggTypes.push(EggType[eggType]);
                }
            });
        });
        return eggTypes;
    }
    static getPokemonShops(pokemonName, maxRegion = GameConstants.Region.none) {
        const shops = [];
        Object.entries(TownList).forEach(([townName, town]) => {
            // Check if the shop has items
            if (town.shop && town.shop.items) {
                // If we only want to check up to a maximum region
                const region = town.region;
                if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                    return false;
                }
                const hasPokemon = town.shop.items.find(item => item.name == pokemonName);
                if (hasPokemon) {
                    shops.push(townName);
                }
            }
        });
        return shops;
    }
    static getPokemonRoamingRegions(pokemonName, maxRegion = GameConstants.Region.none) {
        const regions = [];
        Object.entries(RoamingPokemonList.list).forEach(([region, pokemonArr]) => {
            var _a;
            if (maxRegion != GameConstants.Region.none && (+region) > maxRegion) {
                return false;
            }
            const pokemon = pokemonArr.find(r => r.pokemon.name == pokemonName);
            if (pokemon) {
                const data = {
                    region: +region,
                    requirements: (_a = pokemon.unlockRequirement) === null || _a === void 0 ? void 0 : _a.hint(),
                };
                regions.push(data);
            }
        });
        return regions;
    }
    static getPokemonParents(pokemonName, maxRegion = GameConstants.Region.none) {
        const parents = [];
        Object.entries(pokemonBabyPrevolutionMap).forEach(([parent, baby]) => {
            if (baby == pokemonName) {
                if (maxRegion != GameConstants.Region.none && pokemonMap[parent].nativeRegion > maxRegion) {
                    return false;
                }
                parents.push(parent);
            }
        });
        return parents;
    }
    static getPokemonFossils(pokemonName) {
        const fossils = [];
        Object.entries(GameConstants.FossilToPokemon).forEach(([fossil, pokemon]) => {
            if (pokemon == pokemonName) {
                fossils.push(fossil);
            }
        });
        return fossils;
    }
    static getPokemonSafariChance(pokemonName) {
        const safariPokemon = SafariPokemon.list.find(p => p.name == pokemonName);
        return safariPokemon ? +((SafariPokemon.calcPokemonWeight(safariPokemon) / SafariPokemon.listWeight()) * 100).toFixed(2) : 0;
    }
    static getPokemonPrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        const evolutions = [];
        const prevolutionPokemon = pokemonList.filter((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.getEvolvedPokemon() == pokemonName); });
        prevolutionPokemon.forEach((p) => p.evolutions.forEach(e => {
            if (e.getEvolvedPokemon() == pokemonName) {
                if (maxRegion != GameConstants.Region.none && p.nativeRegion > maxRegion) {
                    return false;
                }
                evolutions.push(e);
            }
        }));
        return evolutions;
    }
    static getPokemonLevelPrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a, _b;
        const evolutionPokemon = pokemonList.find((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.type.includes(EvolutionType.Level) && e.getEvolvedPokemon() == pokemonName); });
        if (maxRegion != GameConstants.Region.none && pokemonMap[evolutionPokemon.name].nativeRegion > maxRegion) {
            return;
        }
        return (_b = (_a = evolutionPokemon) === null || _a === void 0 ? void 0 : _a.evolutions) === null || _b === void 0 ? void 0 : _b.find(e => e.getEvolvedPokemon() == pokemonName);
    }
    static getPokemonStonePrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a, _b;
        const evolutionPokemon = pokemonList.find((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.type.includes(EvolutionType.Stone) && e.getEvolvedPokemon() == pokemonName); });
        if (maxRegion != GameConstants.Region.none && pokemonMap[evolutionPokemon.name].nativeRegion > maxRegion) {
            return;
        }
        return (_b = (_a = evolutionPokemon) === null || _a === void 0 ? void 0 : _a.evolutions) === null || _b === void 0 ? void 0 : _b.find(e => e.getEvolvedPokemon() == pokemonName);
    }
    static getPokemonBattleFrontier(pokemonName) {
        const stages = [];
        BattleFrontierMilestones.milestoneRewards.filter(m => m instanceof BattleFrontierMilestonePokemon).forEach(milestone => {
            if (milestone.pokemonName == pokemonName) {
                stages.push(milestone.stage);
            }
        });
        return stages;
    }
    static getPokemonWandering(pokemonName) {
        const berries = [];
        if (Berry.baseWander.includes(pokemonName)) {
            return ['Always'];
        }
        App.game.farming.berryData.forEach((berry) => {
            if (berry.wander.includes(pokemonName)) {
                berries.push(BerryType[berry.type]);
            }
        });
        return berries;
    }
}
PokemonHelper.getPokemonLocations = (pokemonName, maxRegion = GameConstants.Region.none) => {
    const encounterTypes = {};
    // Routes
    const regionRoutes = PokemonHelper.getPokemonRegionRoutes(pokemonName, maxRegion);
    if (Object.keys(regionRoutes).length) {
        encounterTypes[PokemonLocationType.Route] = regionRoutes;
    }
    // Dungeons
    const dungeons = PokemonHelper.getPokemonDungeons(pokemonName, maxRegion);
    if (dungeons.length) {
        encounterTypes[PokemonLocationType.Dungeon] = dungeons;
    }
    // Dungeon Boss
    const bossDungeons = PokemonHelper.getPokemonBossDungeons(pokemonName, maxRegion);
    if (bossDungeons.length) {
        encounterTypes[PokemonLocationType.DungeonBoss] = bossDungeons;
    }
    // Eggs
    const eggs = PokemonHelper.getPokemonEggs(pokemonName, maxRegion);
    if (eggs.length) {
        encounterTypes[PokemonLocationType.Egg] = eggs;
    }
    // Shops
    const shops = PokemonHelper.getPokemonShops(pokemonName, maxRegion);
    if (shops.length) {
        encounterTypes[PokemonLocationType.Shop] = shops;
    }
    // Roaming
    const roaming = PokemonHelper.getPokemonRoamingRegions(pokemonName, maxRegion);
    if (roaming.length) {
        encounterTypes[PokemonLocationType.Roaming] = roaming;
    }
    // Baby
    const parents = PokemonHelper.getPokemonParents(pokemonName, maxRegion);
    if (parents.length) {
        encounterTypes[PokemonLocationType.Baby] = parents;
    }
    // Fossil
    const fossils = PokemonHelper.getPokemonFossils(pokemonName);
    if (fossils.length) {
        encounterTypes[PokemonLocationType.Fossil] = fossils;
    }
    // Safari
    const safariChance = PokemonHelper.getPokemonSafariChance(pokemonName);
    if (safariChance) {
        encounterTypes[PokemonLocationType.Safari] = `${safariChance}%`;
    }
    // Evolution
    const evolutions = PokemonHelper.getPokemonPrevolution(pokemonName, maxRegion);
    if (evolutions.length) {
        encounterTypes[PokemonLocationType.Evolution] = evolutions;
    }
    // Battle Frontier
    const battleFrontier = PokemonHelper.getPokemonBattleFrontier(pokemonName);
    if (battleFrontier.length) {
        encounterTypes[PokemonLocationType.BattleFrontier] = battleFrontier;
    }
    // Wandering
    const wandering = PokemonHelper.getPokemonWandering(pokemonName);
    if (wandering.length) {
        encounterTypes[PokemonLocationType.Wandering] = wandering;
    }
    // Return the list of items
    return encounterTypes;
};
/// <reference path="../../declarations/GameHelper.d.ts" />
class BattlePokemon {
    /**
     * In case you want to manually create a Pokémon instead of generating it from the route number
     * @param name Pokémon name
     * @param id Pokémon
     * @param type1 First type of the Pokémon
     * @param type2 Second type of the Pokémon
     * @param maxHealth max health that the Pokémon can have
     * @param level level is 2 times the current route
     * @param catchRate base chance of catching this Pokémon
     * @param exp base exp reward for defeating this Pokémon
     * @param reward currency reward for defeating this Pokémon
     * @param shiny is a shiny variant
     * @param [heldItem] item to possibly gain for defeating this Pokémon
     */
    constructor(name, id, type1 = PokemonType.None, type2 = PokemonType.None, maxHealth, level, catchRate, exp, reward = new Amount(0, GameConstants.Currency.money), shiny, shardReward = 1, heldItem) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.level = level;
        this.catchRate = catchRate;
        this.exp = exp;
        this.reward = reward;
        this.shiny = shiny;
        this.shardReward = shardReward;
        this.heldItem = heldItem;
        this.health = ko.observable(maxHealth);
        this.maxHealth = ko.observable(maxHealth);
        this.healthPercentage = ko.observable(100);
    }
    isAlive() {
        return this.health() > 0;
    }
    /**
     * Lost health without
     * @param damage
     */
    damage(damage) {
        this.health(Math.max(0, this.health() - damage));
        this.healthPercentage(Math.floor(this.health() / this.maxHealth() * 100));
    }
    defeat(trainer = false) {
        GameHelper.incrementObservable(App.game.statistics.pokemonDefeated[this.id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonDefeated);
        if (this.shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonDefeated[this.id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonDefeated);
        }
        if (this.reward.amount > 0) {
            App.game.wallet.addAmount(this.reward);
        }
        if (this.heldItem) {
            const name = BagHandler.displayName(this.heldItem);
            BagHandler.gainItem(this.heldItem);
            const msg = `${this.name} dropped ${GameHelper.anOrA(name)} ${name}!`;
            Notifier.notify({
                message: `The enemy ${msg}`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.dropped_item,
            });
            App.game.logbook.newLog(LogBookTypes.FOUND, `An enemy ${msg}`);
        }
        App.game.party.gainExp(this.exp, this.level, trainer);
        App.game.shards.gainShards(this.shardReward, this.type1);
        App.game.shards.gainShards(this.shardReward, this.type2);
    }
}
///<reference path="PokemonHelper.ts"/>
///<reference path="BattlePokemon.ts"/>
class PokemonFactory {
    /**
     * Generate a wild pokemon based on route, region and the dataList.
     * @param route route that the player is on.
     * @param region region that the player is in.
     * @returns {any}
     */
    static generateWildPokemon(route, region) {
        if (!MapHelper.validRoute(route, region)) {
            return new BattlePokemon('Rattata', 19, PokemonType.Psychic, PokemonType.None, 10000, 1, 0, 0, new Amount(0, GameConstants.Currency.money), false, 1);
        }
        let name;
        if (PokemonFactory.roamingEncounter(route, region)) {
            name = PokemonFactory.generateRoamingEncounter(route, region);
        }
        else {
            const availablePokemonList = RouteHelper.getAvailablePokemonList(route, region);
            const rand = Math.floor(Math.random() * availablePokemonList.length);
            name = availablePokemonList[rand];
        }
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        // TODO this monster formula needs to be improved. Preferably with graphs :D
        const maxHealth = PokemonFactory.routeHealth(route, region);
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const level = this.routeLevel(route, region);
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.ROUTE_HELD_ITEM_MODIFIER);
        const money = this.routeMoney(route, region);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'wild encounter', Math.floor(App.game.statistics.totalPokemonEncountered() / App.game.statistics.totalShinyPokemonEncountered()));
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, 1, heldItem);
    }
    static routeLevel(route, region) {
        return Math.floor(MapHelper.normalizeRoute(route, region) * 2 + 20 * Math.pow(region, 2.3));
    }
    static routeHealth(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const health = Math.max(20, Math.floor(Math.pow((100 * Math.pow(route, 2.2) / 12), 1.15) * (1 + region / 20))) || 20;
        return health;
    }
    static routeMoney(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const deviation = Math.floor(Math.random() * 51) - 25;
        const money = Math.max(10, 3 * route + 5 * Math.pow(route, 1.15) + deviation);
        return money;
    }
    static routeDungeonTokens(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const tokens = Math.max(1, 6 * Math.pow(route * 2 / (2.8 / (1 + region / 3)), 1.08));
        return tokens;
    }
    /**
     * Calculate if a shiny has spawned.
     * @param chance Base chance, should be from GameConstants.SHINY_CHANCE.*
     * @returns {boolean}
     */
    static generateShiny(chance, skipBonus = false) {
        const bonus = skipBonus ? 1 : App.game.multiplier.getBonus('shiny');
        const rand = Math.floor(Math.random() * chance / bonus) + 1;
        if (rand <= 1) {
            App.game.oakItems.use(OakItems.OakItem.Shiny_Charm);
            return true;
        }
        return false;
    }
    static generatePartyPokemon(id, shiny = false) {
        const dataPokemon = PokemonHelper.getPokemonById(id);
        return new PartyPokemon(dataPokemon.id, dataPokemon.name, dataPokemon.evolutions, dataPokemon.attack, 0, 0, 0, 0, false, shiny);
    }
    /**
     * Generate a Gym trainer pokemon based on gymName, index and the dataList.
     * @param gymName name of the gym that the player is fighting.
     * @param index index of the Pokémon that is being generated.
     * @returns {any}
     */
    static generateGymPokemon(gymName, index) {
        const gym = gymList[gymName];
        const pokemon = gym.pokemons[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const exp = basePokemon.exp * 1.5;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, 0, exp, new Amount(0, GameConstants.Currency.money), shiny, GameConstants.GYM_SHARDS);
    }
    static generateDungeonPokemon(name, chestsOpened, baseHealth, level) {
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_HELD_ITEM_MODIFIER);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'dungeon encounter', Math.floor(App.game.statistics.totalPokemonEncountered() / App.game.statistics.totalShinyPokemonEncountered()));
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_SHARDS, heldItem);
    }
    static generateDungeonTrainerPokemon(pokemon, chestsOpened, baseHealth, level) {
        // TODO: HLXII - Will Dungeon Trainer pokemon health be handled differently?
        const name = pokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const exp = basePokemon.exp;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        // Reward 2% or 5% (boss) of dungeon DT cost when the trainer mons are defeated
        const tokens = Math.round(DungeonRunner.dungeon.tokenCost * (DungeonRunner.fightingBoss() ? 0.05 : 0.02));
        return new BattlePokemon(name, basePokemon.id, basePokemon.type1, basePokemon.type2, maxHealth, level, 0, exp, new Amount(tokens, GameConstants.Currency.dungeonToken), shiny, GameConstants.DUNGEON_SHARDS);
    }
    static generateDungeonBoss(bossPokemon, chestsOpened) {
        const name = bossPokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(bossPokemon.baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_BOSS_HELD_ITEM_MODIFIER);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'dungeon boss encounter', Math.floor(App.game.statistics.totalPokemonEncountered() / App.game.statistics.totalShinyPokemonEncountered()));
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, bossPokemon.level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_BOSS_SHARDS, heldItem);
    }
    static generateRoamingEncounter(route, region) {
        const possible = RoamingPokemonList.getRegionalRoamers(region);
        // Double the chance of encountering a roaming Pokemon you have not yet caught
        possible.forEach(r => {
            if (!App.game.party.alreadyCaughtPokemonByName(r.pokemon.name)) {
                possible.push(r);
            }
        });
        return possible[Math.floor(Math.random() * possible.length)].pokemon.name;
    }
    static roamingEncounter(routeNum, region) {
        // Map to the route numbers
        const route = Routes.getRoute(region, routeNum);
        const routes = Routes.getRoutesByRegion(region).map(r => MapHelper.normalizeRoute(r.number, region));
        // Check if the dice rolls in their favor
        const encounter = PokemonFactory.roamingChance(Math.max(...routes), Math.min(...routes), route, region);
        if (!encounter) {
            return false;
        }
        // There is likely to be a roamer available, so we can check this last
        const roamingPokemon = RoamingPokemonList.getRegionalRoamers(region);
        if (!routes || !routes.length || !roamingPokemon || !roamingPokemon.length) {
            return false;
        }
        // Roaming encounter
        return true;
    }
    static roamingChance(maxRoute, minRoute, curRoute, region, max = GameConstants.ROAMING_MAX_CHANCE, min = GameConstants.ROAMING_MIN_CHANCE) {
        var _a;
        const routeNum = MapHelper.normalizeRoute(curRoute === null || curRoute === void 0 ? void 0 : curRoute.number, region);
        // Check if we should have increased chances on this route (3 x rate)
        const increasedChance = ((_a = RoamingPokemonList.getIncreasedChanceRouteByRegion(player.region)()) === null || _a === void 0 ? void 0 : _a.number) == (curRoute === null || curRoute === void 0 ? void 0 : curRoute.number);
        const roamingChance = (max + ((min - max) * (maxRoute - routeNum) / (maxRoute - minRoute))) / (increasedChance ? 3 : 1);
        return Math.random() < 1 / roamingChance;
    }
    static catchRateHelper(baseCatchRate, noVariation = false) {
        const catchVariation = noVariation ? 0 : GameConstants.randomIntBetween(-3, 3);
        const catchRateRaw = Math.floor(Math.pow(baseCatchRate, 0.75)) + catchVariation;
        return GameConstants.clipNumber(catchRateRaw, 0, 100);
    }
    static generateHeldItem(item, modifier) {
        if (!item || !BagHandler.displayName(item)) {
            return null;
        }
        let chance = GameConstants.HELD_ITEM_CHANCE;
        switch (item.type) {
            case ItemType.underground:
                chance = GameConstants.HELD_UNDERGROUND_ITEM_CHANCE;
                break;
            default:
                chance = GameConstants.HELD_ITEM_CHANCE;
                break;
        }
        chance /= modifier;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Item_magnet)()) {
            chance /= 1.5;
        }
        const rand = Math.floor(Math.random() * chance) + 1;
        if (rand <= 1) {
            return item;
        }
        return null;
    }
}
///<reference path="pokemons/PokemonFactory.ts"/>
/// <reference path="../declarations/GameHelper.d.ts" />
/**
 * Handles all logic related to battling
 */
class Battle {
    /**
     * Probably not needed right now, but might be if we add more logic to a gameTick.
     */
    static tick() {
        this.counter = 0;
        this.pokemonAttack();
    }
    /**
     * Attacks with Pokémon and checks if the enemy is defeated.
     */
    static pokemonAttack() {
        var _a;
        // TODO: figure out a better way of handling this
        // Limit pokemon attack speed, Only allow 1 attack per 900ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - (1000 / 3 - 10)) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Attacks with clicks and checks if the enemy is defeated.
     */
    static clickAttack() {
        var _a;
        // click attacks disabled and we already beat the starter
        if (App.game.challenges.list.disableClickAttack.active() &&
            player.starter() != GameConstants.Starter.None) {
            return;
        }
        // TODO: figure out a better way of handling this
        // Limit click attack speed, Only allow 1 attack per 50ms (20 per second)
        const now = Date.now();
        if (this.lastClickAttack > now - 50) {
            return;
        }
        this.lastClickAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        GameHelper.incrementObservable(App.game.statistics.clickAttacks);
        this.enemyPokemon().damage(App.game.party.calculateClickAttack(true));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        const enemyPokemon = this.enemyPokemon();
        enemyPokemon.defeat();
        GameHelper.incrementObservable(App.game.statistics.routeKills[player.region][player.route()]);
        App.game.breeding.progressEggsBattle(player.route(), player.region);
        const isShiny = enemyPokemon.shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon);
                if (player.route() != 0) {
                    this.generateNewEnemy();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else {
            this.generateNewEnemy();
        }
        this.gainItem();
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Generate a new enemy based on the current route and region.
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateWildPokemon(player.route(), player.region));
        const enemyPokemon = this.enemyPokemon();
        GameHelper.incrementObservable(App.game.statistics.pokemonEncountered[enemyPokemon.id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonEncountered);
        if (enemyPokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonEncountered[enemyPokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonEncountered);
            App.game.logbook.newLog(LogBookTypes.SHINY, `You encountered a wild shiny ${enemyPokemon.name} on route ${player.route()}.`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(Battle.enemyPokemon().id)) {
            App.game.logbook.newLog(LogBookTypes.NEW, `You encountered a wild ${enemyPokemon.name} on route ${player.route()}.`);
        }
    }
    static calculateActualCatchRate(enemyPokemon, pokeBall) {
        const pokeballBonus = App.game.pokeballs.getCatchBonus(pokeBall);
        const oakBonus = App.game.oakItems.calculateBonus(OakItems.OakItem.Magic_Ball);
        const totalChance = GameConstants.clipNumber(enemyPokemon.catchRate + pokeballBonus + oakBonus, 0, 100);
        return totalChance;
    }
    static prepareCatch(enemyPokemon, pokeBall) {
        this.pokeball(pokeBall);
        this.catching(true);
        this.catchRateActual(this.calculateActualCatchRate(enemyPokemon, pokeBall));
        App.game.pokeballs.usePokeball(pokeBall);
    }
    static attemptCatch(enemyPokemon) {
        if (enemyPokemon == null) {
            this.catching(false);
            return;
        }
        const random = Math.floor(Math.random() * 100);
        if (random <= this.catchRateActual()) {
            // Caught
            this.catchPokemon(enemyPokemon);
        }
        else if (enemyPokemon.shiny) {
            // Failed to catch, Shiny
            App.game.logbook.newLog(LogBookTypes.ESCAPED, `The Shiny ${enemyPokemon.name} escaped!`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(enemyPokemon.id)) {
            // Failed to catch, Uncaught
            App.game.logbook.newLog(LogBookTypes.ESCAPED, `The wild ${enemyPokemon.name} escaped!`);
        }
        this.catching(false);
        this.catchRateActual(null);
    }
    static catchPokemon(enemyPokemon) {
        var _a, _b;
        const route = player.route() || ((_b = (_a = player.town()) === null || _a === void 0 ? void 0 : _a.dungeon) === null || _b === void 0 ? void 0 : _b.difficultyRoute) || 1;
        App.game.wallet.gainDungeonTokens(PokemonFactory.routeDungeonTokens(route, player.region));
        App.game.oakItems.use(OakItems.OakItem.Magic_Ball);
        App.game.party.gainPokemonById(enemyPokemon.id, enemyPokemon.shiny);
    }
    static gainItem() {
        const p = player.route() / 1600 + 0.009375;
        if (Math.random() < p) {
            App.game.farming.gainRandomBerry();
        }
    }
}
Battle.enemyPokemon = ko.observable(null);
Battle.counter = 0;
Battle.catching = ko.observable(false);
Battle.catchRateActual = ko.observable(null);
Battle.pokeball = ko.observable(GameConstants.Pokeball.Pokeball);
Battle.lastPokemonAttack = Date.now();
Battle.lastClickAttack = Date.now();
/// <reference path="../declarations/DataStore/BadgeCase.d.ts" />
/// <reference path="../declarations/GameHelper.d.ts" />
/**
 * Main game class.
 */
class Game {
    /**
     * TODO(@Isha) pass all features through the constructor
     */
    constructor(update, profile, breeding, pokeballs, wallet, keyItems, badgeCase, oakItems, oakItemLoadouts, categories, party, shards, underground, farming, logbook, redeemableCodes, statistics, quests, specialEvents, discord, achievementTracker, challenges, multiplier) {
        this.update = update;
        this.profile = profile;
        this.breeding = breeding;
        this.pokeballs = pokeballs;
        this.wallet = wallet;
        this.keyItems = keyItems;
        this.badgeCase = badgeCase;
        this.oakItems = oakItems;
        this.oakItemLoadouts = oakItemLoadouts;
        this.categories = categories;
        this.party = party;
        this.shards = shards;
        this.underground = underground;
        this.farming = farming;
        this.logbook = logbook;
        this.redeemableCodes = redeemableCodes;
        this.statistics = statistics;
        this.quests = quests;
        this.specialEvents = specialEvents;
        this.discord = discord;
        this.achievementTracker = achievementTracker;
        this.challenges = challenges;
        this.multiplier = multiplier;
        this._gameState = ko.observable(GameConstants.GameState.paused);
        AchievementHandler.initialize(multiplier, challenges);
        FarmController.initialize();
        EffectEngineRunner.initialize(multiplier);
    }
    load() {
        const saveJSON = localStorage.getItem(`save${Save.key}`);
        const saveObject = JSON.parse(saveJSON || '{}');
        Object.keys(this)
            .filter((key) => { var _a; return (_a = this[key]) === null || _a === void 0 ? void 0 : _a.saveKey; })
            .forEach((key) => {
            try {
                const saveKey = this[key].saveKey;
                // Load our save object or the default save data
                this[key].fromJSON(saveObject[saveKey] || this[key].toJSON());
            }
            catch (error) {
                console.error('Unable to load sava data from JSON for:', key, '\nError:\n', error);
            }
        });
    }
    initialize() {
        this.profile.initialize();
        this.breeding.initialize();
        this.pokeballs.initialize();
        this.keyItems.initialize();
        this.oakItems.initialize();
        this.underground.initialize();
        this.farming.initialize();
        this.specialEvents.initialize();
        this.load();
        // TODO refactor to proper initialization methods
        Battle.generateNewEnemy();
        this.farming.resetAuras();
        //Safari.load();
        Underground.energyTick(this.underground.getEnergyRegenTime());
        AchievementHandler.calculateMaxBonus(); //recalculate bonus based on active challenges
        const now = new Date();
        DailyDeal.generateDeals(this.underground.getDailyDealsMax(), now);
        BerryDeal.generateDeals(now);
        Weather.generateWeather(now);
        RoamingPokemonList.generateIncreasedChanceRoutes(now);
        this.gameState = GameConstants.GameState.fighting;
    }
    start() {
        console.log(`[${GameConstants.formatDate(new Date())}] %cGame started`, 'color:#2ecc71;font-weight:900;');
        if (player.starter() === GameConstants.Starter.None) {
            StartSequenceRunner.start();
        }
        this.interval = setInterval(this.gameTick.bind(this), GameConstants.TICK_TIME);
    }
    stop() {
        clearTimeout(this.interval);
    }
    gameTick() {
        // Acheivements
        Game.achievementCounter += GameConstants.TICK_TIME;
        if (Game.achievementCounter >= GameConstants.ACHIEVEMENT_TICK) {
            Game.achievementCounter = 0;
            AchievementHandler.checkAchievements();
            GameHelper.incrementObservable(App.game.statistics.secondsPlayed);
        }
        // Battles
        switch (this.gameState) {
            case GameConstants.GameState.fighting: {
                Battle.counter += GameConstants.TICK_TIME;
                if (Battle.counter >= GameConstants.BATTLE_TICK) {
                    Battle.tick();
                }
                break;
            }
            case GameConstants.GameState.gym: {
                GymBattle.counter += GameConstants.TICK_TIME;
                if (GymBattle.counter >= GameConstants.BATTLE_TICK) {
                    GymBattle.tick();
                }
                GymRunner.tick();
                break;
            }
            case GameConstants.GameState.dungeon: {
                DungeonBattle.counter += GameConstants.TICK_TIME;
                if (DungeonBattle.counter >= GameConstants.BATTLE_TICK) {
                    DungeonBattle.tick();
                }
                DungeonRunner.tick();
                break;
            }
            case GameConstants.GameState.battleFrontier: {
                BattleFrontierBattle.counter += GameConstants.TICK_TIME;
                if (BattleFrontierBattle.counter >= GameConstants.BATTLE_FRONTIER_TICK) {
                    BattleFrontierBattle.tick();
                }
                BattleFrontierRunner.tick();
                break;
            }
        }
        // Auto Save
        Save.counter += GameConstants.TICK_TIME;
        if (Save.counter > GameConstants.SAVE_TICK) {
            const old = new Date(player._lastSeen);
            const now = new Date();
            // Check if it's a new day
            if (old.toLocaleDateString() !== now.toLocaleDateString()) {
                // Give the player a free quest refresh
                this.quests.freeRefresh(true);
                //Refresh the Underground deals
                DailyDeal.generateDeals(this.underground.getDailyDealsMax(), now);
                BerryDeal.generateDeals(now);
                Notifier.notify({
                    title: 'It\'s a new day!',
                    message: 'Your Underground deals have been updated.<br/><i>You have a free quest refresh.</i>',
                    type: NotificationConstants.NotificationOption.info,
                    timeout: 3e4,
                });
            }
            // Check if it's a new hour
            if (old.getHours() !== now.getHours()) {
                Weather.generateWeather(now);
                RoamingPokemonList.generateIncreasedChanceRoutes(now);
            }
            // Save the game
            player._lastSeen = Date.now();
            Save.store(player);
        }
        // Underground
        Underground.counter += GameConstants.TICK_TIME;
        if (Underground.counter >= GameConstants.UNDERGROUND_TICK) {
            Underground.energyTick(Math.max(0, Underground.energyTick() - 1));
            if (Underground.energyTick() == 0) {
                // Check completed in case mine is locked out
                Mine.checkCompleted();
                this.underground.gainEnergy();
                Underground.energyTick(this.underground.getEnergyRegenTime());
            }
            Underground.counter = 0;
        }
        // Farm
        this.farming.update(GameConstants.TICK_TIME / GameConstants.SECOND);
        // Effect Engine (battle items)
        EffectEngineRunner.counter += GameConstants.TICK_TIME;
        if (EffectEngineRunner.counter >= GameConstants.EFFECT_ENGINE_TICK) {
            EffectEngineRunner.tick();
        }
        // Game timers
        GameHelper.counter += GameConstants.TICK_TIME;
        if (GameHelper.counter >= GameConstants.MINUTE) {
            GameHelper.tick();
        }
    }
    save() { }
    // Knockout getters/setters
    get gameState() {
        return this._gameState();
    }
    set gameState(value) {
        this._gameState(value);
    }
}
Game.achievementCounter = 0;
/**
 * Class which controls the UI of the game.
 */
class GameController {
    static applyRouteBindings() {
        $('path, rect').hover(function () {
            const id = $(this).attr('data-town');
            if (id && id != 'mapTooltipWrapper') {
                const tooltip = $('#mapTooltip');
                tooltip.text(id);
                tooltip.css('visibility', 'visible');
            }
        }, () => {
            const tooltip = $('#mapTooltip');
            tooltip.text('');
            tooltip.css('visibility', 'hidden');
        });
    }
    static simulateKey(code, type = 'keydown', modifiers = {}) {
        const evtName = type.startsWith('key') ? type : `key${type}`;
        const event = document.createEvent('HTMLEvents');
        Object.defineProperties(event, {
            code: { value: code },
        });
        event.initEvent(evtName, true, false);
        for (const i in modifiers) {
            event[i] = modifiers[i];
        }
        document.dispatchEvent(event);
    }
    static bindToolTips() {
        $('[data-toggle="popover"]').popover();
        $('[data-toggle="tooltip"]').tooltip();
        ko.bindingHandlers.tooltip = {
            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                const local = ko.utils.unwrapObservable(valueAccessor()), options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                $(element).tooltip(options);
                ko.utils.domNodeDisposal.addDisposeCallback(element, () => {
                    $(element).tooltip('dispose');
                });
            },
            'update': function (element, valueAccessor) {
                const local = ko.utils.unwrapObservable(valueAccessor());
                const options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                // Update the config of the tooltip
                const tooltipData = $(element).data('bs.tooltip');
                tooltipData.config.title = options.title;
                // If the tooltip is visible, update its text
                const tooltipInner = tooltipData.tip && tooltipData.tip.querySelector('.tooltip-inner');
                if (tooltipInner) {
                    tooltipInner.innerHTML = tooltipData.config.title || '';
                }
                if (tooltipData && tooltipData.config) {
                    if (tooltipData.config.title === '') {
                        $(element).tooltip('hide');
                    }
                }
            },
            options: {
                placement: 'bottom',
                trigger: 'click',
            },
        };
    }
    static focusedOnEditableElement() {
        const activeEl = document.activeElement;
        const localName = activeEl.localName.toLowerCase();
        const editables = ['textarea', 'input', 'select'];
        return (editables.includes(localName) || activeEl.isContentEditable);
    }
    static addKeyListeners() {
        // Oak Items
        const $oakItemsModal = $('#oakItemsModal');
        $oakItemsModal.on('hidden.bs.modal shown.bs.modal', _ => $oakItemsModal.data('disable-toggle', false));
        const oakItems = App.game.oakItems;
        // Pokeball Selector
        const $pokeballSelector = $('#pokeballSelectorModal');
        const pokeballs = App.game.pokeballs;
        // Underground
        const $undergroundModal = $('#mineModal');
        $(document).on('keydown', e => {
            var _a, _b, _c, _d, _e, _f;
            // Ignore any of our controls if focused on an input element
            if (this.focusedOnEditableElement()) {
                return;
            }
            // Set flags for any key currently pressed down (used to check if key held down currently)
            GameController.keyHeld[e.code] = true;
            switch (e.code) {
                case 'KeyO':
                    // Open oak items with 'O'
                    if (oakItems.canAccess() && !$oakItemsModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $oakItemsModal.data('disable-toggle', true);
                        $oakItemsModal.modal('toggle');
                    }
                    break;
                default:
                    let numKey = +e.key;
                    // Check for a number key being pressed
                    if (!isNaN(numKey)) {
                        // Make our number keys 1 indexed instead of 0
                        numKey -= 1;
                        if (GameController.keyHeld['KeyP']) {
                            // Open pokeball selector modal using P + (1-4) for each condition
                            if (!((_a = $pokeballSelector.data('bs.modal')) === null || _a === void 0 ? void 0 : _a._isShown)) {
                                $('.modal').modal('hide');
                            }
                            (_b = $('#pokeballSelectorBody .clickable.pokeball-selected').eq(numKey)) === null || _b === void 0 ? void 0 : _b.trigger('click');
                        }
                        else if ((_c = $pokeballSelector.data('bs.modal')) === null || _c === void 0 ? void 0 : _c._isShown) {
                            // Select Pokeball from pokeball selector (0 = none)
                            if (numKey < App.game.pokeballs.pokeballs.length) {
                                pokeballs.selectedSelection()(numKey);
                            }
                        }
                        else if ((_d = $oakItemsModal.data('bs.modal')) === null || _d === void 0 ? void 0 : _d._isShown) {
                            // Toggle oak items
                            if (oakItems.isUnlocked(numKey)) {
                                if (oakItems.isActive(numKey)) {
                                    oakItems.deactivate(numKey);
                                }
                                else {
                                    oakItems.activate(numKey);
                                }
                            }
                        }
                        else if ((_e = $undergroundModal.data('bs.modal')) === null || _e === void 0 ? void 0 : _e._isShown) {
                            if (numKey == 0) {
                                ItemList['SmallRestore'].use();
                            }
                            else if (numKey == 1) {
                                ItemList['MediumRestore'].use();
                            }
                            else if (numKey == 2) {
                                ItemList['LargeRestore'].use();
                            }
                        }
                    }
            }
            if (App.game.gameState === GameConstants.GameState.dungeon) {
                switch (e.code) {
                    case 'ArrowUp':
                    case 'KeyW':
                        DungeonRunner.map.moveUp();
                        break;
                    case 'ArrowLeft':
                    case 'KeyA':
                        DungeonRunner.map.moveLeft();
                        break;
                    case 'ArrowDown':
                    case 'KeyS':
                        DungeonRunner.map.moveDown();
                        break;
                    case 'ArrowRight':
                    case 'KeyD':
                        DungeonRunner.map.moveRight();
                        break;
                    case 'Space':
                        if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.entrance) {
                            DungeonRunner.dungeonLeave();
                        }
                        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.chest) {
                            DungeonRunner.openChest();
                        }
                        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.boss && !DungeonRunner.fightingBoss()) {
                            DungeonRunner.startBossFight();
                        }
                        break;
                    default: // any other key (ignore)
                        return;
                }
                e.preventDefault();
            }
            else if (App.game.gameState === GameConstants.GameState.town) {
                if (e.code === 'Space') {
                    if (player.town().gym) {
                        GymRunner.startGym(player.town().gym);
                    }
                    else if (player.town().dungeon) {
                        DungeonRunner.initializeDungeon(player.town().dungeon);
                    }
                    e.preventDefault();
                }
                else if ('gymList' in player.town()) {
                    // Dont start if modal is show/shown
                    if (!((_f = $('#receiveBadgeModal').data('bs.modal')) === null || _f === void 0 ? void 0 : _f._isShown)) {
                        const number = Number(e.key);
                        // Check if a number higher than 0 and less than total Gyms was pressed
                        if (number && number <= player.town().gymList.length) {
                            GymRunner.startGym(player.town().gymList[number - 1]);
                        }
                    }
                }
            }
            else if (App.game.gameState === GameConstants.GameState.fighting) {
                // Allow '=' to fallthrough to '+' since they share a key on many keyboards
                switch (e.key) {
                    case '=':
                    case '+':
                        MapHelper.moveToRoute(player.route() + 1, player.region);
                        break;
                    case '-':
                        MapHelper.moveToRoute(player.route() - 1, player.region);
                        break;
                    default: // any other key (ignore)
                        return;
                }
                e.preventDefault();
            }
            else if (App.game.gameState === GameConstants.GameState.safari) {
                const dir = GameConstants.KeyCodeToDirection[e.code];
                if (dir) {
                    e.preventDefault();
                    Safari.move(dir);
                }
                if (e.code === 'Space') {
                    e.preventDefault();
                }
            }
        });
        $(document).on('keyup', e => {
            // Ignore any of our controls if focused on an input element
            if (this.focusedOnEditableElement()) {
                return;
            }
            // Our key is no longer being held down
            delete GameController.keyHeld[e.code];
            if (App.game.gameState === GameConstants.GameState.safari) {
                const dir = GameConstants.KeyCodeToDirection[e.code];
                if (dir) {
                    e.preventDefault();
                    Safari.stop(dir);
                }
                else if (e.code === 'Space') {
                    e.preventDefault();
                }
            }
        });
    }
}
// Store keys for multi-key combinations
GameController.keyHeld = {};
$(document).ready(() => {
    $('#pokedexModal').on('show.bs.modal', PokedexHelper.updateList);
});
// when stacking modals allow scrolling after top modal hidden
$(document).on('hidden.bs.modal', '.modal', () => {
    $('.modal:visible').length && $(document.body).addClass('modal-open');
});
class Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        this.defaults = {
            level: 0,
        };
        this._level = ko.observable();
        // Optional array of costs
        this.costList = [];
        // Optional array of benefits
        this.bonusList = [];
        this.saveKey = name;
        this.name = name;
        this.displayName = displayName;
        this.maxLevel = maxLevel;
        this.level = this.defaults.level;
        this.costList = costList;
        this.bonusList = bonusList;
        this.increasing = increasing;
    }
    calculateCost() {
        return this.costList[this.level];
    }
    // Override with a custom function
    calculateBonus(level = this.level) {
        return this.bonusList[level];
    }
    upgradeBonus() {
        if (!this.isMaxLevel()) {
            return this.calculateBonus(this.level + 1) - this.calculateBonus(this.level);
        }
        return 0;
    }
    isMaxLevel() {
        return this.level >= this.maxLevel;
    }
    canAfford() {
        return App.game.wallet.hasAmount(this.calculateCost());
    }
    // Override in subclass when other requirements exist.
    canBuy() {
        return this.level < this.maxLevel && this.canAfford();
    }
    buy() {
        if (this.canBuy()) {
            App.game.wallet.loseAmount(this.calculateCost());
            this.levelUp();
        }
        else {
            Notifier.notify({
                message: 'You cannot afford to buy this upgrade yet',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    levelUp() {
        this.level = this.level + 1;
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        this.level = (_a = json['level']) !== null && _a !== void 0 ? _a : this.defaults.level;
    }
    toJSON() {
        return {
            level: this.level,
        };
    }
    // Knockout getters/setters
    get level() {
        return this._level();
    }
    set level(value) {
        this._level(Math.min(value, this.maxLevel));
    }
}
/// <reference path="upgrades/Upgrade.ts" />
/**
 * Required modules before porting:
 * Save.ts
 * upgrades/Upgrade.ts
 * towns/Town.ts - Town, TownList
 * worldmap/MapHelper.ts
 * items/Item.ts - ItemList
 */
/**
 * Information about the player.
 * All player variables need to be saved.
 */
class Player {
    constructor(savedPlayer) {
        this._timeTraveller = false;
        this.effectList = {};
        this.effectTimer = {};
        const saved = (savedPlayer != null);
        savedPlayer = savedPlayer || {};
        this._lastSeen = savedPlayer._lastSeen || 0;
        this._timeTraveller = savedPlayer._timeTraveller || false;
        if (this._lastSeen > Date.now()) {
            Notifier.notify({
                title: 'Welcome Time Traveller!',
                message: 'Please ensure you keep a backup of your old save as travelling through time can cause some serious problems.\n\nAny Pokemon you may have obtained in the future could cease to exist which could corrupt your save file!',
                type: NotificationConstants.NotificationOption.danger,
                timeout: GameConstants.HOUR,
            });
            this._timeTraveller = true;
        }
        this._region = ko.observable(savedPlayer._region);
        if (MapHelper.validRoute(savedPlayer._route, savedPlayer._region)) {
            this._route = ko.observable(savedPlayer._route);
        }
        else {
            switch (savedPlayer._region) {
                case 0:
                    this._route = ko.observable(1);
                    break;
                case 1:
                    this._route = ko.observable(29);
                    break;
                case 2:
                    this._route = ko.observable(101);
                    break;
                case 3:
                    this._route = ko.observable(201);
                    break;
                default:
                    this._route = ko.observable(1);
                    this._region = ko.observable(GameConstants.Region.kanto);
            }
        }
        this._town = ko.observable(TownList['Pallet Town']);
        this.starter = ko.observable(savedPlayer.starter != undefined ? savedPlayer.starter : GameConstants.Starter.None);
        this._itemList = Save.initializeItemlist();
        if (savedPlayer._itemList) {
            for (const key in savedPlayer._itemList) {
                if (this._itemList[key]) {
                    this._itemList[key](savedPlayer._itemList[key]);
                }
            }
        }
        this._itemMultipliers = savedPlayer._itemMultipliers || Save.initializeMultipliers();
        // TODO(@Isha) move to underground classes.
        const mineInventory = (savedPlayer.mineInventory || [])
            // TODO: Convert this to object spread after we're on TS modules
            .map((v) => Object.assign({}, v, { amount: ko.observable(v.amount) }));
        this.mineInventory = ko.observableArray(mineInventory);
        this.achievementsCompleted = savedPlayer.achievementsCompleted || {};
        const today = new Date();
        const lastSeen = new Date(this._lastSeen);
        this._lastSeen = Date.now();
        this.effectList = Save.initializeEffects(savedPlayer.effectList || {});
        this.effectTimer = Save.initializeEffectTimer(savedPlayer.effectTimer || {});
        this.highestRegion = ko.observable(savedPlayer.highestRegion || 0);
    }
    set itemList(value) {
        this._itemList = value;
    }
    get itemList() {
        return this._itemList;
    }
    get itemMultipliers() {
        return this._itemMultipliers;
    }
    get route() {
        return this._route;
    }
    set route(value) {
        this._route = value;
    }
    get region() {
        return this._region();
    }
    set region(value) {
        this._region(value);
    }
    get town() {
        return this._town;
    }
    set town(value) {
        this._town = value;
    }
    gainItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() + amount);
    }
    loseItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() - amount);
    }
    lowerItemMultipliers(multiplierDecreaser, amount = 1) {
        for (const obj in ItemList) {
            const item = ItemList[obj];
            item.decreasePriceMultiplier(amount, multiplierDecreaser);
        }
    }
    // TODO(@Isha) move to underground classes.
    hasMineItems() {
        for (let i = 0; i < this.mineInventory().length; i++) {
            if (this.mineInventory()[i].amount() > 0) {
                return true;
            }
        }
        return false;
    }
    // TODO(@Isha) move to underground classes.
    mineInventoryIndex(id) {
        return player.mineInventory().findIndex(i => i.id == id);
    }
    // TODO(@Isha) move to underground classes.
    getUndergroundItemAmount(id) {
        var _a;
        return ((_a = player.mineInventory().find(i => i.id == id)) === null || _a === void 0 ? void 0 : _a.amount()) || 0;
    }
    toJSON() {
        const keep = [
            '_route',
            '_region',
            '_itemList',
            '_itemMultipliers',
            'starter',
            // TODO(@Isha) remove.
            'mineInventory',
            // TODO(@Isha) remove.
            '_mineLayersCleared',
            'achievementsCompleted',
            '_lastSeen',
            '_timeTraveller',
            'gymDefeats',
            'achievementsCompleted',
            'effectList',
            'effectTimer',
            'highestRegion',
        ];
        const plainJS = ko.toJS(this);
        return Save.filter(plainJS, keep);
    }
}
class Save {
    static store(player) {
        const json = JSON.stringify(player);
        localStorage.setItem(`player${Save.key}`, json);
        localStorage.setItem('settings', Settings.save());
        localStorage.setItem(`save${Save.key}`, JSON.stringify(this.getSaveObject()));
        this.counter = 0;
        console.log('%cGame saved', 'color:#3498db;font-weight:900;');
    }
    static getSaveObject() {
        const saveObject = {};
        Object.keys(App.game).filter(key => App.game[key].saveKey).forEach(key => {
            saveObject[App.game[key].saveKey] = App.game[key].toJSON();
        });
        return saveObject;
    }
    static load() {
        const saved = localStorage.getItem(`player${Save.key}`);
        const settings = localStorage.getItem('settings');
        Settings.load(JSON.parse(settings));
        if (saved !== 'null') {
            return new Player(JSON.parse(saved));
        }
        else {
            return new Player();
        }
    }
    static download() {
        const backupSaveData = { player, save: this.getSaveObject() };
        try {
            const element = document.createElement('a');
            element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(JSON.stringify(backupSaveData)))}`);
            const datestr = GameConstants.formatDate(new Date());
            const filename = `[v${App.game.update.version}] PokeClickerSave_${datestr}.txt`;
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }
        catch (err) {
            console.error('Error trying to download save', err);
            Notifier.notify({
                title: 'Failed to download save data',
                message: 'Please check the console for errors, and report them on our Discord.',
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = JSON.stringify(backupSaveData);
            }
            catch (e) { }
        }
    }
    static delete() {
        return __awaiter(this, void 0, void 0, function* () {
            const confirmDelete = yield Notifier.prompt({
                title: 'Delete save file',
                message: 'Are you sure you want delete your save file?\n\nTo confirm, type "DELETE"',
                type: NotificationConstants.NotificationOption.danger,
                timeout: 6e4,
            });
            if (confirmDelete == 'DELETE') {
                localStorage.removeItem(`player${Save.key}`);
                localStorage.removeItem(`save${Save.key}`);
                location.reload();
            }
        });
    }
    /** Filters an object by property names
     * @param     object : any The object you want to filter
     * @param       keep : string[] An array of property names that should be kept
     * @returns {Object} : The original object with only the specified properties
     */
    static filter(object, keep) {
        const filtered = {};
        let prop;
        for (prop in object) {
            if (keep.includes(prop)) {
                filtered[prop] = object[prop];
            }
        }
        return filtered;
    }
    static initializeMultipliers() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = 1;
        }
        return res;
    }
    static initializeItemlist() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = ko.observable(0).extend({ numeric: 0 });
        }
        return res;
    }
    static initializeShards(saved) {
        let res;
        if (saved) {
            res = saved.map((type) => {
                return type.map((effectiveness) => {
                    return ko.observable(effectiveness);
                });
            });
        }
        else {
            res = [];
            for (const item in PokemonType) {
                if (!isNaN(Number(item))) {
                    res[item] = [];
                    res[item][GameConstants.TypeEffectiveness.Immune] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.NotVery] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Normal] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Very] = ko.observable(0);
                }
            }
        }
        return res;
    }
    static initializeEffects(saved) {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        return res;
    }
    static initializeEffectTimer(saved) {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || '00:00' : '00:00');
        }
        return res;
    }
    static loadFromFile(file) {
        const fileToRead = file;
        const fr = new FileReader();
        fr.readAsText(fileToRead);
        setTimeout(() => {
            try {
                const decoded = atob(fr.result);
                console.debug('decoded:', decoded);
                const json = JSON.parse(decoded);
                console.debug('json:', json);
                if (decoded && json && json.player && json.save) {
                    localStorage.setItem(`player${Save.key}`, JSON.stringify(json.player));
                    localStorage.setItem(`save${Save.key}`, JSON.stringify(json.save));
                    location.reload();
                }
                else {
                    Notifier.notify({
                        message: 'This is not a valid decoded savefile',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
            }
            catch (err) {
                Notifier.notify({
                    message: 'This is not a valid savefile',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        }, 1000);
    }
    static convert() {
        const base64 = $('#convertTextArea').val().toString();
        try {
            const json = atob(base64);
            const p = JSON.parse(json);
            Save.convertShinies(p.caughtPokemonList);
            $('#saveModal').modal('hide');
        }
        catch (e) {
            Notifier.notify({
                message: 'Invalid save data.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    static convertShinies(list) {
        const converted = [];
        list = list.filter(p => p.shiny);
        for (const pokemon of list) {
            const id = +pokemon.id;
            const partyPokemon = App.game.party.getPokemon(id);
            if (partyPokemon) {
                converted.push(pokemon.name);
                partyPokemon.shiny = true;
            }
        }
        if (converted.length > 0) {
            Notifier.notify({
                message: `You have gained the following shiny Pokémon:</br>${converted.join(',</br>')}`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
        }
        else {
            Notifier.notify({
                message: 'No new shiny Pokémon to import.',
                type: NotificationConstants.NotificationOption.info,
            });
        }
    }
}
Save.counter = 0;
Save.key = '';
document.addEventListener('DOMContentLoaded', () => {
    $('#saveModal').on('show.bs.modal', () => {
        $('#saveTextArea').text(JSON.stringify(player));
    });
});
$(() => {
    const columns = ['left-column', 'middle-top-sort-column', 'middle-bottom-sort-column', 'right-column'];
    // Enable sorting of items
    columns.forEach(column => {
        Sortable.create(document.getElementById(column), {
            animation: 100,
            group: 'main-sortable',
            draggable: '.card.sortable',
            handle: '.card-header',
            dataIdAttr: 'id',
            sort: true,
            delay: 500,
            delayOnTouchOnly: true,
            touchStartThreshold: 20,
            store: {
                set: sortable => {
                    const order = sortable.toArray();
                    localStorage.setItem(sortable.el.id, order.join('|'));
                    // Clear out whitespace
                    if (/^([\s\r\n\t]|<!--.*-->)+$/.test(sortable.el.innerHTML)) {
                        sortable.el.innerHTML = '';
                    }
                },
            },
            onSort: evt => {
                const currentSortable = evt.to[Object.keys(evt.to)[0]];
                const order = currentSortable.toArray();
                localStorage[currentSortable.el.id] = order.join('|');
            },
        });
    });
    // Sort the items between columns, in order
    columns.forEach(sortable => {
        const parent = document.getElementById(sortable);
        const itemOrder = localStorage.getItem(sortable);
        const itemOrderArr = itemOrder ? itemOrder.split('|') : [];
        let prevItem;
        itemOrderArr.forEach(item => {
            const child = document.getElementById(item);
            if (!prevItem) {
                parent.insertBefore(child, parent.firstChild);
            }
            else {
                const prevChild = document.getElementById(prevItem);
                prevChild.parentNode.insertBefore(child, prevChild.nextSibling);
            }
            prevItem = item;
        });
    });
    // Clear out whitespace
    columns.forEach(sortable => {
        const el = document.getElementById(sortable);
        if (/^([\s\r\n\t]|<!--.*-->)+$/.test(el.innerHTML)) {
            el.innerHTML = '';
        }
    });
});
class StartSequenceRunner {
    static start() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#startSequenceModal').modal('show');
    }
    static pickStarter(s) {
        // Reload the achievements in case the user has any challenge modes activated
        AchievementHandler.load();
        App.game.quests.getQuestLine('Tutorial Quests').beginQuest(0);
        this.starterPicked = s;
        $('#pickStarterModal').modal('hide');
        const dataPokemon = PokemonHelper.getPokemonByName(GameConstants.Starter[this.starterPicked]);
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        App.game.gameState = GameConstants.GameState.fighting;
        const battlePokemon = new BattlePokemon(dataPokemon.name, dataPokemon.id, dataPokemon.type1, dataPokemon.type2, 10, 1, 100, 0, new Amount(0, GameConstants.Currency.money), shiny);
        Battle.enemyPokemon(battlePokemon);
        // Show the help information text
        Information.show({
            steps: [
                {
                    element: document.getElementsByClassName('battle-view')[0],
                    intro: 'Click here to deal "Click Attack" damage to Pokémon.',
                },
            ],
        });
        // Set the function to call showCaughtMessage after pokemon is caught
        battlePokemon.isAlive = function () {
            if (battlePokemon.health() <= 0) {
                setTimeout(() => {
                    Information.hide();
                    player.starter(StartSequenceRunner.starterPicked);
                    App.game.profile.pokemon(dataPokemon.id);
                    StartSequenceRunner.showCaughtMessage();
                }, 1000);
                //reset the function so you don't call it too many times :)
                //What a beautiful piece of code
                battlePokemon.isAlive = function () {
                    return false;
                };
            }
            return this.health() > 0;
        };
    }
    static showCaughtMessage() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#starterCaughtModal').modal('show');
        $('#pokeballSelector').css('display', 'block');
        $('#pokemonListContainer').css('display', 'block');
        $('#oakItemsContainer').css('display', 'block');
        $('#questDisplayContainer').css('display', 'block');
    }
}
StartSequenceRunner.starterPicked = GameConstants.Starter.None;
StartSequenceRunner.noStarterCount = 0;
document.addEventListener('DOMContentLoaded', () => {
    $('#startSequenceModal').on('hidden.bs.modal', () => {
        $('#pickStarterModal').modal('show');
    });
    $('#pickStarterModal').on('hidden.bs.modal', () => {
        if (StartSequenceRunner.starterPicked == GameConstants.Starter.None) {
            StartSequenceRunner.noStarterCount++;
            const startersCount = StartSequenceRunner.noStarterCount >= 5 ? 'four' : 'three';
            $('#pickStarterModalText').text(`I can't hold off all ${startersCount}! Please pick the Pokémon you want to fight!`);
            $('#pickStarterModal').modal('show');
            if (StartSequenceRunner.noStarterCount == 5) {
                // Add Pikachu to the selections
                $('#starterSelection').append(`<div class="col">
                        <input class="image-starter" type="image"
                           src="assets/images/pokemon/25.png"
                           onclick="StartSequenceRunner.pickStarter(GameConstants.Starter.Pikachu)">
                    </div>`);
            }
        }
    });
    $('#starterCaughtModal').on('hidden.bs.modal', () => {
        Save.store(player);
        App.game.gameState = GameConstants.GameState.fighting;
        Information.show({
            steps: [
                {
                    element: document.getElementById('questDisplayContainer'),
                    intro: 'Complete the tutorial quests to continue.',
                },
            ],
        });
    });
});
/// <reference path="./GameConstants.d.ts" />
class Update {
    constructor() {
        this.saveKey = 'update';
        // Loaded from package.json
        this.version = '0.8.7';
        this.saveVersion = '0.0.0';
        this.updateSteps = {
            '0.4.0': ({ playerData, saveData }) => {
                // Update the save data as it is no longer a part of player data
                saveData.statistics = Object.assign(Object.assign({}, playerData.statistics || {}), { pokemonCaptured: playerData._caughtAmount || 0, pokemonDefeated: playerData._defeatedAmount || 0, totalShinyPokemonCaptured: playerData._shinyCatches || 0, totalPokemonCaptured: playerData.statistics.pokemonCaptured || 0, totalPokemonDefeated: playerData.statistics.pokemonDefeated || 0 });
            },
            '0.4.4': ({ saveData }) => {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { clickAttacks: saveData.statistics.clicks || 0, totalDungeonTokens: saveData.statistics.totalTokens || 0, undergroundItemsFound: saveData.statistics.digItems || 0, undergroundLayersMined: saveData.statistics.digDeeper || 0 });
            },
            '0.4.15': ({ playerData, saveData }) => {
                playerData._itemList.Lucky_egg = playerData._itemList.xExp;
                delete playerData._itemList.xExp;
                delete localStorage.mine;
            },
            '0.4.17': ({ saveData }) => {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalPokemonHatched: saveData.statistics.hatchedEggs || 0 });
            },
            '0.4.18': ({ playerData, saveData }) => {
                // Move quests from player data -> save data
                saveData.quests = {
                    xp: Math.floor(playerData._questXP || 0),
                    refreshes: playerData.questRefreshes || 0,
                    lastRefresh: playerData._lastSeen,
                    questList: new Array(10).fill({}).map((q, index) => ({ index, initial: null })),
                    questLines: [
                        {
                            state: playerData.tutorialComplete ? 2 : 1,
                            name: 'Tutorial Quests',
                            quest: playerData.tutorialProgress || 0,
                        },
                    ],
                };
                // Convert quest the player is currently doing
                (playerData.currentQuests || []).forEach(quest => {
                    saveData.quests.questList[quest.index || 0].initial = quest.initial || null;
                });
                // Convert quest the player has completed
                (playerData.completedQuestList || []).forEach((complete, index) => {
                    if (complete) {
                        saveData.quests.questList[index].notified = true;
                        saveData.quests.questList[index].claimed = true;
                        saveData.quests.questList[index].initial = 0;
                    }
                });
                // If player has defeated the Hoenn Champion, start the deoxys quest line
                saveData.badgeCase = saveData.badgeCase || [];
                // Not using game constants incase the value isn't 39 in the future
                if (saveData.badgeCase[39]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Mystery of Deoxys', quest: 0 });
                }
            },
            '0.5.0': ({ playerData }) => {
                // Give the players Soothe Bells in place of Time stones
                playerData._itemList = playerData._itemList || {};
                playerData._itemList.Soothe_bell = playerData._itemList.Time_stone || 0;
                delete playerData._itemList.Time_stone;
            },
            '0.5.2': ({ saveData }) => {
                // Calculate hatched amount (we can't calculate the shiny hatches though)
                const pokemonHatched = {};
                saveData.party.caughtPokemon.forEach(p => pokemonHatched[p.id] = p.attackBonus / 25);
                // Rename from the old statistic name, add our new statistics
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalBerriesHarvested: saveData.statistics.berriesHarvested.reduce((sum, b) => sum + b, 0) || 0, totalShardsGained: saveData.statistics.totalShards.reduce((sum, b) => sum + b, 0) || 0, shardsGained: saveData.statistics.totalShards || 0, pokemonHatched });
                // If the player has the Soul Badge already
                // Not using game constants incase the badge value isn't 5 in the future
                if (saveData.badgeCase[5]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Mining Expedition', quest: 0 });
                }
            },
            '0.5.5': ({ saveData }) => {
                // Correct statistics
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 22, 34); // Petalburg Woods
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 30, 35); // New Mauville
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56, 50); // Hall of Origin
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33); // Sealed Chamber
            },
            '0.5.7': ({ saveData }) => {
                // Update shinies
                saveData.party.shinyPokemon.forEach(name => {
                    const id = pokemonMap[name].id;
                    if (id) {
                        const pokemon = saveData.party.caughtPokemon.find(p => p.id == id);
                        if (pokemon) {
                            pokemon.shiny = true;
                        }
                    }
                });
            },
            '0.5.8': ({ playerData, saveData }) => {
                // Hardcoded to allow upgrading from an older save, if we change
                // the Routes class in the future. Values are lowest/highest route
                // index
                const regionRoutes = {
                    kanto: [1, 25],
                    johto: [26, 48],
                    hoenn: [101, 134],
                    sinnoh: [201, 230],
                };
                const result = saveData.statistics.routeKills.reduce((acc, nextValue, nextIndex) => {
                    const [region] = Object.entries(regionRoutes).find(([, check]) => (
                    // Find the region that contains this index
                    check[0] <= nextIndex && nextIndex <= check[1])) || ['none'];
                    // Skip over any statistics for the 'none' region that are also 0, since
                    // these are just the gaps in the route numbers
                    if (region === 'none' && nextValue === 0) {
                        return acc;
                    }
                    // Ensure the region has been prepared
                    acc[region] = (acc[region] || {});
                    // Track the route with its number in the statistics
                    acc[region][nextIndex] = nextValue;
                    return acc;
                }, {});
                saveData.statistics.routeKills = result;
                // Migrate the achievements so we don't spam players with notifications
                const renamedAchievements = Object.entries(playerData.achievementsCompleted)
                    .map(([name, isCompleted]) => {
                    const matchRoute = name.match(/^Route (\d+) (?:traveler|explorer|conqueror)/);
                    // If the name doesn't match a route, return the old key-value pair
                    if (matchRoute === null) {
                        return [name, isCompleted];
                    }
                    const routeNumber = matchRoute ? Number(matchRoute[1]) : null;
                    if (Number.isNaN(routeNumber)) {
                        console.trace('[Update] Could not map region into achievement name:', name);
                        return [name, isCompleted];
                    }
                    // Look up the region for the route, and rename the achievement
                    const [region] = Object.entries(regionRoutes).find(([, check]) => (
                    // Find the region that contains this index
                    check[0] <= routeNumber && routeNumber <= check[1])) || ['none'];
                    if (region === 'none') {
                        console.trace('[Update] Could not map region into achievement name:', name);
                        return [name, isCompleted];
                    }
                    return [`${GameConstants.camelCaseToString(region)} ${name}`, isCompleted];
                });
                playerData.achievementsCompleted = Object.fromEntries(renamedAchievements);
                // Refund any shards spent on shard upgrades that have no effect
                // Using magic number incase any of these values change in the future
                const invalidUpgrades = {
                    0: 3,
                    1: 0,
                    2: 0,
                    4: 0,
                    5: 0,
                    9: 0,
                    11: 0,
                    12: 0,
                    15: 0,
                    16: 0,
                    17: 0,
                };
                Object.entries(invalidUpgrades).forEach(([type, effectiveness]) => {
                    const index = +type * 4 + effectiveness;
                    let level = saveData.shards.shardUpgrades[index];
                    // Refund each level of upgrade purchased
                    while (level-- > 0) {
                        const cost = (level + 1) * 500;
                        saveData.shards.shardWallet[type] += cost;
                    }
                });
                // Give breeding slots based on highest region
                saveData.breeding.queueSlots = 0;
                for (let region = 0; region < playerData.highestRegion; region++) {
                    saveData.breeding.queueSlots += Math.max(4, 4 * Math.pow(2, region - 1));
                }
            },
            '0.6.0': ({ saveData }) => {
                // Award Deoxys forms for completed Battle Frontier milestones
                const maxBattleFrontierStage = saveData.statistics.battleFrontierHighestStageCompleted;
                if (maxBattleFrontierStage >= 151) {
                    Update.addPokemonToSaveData(saveData, 386.1); // Deoxys (attack)
                }
                if (maxBattleFrontierStage >= 251) {
                    Update.addPokemonToSaveData(saveData, 386.2); // Deoxys (defense)
                }
                if (maxBattleFrontierStage >= 386) {
                    Update.addPokemonToSaveData(saveData, 386.3); // Deoxys (speed)
                }
                // Update the attack bonus percentages
                saveData.party.caughtPokemon = saveData.party.caughtPokemon.map(p => {
                    p.attackBonusPercent = p.attackBonus;
                    delete p.attackBonus;
                    return p;
                });
                // Update Farm data
                // Refund Farm Points for current berries
                for (let i = 0; i < 8; i++) {
                    const amount = 100 / i;
                    const refundTokens = Math.floor(saveData.farming.berryList[i] / amount);
                    saveData.wallet.currencies[4] += refundTokens;
                    saveData.farming.berryList[i] = 0;
                }
                // Unlock & Give 5 Cheri berries to start off with
                saveData.farming.unlockedBerries = [true];
                saveData.farming.berryList[0] = 5;
                // Refund Farm Points for plots previously unlocked
                saveData.wallet.currencies[4] += saveData.farming.plotList.map((p, i) => p.isUnlocked ? 10 * Math.floor(Math.pow(i, 2)) : 0).reduce((s, a) => s + a, 0);
                // Reset all plots
                delete saveData.farming.plotList;
            },
            '0.6.1': ({ saveData }) => {
                // Only update if save is from v0.6.0+
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    if (saveData.oakItems.purchaseList) {
                        if (saveData.oakItems.purchaseList[OakItems.OakItem.Squirtbottle]) {
                            saveData.oakItems[OakItems.OakItem[OakItems.OakItem.Squirtbottle]]['purchased'] = true;
                        }
                        if (saveData.oakItems.purchaseList[OakItems.OakItem.Sprinklotad]) {
                            saveData.oakItems[OakItems.OakItem[OakItems.OakItem.Sprinklotad]]['purchased'] = true;
                        }
                    }
                }
            },
            '0.6.5': ({ playerData, saveData }) => {
                // Only update if save is from v0.6.0+
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    // nerf amount of proteins used per Pokemon
                    const maxProteins = (playerData.highestRegion + 1) * 5;
                    let proteinsToRefund = 0;
                    saveData.party.caughtPokemon = saveData.party.caughtPokemon.map(p => {
                        if (!p.proteinsUsed || p.proteinsUsed <= maxProteins) {
                            return p;
                        }
                        proteinsToRefund += p.proteinsUsed - maxProteins;
                        p.proteinsUsed = maxProteins;
                        return p;
                    });
                    playerData._itemList.Protein += proteinsToRefund || 0;
                }
            },
            '0.7.1': ({ playerData, saveData }) => {
                var _a, _b;
                saveData.breeding.eggList.map((egg) => {
                    egg.shinyChance = GameConstants.SHINY_CHANCE_BREEDING - (0.5 * GameConstants.SHINY_CHANCE_BREEDING * Math.min(1, egg.shinySteps / egg.steps));
                    return egg;
                });
                // Update underground item IDs
                const itemMap = (id) => {
                    if (id <= 7) { // fossils
                        return id + 199;
                    }
                    else if (id <= 16) { // Diamond Items
                        return id - 7;
                    }
                    else if (id <= 22) { // Evolution Stones
                        return id + 283;
                    }
                    else if (id <= 28) { // Diamond Items
                        return id - 13;
                    }
                    else { // Shard Plates
                        return id + 71;
                    }
                };
                playerData.mineInventory = ((_a = playerData.mineInventory) === null || _a === void 0 ? void 0 : _a.map(i => {
                    i.id = itemMap(i.id);
                    return i;
                })) || [];
                if ((_b = saveData.underground) === null || _b === void 0 ? void 0 : _b.mine) {
                    // Reset the mine
                    delete saveData.underground.mine;
                }
            },
            '0.7.4': ({ playerData, saveData }) => {
                // Clear old quest data
                delete saveData.quests.questList;
                // Update starter selection
                playerData.starter = playerData._starter;
                /*
                 * Challenge Modes
                 */
                // Disable Click Attacks
                if (saveData.statistics.clickAttacks <= 100) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Click Attack challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableClickAttack.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Battle Items
                Notifier.notify({
                    title: 'Active Challenge Mode?',
                    message: `Do you want to activate No Battle Item challenge mode?

                <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableBattleItems.activate(); Object.values(player.effectList).forEach(e => e(0));" data-dismiss="toast">Activate</button>`,
                    timeout: GameConstants.HOUR,
                });
                // Disable Master Balls
                if (!saveData.statistics.pokeballsUsed[3]) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Masterball challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableMasterballs.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Oak Items
                if (Object.values(saveData.oakItems).every((oi) => !oi.exp)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Oak Item challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableOakItems.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Shards
                if (saveData.shards.shardUpgrades.every((s) => !s)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Shard challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableShards.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Proteins
                if (saveData.party.caughtPokemon.every(p => !p.proteinsUsed)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Protein challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableProteins.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Add Solaceon Ruins
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 43);
                // Multi saves profile
                const firstPokemon = saveData.party.caughtPokemon[0];
                saveData.profile = {
                    name: 'Trainer',
                    pokemon: (firstPokemon === null || firstPokemon === void 0 ? void 0 : firstPokemon.id) || 0,
                    pokemonShiny: (firstPokemon === null || firstPokemon === void 0 ? void 0 : firstPokemon.shiny) || false,
                };
            },
            '0.7.6': ({ playerData, saveData }) => {
                Update.renamePokemonInSaveData(saveData, 'Lets go Pikachu', 'Let\'s Go Pikachu');
                Update.renamePokemonInSaveData(saveData, 'Lets go Eevee', 'Let\'s Go Eevee');
                // Check if the Let's Go Pikachu is hidden due to MissingNo (reset breeding status)
                const pikachu = saveData.party.caughtPokemon.find(p => p.id == -8);
                if (pikachu) {
                    pikachu.breeding = !!saveData.breeding.eggList.find((e) => e.pokemon == 'Let\'s Go Pikachu')
                        || !!saveData.breeding.queueList.find((p) => p == 'Let\'s Go Pikachu');
                }
                // Check if the Let's Go Eevee is hidden due to MissingNo (reset breeding status)
                const eevee = saveData.party.caughtPokemon.find(p => p.id == -9);
                if (eevee) {
                    eevee.breeding = !!saveData.breeding.eggList.find((e) => e.pokemon == 'Let\'s Go Eevee')
                        || !!saveData.breeding.queueList.find((p) => p == 'Let\'s Go Eevee');
                }
            },
            '0.8.1': ({ playerData, saveData }) => {
                // Add Weather Institute
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 29);
                // Add Magma Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 32);
                // Add Aqua Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33);
                // Add Team Plasma Assault
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 72);
                // Add Plasma Frigate
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 74);
                // Update achievement names
                Update.updateAchievementName(playerData, 'These pokémon must be sick', 'These Pokémon must be sick');
                Update.updateAchievementName(playerData, 'The earth is like unions', 'The earth is like onions');
            },
            '0.8.2': ({ playerData, saveData }) => {
                // Update achievement names
                Update.updateAchievementName(playerData, 'Doomsday Bunker stocked with Pokeballs!', 'Doomsday Bunker stocked with Pokéballs!');
                Update.updateAchievementName(playerData, 'Prepared for anything!', 'Professor Oak is the best!');
            },
        };
        const saveData = this.getSaveData();
        if (saveData) {
            this.fromJSON(saveData.update, true);
        }
        // Start our update check
        this.checkForNewerVersionOnInterval();
    }
    checkForNewerVersionOnInterval() {
        // Lets check every 3 hours for a newer version
        const checkForNewVersionInterval = setInterval(() => {
            try {
                $.ajax({
                    cache: false,
                    url: './package.json',
                    dataType: 'json',
                    success: result => {
                        // If the website version is newer
                        if (this.isNewerVersion(result.version, this.version)) {
                            clearInterval(checkForNewVersionInterval);
                            Notifier.notify({
                                title: `[UPDATE] v${result.version}`,
                                message: 'A newer version of the game is available:<br/><br/><a class="btn btn-warning btn-block" href="#" onclick="location.reload(true);">Reload Page</a>',
                                timeout: GameConstants.DAY,
                            });
                        }
                    },
                });
            }
            catch (ಠ_ಠ) {
                console.error('[update] Unable to check for new version', ಠ_ಠ);
            }
        }, GameConstants.HOUR * 3);
    }
    // check if save version is newer or equal to version
    minUpdateVersion(version, saveData) {
        return !this.isOlderVersion(saveData.update.version, version);
    }
    // potentially newer version > check against version
    isNewerVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === -1;
    }
    // potentially older version < check against version
    isOlderVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === 1;
    }
    getBackupButton() {
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        // Save the data by stringifying it, so that it isn't mutated during update
        const backupSaveData = JSON.stringify({ player: playerData, save: saveData });
        const button = document.createElement('a');
        try {
            button.href = `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(backupSaveData))}`;
            button.className = 'btn btn-block btn-warning';
            button.innerText = 'Click to Backup Save!';
            button.setAttribute('download', `[v${this.saveVersion}] Poke Clicker Backup Save.txt`);
        }
        catch (e) {
            console.error('Failed to create backup button data:', e);
        }
        return [button, backupSaveData];
    }
    automaticallyDownloadBackup(button, settingsData) {
        // Add to body and click, triggering auto download
        if (!(settingsData === null || settingsData === void 0 ? void 0 : settingsData.disableAutoDownloadBackupSaveOnUpdate)) {
            button.style.display = 'none';
            document.body.appendChild(button);
            button.click();
            document.body.removeChild(button);
        }
        button.style.display = '';
    }
    check() {
        if (this.saveVersion === this.version || this.saveVersion === '0.0.0') {
            return;
        }
        const [backupButton, backupSaveData] = this.getBackupButton();
        // Must modify these object when updating
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        const settingsData = this.getSettingsData();
        if (!playerData || !saveData) {
            return;
        }
        const updateResult = Object.entries(this.updateSteps)
            .filter(([version]) => this.isOlderVersion(this.saveVersion, version))
            .sort(([a], [b]) => this.isNewerVersion(a, b) ? 1 : -1)
            .reduce((beforeUpdate, [version, callback]) => {
            // The parse(stringify(...)) will deep-clone the object so
            // that it isn't mutated, and we can log if something fails
            const updateData = JSON.parse(JSON.stringify(beforeUpdate));
            try {
                console.info(`Applying update v${version}`);
                callback(updateData);
                return updateData;
            }
            catch (e) {
                try {
                    localStorage.backupSave = backupSaveData;
                }
                catch (e) { }
                const resetButton = document.createElement('a');
                resetButton.className = 'btn btn-block btn-danger';
                resetButton.innerText = 'Reset your save - This is not reversible';
                resetButton.id = 'failedUpdateResetButton';
                console.error(`Caught error while applying update v${version}`, e, { beforeUpdate, updateData });
                Notifier.notify({
                    title: `Failed to update to v${this.version}!`,
                    message: `Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a> along with your save file.<br /><br />${backupButton.outerHTML}<br />${resetButton.outerHTML}`,
                    type: NotificationConstants.NotificationOption.primary,
                    timeout: GameConstants.DAY,
                });
                // On the next tick, set the reset button click handler
                setTimeout(() => {
                    document.getElementById('failedUpdateResetButton').onclick = () => {
                        Notifier.confirm({
                            title: 'Reset save',
                            message: 'Are you sure you want to reset your save?\n\nThis cannot be undone, so please make sure you have a backup first!',
                            type: NotificationConstants.NotificationOption.danger,
                            confirm: 'reset',
                        }).then(confirmed => {
                            if (confirmed) {
                                // Force an autodownload of the backup when resetting the save
                                this.automaticallyDownloadBackup(backupButton, { disableAutoDownloadBackupSaveOnUpdate: false });
                                localStorage.removeItem(`player${Save.key}`);
                                localStorage.removeItem(`save${Save.key}`);
                                location.reload();
                            }
                        });
                    };
                }, 0);
                // Rethrow the error to prevent the game from corrupting the save
                throw e;
            }
        }, { playerData, saveData, settingsData });
        try {
            this.automaticallyDownloadBackup(backupButton, settingsData);
            Notifier.notify({
                title: `[v${this.version}] Game has been updated!`,
                message: `Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!<br/><br/>${backupButton.outerHTML}`,
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
        }
        catch (err) {
            console.error('Error trying to convert backup save', err);
            Notifier.notify({
                title: `[v${this.version}] Game has been updated!`,
                message: 'Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!<br/><br/><i>Failed to download old save, Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a>.</i>',
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = backupSaveData;
            }
            catch (e) { }
            throw err;
        }
        // Update the save data version to our current version
        updateResult.saveData.update.version = this.version;
        this.setPlayerData(updateResult.playerData);
        this.setSaveData(updateResult.saveData);
        this.setSettingsData(updateResult.settingsData);
    }
    getPlayerData() {
        let playerData;
        try {
            playerData = JSON.parse(localStorage.getItem(`player${Save.key}`));
        }
        catch (err) {
            console.warn('Error getting player data', err);
        }
        finally {
            return playerData;
        }
    }
    setPlayerData(playerData) {
        try {
            localStorage.setItem(`player${Save.key}`, JSON.stringify(playerData));
        }
        catch (err) {
            console.error('Error setting player data', err);
        }
    }
    getSaveData() {
        let saveData;
        try {
            saveData = JSON.parse(localStorage.getItem(`save${Save.key}`));
        }
        catch (err) {
            console.warn('Error getting save data', err);
        }
        finally {
            return saveData;
        }
    }
    setSaveData(saveData) {
        try {
            localStorage.setItem(`save${Save.key}`, JSON.stringify(saveData));
        }
        catch (err) {
            console.error('Error setting save data', err);
        }
    }
    getSettingsData() {
        let settingsData;
        try {
            settingsData = JSON.parse(localStorage.settings);
        }
        catch (err) {
            console.warn('Error getting settings data', err);
        }
        finally {
            return settingsData || {};
        }
    }
    setSettingsData(settingsData) {
        try {
            localStorage.settings = JSON.stringify(settingsData);
        }
        catch (err) {
            console.error('Error setting settings data', err);
        }
    }
    fromJSON(json, initial = false) {
        if (!initial) {
            return;
        }
        if (!json) {
            json = { version: '0.0.0' };
        }
        this.saveVersion = json.version || '0.0.0';
        this.check();
    }
    toJSON() {
        return {
            version: this.version,
        };
    }
}
// Used for moving dungeons and other stuff
// Be sure to insert from lowest index to highest index
// Example to get dungeons new index: GameConstants.getDungeonIndex('Aqua Hideout')
Update.moveIndex = (arr, to, from = Infinity, defaultVal = 0) => {
    let temp = arr.splice(from, 1);
    if (!temp.length) {
        temp = [defaultVal];
    }
    const end = arr.splice(to);
    arr = [...arr, ...temp, ...end];
    return arr;
};
Update.updateAchievementName = (playerData, oldName, newName) => {
    const val = playerData.achievementsCompleted[oldName];
    if (val != undefined) {
        playerData.achievementsCompleted[newName] = val;
        delete playerData.achievementsCompleted[oldName];
    }
};
Update.addPokemonToSaveData = (saveData, pokemonId) => {
    if (saveData.party.caughtPokemon.filter(p => p.id === pokemonId).length > 0) {
        return;
    }
    const pokemon = PokemonFactory.generatePartyPokemon(pokemonId, false);
    saveData.statistics.pokemonCaptured[pokemonId] = 1;
    saveData.statistics.totalPokemonCaptured++;
    saveData.logbook.logs.unshift({
        date: Date.now(),
        description: `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`,
        type: {
            display: 'success',
            label: 'CAUGHT',
        },
    });
    saveData.party.caughtPokemon.push(pokemon);
};
// If any pokemon names change in the data rename them,
// note that name isn't used in party.
Update.renamePokemonInSaveData = (saveData, oldName, newName) => {
    var _a, _b;
    if (!saveData.breeding) {
        return;
    }
    // Fixup eggs
    (_a = saveData.breeding.eggList) === null || _a === void 0 ? void 0 : _a.forEach(egg => {
        if (egg.pokemon == oldName) {
            egg.pokemon = newName;
        }
    });
    // Fixup queue
    saveData.breeding.queueList = ((_b = saveData.breeding.queueList) === null || _b === void 0 ? void 0 : _b.map(p => p == oldName ? newName : p)) || [];
};
/**
 * TODO(@Isha) refactor this to no longer be global but App properties.
 * Will be done after the major player refactor.
 */
let player;
/**
 * Start the application when all html elements are loaded.
 */
document.addEventListener('DOMContentLoaded', () => {
    try {
        const settings = localStorage.getItem('settings');
        Settings.load(JSON.parse(settings));
        document.body.className = `no-select ${Settings.getSetting('theme').observableValue()} ${Settings.getSetting('backgroundImage').observableValue()}`;
        document.getElementById('theme-link').href = `https://bootswatch.com/4/${Settings.getSetting('theme').observableValue()}/bootstrap.min.css`;
    }
    catch (e) { }
    // Load list of saves
    SaveSelector.loadSaves();
});
// Nested modals can be opened while they are in the middle of hiding.
// This should raise their backdrop on top of any existing modals,
// preventing us from getting into that messy situation.
// Copied from https://stackoverflow.com/questions/19305821/multiple-modals-overlay#answer-24914782
$(document).on('show.bs.modal', '.modal', function () {
    const zIndex = 1040 + (10 * $('.modal:visible').length);
    $(this).css('z-index', zIndex);
    // setTimeout with 0 delay because the backdrop doesn't exist yet
    setTimeout(() => {
        $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
    }, 0);
});
class Achievement {
    constructor(name, description, property, bonus, region, unlocked = false, achievableFunction = null) {
        this.name = name;
        this.description = description;
        this.property = property;
        this.bonus = bonus;
        this.region = region;
        this.unlocked = unlocked;
        this.achievableFunction = achievableFunction;
        this.isCompleted = ko.pureComputed(() => {
            return this.unlocked || this.property.isCompleted();
        });
        this.getProgressText = ko.pureComputed(() => {
            return `${this.getProgress()}/${this.property.requiredValue}`;
        });
    }
    check() {
        if (this.isCompleted()) {
            Notifier.notify({
                title: `[Achievement] ${this.name}`,
                message: this.description,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 1e4,
                sound: NotificationConstants.NotificationSound.achievement,
            });
            App.game.logbook.newLog(LogBookTypes.ACHIEVEMENT, `Earned "${this.name}".`);
            player.achievementsCompleted[this.name] = true;
            this.unlocked = true;
            AchievementHandler.filterAchievementList(true);
            // Track when users gains an achievement and their total playtime
            LogEvent('completed achievement', 'achievements', `completed achievement (${this.name})`, App.game.statistics.secondsPlayed());
        }
    }
    getProgress() {
        return this.isCompleted() ? this.property.requiredValue : this.property.getProgress();
    }
    getProgressPercentage() {
        return this.isCompleted() ? '100.0' : this.property.getProgressPercentage();
    }
    getBonus() {
        if (!this.achievable()) {
            return 0;
        }
        const max = AchievementHandler.maxBonus()[this.region];
        return (this.bonus / max * 100).toFixed(2);
    }
    achievable() {
        if (typeof this.achievableFunction === 'function') {
            return this.achievableFunction();
        }
        return true;
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
class AchievementHandler {
    static setNavigateIndex(index) {
        if (index < 0 || index >= AchievementHandler.numberOfTabs()) {
            return;
        }
        AchievementHandler.navigateIndex(index);
        Settings.setSettingByName('achievementsPage', index);
    }
    static navigateRight() {
        this.setNavigateIndex(AchievementHandler.navigateIndex() + 1);
    }
    static navigateLeft() {
        this.setNavigateIndex(AchievementHandler.navigateIndex() - 1);
    }
    static isNavigateDirectionDisabled(navigateBackward) {
        return navigateBackward
            ? this.navigateIndex() === 0
            : this.navigateIndex() + 1 === this.numberOfTabs();
    }
    static calculateNumberOfTabs() {
        this.numberOfTabs(Math.max(1, Math.ceil(this.achievementListFiltered().length / 10)));
    }
    static getAchievementListWithIndex() {
        return this.achievementListFiltered().slice(this.navigateIndex() * 10, (this.navigateIndex() * 10) + 10);
    }
    static filterAchievementList(retainPage = false) {
        this.achievementListFiltered(this.achievementList.filter((a) => (a.region <= player.highestRegion() &&
            a.achievable() &&
            (this.filter.status() == -2 || a.unlocked === !!this.filter.status()) &&
            (this.filter.type() == -2 || a.property.achievementType === this.filter.type()) &&
            (this.filter.region() == -2 || a.region === this.filter.region()))));
        this.calculateNumberOfTabs();
        if (!retainPage) {
            this.setNavigateIndex(0);
        }
        else if (this.getAchievementListWithIndex().length === 0 && this.navigateIndex() > 0) {
            this.setNavigateIndex(this.numberOfTabs() - 1);
        }
    }
    static checkAchievements() {
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            if (!AchievementHandler.achievementList[i].unlocked) {
                AchievementHandler.achievementList[i].check();
            }
        }
    }
    static addAchievement(name, description, property, bonus, region = GameConstants.Region.none, achievableFunction = null) {
        const unlocked = player.achievementsCompleted[name];
        AchievementHandler.achievementList.push(new Achievement(name, description, property, bonus, region, unlocked, achievableFunction));
    }
    static calculateMaxBonus() {
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            AchievementHandler.maxBonus()[region] = AchievementHandler.achievementList.filter(a => a.region == region && a.achievable()).reduce((sum, a) => sum + a.bonus, 0);
        });
    }
    static bonusUnlocked() {
        let sum = 0;
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            sum += AchievementHandler.achievementList.filter(a => a.region == region && a.isCompleted()).reduce((sum, a) => sum + a.bonus, 0);
        });
        return sum;
    }
    static achievementBonus() {
        let sum = 0;
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            const total = AchievementHandler.achievementList.filter(a => a.region == region && a.isCompleted()).reduce((sum, a) => sum + a.bonus, 0) / AchievementHandler.maxBonus()[region];
            if (!isNaN(total)) {
                sum += total;
            }
        });
        return sum;
    }
    static achievementBonusPercent() {
        return `${(100 * AchievementHandler.achievementBonus()).toFixed(2)}%`;
    }
    static findByName(name) {
        return AchievementHandler.achievementList.find((achievement) => achievement.name === name);
    }
    static initialize(multiplier, challenges) {
        /*
         * GENERAL
         */
        AchievementHandler.addAchievement('My First Hundo', 'Obtain 100 Pokédollars', new MoneyRequirement(100), 0.05);
        AchievementHandler.addAchievement('I Should Buy a PokéMart', 'Obtain 1,000 Pokédollars', new MoneyRequirement(1000), 0.10);
        AchievementHandler.addAchievement('A Small Fortune', 'Obtain 10,000 Pokédollars', new MoneyRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Annual Wage', 'Obtain 100,000 Pokédollars', new MoneyRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Pfft, I Don\'t Need a Bike Voucher', 'Obtain 1,000,000 Pokédollars', new MoneyRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('A billion Poképennies', 'Obtain 10,000,000 Pokédollars', new MoneyRequirement(10000000), 0.5);
        AchievementHandler.addAchievement('Dungeon Time', 'Obtain 100 Dungeon Tokens', new TokenRequirement(100), 0.05);
        AchievementHandler.addAchievement('Token Collector', 'Obtain 1,000 Dungeon Tokens', new TokenRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Dungeon Grinder', 'Obtain 10,000 Dungeon Tokens', new TokenRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Dungeon Master', 'Obtain 100,000 Dungeon Tokens', new TokenRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Dungeon Legend', 'Obtain 1,000,000 Dungeon Tokens', new TokenRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('Basic Trainer', 'Have 100 Attack', new AttackRequirement(100), 0.05);
        AchievementHandler.addAchievement('Improving', 'Have 1,000 Attack', new AttackRequirement(1000), 0.10);
        AchievementHandler.addAchievement('An Unrelenting Force', 'Have 5,000 Attack', new AttackRequirement(5000), 0.15);
        AchievementHandler.addAchievement('FUS DOH RAH', 'Have 10,000 Attack', new AttackRequirement(10000), 0.20);
        AchievementHandler.addAchievement('Ok, I have enough attack already...', 'Have 25,000 Attack', new AttackRequirement(25000), 0.25);
        AchievementHandler.addAchievement('Silver attack button!', 'Have 100,000 Attack', new AttackRequirement(100000), 0.30);
        AchievementHandler.addAchievement('Pesky roamings, I need to oneshot routes for them...', 'Have 250,000 Attack', new AttackRequirement(250000), 0.35);
        AchievementHandler.addAchievement('You pressed F12 by any chance?', 'Have 500,000 Attack', new AttackRequirement(500000), 0.40);
        AchievementHandler.addAchievement('Left Left Right Right A B A B - Hey, 1 million!', 'Have 1,000,000 Attack', new AttackRequirement(1000000), 0.40);
        AchievementHandler.addAchievement('Bling', 'Obtain 100 Diamonds', new DiamondRequirement(100), 0.05);
        AchievementHandler.addAchievement('Bling x10!', 'Obtain 1000 Diamonds', new DiamondRequirement(1000), 0.15);
        AchievementHandler.addAchievement('If you like it, you should\'ve put a ring on it.', 'Obtain 10,000 Diamonds', new DiamondRequirement(10000), 0.25);
        AchievementHandler.addAchievement('Is my thumb green yet?', 'Dig up 1 item', new UndergroundItemsFoundRequirement(1), 0.01);
        AchievementHandler.addAchievement('My shovel is starting to crack', 'Dig up 10 items', new UndergroundItemsFoundRequirement(10), 0.01);
        AchievementHandler.addAchievement('Why can\'t I make a diamond shovel?', 'Dig up 100 items', new UndergroundItemsFoundRequirement(100), 0.01);
        AchievementHandler.addAchievement('This is definitely not Minecraft', 'Dig up 1,000 items', new UndergroundItemsFoundRequirement(1000), 0.01);
        AchievementHandler.addAchievement('I wonder how much is down there...', 'Dig up 10,000 items', new UndergroundItemsFoundRequirement(10000), 0.01);
        AchievementHandler.addAchievement('The earth is like onions', 'Dig deeper 1 time', new UndergroundLayersMinedRequirement(1), 0.01);
        AchievementHandler.addAchievement('This takes foreverrrrrrr', 'Dig deeper 10 times', new UndergroundLayersMinedRequirement(10), 0.01);
        AchievementHandler.addAchievement('DigDug ain\'t got nothin on me', 'Dig deeper 100 times', new UndergroundLayersMinedRequirement(100), 0.01);
        AchievementHandler.addAchievement('Both my thumbs are green! This can\'t be healthy', 'Dig deeper 1000 times', new UndergroundLayersMinedRequirement(1000), 0.01);
        AchievementHandler.addAchievement('Is that how I use this?', 'Level 1 Oak Item to the maximum level', new MaxLevelOakItemRequirement(1), 0.05, GameConstants.Region.none, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('I\'ve got my hands full with all of these', 'Level 3 Oak Items to the maximum level', new MaxLevelOakItemRequirement(3), 0.1, GameConstants.Region.none, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('Professor Oak is the best!', 'Level 8 Oak Items to the maximum level', new MaxLevelOakItemRequirement(8), 0.14, GameConstants.Region.none, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('Prepared for anything!', 'Level 12 Oak Items to the maximum level', new MaxLevelOakItemRequirement(12), 0.18, GameConstants.Region.none, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('First Team', 'Capture 100 Pokémon', new CapturedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Filling the PC', 'Capture 1,000 Pokémon', new CapturedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Pokémon Army', 'Capture 10,000 Pokémon', new CapturedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Pokémon Collector', 'Capture 100,000 Pokémon', new CapturedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('You get a Pokémon, you get a Pokémon, everyone gets a Pokémon!', 'Capture 1,000,000 Pokémon', new CapturedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('A Long Road Ahead', 'Defeat 100 Pokémon', new DefeatedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Highway to Pallet Town', 'Defeat 1,000 Pokémon', new DefeatedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Overleveled', 'Defeat 10,000 Pokémon', new DefeatedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('The Cake is a Lie, but the Grind is real', 'Defeat 100,000 Pokémon', new DefeatedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('Are there any left?', 'Defeat 1,000,000 Pokémon', new DefeatedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('Startin\' Out', 'Capture your first Pokémon', new CaughtPokemonRequirement(1), 0.01);
        AchievementHandler.addAchievement('Like Ants in a PC', 'Capture 10 unique Pokémon', new CaughtPokemonRequirement(10), 0.02);
        AchievementHandler.addAchievement('Better Than Season 1 Ash', 'Capture 20 unique Pokémon', new CaughtPokemonRequirement(20), 0.03);
        AchievementHandler.addAchievement('More Pokémon than Patrick', 'Capture 30 unique Pokémon', new CaughtPokemonRequirement(30), 0.04);
        AchievementHandler.addAchievement('Rick and Fourty', 'Capture 40 unique Pokémon', new CaughtPokemonRequirement(40), 0.05);
        AchievementHandler.addAchievement('50 Shades of Pikachu', 'Capture 50 unique Pokémon', new CaughtPokemonRequirement(50), 0.10);
        AchievementHandler.addAchievement('Keeping Oak Really Busy', 'Capture 75 unique Pokémon', new CaughtPokemonRequirement(75), 0.15);
        AchievementHandler.addAchievement('Surpassing Ash', 'Capture 88 unique Pokémon', new CaughtPokemonRequirement(88), 0.05);
        AchievementHandler.addAchievement('I Wanna be The Very Best', 'Capture 100 unique Pokémon', new CaughtPokemonRequirement(100), 0.20);
        AchievementHandler.addAchievement('I Should Probably Take a Break', 'Complete the Kanto Pokédex!', new CaughtUniquePokemonsByRegionRequirement(GameConstants.Region.kanto), 0.50);
        AchievementHandler.addAchievement('I\'d rather be shiny', 'Capture your first Shiny', new ShinyPokemonRequirement(1), 0.03);
        AchievementHandler.addAchievement('These Pokémon must be sick', 'Capture 10 unique Shinies', new ShinyPokemonRequirement(10), 0.06);
        AchievementHandler.addAchievement('Why Am I Doing This?', 'Capture 20 unique Shinies', new ShinyPokemonRequirement(20), 0.09);
        AchievementHandler.addAchievement('Why Am I Still Doing This?!', 'Capture 30 unique Shinies', new ShinyPokemonRequirement(30), 0.12);
        AchievementHandler.addAchievement('Okay fine, I can do a few more', 'Capture 40 unique Shinies', new ShinyPokemonRequirement(40), 0.15);
        AchievementHandler.addAchievement('Where Did All The Shiny Pokémon Go?', 'Capture 50 unique Shinies', new ShinyPokemonRequirement(50), 0.30);
        AchievementHandler.addAchievement('Nvm, found some more', 'Capture 75 unique Shinies', new ShinyPokemonRequirement(75), 0.45);
        AchievementHandler.addAchievement('Just keep swimming just keep swimming -- oooo shiny!', 'Capture 100 unique Shinies', new ShinyPokemonRequirement(100), 0.60);
        AchievementHandler.addAchievement('I don\'t know if I can handle the next batch of shinies.', 'Capture 151 unique Shinies!', new ShinyPokemonRequirement(151), 1.50);
        AchievementHandler.addAchievement('Pokémon Nursery', 'Hatch 1 egg', new HatchRequirement(1), 0.01);
        AchievementHandler.addAchievement('A Lot of Running', 'Hatch 10 eggs', new HatchRequirement(10), 0.01);
        AchievementHandler.addAchievement('Marathon Runner', 'Hatch 100 eggs', new HatchRequirement(100), 0.01);
        AchievementHandler.addAchievement('Egg Factory', 'Hatch 1,000 eggs', new HatchRequirement(1000), 0.01);
        AchievementHandler.addAchievement('Offical Easter Bunny', 'Hatch 10,000 eggs', new HatchRequirement(10000), 0.01);
        AchievementHandler.addAchievement('Why is my Voltorb Upside Down?', 'Obtain your first Pokéball', new PokeballRequirement(1, GameConstants.Pokeball.Pokeball), 0.01);
        AchievementHandler.addAchievement('Starting a Collection', 'Obtain 10 Pokéballs', new PokeballRequirement(10, GameConstants.Pokeball.Pokeball), 0.03);
        AchievementHandler.addAchievement('Stocking Up', 'Obtain 100 Pokéballs', new PokeballRequirement(100, GameConstants.Pokeball.Pokeball), 0.05);
        AchievementHandler.addAchievement('Fully Stocked', 'Obtain 1,000 Pokéballs', new PokeballRequirement(1000, GameConstants.Pokeball.Pokeball), 0.10);
        AchievementHandler.addAchievement('Maybe just a few more for the bunker', 'Obtain 10,000 Pokéballs', new PokeballRequirement(10000, GameConstants.Pokeball.Pokeball), 0.15);
        AchievementHandler.addAchievement('Doomsday Bunker stocked with Pokéballs!', 'Obtain 100,000 Pokéballs', new PokeballRequirement(100000, GameConstants.Pokeball.Pokeball), 0.20);
        AchievementHandler.addAchievement('ooooo A blue one!', 'Obtain your first Greatball', new PokeballRequirement(1, GameConstants.Pokeball.Greatball), 0.03);
        AchievementHandler.addAchievement('Greatball 2', 'Obtain 10 Greatballs', new PokeballRequirement(10, GameConstants.Pokeball.Greatball), 0.05);
        AchievementHandler.addAchievement('Greatball 3', 'Obtain 100 Greatballs', new PokeballRequirement(100, GameConstants.Pokeball.Greatball), 0.10);
        AchievementHandler.addAchievement('Greatball 4', 'Obtain 1,000 Greatballs', new PokeballRequirement(1000, GameConstants.Pokeball.Greatball), 0.15);
        AchievementHandler.addAchievement('Greatball 5', 'Obtain 10,000 Greatballs', new PokeballRequirement(10000, GameConstants.Pokeball.Greatball), 0.20);
        AchievementHandler.addAchievement('Greatball 6', 'Obtain 100,000 Greatballs', new PokeballRequirement(100000, GameConstants.Pokeball.Greatball), 0.30);
        AchievementHandler.addAchievement('Ultraball 1', 'Obtain your first Ultraball', new PokeballRequirement(1, GameConstants.Pokeball.Ultraball), 0.05);
        AchievementHandler.addAchievement('Ultraball 2', 'Obtain 10 Ultraballs', new PokeballRequirement(10, GameConstants.Pokeball.Ultraball), 0.10);
        AchievementHandler.addAchievement('Ultraball 3', 'Obtain 100 Ultraballs', new PokeballRequirement(100, GameConstants.Pokeball.Ultraball), 0.15);
        AchievementHandler.addAchievement('Ultraball 4', 'Obtain 1,000 Ultraballs', new PokeballRequirement(1000, GameConstants.Pokeball.Ultraball), 0.20);
        AchievementHandler.addAchievement('Ultraball 5', 'Obtain 10,000 Ultraballs', new PokeballRequirement(10000, GameConstants.Pokeball.Ultraball), 0.30);
        AchievementHandler.addAchievement('Ultraball 6', 'Obtain 100,000 Ultraballs', new PokeballRequirement(100000, GameConstants.Pokeball.Ultraball), 0.40);
        AchievementHandler.addAchievement('Masterball 1', 'Obtain your first Masterball', new PokeballRequirement(1, GameConstants.Pokeball.Masterball), 0.20);
        AchievementHandler.addAchievement('Masterball 2', 'Obtain 10 Masterballs', new PokeballRequirement(10, GameConstants.Pokeball.Masterball), 0.30);
        AchievementHandler.addAchievement('Masterball 3', 'Obtain 100 Masterballs', new PokeballRequirement(100, GameConstants.Pokeball.Masterball), 0.40);
        AchievementHandler.addAchievement('A Few Clicks In', 'Click 10 Times', new ClickRequirement(10, 1), 0.02, GameConstants.Region.none, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Clicking Pro', 'Click 100 Times', new ClickRequirement(100, 1), 0.05, GameConstants.Region.none, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Ultra Clicker', 'Click 1,000 Times', new ClickRequirement(1000, 1), 0.10, GameConstants.Region.none, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Need a new mouse yet?', 'Click 10,000 Times', new ClickRequirement(10000, 1), 0.25, GameConstants.Region.none, () => !challenges.list.disableClickAttack.active());
        /*
         * REGIONAL
         */
        GameHelper.enumNumbers(GameConstants.Region).filter(r => r != GameConstants.Region.none && r <= GameConstants.MAX_AVAILABLE_REGION).forEach(region => {
            var _a, _b;
            // Routes
            Routes.getRoutesByRegion(region).forEach(route => {
                AchievementHandler.addAchievement(`${route.routeName} traveler`, `Defeat 100 Pokémon on ${route.routeName}`, new RouteKillRequirement(100, region, route.number), 1, region);
                AchievementHandler.addAchievement(`${route.routeName} explorer`, `Defeat 1,000 Pokémon on ${route.routeName}`, new RouteKillRequirement(1000, region, route.number), 2, region);
                AchievementHandler.addAchievement(`${route.routeName} conqueror`, `Defeat 10,000 Pokémon on ${route.routeName}`, new RouteKillRequirement(10000, region, route.number), 3, region);
            });
            // Gyms
            (_a = GameConstants.RegionGyms[region]) === null || _a === void 0 ? void 0 : _a.forEach(gym => {
                const gymTitle = gym.includes('Elite') || gym.includes('Champion') ? gym : `${gym} Gym`;
                AchievementHandler.addAchievement(`${gym} Gym regular`, `Clear ${gymTitle} 10 times`, new ClearGymRequirement(10, GameConstants.getGymIndex(gym)), 1, region);
                AchievementHandler.addAchievement(`${gym} Gym ruler`, `Clear ${gymTitle} 100 times`, new ClearGymRequirement(100, GameConstants.getGymIndex(gym)), 2, region);
                AchievementHandler.addAchievement(`${gym} Gym owner`, `Clear ${gymTitle} 1,000 times`, new ClearGymRequirement(1000, GameConstants.getGymIndex(gym)), 3, region);
            });
            // Dungeons
            (_b = GameConstants.RegionDungeons[region]) === null || _b === void 0 ? void 0 : _b.forEach(dungeon => {
                AchievementHandler.addAchievement(`${dungeon} explorer`, `Clear ${dungeon} 10 times`, new ClearDungeonRequirement(10, GameConstants.getDungeonIndex(dungeon)), 1, region);
                AchievementHandler.addAchievement(`${dungeon} expert`, `Clear ${dungeon} 100 times`, new ClearDungeonRequirement(100, GameConstants.getDungeonIndex(dungeon)), 2, region);
                AchievementHandler.addAchievement(`${dungeon} hermit`, `Clear ${dungeon} 1,000 times`, new ClearDungeonRequirement(1000, GameConstants.getDungeonIndex(dungeon)), 3, region);
            });
        });
        // load filters, filter the list & calculate number of tabs
        this.load();
        this.filterAchievementList(true);
        this.calculateNumberOfTabs();
        // subscribe to filters so that when the player changes a filter it automatically refilters the list
        Object.keys(this.filter).forEach(e => this.filter[e].subscribe(() => this.filterAchievementList()));
        multiplier.addBonus('exp', () => 1 + this.achievementBonus());
        multiplier.addBonus('money', () => 1 + this.achievementBonus());
    }
    static load() {
        AchievementHandler.calculateMaxBonus();
        this.achievementListFiltered(this.achievementList.filter(a => a.region <= player.highestRegion() && a.achievable()));
        AchievementHandler.navigateIndex(Settings.getSetting('achievementsPage').value);
        AchievementHandler.filter.status(Settings.getSetting('achievementsStatus').value);
        AchievementHandler.filter.type(Settings.getSetting('achievementsType').value);
        AchievementHandler.filter.region(Settings.getSetting('achievementsRegion').value);
        // Cycle the pages to make sure they are upto date
        AchievementHandler.navigateRight();
        setTimeout(() => AchievementHandler.navigateLeft(), 1);
    }
}
AchievementHandler.achievementList = [];
AchievementHandler.navigateIndex = ko.observable(0);
AchievementHandler.maxBonus = ko.observableArray([]);
AchievementHandler.achievementListFiltered = ko.observableArray([]);
AchievementHandler.numberOfTabs = ko.observable(0);
AchievementHandler.filter = {
    status: ko.observable(-2).extend({ numeric: 0 }),
    type: ko.observable(-2).extend({ numeric: 0 }),
    region: ko.observable(-2).extend({ numeric: 0 }),
};
class Requirement {
    constructor(requiredValue, option) {
        this.requiredValue = requiredValue;
        this.option = option;
    }
    getProgressPercentage() {
        return (this.getProgress() / this.requiredValue * 100).toFixed(1);
    }
    isCompleted() {
        switch (this.option) {
            case GameConstants.AchievementOption.less:
                return this.getProgress() < this.requiredValue;
            case GameConstants.AchievementOption.equal:
                return this.getProgress() == this.requiredValue;
            case GameConstants.AchievementOption.more:
                return this.getProgress() >= this.requiredValue;
        }
    }
}
/// <reference path="Requirement.ts"/>
class AchievementRequirement extends Requirement {
    constructor(requiredValue, option, achievementType = GameConstants.AchievementType.None) {
        super(requiredValue, option);
        this.achievementType = achievementType;
    }
}
class AchievementTracker {
    constructor() {
        this.name = 'AchievementTracker';
        this.saveKey = 'achievementTracker';
        this.defaults = {
            'trackedAchievement': null,
        };
        this.trackedAchievement = ko.observable(this.defaults.trackedAchievement);
    }
    initialize() {
    }
    canAccess() {
        return App.game.party.caughtPokemon.length >= 110;
    }
    update(delta) {
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        if (!!json.trackedAchievementName) {
            const achievement = AchievementHandler.findByName(json.trackedAchievementName);
            if (!!achievement) {
                this.trackedAchievement(achievement);
            }
        }
    }
    toJSON() {
        return {
            trackedAchievementName: this.hasTrackedAchievement() ? this.trackedAchievement().name : null,
        };
    }
    trackAchievement(achievement) {
        this.trackedAchievement(achievement);
    }
    hasTrackedAchievement() {
        return this.trackedAchievement() !== null;
    }
}
///<reference path="AchievementRequirement.ts"/>
class AttackRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Attack']);
    }
    getProgress() {
        // Calculate real total attack regardless of current region
        const currentAttack = App.game.party.calculatePokemonAttack(PokemonType.None, PokemonType.None, true);
        return Math.min(currentAttack, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Attack needed.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class CapturedRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Captured']);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalPokemonCaptured(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Pokémon need to be captured.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class CaughtUniquePokemonsByRegionRequirement extends AchievementRequirement {
    constructor(region, option = GameConstants.AchievementOption.more) {
        super(PokemonHelper.calcUniquePokemonsByRegion(region), option, GameConstants.AchievementType['Caught Unique Pokemons By Region']);
        this.region = region;
    }
    getProgress() {
        return Math.min(new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) === this.region).map(p => Math.floor(p.id))).size, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Pokémon need to be caught.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class CaughtPokemonRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Caught Pokemon']);
    }
    getProgress() {
        return Math.min(App.game.party.caughtPokemon.filter(p => p.id > 0).length, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Pokémon need to be caught.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class ClearDungeonRequirement extends AchievementRequirement {
    constructor(value, dungeonIndex, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Clear Dungeon']);
        this.dungeonIndex = dungeonIndex;
    }
    getProgress() {
        return Math.min(App.game.statistics.dungeonsCleared[this.dungeonIndex](), this.requiredValue);
    }
    hint() {
        if (this.requiredValue != 1) {
            return `${GameConstants.RegionDungeons.flat()[this.dungeonIndex]} needs to be completed ${this.requiredValue} times.`;
        }
        else {
            return `${GameConstants.RegionDungeons.flat()[this.dungeonIndex]} needs to be completed.`;
        }
    }
}
///<reference path="AchievementRequirement.ts"/>
class ClearGymRequirement extends AchievementRequirement {
    constructor(value, gymIndex, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Clear Gym']);
        this.gymIndex = gymIndex;
    }
    getProgress() {
        return Math.min(App.game.statistics.gymsDefeated[this.gymIndex](), this.requiredValue);
    }
    hint() {
        if (this.requiredValue != 1) {
            return `Requires the ${GameConstants.RegionDungeons.flat()[this.gymIndex]} Gym to be defeated ${this.requiredValue} times.`;
        }
        else {
            return `Requires the ${GameConstants.RegionDungeons.flat()[this.gymIndex]} Gym to be completed.`;
        }
    }
}
///<reference path="AchievementRequirement.ts"/>
class ClickRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Click']);
    }
    getProgress() {
        return Math.min(App.game.statistics.clickAttacks(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} click attacks need to be completed.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class DefeatedRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Defeated']);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalPokemonDefeated(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Pokémon need to be defeated.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class DiamondRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Diamond']);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalDiamonds(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Diamonds need to be obtained.`;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="ClearGymRequirement.ts"/>
class GymBadgeRequirement extends Requirement {
    constructor(badge, option = GameConstants.AchievementOption.more) {
        super(1, option);
        this.badge = badge;
    }
    getProgress() {
        return +App.game.badgeCase.hasBadge(this.badge);
    }
    hint() {
        return `Requires the ${GameConstants.camelCaseToString(BadgeEnums[this.badge])} badge.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class HatchRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Hatch']);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalPokemonHatched(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} eggs need to be hatched.`;
    }
}
///<reference path="Requirement.ts"/>
class MaxRegionRequirement extends Requirement {
    constructor(maxRegion = GameConstants.Region.none, option = GameConstants.AchievementOption.more) {
        super(maxRegion, option);
    }
    getProgress() {
        return Math.min(player.highestRegion(), this.requiredValue);
    }
    hint() {
        return `You need to reach the ${GameConstants.Region[this.requiredValue]} region.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class MoneyRequirement extends AchievementRequirement {
    constructor(requiredValue, option = GameConstants.AchievementOption.more) {
        super(requiredValue, option, GameConstants.AchievementType['Money']);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalMoney(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Pokédollars need to be obtained.`;
    }
}
///<reference path="Requirement.ts"/>
class MultiRequirement {
    constructor(requirements = []) {
        this.requirements = requirements;
    }
    isCompleted() {
        return this.requirements.every(requirement => {
            return requirement.isCompleted();
        });
    }
    hint() {
        const output = [];
        this.requirements.forEach(requirement => {
            if (!requirement.isCompleted()) {
                output.push(requirement.hint().replace(/\./g, ''));
            }
        });
        return `${output.join(' and ')}.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class MaxLevelOakItemRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Max Level Oak Item']);
    }
    getProgress() {
        return Math.min(App.game.oakItems.itemList.filter((item) => item.isMaxLevel()).length, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Oak Items leveled to the maximum level.`;
    }
}
///<reference path="Requirement.ts"/>
class ObtainedPokemonRequirement extends Requirement {
    constructor(pokemon, value = 1, option = GameConstants.AchievementOption.more) {
        super(value, option);
        this.pokemonID = pokemon.id;
    }
    getProgress() {
        var _a, _b;
        return Math.min((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[this.pokemonID](), this.requiredValue);
    }
    hint() {
        return `${pokemonMap[this.pokemonID].name} needs to be caught.`;
    }
}
///<reference path="Requirement.ts"/>
class OneFromManyRequirement {
    constructor(requirements) {
        this.requirements = requirements;
    }
    isCompleted() {
        return this.requirements.some(requirement => {
            return requirement.isCompleted();
        });
    }
    hint() {
        const output = [];
        this.requirements.forEach(requirement => {
            if (!requirement.isCompleted()) {
                output.push(requirement.hint().replace(/\./g, ''));
            }
        });
        return `${output.join(' or ')}.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class PokeballRequirement extends AchievementRequirement {
    constructor(value, pokeball, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Pokeball']);
        this.pokeball = pokeball;
    }
    getProgress() {
        return Math.min(App.game.statistics.pokeballsBought[this.pokeball](), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} ${GameConstants.Pokeball[this.pokeball]} need to be obtained.`;
    }
}
///<reference path="Requirement.ts"/>
class QuestLineRequirement extends Requirement {
    constructor(questLineName, option = GameConstants.AchievementOption.more) {
        super(1, option);
        this.questLineName = questLineName;
    }
    getProgress() {
        return +(App.game.quests.getQuestLine(this.questLineName).state() == QuestLineState.ended);
    }
    hint() {
        return `The ${this.questLineName} quest line needs to be completed first.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class RouteKillRequirement extends AchievementRequirement {
    constructor(value, region, route, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Route Kill']);
        this.region = region;
        this.route = route;
    }
    getProgress() {
        const routeKills = App.game.statistics.routeKills[this.region][this.route]();
        return Math.min(routeKills, this.requiredValue);
    }
    hint() {
        if (this.requiredValue != GameConstants.ROUTE_KILLS_NEEDED) {
            return `${this.requiredValue} Pokémon need to be defeated on ${Routes.getName(this.route, this.region)}.`;
        }
        else {
            return `${Routes.getName(this.route, this.region)} still needs to be completed.`;
        }
    }
}
///<reference path="AchievementRequirement.ts"/>
class ShinyPokemonRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Shiny Pokemon']);
    }
    getProgress() {
        return Math.min(App.game.party.caughtPokemon.filter(p => p.shiny).length, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Shiny Pokémon need to be obtained .`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class TokenRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Token']);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalDungeonTokens(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Dungeon Tokens need to be obtained.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class UndergroundItemsFoundRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Underground Items Found']);
    }
    getProgress() {
        return Math.min(App.game.statistics.undergroundItemsFound(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} items need to be found in the Underground.`;
    }
}
///<reference path="AchievementRequirement.ts"/>
class UndergroundLayersMinedRequirement extends AchievementRequirement {
    constructor(value, option = GameConstants.AchievementOption.more) {
        super(value, option, GameConstants.AchievementType['Underground Layers Mined']);
    }
    getProgress() {
        return Math.min(App.game.statistics.undergroundLayersMined(), this.requiredValue);
    }
    hint() {
        const suffix = (this.requiredValue > 1) ? 's' : '';
        return `${this.requiredValue} layer${suffix} need to be mined in the Underground.`;
    }
}
///<reference path="Requirement.ts"/>
class WeatherRequirement extends Requirement {
    constructor(weather, option = GameConstants.AchievementOption.equal) {
        super(1, option);
        this.weather = weather;
    }
    getProgress() {
        return +this.weather.includes(Weather.currentWeather());
    }
    hint() {
        return `The weather needs to be ${this.weather.map(weather => WeatherType[weather]).join(' or ')}`;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
class BadgeCaseController {
    static getDisplayableBadges() {
        const region = player.highestRegion();
        const highestAvailableBadge = gymList[GameConstants.RegionGyms[region][GameConstants.RegionGyms[region].length - 1]].badgeReward;
        return Object.keys(BadgeEnums).filter(b => !b.startsWith('Elite') && b != 'None' && BadgeEnums[b] <= highestAvailableBadge);
    }
}
class BattleFrontier {
    constructor() { }
    static canAccess() {
        const deoxysQuest = App.game.quests.getQuestLine('Mystery of Deoxys');
        return deoxysQuest.state() == QuestLineState.ended || deoxysQuest.curQuest() >= 3;
    }
    static enter() {
        if (!this.canAccess()) {
            return Notifier.notify({
                title: '[Battle Frontier]',
                message: 'You must progress further in the "Mystery of Deoxys" quest before you can participate',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    static start() {
        BattleFrontierRunner.start();
    }
    static leave() {
        // Put the user back in the town
        App.game.gameState = GameConstants.GameState.town;
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../Battle.ts" />
class BattleFrontierBattle extends Battle {
    // Override pokemon attack method so we can ignore the region multiplier
    static pokemonAttack() {
        var _a;
        // attack twice as fast if we have defeated this stage
        this.alternateAttack = !this.alternateAttack;
        if (this.alternateAttack && BattleFrontierRunner.stage() > App.game.statistics.battleFrontierHighestStageCompleted()) {
            return;
        }
        // Limit pokemon attack speed, Only allow 1 attack per 450ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - 450) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2, true));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with exp, shards and go to the next pokemon
     */
    static defeatPokemon() {
        // This needs to stay as none so the stage number isn't adjusted
        App.game.breeding.progressEggsBattle(BattleFrontierRunner.stage(), GameConstants.Region.none);
        this.enemyPokemon().defeat(true);
        // Next pokemon
        GameHelper.incrementObservable(this.pokemonIndex);
        if (this.pokemonIndex() >= 3) {
            // Move on to next stage, reset timer
            BattleFrontierRunner.nextStage();
            this.pokemonIndex(0);
        }
        // If player still challenging Battle Frontier, keep generating Pokemon
        if (BattleFrontierRunner.started()) {
            // Create the next Pokemon to fight
            this.generateNewEnemy();
        }
        else {
            this.enemyPokemon(null);
        }
    }
    static generateNewEnemy() {
        const enemy = pokemonMap.randomRegion(player.highestRegion());
        // This needs to stay as none so the stage number isn't adjusted
        const health = PokemonFactory.routeHealth(BattleFrontierRunner.stage() + 10, GameConstants.Region.none);
        const level = Math.min(100, BattleFrontierRunner.stage());
        // Don't award money per pokemon defeated, award money at the end
        const money = 0;
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        // Give 1 extra shard per pokemon defeated after every 80 stages
        const shards = Math.ceil(BattleFrontierRunner.stage() / 80);
        const enemyPokemon = new BattlePokemon(enemy.name, enemy.id, enemy.type[0], enemy.type[1], health, level, 0, enemy.exp, new Amount(money, GameConstants.Currency.money), shiny, shards);
        this.enemyPokemon(enemyPokemon);
    }
}
BattleFrontierBattle.alternateAttack = false;
BattleFrontierBattle.pokemonIndex = ko.observable(0);
BattleFrontierBattle.totalPokemons = ko.observable(3);
// Looks like we don't need this, unless we want to put a random trainer name or similar
BattleFrontierBattle.trainer = ko.observable(0);
BattleFrontierBattle.counter = 0;
class BattleFrontierMilestone {
    constructor(stage, rewardFunction, _image, _description) {
        this.stage = stage;
        this.rewardFunction = rewardFunction;
        this._image = _image;
        this._description = _description;
    }
    gain() {
        this.rewardFunction();
    }
    get image() {
        return this._image;
    }
    get description() {
        return this._description;
    }
}
class BattleFrontierMilestoneItem extends BattleFrontierMilestone {
    constructor(stage, itemName, amount) {
        super(stage, () => { });
        this.itemName = itemName;
        this.amount = amount;
    }
    gain() {
        if (ItemList[this.itemName]) {
            ItemList[this.itemName].gain(this.amount);
        }
    }
    get image() {
        return ItemList[this.itemName].image;
    }
    get description() {
        return `${this.amount} x ${ItemList[this.itemName].displayName}`;
    }
}
class BattleFrontierMilestonePokemon extends BattleFrontierMilestone {
    constructor(stage, pokemonName, image = 'assets/images/items/pokeball/Premierball.png') {
        super(stage, () => {
            App.game.party.gainPokemonById(pokemonMap[pokemonName].id);
        }, image);
        this.pokemonName = pokemonName;
    }
    get description() {
        return this.pokemonName;
    }
}
///<reference path="BattleFrontierMilestone.ts"/>
///<reference path="BattleFrontierMilestoneItem.ts"/>
class BattleFrontierMilestones {
    static addMilestone(milestone) {
        this.milestoneRewards.push(milestone);
        // Sort the milestones by lowest to highest stage incase they are added out of order
        this.milestoneRewards.sort((a, b) => a.stage - b.stage);
    }
    static nextMileStone() {
        // Get the next possible reward
        return this.milestoneRewards.find(r => r.stage > App.game.statistics.battleFrontierHighestStageCompleted());
    }
    static availableMilestones() {
        return BattleFrontierMilestones.milestoneRewards.filter(r => r.stage > App.game.statistics.battleFrontierHighestStageCompleted());
    }
    static nextMileStoneStage() {
        // Return the stage number the next reward is unlocked at
        const reward = this.nextMileStone();
        if (reward) {
            return reward.stage;
        }
        else {
            return Infinity;
        }
    }
    static nextMileStoneRewardDescription() {
        // Return the description of the next reward
        const reward = this.nextMileStone();
        if (reward) {
            return reward.description;
        }
        else {
            return 'Nothing';
        }
    }
    static gainReward(defeatedStage) {
        const reward = this.nextMileStone();
        if (reward && reward.stage == defeatedStage) {
            Notifier.notify({
                title: '[Battle Frontier]',
                message: `You've successfully defeated stage ${defeatedStage} and earned:<br/><span>${reward.description}</span>!`,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 1e4,
            });
            reward.gain();
        }
    }
}
BattleFrontierMilestones.milestoneRewards = [];
// TODO: update rewards
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(5, 'Pokeball', 25));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(10, 'Pokeball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(20, 'Greatball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(30, 'Ultraball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(35, 'xClick', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(40, 'xAttack', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(50, 'SmallRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(100, 'Deoxys'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(110, 'Water_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(120, 'Leaf_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(130, 'Thunder_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(140, 'Fire_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(150, 'MediumRestore', 200));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(151, 'Deoxys (attack)'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(160, 'Lucky_egg', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(170, 'Lucky_incense', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(180, 'Item_magnet', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(190, 'Mystery_egg', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(200, 'LargeRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(210, 'Water_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(220, 'Leaf_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(230, 'Thunder_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(240, 'Moon_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(250, 'Ultraball', 6400));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(251, 'Deoxys (defense)'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(300, 'Trade_stone', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(386, 'Deoxys (speed)'));
/// <reference path="../../declarations/GameHelper.d.ts" />
class BattleFrontierRunner {
    constructor() { }
    static tick() {
        if (!this.started()) {
            return;
        }
        if (this.timeLeft() < 0) {
            this.battleLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static start() {
        this.started(true);
        this.stage(1);
        BattleFrontierBattle.pokemonIndex(0);
        BattleFrontierBattle.generateNewEnemy();
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    static nextStage() {
        if (App.game.statistics.battleFrontierHighestStageCompleted() < this.stage()) {
            // Gain any rewards we should have earned for defeating this stage
            BattleFrontierMilestones.gainReward(this.stage());
            // Update our highest stage
            App.game.statistics.battleFrontierHighestStageCompleted(this.stage());
        }
        // Move on to the next stage
        GameHelper.incrementObservable(this.stage);
        GameHelper.incrementObservable(App.game.statistics.battleFrontierTotalStagesCompleted);
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
    }
    static end() {
        BattleFrontierBattle.enemyPokemon(null);
        this.stage(1);
        this.started(false);
    }
    static battleLost() {
        // Current stage - 1 as the player didn't beat the current stage
        const stageBeaten = this.stage() - 1;
        // Give Battle Points and Money based on how far the user got
        const battleMultiplier = Math.max(stageBeaten / 100, 1);
        const battlePointsEarned = Math.round(stageBeaten * battleMultiplier);
        const moneyEarned = stageBeaten * 100 * battleMultiplier;
        Notifier.notify({
            title: 'Battle Frontier',
            message: `You managed to beat stage ${stageBeaten}.<br/>You received ${battlePointsEarned} BP`,
            type: NotificationConstants.NotificationOption.success,
            timeout: 5 * GameConstants.MINUTE,
        });
        // Award battle points
        App.game.wallet.gainBattlePoints(battlePointsEarned);
        App.game.wallet.gainMoney(moneyEarned);
        const reward = BattleFrontierMilestones.nextMileStone();
        this.end();
    }
    static battleQuit() {
        Notifier.confirm({
            title: 'Battle Frontier',
            message: 'Are you sure you want to leave?\n\nYou will not receive any Battle Points for the stages already completed.',
            type: NotificationConstants.NotificationOption.danger,
            confirm: 'leave',
        }).then(confirmed => {
            if (confirmed) {
                // Don't give any points, user quit the challenge
                Notifier.notify({
                    title: 'Battle Frontier',
                    message: `You made it to stage ${this.stage()}`,
                    type: NotificationConstants.NotificationOption.info,
                    timeout: 5 * GameConstants.MINUTE,
                });
                this.end();
            }
        });
    }
}
BattleFrontierRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
BattleFrontierRunner.timeLeftPercentage = ko.observable(100);
BattleFrontierRunner.stage = ko.observable(1); // Start at stage 1
BattleFrontierRunner.counter = 0;
BattleFrontierRunner.started = ko.observable(false);
BattleFrontierRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(BattleFrontierRunner.timeLeft() / 10) / 10).toFixed(1);
});
BattleFrontierRunner.pokemonLeftImages = ko.pureComputed(() => {
    let str = '';
    for (let i = 0; i < 3; i++) {
        str += `<img class="pokeball-smallest" src="assets/images/pokeball/Pokeball.svg"${BattleFrontierBattle.pokemonIndex() > i ? ' style="filter: saturate(0);"' : ''}>`;
    }
    return str;
});
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
/// <reference path="../../declarations/breeding/EggType.d.ts" />
var Currency = GameConstants.Currency;
class Breeding {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Breeding';
        this.saveKey = 'breeding';
        this.defaults = {
            eggList: [ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg())],
            eggSlots: 1,
            queueList: [],
            queueSlots: 0,
        };
        this.hatchList = {};
        this._eggList = this.defaults.eggList;
        this._eggSlots = ko.observable(this.defaults.eggSlots);
        this.queueList = ko.observableArray(this.defaults.queueList);
        this.queueSlots = ko.observable(this.defaults.queueSlots);
        this._eggList.forEach((egg) => {
            egg.extend({ deferred: true });
        });
        BreedingController.filter.category(Settings.getSetting('breedingCategoryFilter').value);
        BreedingController.filter.region(Settings.getSetting('breedingRegionFilter').value);
        BreedingController.filter.type1(Settings.getSetting('breedingTypeFilter1').value);
        BreedingController.filter.type2(Settings.getSetting('breedingTypeFilter2').value);
        BreedingController.filter.shinyStatus(Settings.getSetting('breedingShinyFilter').value);
        BreedingController.displayValue(Settings.getSetting('breedingDisplayFilter').value);
    }
    initialize() {
        this.hatchList[EggType.Fire] = [['Charmander', 'Vulpix', 'Growlithe', 'Ponyta'], ['Cyndaquil', 'Slugma', 'Houndour', 'Magby'], ['Torchic', 'Numel'], ['Chimchar'], ['Tepig', 'Pansear'], ['Fennekin'], ['Litten'], ['Scorbunny', 'Sizzlipede']];
        this.hatchList[EggType.Water] = [['Squirtle', 'Lapras', 'Staryu', 'Psyduck'], ['Totodile', 'Wooper', 'Marill', 'Qwilfish'], ['Mudkip', 'Feebas', 'Clamperl'], ['Piplup', 'Finneon', 'Buizel'], ['Oshawott', 'Panpour'], ['Froakie'], ['Popplio', 'Wimpod'], ['Sobble', 'Chewtle']];
        this.hatchList[EggType.Grass] = [['Bulbasaur', 'Oddish', 'Tangela', 'Bellsprout'], ['Chikorita', 'Hoppip', 'Sunkern'], ['Treecko', 'Tropius', 'Roselia'], ['Turtwig', 'Carnivine', 'Budew'], ['Snivy', 'Pansage'], ['Chespin'], ['Rowlet', 'Morelull'], ['Grookey', 'Gossifleur']];
        this.hatchList[EggType.Fighting] = [['Hitmonlee', 'Hitmonchan', 'Machop', 'Mankey'], ['Tyrogue'], ['Makuhita', 'Meditite'], ['Riolu'], ['Throh', 'Sawk'], [], ['Crabrawler'], ['Falinks']];
        this.hatchList[EggType.Electric] = [['Magnemite', 'Pikachu', 'Voltorb', 'Electabuzz'], ['Chinchou', 'Mareep', 'Elekid'], ['Plusle', 'Minun', 'Electrike'], ['Pachirisu', 'Shinx'], ['Blitzle'], [], [], ['Toxel', 'Pincurchin']];
        this.hatchList[EggType.Dragon] = [['Dratini', 'Dragonair', 'Dragonite'], [], ['Bagon', 'Shelgon', 'Salamence'], ['Gible', 'Gabite', 'Garchomp'], ['Deino', 'Zweilous', 'Hydreigon'], ['Goomy'], ['Turtonator', 'Drampa', 'Jangmo-o', 'Hakamo-o', 'Kommo-o'], ['Dreepy', 'Drakloak', 'Dragapult']];
        BreedingController.initialize();
    }
    update(delta) { }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Mystery_egg);
    }
    fromJSON(json) {
        var _a, _b;
        if (json == null) {
            return;
        }
        this.eggSlots = (_a = json['eggSlots']) !== null && _a !== void 0 ? _a : this.defaults.eggSlots;
        if (json['eggList'] == null) {
            this._eggList = this.defaults.eggList;
        }
        else {
            const saveEggList = json['eggList'];
            for (let i = 0; i < this._eggList.length; i++) {
                if (saveEggList[i] != null) {
                    const egg = new Egg(null, null, null);
                    egg.fromJSON(saveEggList[i]);
                    this._eggList[i](egg);
                }
            }
        }
        this.queueSlots((_b = json['queueSlots']) !== null && _b !== void 0 ? _b : this.defaults.queueSlots);
        this.queueList(json['queueList'] ? json['queueList'] : this.defaults.queueList);
    }
    toJSON() {
        return {
            eggList: this.eggList.map((egg) => (egg() === null ? new Egg() : egg().toJSON())),
            eggSlots: this.eggSlots,
            queueList: this.queueList(),
            queueSlots: this.queueSlots(),
        };
    }
    canBreedPokemon() {
        return App.game.party.hasMaxLevelPokemon() && (this.hasFreeEggSlot() || this.hasFreeQueueSlot());
    }
    hasFreeEggSlot() {
        let counter = 0;
        for (const egg of this._eggList) {
            if (!egg().isNone()) {
                counter++;
            }
        }
        return counter < this._eggSlots();
    }
    hasFreeQueueSlot() {
        const slots = this.queueSlots();
        return slots && this.queueList().length < slots;
    }
    gainEgg(e) {
        if (e.isNone()) {
            return false;
        }
        for (let i = 0; i < this._eggList.length; i++) {
            if (this._eggList[i]().isNone()) {
                this._eggList[i](e);
                return true;
            }
        }
        console.error(`Error: Could not place ${EggType[e.type]} Egg`);
        return false;
    }
    gainRandomEgg() {
        return this.gainEgg(this.createRandomEgg());
    }
    progressEggsBattle(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        return this.progressEggs(+Math.sqrt(route).toFixed(2));
    }
    progressEggs(amount) {
        amount *= this.getStepMultiplier();
        amount = Math.round(amount);
        let index = this.eggList.length;
        while (index-- > 0) {
            const egg = this.eggList[index]();
            egg.addSteps(amount, this.multiplier);
            if (egg.progress() >= 100) {
                this.hatchPokemonEgg(index);
                if (Settings.getSetting('autoBreed').value && this.hasFreeEggSlot()) {
                    const bestPokemon = App.game.party.caughtPokemon.filter(p => BreedingController.visible(p).peek()).sort(PartyController.compareBy(Settings.getSetting('partySort').observableValue(), Settings.getSetting('partySortDirection').observableValue())).find((p) => p.level == 100 && !p.breeding);
                    this.addPokemonToHatchery(bestPokemon);
                }
            }
        }
    }
    getStepMultiplier() {
        return this.multiplier.getBonus('eggStep');
    }
    addPokemonToHatchery(pokemon) {
        // If they have a free eggslot, add the pokemon to the egg now
        if (this.hasFreeEggSlot()) {
            return this.gainPokemonEgg(pokemon);
        }
        // If they have a free queue, add the pokemon to the queue now
        if (this.hasFreeQueueSlot()) {
            return this.addToQueue(pokemon);
        }
        let message = 'You don\'t have any free egg slots';
        if (this.queueSlots()) {
            message += '<br/>Your queue is full';
        }
        Notifier.notify({
            message,
            type: NotificationConstants.NotificationOption.warning,
        });
        return false;
    }
    addToQueue(pokemon) {
        const queueSize = this.queueList().length;
        if (queueSize < this.queueSlots()) {
            pokemon.breeding = true;
            this.queueList.push(pokemon.name);
            return true;
        }
        return false;
    }
    removeFromQueue(index) {
        const queueSize = this.queueList().length;
        if (queueSize > index) {
            const pokemonName = this.queueList.splice(index, 1)[0];
            App.game.party._caughtPokemon().find((p) => p.name == pokemonName).breeding = false;
            return true;
        }
        return false;
    }
    gainPokemonEgg(pokemon) {
        if (!this.hasFreeEggSlot()) {
            Notifier.notify({
                message: 'You don\'t have any free egg slots',
                type: NotificationConstants.NotificationOption.warning,
            });
            return false;
        }
        const egg = this.createEgg(pokemon.name);
        if (pokemon instanceof PartyPokemon) {
            pokemon.breeding = true;
        }
        return this.gainEgg(egg);
    }
    hatchPokemonEgg(index) {
        const egg = this._eggList[index]();
        const hatched = egg.hatch();
        if (hatched) {
            this._eggList[index](new Egg());
            this.moveEggs();
            if (this.queueList().length) {
                const nextEgg = this.createEgg(this.queueList.shift());
                this.gainEgg(nextEgg);
                if (!this.queueList().length) {
                    Notifier.notify({
                        message: 'Hatchery queue is empty',
                        type: NotificationConstants.NotificationOption.success,
                        timeout: 1e4,
                        sound: NotificationConstants.NotificationSound.empty_queue,
                        setting: NotificationConstants.NotificationSetting.empty_queue,
                    });
                }
            }
        }
    }
    moveEggs() {
        const tempEggList = App.game.breeding._eggList.filter((egg) => egg().type != EggType.None);
        this._eggList.forEach((egg, index) => {
            egg(tempEggList[index] ? tempEggList[index]() : new Egg());
        });
    }
    createEgg(pokemonName, type = EggType.Pokemon) {
        const dataPokemon = PokemonHelper.getPokemonByName(pokemonName);
        return new Egg(type, this.getSteps(dataPokemon.eggCycles), pokemonName);
    }
    createTypedEgg(type) {
        const hatchList = this.hatchList[type];
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).filter((list) => list.length);
        // highest region has 1/ratio chance, next highest has 1/(ratio ^ 2), etc.
        // Leftover is given to Kanto, making Kanto and Johto equal chance
        const ratio = 2;
        const possibleHatches = GameConstants.expRandomElement(hatchable, ratio);
        const pokemon = GameConstants.randomElement(possibleHatches);
        return this.createEgg(pokemon, type);
    }
    createRandomEgg() {
        const type = Math.floor(Math.random() * Object.keys(this.hatchList).length);
        const egg = this.createTypedEgg(type);
        egg.type = EggType.Mystery;
        return egg;
    }
    createFossilEgg(fossil) {
        const pokemonName = GameConstants.FossilToPokemon[fossil];
        const pokemonNativeRegion = PokemonHelper.calcNativeRegion(pokemonName);
        if (pokemonNativeRegion > player.highestRegion()) {
            Notifier.notify({
                message: 'You must progress further before you can uncover this fossil Pokémon!',
                type: NotificationConstants.NotificationOption.warning,
                timeout: 5e3,
            });
            return new Egg();
        }
        return this.createEgg(pokemonName, EggType.Fossil);
    }
    getSteps(eggCycles) {
        if (eggCycles === undefined) {
            return 500;
        }
        else {
            return eggCycles * 40;
        }
    }
    calculateBaseForm(pokemonName) {
        const devolution = pokemonBabyPrevolutionMap[pokemonName];
        // Base form of Pokemon depends on which regions players unlocked
        if (!devolution || PokemonHelper.calcNativeRegion(devolution) > player.highestRegion()) {
            // No devolutions at all
            // No further devolutions in current unlocked regions
            return pokemonName;
        }
        else {
            // Recurse onto its devolution
            return this.calculateBaseForm(devolution);
        }
    }
    getEggSlotCost(slot) {
        return 500 * slot;
    }
    buyEggSlot() {
        const cost = this.nextEggSlotCost();
        if (App.game.wallet.hasAmount(cost)) {
            App.game.wallet.loseAmount(cost);
            this.gainEggSlot();
        }
    }
    nextEggSlotCost() {
        return new Amount(this.getEggSlotCost(this.eggSlots + 1), Currency.questPoint);
    }
    // Knockout getters/setters
    get eggSlots() {
        return this._eggSlots();
    }
    set eggSlots(value) {
        this._eggSlots(value);
    }
    gainEggSlot() {
        if (this.eggSlots === this.eggList.length) {
            console.error('Cannot gain another eggslot.');
            return;
        }
        this.eggSlots += 1;
    }
    gainQueueSlot(amt = 1) {
        GameHelper.incrementObservable(this.queueSlots, amt);
    }
    queueSlotsGainedFromRegion(region) {
        return Math.max(4, 4 * Math.pow(2, region - 1));
    }
    get eggList() {
        return this._eggList;
    }
    set eggList(value) {
        this._eggList = value;
    }
    getAllCaughtStatus() {
        return GameHelper.enumNumbers(EggType).reduce((status, type) => {
            return this.hatchList[type] ? Math.min(status, this.getTypeCaughtStatus(type)) : status;
        }, CaughtStatus.CaughtShiny);
    }
    getTypeCaughtStatus(type) {
        const hatchList = this.hatchList[type];
        if (!hatchList) {
            return CaughtStatus.NotCaught;
        }
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).flat();
        return hatchable.reduce((status, pname) => {
            return Math.min(status, PartyController.getCaughtStatusByName(pname));
        }, CaughtStatus.CaughtShiny);
    }
    checkCloseModal() {
        if (Settings.getSetting('hideHatchery').value == 'queue' && !this.hasFreeEggSlot() && !this.hasFreeQueueSlot()) {
            $('#breedingModal').modal('hide');
        }
        if (Settings.getSetting('hideHatchery').value == 'egg' && !this.hasFreeEggSlot()) {
            $('#breedingModal').modal('hide');
        }
    }
}
var CaughtStatus;
(function (CaughtStatus) {
    CaughtStatus[CaughtStatus["NotCaught"] = 0] = "NotCaught";
    CaughtStatus[CaughtStatus["Caught"] = 1] = "Caught";
    CaughtStatus[CaughtStatus["CaughtShiny"] = 2] = "CaughtShiny";
})(CaughtStatus || (CaughtStatus = {}));
///<reference path="../party/CaughtStatus.ts"/>
/// <reference path="../../declarations/breeding/EggType.d.ts" />
class BreedingController {
    static initialize() { }
    static openBreedingModal() {
        if (App.game.breeding.canAccess()) {
            $('#breedingModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You do not have access to the Day Care yet.<br/><i>Clear route 5 first</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getEggImage(egg) {
        let eggType = EggType[egg.type].toLowerCase();
        if (eggType == 'pokemon') {
            const dataPokemon = PokemonHelper.getPokemonByName(egg.pokemon);
            eggType = String(PokemonType[dataPokemon.type1]).toLowerCase();
        }
        else if (eggType == 'fossil') {
            eggType = GameConstants.PokemonToFossil[egg.pokemon];
        }
        return `assets/images/breeding/${eggType}.png`;
    }
    static getEggCssClass(egg) {
        const animationType = Settings.getSetting('eggAnimation').observableValue();
        if (animationType === 'none') {
            return '';
        }
        if (egg.progress() >= 100) {
            return 'hatching';
        }
        return (animationType === 'almost' && egg.stepsRemaining() <= 50) ? 'hatchingSoon' : '';
    }
    static getEggSpots(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        const seed = pokemon.id * pokemon.type.reduce((a, b) => a * (b + 1), 1);
        SeededRand.seed(seed);
        SeededRand.seed(SeededRand.intBetween(0, 1000));
        return SeededRand.fromArray(this.spotTypes);
    }
    static visible(partyPokemon) {
        return ko.pureComputed(() => {
            // Only breedable Pokemon
            if (partyPokemon.breeding || partyPokemon.level < 100) {
                return false;
            }
            if (!BreedingController.filter.search().test(partyPokemon.name)) {
                return false;
            }
            // Check based on category
            if (BreedingController.filter.category() >= 0) {
                if (partyPokemon.category !== BreedingController.filter.category()) {
                    return false;
                }
            }
            // Check based on shiny status
            if (BreedingController.filter.shinyStatus() >= 0) {
                if (+partyPokemon.shiny !== BreedingController.filter.shinyStatus()) {
                    return false;
                }
            }
            // Check based on native region
            if (BreedingController.filter.region() > -2) {
                if (PokemonHelper.calcNativeRegion(partyPokemon.name) !== BreedingController.filter.region()) {
                    return false;
                }
            }
            // Check if either of the types match
            const type1 = BreedingController.filter.type1() > -2 ? BreedingController.filter.type1() : null;
            const type2 = BreedingController.filter.type2() > -2 ? BreedingController.filter.type2() : null;
            if (type1 !== null || type2 !== null) {
                const { type: types } = pokemonMap[partyPokemon.name];
                if ([type1, type2].includes(PokemonType.None)) {
                    const type = (type1 == PokemonType.None) ? type2 : type1;
                    if (!BreedingController.isPureType(partyPokemon, type)) {
                        return false;
                    }
                }
                else if ((type1 !== null && !types.includes(type1)) || (type2 !== null && !types.includes(type2))) {
                    return false;
                }
            }
            return true;
        });
    }
    static isPureType(pokemon, type) {
        const pokemonData = pokemonMap[pokemon.name];
        return ((type == null || pokemonData.type[0] === type) && (pokemonData.type[1] == undefined || pokemonData.type[1] == PokemonType.None));
    }
    static getDisplayValue(pokemon) {
        const pokemonData = pokemonMap[pokemon.name];
        switch (this.displayValue()) {
            case 'attack': return `Attack: ${pokemon.attack.toLocaleString('en-US')}`;
            case 'attackBonus': return `Attack Bonus: ${Math.floor(pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed()).toLocaleString('en-US')}`;
            case 'baseAttack': return `Base Attack: ${pokemon.baseAttack.toLocaleString('en-US')}`;
            case 'eggSteps': return `Egg Steps: ${App.game.breeding.getSteps(pokemonData.eggCycles).toLocaleString('en-US')}`;
            case 'timesHatched': return `Hatches: ${App.game.statistics.pokemonHatched[pokemonData.id]().toLocaleString('en-US')}`;
            case 'breedingEfficiency': return `Efficiency: ${((pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed()) / pokemonMap[pokemon.name].eggCycles).toLocaleString('en-US', { maximumSignificantDigits: 2 })}`;
            case 'stepsPerAttack': return `Steps/Att: ${(App.game.breeding.getSteps(pokemonMap[pokemon.name].eggCycles) / (pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed())).toLocaleString('en-US', { maximumSignificantDigits: 2 })}`;
            case 'dexId': return `#${pokemon.id <= 0 ? '???' : Math.floor(pokemon.id).toString().padStart(3, '0')}`;
        }
    }
}
BreedingController.spotTypes = [
    `<g class="egg-spot">
          <path d="M33.5 104.3c4.4 4.9 9.3 7.3 6.7 9.6-2.6 2.4-8.3.4-12.7-4.4-4.5-4.9-6-10.8-3.4-13.2 2.6-2.3 5 3.2 9.4 8zm59.7 0c-4.5 4.9-9.4 7.3-6.8 9.6 2.6 2.4 8.4.4 12.8-4.4 4.4-4.9 6-10.8 3.3-13.2-2.6-2.3-4.9 3.2-9.3 8zm-1.6-14.8c-6.2 13.5-19 21-28.6 16.6-9.5-4.4-5-12.4 1.2-26 6.3-13.5 12-27.6 21.5-23.2 9.5 4.4 12.2 19 6 32.6zM74.29 37.558C66.497 46.286 70.6 55.4 62.4 55.4c-8.2 0-14.6-6.6-14.6-14.7S54.3 26 62.4 26c5.593.02 15.797 6.422 11.89 11.558z"/>
          <circle cx="35" cy="38" r="3"/>
          <circle cx="46" cy="23" r="1"/>
          <circle cx="40" cy="56" r="2"/>
          <circle cx="67" cy="113" r="2"/>
          <circle cx="59" cy="111" r="2"/>
          <circle cx="83" cy="30" r="3"/>
          <circle cx="93" cy="45" r="3"/>
          <circle cx="44" cy="91" r="4"/>
        </g>`,
    '<path class="egg-spot" fill-rule="evenodd" d="M46.23 117.564l-11.834-9.568-6.735 1.996-2.792-3.385-1.678-3.128 2.058-5.37-8.622-12.541 15.198.785 9.263-12.074 3.95 14.696 14.345 5.078-12.757 8.298zM94.642 78.967L87.3 82.332l-1.462 8.113-5.387-6.125-7.972 1.081 4.012-7.15-3.465-7.445 7.867 1.706 5.83-5.682.85 8.204zM64.436 58.62l-1.438 3.7 2.234 3.282-3.963-.223-2.431 3.139-1.013-3.839-3.736-1.342 3.338-2.15.121-3.967 3.076 2.51zM72.93 124.108l-12.863-7.728 15.24-6.015L78.995 94.4l10.43 12.637 12.201-1.068c-1.781 5.64-18.87 17.67-28.696 18.14zM23.89 37.914l8.54 4.054 8.181-4.736-1.217 9.375 7.032 6.317-9.291 1.74-3.835 8.64-4.526-8.3-9.402-.978 6.495-6.868zM80.06 61.697L76.364 38.23l-21.428-10.26 21.178-10.767L77.63 6.191c14.44 11.002 20.165 23.604 27.66 39.708l-8.85-1.41z"/>',
    '<path class="egg-spot" d="M40.95 26.323l5.938 11.344 5.318-11.344 5.943 11.344 5.314-11.344 5.947 11.344 5.31-11.344 5.95 11.344 5.306-11.344 5.956 11.344 5.3-11.344C93.314 22.008 77.276 1.254 62.799 1.35c-14.462.096-28.375 19.679-33.106 24.972l5.934 11.344zM85.875 115.645L79.937 104.3l-5.318 11.344-5.943-11.344-5.313 11.344-5.948-11.344-5.309 11.344-5.952-11.344-5.304 11.344-5.957-11.344-3.883 8.31 22.214 12.35 19.498-.032 23.073-11.84-4.597-8.788zM14.966 70.986l15.998-12 15.998 12 15.998-12 15.998 12 15.998-12 15.998 12 .064 15.418-16-12-16 12-16-12-16 12-16-12-16 12z"/>',
    '<path class="egg-spot" fill-rule="evenodd" d="M25.319 37.719s23.67-2.3 36.36-2.304c12.688-.003 39.727 2.239 39.727 2.239l5.453 14.088s-30.455-1.188-45.019-1.177c-14.564.01-42.364 1.242-42.364 1.242zM16.49 65.635s29.952 1.066 45.587 1.08c15.635.012 47.726-1.08 47.726-1.08l1.666 14.412s-33.12 2.575-49.154 2.575c-16.036 0-47.059-2.575-47.059-2.575zM18.827 94.849s28.351 2.626 43.196 2.637c14.845.01 45.875-2.572 45.875-2.572l-9.141 14.4s-25.023 3.322-36.917 3.329c-11.895.007-34.261-3.394-34.261-3.394zM40.886 13.262s13.83-1.689 21.343-1.7c7.513-.01 23.734 1.635 23.734 1.635l9.106 12.087s-22-1.805-32.625-1.794c-10.625.01-31.125 1.86-31.125 1.86z"/>',
    `<g class="egg-spot" transform="matrix(.23639 0 0 .224 -1.683 1.746)">
          <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
          <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
          <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
          <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
          <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
          <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
          <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
          <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
          <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
          <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
          <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
          <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
          <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
          <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
          <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
          <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
          <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
          <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
          <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
          <path d="M272.53 552.049c116.903-2.87 202.886-90.113 207.546-204.955 2.416-59.518-16.62-146.823-53.094-216.254C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.944 155.615-57.69 215.094 6.214 113.614 86.339 209.032 205.15 206.116zm-50.15-4.936c-.852-.22-1.727-.379-2.57-.605 5.868.855 11.976 2.037 18.365 2.57-5.47-.459-10.704-1.219-15.796-1.965zm123.297-10.408c-21.721 5.258-45.635 14.338-72.85 14.338 27.252 0 51.192-9.092 72.936-14.367a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.087 18.797-90.634 18.797-11.065 0-22.577-.6-34.51-1.604 11.933 1.004 23.444 1.488 34.51 1.488 35.557 0 66.204-10.769 92.948-19.625-.753.342-1.554.606-2.314.944zm-87.029 15.658c-10.667 0-21.108-.783-31.279-2.27 69.291-1.897 126.082-26.944 169.27-56.278-35.643 32.853-83.755 58.548-137.99 58.548zm-76.2-508.09c21.586 15.972 49.489 25.922 68.7 25.922 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 9.384-15.542 7.677-19.122 13.213 9.284 28.287 24.993 43.146 43.69-1.033 13.395-13.456 30.249-32.341 35.757a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-27.368-12.98-38.47-19.98 9.28-11.175 17.924-21.897 26.596-29.24zm-35.315 40.31c.594-.79 1.188-1.615 1.781-2.386.637-.826 1.267-1.61 1.897-2.417 1.01-1.291 2.02-2.588 3.023-3.825 40.38 25.47 94.927 40.054 130.411 44.032 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-106.567-18.083-147.406-44.381.588-.796 1.17-1.567 1.75-2.344zm-37.095 60.851c.569.092 7.346 1.83 7.934 1.83 6.444 0 10.512-8.12 10.512-15.103 0-2.907-6.768-7.607-8.292-9.743 3.231-5.63 7.228-9.327 10.44-14.394 41.23 29.302 100.744 54.387 167.403 54.387 31.023 0 68.843-8.126 105.777-19.271 9.92 19.205 18.121 42.515 25.89 63.28-37.149 11.304-95.962 25.049-158.618 27.864-63.342-14.816-124.934-42.624-169.677-69.21 3.155-6.811 5.259-13.086 8.63-19.64zm-28.952 69.78c.679-1.927 1.334-3.85 2.038-5.77.71-1.94 1.457-3.874 2.185-5.808 4.553-12.081 9.48-24.064 14.792-35.747 42.896 25.435 100.992 51.713 159.866 66.774a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 40.369-1.389 60.863-4.394 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-92.578 29.059-164.824 33.826-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-137.785-3.39-226.127-96.994.153-.441.312-.875.465-1.31zm-4.174 12.229c.208-.631.404-1.261.618-1.897.177-.532.336-1.06.514-1.591a509.278 509.278 0 011.512-4.413c84.309 88.055 211.649 97.032 227.192 97.032 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.851-29.614-70.196-47.234 1.034-3.366 2.135-6.732 3.249-10.11zM76.323 346.514c0-16.535-6.44-35.287-2.806-55.172.098-.525.184-1.047.282-1.572-8.058-1.359.288-1.604.288-1.604 3.22-16.873 11.037-36.578 16.44-54.43 25.968 23.415 59.353 43.69 91.507 57.153 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 69.314-3.514 108.9-11.336.348 4.15.586 8.195.734 12.148-41.365 50.361-81.941 83.637-144.17 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zm53.581 82.933s-5.539 32.393 74.542 32.393c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 97.039-51.941 135.459-98.146.025 1.303.1 2.656.1 3.934 0 32.027-7.705 61.965-21.385 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-116.632 66.636-193.64 66.636-1.48 0-2.999-.072-4.492-.084-40.839-9.223-76.839-35.965-103.381-65.041-5.314-24.291 3.958-45.821 3.958-45.821z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23247 0 0 .22628 -1.175 1.165)">
          <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
          <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
          <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
          <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
          <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
          <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
          <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
          <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
          <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
          <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
          <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
          <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
          <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
          <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
          <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
          <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
          <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
          <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
          <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
          <path d="M274.533 549.808c118.845 0 206.087-107.5 211.94-203.176 3.639-59.455-23.017-146.361-59.491-215.792C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.982 155.532-57.577 215.007 5.032 87.901 88.197 203.962 207.04 203.962zm-52.542-8.433c-.851-.221-1.726-.379-2.57-.605 5.869.855 11.977 2.037 18.366 2.57-5.471-.459-10.704-1.219-15.796-1.965zm123.686-4.67c-21.721 5.258-46.023 8.6-73.238 8.6 27.252 0 51.58-3.354 73.324-8.629a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.475 13.059-91.022 13.059-11.065 0-22.577-.6-34.511-1.604 11.934 1.004 23.445 1.488 34.511 1.488 35.557 0 66.592-5.031 93.336-13.887-.753.342-1.554.606-2.314.944zm-87.417 17.344c-10.667 0-21.797-6.556-31.968-8.044 69.291-1.896 127.159-22.856 170.347-52.19-35.643 32.853-84.143 60.234-138.379 60.234zM202.857 38.629c21.585 15.973 46.845 24.75 66.056 24.75 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 11.471-14.077 9.764-17.657 13.213 9.284 27.51 22.534 42.37 41.23-1.034 13.396-14.767 31.244-33.652 36.752a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-25.113-13.446-36.215-20.447 9.279-11.175 18.312-20.257 26.984-27.6zm-35.704 38.672c.594-.79 1.188-1.616 1.78-2.387.638-.826 1.268-1.609 1.898-2.417 1.01-1.29 2.02-2.588 3.023-3.825 40.379 25.471 92.672 40.521 128.156 44.499 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-104.312-18.55-145.151-44.848.588-.796 1.169-1.567 1.75-2.344zM130.77 137.09c.57.092 1.132.19 1.72.19 6.444 0 11.677-5.66 11.677-12.644 0-2.907-.942-5.557-2.466-7.693 3.231-5.63 6.289-11.134 9.502-16.2 41.23 29.301 97.938 54.853 164.597 54.853 31.023 0 72.264-5.68 109.198-16.826 9.92 19.205 18.898 39.646 26.666 60.411-37.148 11.304-86.848 38.148-162.653 26.954-63.342-14.816-123.618-42.577-168.361-69.163 3.155-6.81 6.748-13.328 10.12-19.882zm-31.09 71.524c.678-1.928 1.333-3.85 2.037-5.77.71-1.94 1.457-3.875 2.185-5.809 4.553-12.08 10.13-25.565 15.442-37.248 42.896 25.435 99.514 53 158.388 68.061a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 47.024-2.556 67.518-5.561 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-99.233 30.226-171.479 34.993-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-136.957-3.175-225.299-96.78.153-.44.312-.875.465-1.31zm-4.175 12.228c.208-.63.404-1.26.618-1.897.177-.532.336-1.059.514-1.59a509.278 509.278 0 011.512-4.414c84.31 88.055 210.821 96.818 226.364 96.818 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.023-29.4-69.368-47.02 1.034-3.366 2.135-6.732 3.25-10.11zM76.323 346.514c-.26-38.552 4.085-75.637 15.033-112.564 25.967 23.415 58.524 43.476 90.678 56.939 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 73.79-3.514 113.377-11.336.348 4.15-.677 8.195-.529 12.148-41.365 50.361-85.155 83.637-147.384 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zM204.446 461.84c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 100.253-51.941 138.673-98.146.025 1.303.1 2.656.1 3.934 0 32.027-10.919 61.965-24.599 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-117.709 62.549-194.717 62.549-1.48 0-2.999-.072-4.492-.084-40.839-9.223-75.762-31.878-102.304-60.954-2.38-29.645 73.993-13.431 78.5-13.428z"/>
        </g>`,
    `<g class="egg-spot">
          <path d="M38.755 40.315s2.728 2.396.637 4.348c-2.093 1.952-4.273-1.065-3.455-3.993.818-2.927 1.455-4.435 1.455-4.435-6.002 1.952-2.092 14.639 2.546 9.228 4.639-5.414-1.183-5.148-1.183-5.148zM79.225 38.807c-2.183-1.331-5.73.266-6.91 3.815-1.183 3.55 1.545 7.72 5.365 5.945-4.548 0-3.911-7.452-.455-8.073 3.455-.621 1.546 1.774.455 3.195 3.819-.623 3.728-3.55 1.545-4.882zM52.852 57.794c-4.82 2.396-3.912 8.963 1.727 8.874.728.089 1.727 0-.091-.976-1.82-.977-5.456-4.172-.182-5.591 5.275-1.42 4.457.976 3.82 2.395-.636 1.421-.274 2.485-.274 2.485 4.094-3.636-.18-9.58-5-7.187zM35.21 105.708c2.91-2.04 4.637-.355 4.637-.355-1.364-4.527-6.639-3.463-7.184.887-.546 4.348 3.91 5.766 5.911 4.791 2.001-.976.728-.976-.636-.798-1.365.178-5.64-2.483-2.729-4.525zM84.83 100.197c-2.002.975-.729.975.636.798 1.363-.177 5.638 2.485 2.728 4.525-2.911 2.04-4.638.355-4.638.355 1.365 4.524 6.639 3.46 7.184-.888.545-4.346-3.91-5.767-5.91-4.79z"/>
          <path d="M63.245 2.434c-16.684 0-28.671 16.657-34.66 27.777-8.507 15.8-15.209 35.886-13.673 49.356 2.077 18.224 10.936 32.017 25.464 40.416.695.353 1.399.692 2.115 1.011.165.071.332.14.497.21.441.19.885.375 1.333.554 5.916 2.355 11.978 3.834 18.834 3.834s13.193-1.663 19.109-4.018c.448-.178.892-.364 1.333-.554.166-.07.333-.138.497-.21 16.87-7.367 27.395-23.951 27.67-41.612.212-13.555-4.799-33.189-13.307-48.988C92.467 19.09 79.93 2.434 63.245 2.434zm-1.571 4.787s-.364.088-1.456.088c-1.09 0-2.82 1.685-1.273 4.346 1.546 2.664 4.91.534 5.093-.798.18-1.331 1.182-.444 1.363 0 .183 2.928-5 5.59-7.639.975-2.636-4.613 2.366-7.718 3.912-4.611zm2.364 115.435c-4.365.443-4.274-4.436-.365-4.88 0 0-.636 1.953-.91 2.485-.273.532 1.273.978 1.273.978s4.367.973.002 1.417zm22.43-5.062c-9.392-.498-17.257-8.627-26.29-8.534-13.479.137-8.88 7.755-16.67 10.212-12.938-5.582-22.557-16.812-27.685-30.06.24.048.496.068.77.052C21.2 88.983 22.48 72.136 30.825 74.1c8.347 1.965.289 21.058 17.267 25.41 16.98 4.353 25.18-10.95 36.548-9.966 7.428.642 17.128 4.1 22.959 3.443-3.55 10.57-11.135 19.28-21.13 24.606zm-55.169-47.11c-2.91.709-5.274-.178-7.003-2.485-1.727-2.306 1.546-4.614 3.002-4.88 1.456-.266 1.09.621-.636 2.485-1.73 1.863-.185 4.88 4.637 4.88zm38.923 19.342c-.818.71-4.911 1.684-6.73-1.952-1.82-3.638 4.178-8.757 7.001-4.348.91 1.419 0 1.153-1.727 0s-3.82.976-3.82 3.283 3.002 3.815 5.276 3.017zm28.231-33.413c-7.914 3.65 11.08 18.812-1.583 22.323-12.663 3.51-8.2-13.337-16.98-15.162-8.777-1.824-15.828 17.27-27.915 14.32-12.088-2.948-3.022-17.689-9.497-22.463-6.475-4.773-6.475 2.667-13.094 2.106-3.236-.275-7.606-3.04-9.156-6.738 2.247-6.614 5.077-13.241 8.335-19.29.582-1.082 1.165-2.11 1.746-3.113.222-.062.438-.108.674-.2 6.475-2.528 9.914-15.163 18.98-12.496s-6.046 12.917-3.743 24.288c2.302 11.372 19.715 11.23 20.146-1.124.433-12.353-.72-23.444 6.187-23.866 6.906-.42 6.763 19.234 16.98 19.234 2.988 0 5.066-3.063 6.41-4.695 6.118 11.368 11.94 26.766 13.959 38.291-4.123-3.049-5.137-14.327-11.449-11.415z"/>
        </g>`,
    '<path class="egg-spot" d="M63.187.81c-16.35 0-28.638 17.91-34.506 29.08-8.338 15.87-15.439 35.786-14.545 49.374 1.585 24.082 21.885 46.908 49.051 46.908s48.447-20.638 48.447-46.984c0-13.617-5.603-33.43-13.94-49.299C91.825 18.72 79.538.81 63.187.81zM43.395 119.606c-8.1-6.974-22.392-21.252-27.463-42.637.15-3.515.64-7.385 1.43-11.456 5.82 35.759 43.511 53.595 45.002 58.597.012.038.03.166.037.202a2.366 2.366 0 00-.037-.158c-6.804-.112-13.203-1.912-18.916-4.503-.018-.017-.035-.03-.053-.045zm18.842 5.528h-.025c.014-.023.023-.05.034-.074l.039-.009c-.016.027-.031.056-.048.083zm15.6-3.056c-.027.022.165-.18.138-.157-3.628 1.153-7.616 1.95-11.614 2.205-.853.516-1.757.504-2.566.504-.55 0-1.054.256-1.466.367.012-.03.021-.062.031-.095.266-.07.577-.164.905-.27h.529c.808 0 1.712-.01 2.566-.527-1.05.067-2.104.025-3.175.025 1.07 0 2.126-.046 3.175-.113 3.35-2.024 5.867-6.731-1.72-13.988C53.75 99.61 25.183 86.386 19.335 57.154c1.945-7.1 5.007-15.489 8.222-22.33.474 13.783 6.85 30.937 20.844 43.844 23.427 21.603 38.053 36.2 29.437 43.41zm20.856-13.38c-2.655 3.047-6.636 6.11-10.063 8.35 4.215-4.44 6.055-12.33-3.546-22.698-14.001-15.122-44.24-35.282-48.722-58.802-.778-4.081-1.945-8.936-1.88-12.562C38.33 16.87 42.092 12.46 45.608 9.32c-2.034 6.805-.331 16.317 6.153 25.668 14.412 20.787 54.015 48.988 46.931 73.71zm12.181-28.905c0 5.667-2.418 10.897-4.343 15.835 1.655-13.69-8.246-27.115-28.73-50.28C61.483 26.892 53.8 13.244 55.201 4.086c2.129-.912 4.052-1.39 5.711-1.606 1.33 7.816 8.03 20.74 25.57 36.987 10.764 9.97 19.361 18.978 23.042 27.21.818 4.506 1.35 9.363 1.35 13.116zM84.522 23.227C75.65 13.732 70.421 7.511 67.518 2.86 77.088 5.35 86.306 10.386 96.8 30.36c1.493 2.841 3.572 7.47 4.868 10.505-4.263-5.295-11.59-11.692-17.147-17.639z"/>',
    '<path class="egg-spot" d="M63.3 1.17c-16.811 0-29.443 18.438-35.476 29.428-8.57 15.612-13.581 34.995-13.581 48.393 0 25.923 21.13 46.336 49.059 46.336 27.928 0 47.805-20.306 47.805-46.23 0-13.397-3.757-32.888-12.328-48.499C92.744 19.608 80.111 1.17 63.3 1.17zm0 1.395c6.121 0 13.698 4.2 18.553 8.237-14.646 5.785-30.725 5.456-39.9 2.528C47.42 7.986 55.968 2.565 63.3 2.565zm47.085 64.241c.663 3.545 1.089 6.91 1.231 9.97a44.156 44.156 0 010 4.575 43.287 43.287 0 01-1.029 7.455c-.57.238-1.135.464-1.7.691a41.637 41.637 0 01-8.002 15.886c-17.289 8.375-52.141 18.235-83.214-16.063a97.862 97.862 0 01-2.018-2.297 43.634 43.634 0 01-.728-7.917c0-.755.021-1.534.06-2.331.053-1.15.155-2.347.283-3.575l.165.13c-.114 1.18-.103 2.337-.103 3.446 0 .796-.06 1.576-.06 2.33 0 .755.06 1.502.06 2.245 0 1.934.156 3.825.496 5.674.67.786 1.257 1.552 1.93 2.297-.821-3.27-1.355-6.688-1.355-10.222 0-1.53-.45-3.042-.298-4.721 15.25 11.905 45.384 34.125 92.785 15.118.565-.227.956-.453 1.526-.691.548-2.409.856-4.897.856-7.455 0-.743.06-1.49.06-2.244 0-.754-.06-1.535-.06-2.33 0-3.042-.392-6.384-1.046-9.904.052-.023.11-.046.16-.067zm.606.532c-.03.01-.05.022-.08.033.001.011.003.02.006.032-11.602 4.596-53.088 16.484-95.096-1.188a102.18 102.18 0 011.3-5.71c27.63 7.305 55.476 9.174 89.87-8.396 1.748 5.208 3.109 10.377 4 15.229zM24.594 39.5a117.77 117.77 0 013.348-6.75c16.27 3.792 40.06 4.126 67.047-6.31a102.394 102.394 0 013.213 5.45c2.267 4.13 4.323 8.536 6.13 13.02-13.997 4.945-45.311 10.116-79.738-5.41z"/>',
    `<g class="egg-spot">
          <path d="M42.381 32.138c-1.862-.684-4.343 1.02-5.541 3.807-1.2 2.786-.661 5.6 1.2 6.284 1.86.684 4.343-1.02 5.542-3.807 1.198-2.786.661-5.6-1.2-6.284zM56.099 36.168c-2.133-.303-4.292 2.04-4.823 5.23-.53 3.19.767 6.023 2.899 6.326 2.132.303 4.291-2.039 4.822-5.229.531-3.19-.767-6.023-2.898-6.327zM86.034 32.138c-1.862.684-2.4 3.498-1.201 6.284 1.199 2.787 3.68 4.491 5.542 3.807 1.862-.684 2.4-3.498 1.201-6.284-1.199-2.787-3.68-4.491-5.542-3.807zM72.317 36.168c-2.131.304-3.43 3.135-2.898 6.327.531 3.19 2.69 5.532 4.822 5.229 2.133-.303 3.43-3.135 2.898-6.327-.53-3.191-2.69-5.532-4.822-5.229zM41.069 79.936c-1.976-.217-3.96 2.03-4.434 5.02-.473 2.991.744 5.59 2.719 5.807 1.974.217 3.96-2.03 4.433-5.02.474-2.99-.742-5.59-2.718-5.807zM27.883 71.405c-1.983-.135-3.869 2.194-4.212 5.202-.344 3.007.984 5.553 2.967 5.688 1.983.134 3.868-2.195 4.212-5.202.344-3.008-.986-5.554-2.967-5.688zM56.453 84.26c-2.153.084-3.842 2.773-3.775 6.006.068 3.233 1.868 5.785 4.02 5.7 2.154-.085 3.843-2.773 3.775-6.006-.067-3.233-1.867-5.786-4.02-5.7zM87.459 79.936c-1.975.217-3.192 2.818-2.719 5.807.474 2.989 2.46 5.237 4.434 5.02 1.976-.217 3.193-2.818 2.718-5.807-.473-2.99-2.457-5.237-4.433-5.02zM97.678 77.093c.344 3.007 2.229 5.336 4.212 5.202 1.983-.135 3.311-2.68 2.967-5.688-.344-3.008-2.23-5.337-4.212-5.202-1.982.134-3.31 2.68-2.967 5.688zM72.075 84.26c-2.153-.086-3.953 2.467-4.02 5.7-.068 3.233 1.62 5.921 3.774 6.006 2.153.085 3.953-2.467 4.02-5.7.069-3.233-1.621-5.923-3.774-6.007z"/>
          <path d="M63.527 1.075c-16.46 0-28.827 18.564-34.733 29.63a121.073 121.073 0 00-3.753 7.718c-.098.082-.189.223-.255.491l-.045.179c-6.096 13.884-9.971 29.262-9.971 40.435 0 26.102 21.416 46.63 48.757 46.546 24.775-.075 48.53-21.578 48.757-46.546.122-13.488-5.486-33.258-13.874-48.974C92.506 19.487 79.987 1.075 63.527 1.075zm.151 1.475c8.983 0 18.427 7.344 24.427 14.699-5.366 4.738-15.089 8.438-24.519 8.557-9.625.12-18.953-4.651-23.986-9.825 5.94-7.135 15.306-13.43 24.078-13.43zm-.151 121.446c-19.364 0-36.096-12.163-43.23-27.998 7.829 9.72 24.715 19.52 43.279 19.52 18.324 0 34.684-8.959 42.636-18.541-6.923 15.631-23.475 27.02-42.685 27.02zm38.72-61.7l4.153-8.472c.828 2.69 1.67 5.738 2.283 8.35-1.024 1.095-1.74 3.398-1.111 5.579.431 1.494 1.427 3.034 2.456 3.972.358 2.765.888 5.69.888 8.105 0 2.825-1.26 5.274-1.774 7.937-6.299 10.95-24.583 22.795-45.566 22.795-21.08 0-39.988-12.181-46.22-23.174-.494-2.616-1.066-5.09-1.066-7.86 0-2.465.197-5.147.57-7.974 1.037-.998 2.082-2.457 2.469-3.801.634-2.199-.097-4.592-1.14-5.68.817-3.487 1.39-7.455 2.588-11.056l5.832 11.279c.255.74 1.09 1.203 1.865 1.03l6.654-1.476c.776-.172 1.749.225 2.173.886l5.502 8.572a1.404 1.404 0 001.963.407l6.716-4.452c.66-.437 1.67-.365 2.258.162l9.448 8.472c.587.527 1.544.53 2.136.009l9.614-8.488c.591-.522 1.607-.593 2.27-.16l6.805 4.464c.661.434 1.544.25 1.97-.41l5.543-8.576c.427-.66 1.401-1.056 2.176-.884l6.678 1.478c.774.168 1.61-.293 1.867-1.034zm-3.808-9.601c-.26.74-1.102 1.225-1.885 1.084l-5.323-.96c-.782-.14-1.741.293-2.145.967l-3.702 6.215a1.47 1.47 0 01-1.977.517l-5.877-3.314c-.69-.39-1.733-.284-2.329.233l-9.799 8.491c-.595.517-1.56.513-2.151-.01l-9.586-8.47c-.591-.522-1.63-.63-2.32-.242l-5.877 3.315a1.47 1.47 0 01-1.977-.519l-3.703-6.215c-.401-.674-1.361-1.107-2.144-.966l-5.323.96c-.782.14-1.626-.345-1.885-1.084l-5.444-11.778c1.3-3.074 2.788-6.235 4.296-9.125.951-.747 2.414-1.285 2.958-2.184.69-1.14.56-2.948.627-4.167a87.66 87.66 0 014.47-6.606c4.794 6.135 15.033 11.683 26.24 11.683 10.768 0 21.55-4.456 26.875-10.219 1.226 1.679 2.134 3.594 3.168 5.239-.112 1.374.277 3.272 1.124 4.672.789 1.302 2.11 2.514 3.326 3.172a124.128 124.128 0 014.346 9.419z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23542 0 0 .22728 -.969 1.67)">
          <ellipse cx="269.74" cy="104.67" rx="11.897" ry="16.169"/>
          <ellipse cx="109.885" cy="255.069" rx="10.067" ry="10.374"/>
          <ellipse cx="173.031" cy="270.932" rx="10.979" ry="12.203"/>
          <circle cx="256.318" cy="279.782" r="13.728"/>
          <ellipse cx="328.926" cy="275.204" rx="11.285" ry="12.204"/>
          <ellipse cx="385.365" cy="263.301" rx="10.985" ry="10.679"/>
          <ellipse cx="443.633" cy="247.138" rx="10.68" ry="12.815"/>
          <ellipse cx="116.599" cy="426.215" rx="11.897" ry="15.557"/>
          <ellipse cx="218.185" cy="446.956" rx="13.421" ry="15.558"/>
          <ellipse cx="343.571" cy="439.33" rx="11.897" ry="15.258"/>
          <ellipse cx="443.333" cy="417.672" rx="7.932" ry="11.291"/>
          <path d="M273.057 0c-70.778 0-122.373 76.64-147.771 124.982-29.056 60.924-62.074 159.143-59.872 218.029 4.08 109.096 90.066 203.115 207.649 203.115 117.584 0 204.702-115.153 206.515-204.054 1.202-58.917-27.641-146.779-57.15-212.628C397.018 81.102 343.834 0 273.057 0zM129.543 128.091c4.976-9.474 11.077-20.276 18.165-31.45-.24 1.186-.404 2.422-.404 3.726 0 7.417 4.094 13.427 9.149 13.427 5.055 0 9.149-6.01 9.149-13.427s-4.094-13.42-9.15-13.42c-1.021 0-1.988.3-2.906.758 7.289-10.826 15.465-21.75 24.456-31.965 6.07 10.251 19.063 34.946 25.544 35.809 9.149 1.224 53.69-43.317 69.554-42.705 15.863.606 45.147 39.045 56.744 36.61 11.592-2.442 8.489-45.436 14.59-49.096.478-.288 1.322-.367 2.319-.361 13.115 11.157 25 24.547 35.472 38.427-1.12-.532-2.338-.845-3.616-.845-5.393 0-9.762 5.19-9.762 11.592 0 6.4 4.369 11.59 9.762 11.59 5.392 0 9.76-5.188 9.76-11.59 0-.961-.127-1.88-.311-2.772 11.842 16.708 21.615 33.586 28.966 47.583 1.542 2.938 3.035 5.942 4.535 8.94-1.824 6.892-4.37 12.339-8.177 12.76-10.985 1.225-53.642-24.117-64.622-22.287-10.98 1.83-64.063 57.351-75.661 57.962-11.591.606-59.187-54.303-72.002-55.527-12.815-1.218-50.643 45.766-61.622 44.548-4.737-.526-15.612-15.877-20.966-25.852 3.544-7.637 7.203-15.147 11.034-22.435zm342.379 208.564c.067 2.29.17 4.615.17 6.83 0 48.084-19.089 90.753-48.343 124.003-9.302-7.771-19.284-15.061-24.345-15.35-10.979-.605-57.963 58.576-70.166 60.404-12.209 1.83-44.541-42.1-54.915-42.1-10.373 0-50.031 42.713-61.01 43.324-10.986.605-57.357-59.799-66.506-61.01-4.798-.643-14.443 6.768-23.868 15.367-25.379-28.578-43.165-64.488-47.382-104.734 6.867-8.715 15.876-17.407 20.607-17.407 9.762 0 50.031 61.016 65.894 62.234 15.863 1.217 40.882-50.645 54.915-50.037 14.033.611 64.676 55.525 78.097 56.139 13.428.605 53.69-57.969 62.234-61.018 8.543-3.047 45.147 42.1 56.133 41.488 10.979-.611 39.657-65.895 46.977-67.111 2.73-.458 7.983 4.045 11.508 8.978zm-4.634-64.883c-151.226 66.99-317.58 37.062-390.5 5.71C81.41 254.867 88.098 231 96.44 207.26c34.223 13.317 97.021 30.722 175.443 30.722 78.097 0 140.277-20.323 174.708-36.835 8.67 23.733 15.685 47.742 20.698 70.625z"/>
        </g>`,
    '<path class="egg-spot" d="M61.892 123.597c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zM107.53 98.87c-5.809 5.263-12.104 9.592-19.742 12.159-1.843.618-2.627-2.31-.8-2.926 8.99-3.02 16.267-8.508 22.483-15.45a45.794 45.794 0 01-1.94 6.217zm2.594-29.112c.75 4.411 1.16 8.57 1.16 12.273 0 1.306-.066 2.592-.168 3.868-8.319 12.886-22.583 21.18-39.21 21.264-4.843.024-4.84-7.56 0-7.585 18.545-.095 33.88-12.313 38.218-29.82zm-7.511-26.22a144.69 144.69 0 012.95 8.16c-16.047 17.408-41.682 21.95-63.335 10.126-4.262-2.327-.47-8.875 3.791-6.548 19.716 10.766 43.202 5.612 56.594-11.738zm-12.18 33.292c-3.004 0-3.004-6.068 0-6.068 4.506 0 4.506 6.068 0 6.068zm-10.515 5.057c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm-13.52 1.516c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm13.52-38.93c4.506 0 4.506 6.066 0 6.066-3.004 0-3.004-6.067 0-6.067zm.374-36.032a51.532 51.532 0 014.284 4.256c-2.857 2.724-6.423 4.643-10.363 5.415-3.785.742-5.399-5.105-1.597-5.85 2.965-.58 5.569-1.878 7.676-3.821zm-.374 20.863c-4.506 0-4.506-6.066 0-6.066 3.004 0 3.004 6.066 0 6.066zM50.761 5.183c.696.196 1.399.37 2.111.513 3.207.639 16.318 2.212 19.47-2.56.85.392 1.68.827 2.486 1.304-2.084 3.173-6.677 4.57-10.83 4.925-5.653.482-11.02-.308-16.122-2.08a36.332 36.332 0 012.885-2.102zM61.892 19.95c-4.506 0-4.506-6.067 0-6.067 3.005 0 3.005 6.067 0 6.067zM39.51 15.902c8.533 6.87 18.806 9.936 29.71 8.974 2.788-.246 2.765 4.306 0 4.55-11.863 1.047-23.088-2.501-32.37-9.953a78.876 78.876 0 012.66-3.57zm-5.613 8.049c14.332 10.682 32.796 13.816 49.991 8.403 2.782-.876 3.963 3.517 1.2 4.388-18.404 5.794-38.091 2.339-53.491-8.898a105.886 105.886 0 012.3-3.893zm-4.62 8.25C40.312 40.972 53.68 45.351 67.91 44.904c3.877-.121 3.865 5.946 0 6.067-15.125.475-29.417-4.173-41.3-13.203.85-1.897 1.745-3.751 2.667-5.569zm-9.47 24.081c8.081 10.025 21.692 14.659 34.08 17.295 1.895.403 1.253 3.367-.646 2.964-12.477-2.655-25.89-7.346-34.403-16.76.307-1.17.63-2.337.968-3.499zm-4.165 22.003C28.32 86.51 42.837 92.115 57.92 93.318c17.233 1.374 36.935-.255 44.503-18.59.734-1.778 3.643-1 2.898.807-6.955 16.85-23.091 21.609-39.99 21.202-17.816-.43-34.804-5.602-49.82-14.959.005-1.122.056-2.295.132-3.493zm27.813 32.91c2.59.438 2.67 3.27 1.269 4.844 2.773.652 5.578 1.201 8.4 1.726 2.046.38 1.176 3.587-.858 3.208-8.042-1.496-14.683-3.464-21.82-7.866-.427-.262-.82-.53-1.227-.796-4.75-5.365-10.392-11.288-12.237-18.466 6.58 8.788 15.15 15.434 26.473 17.35z"/>',
    '<path class="egg-spot" d="M105.568 53.032c.12.79.139 1.573.057 2.346-.148 1.372-.596 2.605-1.33 3.624-1.087 1.507-2.505 2.24-4.068 2.427a4.075 4.075 0 01-1.973-.26c-1.248-.478-2.195-1.325-2.966-2.466a7.18 7.18 0 01-1.224-3.64c-.04-.742.068-1.44.362-2.104.539-1.21 1.67-2.096 3.045-2.155.838-.034 1.648.238 2.376.867.496.427.871.97 1.138 1.596.093.22.16.445.175.683.05.748-.392 1.397-1.042 1.496-.614.094-1.24-.322-1.52-.986-.038-.09-.075-.183-.122-.267-.145-.265-.359-.396-.625-.4a.949.949 0 00-.45.101c-.425.217-.652.574-.65 1.105 0 .413.077.812.236 1.198.346.84.877 1.452 1.62 1.862.344.188.706.286 1.09.283.202-.001.396-.044.592-.097a3.297 3.297 0 001.312-.681c.656-.562 1.074-1.347 1.26-2.298.196-1.003.111-2.037-.22-3.06a6.478 6.478 0 00-.847-1.711c-.713-1.022-1.626-1.74-2.689-2.087-1.3-.422-2.504-.342-3.608.097-.32.128-.623.29-.906.483-.51.345-.932.777-1.31 1.256-.83 1.053-1.29 2.232-1.428 3.583-.118 1.146.013 2.238.323 3.348a9.94 9.94 0 00.61 1.626c.73 1.521 1.69 2.772 3.076 3.729a7.606 7.606 0 003.699 1.348c.569.052 1.147.02 1.728-.087a6.924 6.924 0 002.496-.99c1.89-1.209 3.316-3.157 3.958-5.76.05-.208.086-.42.124-.631.447 1.579.862 3.166 1.245 4.76-.377.694-.792 1.36-1.278 1.963-1.192 1.478-2.597 2.536-4.106 3.2-1.16.51-2.32.751-3.467.766a8.222 8.222 0 01-1.26-.08 9.1 9.1 0 01-1.18-.243c-.743-.207-1.446-.5-2.116-.864-1.57-.85-2.814-2.008-3.855-3.432a14.198 14.198 0 01-2.325-4.903 12.596 12.596 0 01-.284-1.438 12.575 12.575 0 01-.12-1.536 10.844 10.844 0 01.532-3.568 9.976 9.976 0 011.687-3.125c.694-.873 1.527-1.59 2.574-2.094a6.948 6.948 0 011.458-.509 7.574 7.574 0 012.823-.101 7.926 7.926 0 013.371 1.341c1.598 1.106 2.804 2.688 3.513 4.6.233.61.39 1.242.488 1.885zM48.65 7.772c.266-.6.718-1.236 1.346-1.87 3.46-2.352 6.607-3.61 9.276-4.227a23.43 23.43 0 018.17.136c2.372.462 4.368 1.268 5.86 2.248 2.758 1.841 3.191 3.704 1.836 4.426-.833.475-2.168.562-4.04.475-1.276-.057-2.645-.194-4.111-.33a18.632 18.632 0 01-1.534-.197c-1.596-.288-2.852-.796-2.824-1.423.025-.586 1.347-1.114 3.186-1.036.246.012.494.026.734.034.746.025 1.219-.057 1.436-.268.126-.125.162-.269.09-.429-.217-.486-.992-.935-2.457-1.191a14.09 14.09 0 00-3.482-.161c-2.54.202-4.403.91-5.56 1.79-.537.409-.799.814-.813 1.189-.008.198.09.37.203.54.276.415.753.758 1.454 1.05 1.17.488 2.722.77 4.563 1.075 1.941.323 3.92.631 5.982 1.029 1.236.238 2.437.493 3.619.75 2.304.502 4.264.991 5.955 1.14 2.058.188 3.45-.02 4.178-.962.208-.273.338-.61.378-1.008.034-.332-.005-.709-.102-1.112 1.994 1.807 4.058 3.992 6.169 6.63-.22.68-.583 1.198-1.059 1.544-.415.304-.907.473-1.468.539-.966.115-2.086-.076-3.387-.442-1.503-.42-3.151-1.048-5.067-1.759-2.84-1.046-5.779-2.005-9.07-2.695a61.427 61.427 0 00-3.181-.578 69.678 69.678 0 00-3.906-.476c-2.302-.218-4.432-.311-6.396-.484-2.89-.24-4.855-.654-5.865-1.861-.434-.516-.494-1.219-.113-2.085zm-5.43 3.907c.073.38.198.726.376 1.03.29.498.742.856 1.3 1.12.83.39 1.867.561 3.104.61 2.932.115 6.292-.201 10.177-.08a61.17 61.17 0 015.552.41c.879.108 1.754.24 2.626.397 1.103.198 2.189.43 3.27.718 1.391.374 2.758.832 4.092 1.37 1.052.424 2.067.893 3.047 1.332.645.288 1.28.594 1.907.918 2.325 1.193 4.318 2.495 6.15 3.4 1.693.841 3.127 1.226 4.433.96a3.874 3.874 0 001.219-.47c.429-.252.816-.615 1.155-1.098.171-.247.328-.53.47-.838a102.238 102.238 0 014.147 6.774c-.33.893-.707 1.689-1.122 2.343-.57.918-1.197 1.562-1.841 1.977-1.986.747-3.914.22-5.51-.773-1.49-1.131-2.963-2.8-4.696-4.584-1.41-1.462-2.94-2.888-4.64-4.116a35.453 35.453 0 00-4.584-2.8 26.92 26.92 0 00-5.41-2.058c-.802-.21-1.612-.39-2.428-.54a38.275 38.275 0 00-3.081-.438 41.428 41.428 0 00-2.88-.187c-3.51-.104-6.83.255-10.105.907-2.386.474-4.531 1.06-6.482 1.377-1.495.242-2.789.279-3.878-.116a3.492 3.492 0 01-1.092-.636 3.673 3.673 0 01-.579-.654c1.803-2.408 3.574-4.473 5.304-6.255zM34.52 22.85c.125.138.259.268.4.389.35.298.733.514 1.12.706a5.096 5.096 0 002.037.52 6.888 6.888 0 001.749-.143c.974-.198 1.998-.59 3.119-1.092 1.553-.698 3.204-1.565 5.01-2.321a30.323 30.323 0 014.813-1.598 19.387 19.387 0 011.793-.35c.762-.105 1.276.077 1.52.483.313.547-.075 1.271-.77 1.8a2.354 2.354 0 00-.106.088c-.202.108-.398.22-.594.34-.016.002-.033.004-.047.01a3.611 3.611 0 01-.586.193c-.712.182-1.412.404-2.098.664-2.026.767-3.961 1.904-5.772 3.298-2.13 1.628-3.949 3.5-5.729 4.962-1.427 1.171-2.778 1.73-4.171 1.974-1.07.114-1.127.101-1.7.052-.264-.068-.534-.006-.797-.078-.464-.122-.928-.29-1.382-.613-.698-.496-1.369-1.221-1.973-2.224a106.056 106.056 0 014.164-7.06zM19.112 58.372c.272-.277.508-.614.705-1.023.174-.365.284-.755.326-1.155a1.3 1.3 0 00-.19-.85c.294-1.004.493-2.058.81-3.054.69.463 1.308 1.29 1.54 2.202.175.697.192 1.403.08 2.131a7.898 7.898 0 01-.247 1.112 7.455 7.455 0 01-1.16 2.327c-.768 1.026-1.649 1.736-2.744 2.042-.014.005-.029.003-.044.006.288-1.25.596-2.497.924-3.738zm-1.46 6.214a5.663 5.663 0 002.44-.818c1.26-.76 2.196-1.868 2.966-3.275.268-.491.497-1.002.683-1.528.377-1.056.6-2.12.624-3.27.028-1.358-.233-2.586-.817-3.74-.265-.525-.572-1.01-.963-1.42a5.056 5.056 0 00-.774-.654c-.057-.037-.117-.061-.175-.095.323-.945.655-1.887.998-2.825.268.147.61.337.85.524.822.64 1.443 1.462 1.932 2.42.532 1.042.89 2.14 1.083 3.322.2 1.219.21 2.402.068 3.603-.06.506-.148 1.008-.262 1.505-.109.472-.235.934-.39 1.386-.58 1.699-1.36 3.17-2.462 4.54-1.021 1.269-2.185 2.245-3.589 2.876-.6.269-1.219.464-1.862.57a6.2 6.2 0 01-.95.076c.176-1.049.378-2.116.6-3.197zm-1.355 8.803c.105-1.076.243-2.182.403-3.307.186.005.373.011.557.005.356-.014.712-.037 1.06-.087 2.067-.3 3.76-1.343 5.277-2.88 1.153-1.166 2.045-2.475 2.794-3.939.3-.589.569-1.194.803-1.811.244-.637.455-1.285.633-1.942a17.2 17.2 0 00.636-4.745c-.013-1.88-.297-3.675-1.021-5.44a9.662 9.662 0 00-1.263-2.213 8.576 8.576 0 00-.864-.966 9.362 9.362 0 00-.886-.751 9.394 9.394 0 00-.953-.621c.37-.96.75-1.914 1.14-2.865.352.184.775.432 1.093.658.196.14.376.298.565.447.04.032.085.064.127.095.301.29.602.582.903.87.03.04.06.08.094.116.266.27.493.57.716.874.346.475.651.977.913 1.5 1.196 2.408 1.623 4.892 1.707 7.49a21.403 21.403 0 01-.564 5.602 22.643 22.643 0 01-.462 1.673 22.314 22.314 0 01-1.956 4.46c-1.524 2.609-3.508 5.033-6.165 6.55a9.555 9.555 0 01-1.816.785 8.612 8.612 0 01-1.111.27c-.215.036-.43.07-.646.108-.038.005-.074.02-.11.03l-1.002.071c-.101-.007-.202-.021-.302-.021-.1 0-.2-.012-.3-.016zm17.34 40.672c-.02.022-.06.023-.08.042a45.521 45.521 0 01-6.603-6.128c.71.118 1.511.492 2.443 1.086.83.528 1.651 1.17 2.51 1.88.3.25.587.506.852.794.829.898 1.274 1.859.877 2.326zm9.526 5.068c-.025.194-.09.375-.172.55a48.278 48.278 0 01-5.208-2.72c.004-.02.012-.034.014-.053.097-.452.039-.958-.184-1.531-.37-.955-1.093-1.93-2.015-3.006-.974-1.136-2.019-2.225-3.131-3.358a79.192 79.192 0 00-1.995-1.974c-1.303-1.238-2.478-2.276-3.677-2.946-1.31-.735-2.415-1.002-3.389-.72a43.48 43.48 0 01-3.08-5.364c.36-.237.736-.422 1.134-.502.483-.098.978-.08 1.487.032.877.19 1.756.641 2.68 1.286 1.067.745 2.117 1.694 3.247 2.84 1.674 1.691 3.262 3.443 5.046 5.282.574.588 1.142 1.176 1.719 1.76.71.718 1.412 1.42 2.107 2.122 1.24 1.251 2.393 2.413 3.374 3.606 1.452 1.746 2.235 3.236 2.043 4.696zm10.29 2.402a5.025 5.025 0 01-.666 1.313 50.407 50.407 0 01-5.63-1.535c.178-.283.315-.589.406-.908.15-.521.133-1.06.004-1.605-.192-.807-.623-1.605-1.238-2.423-1.464-1.944-3.44-3.72-5.597-5.792-1.022-.98-2.044-1.95-3.077-2.96-.485-.473-.966-.95-1.443-1.43a77.103 77.103 0 01-1.787-1.846 65.996 65.996 0 01-2.206-2.51c-.568-.676-1.116-1.354-1.684-1.988-.374-.417-.745-.837-1.112-1.26-1.368-1.57-2.598-3.04-3.906-4.162-1.21-1.038-2.402-1.673-3.669-1.83a4.928 4.928 0 00-1.255.002c-.47.06-.937.207-1.401.448a4.91 4.91 0 00-.726.469 43.185 43.185 0 01-1.604-5.854c.433-.397.873-.74 1.311-1.013.723-.458 1.43-.72 2.108-.831.437-.071.87-.114 1.27-.032.054.012.111-.001.168-.002l1.31.345c.05.028.1.061.153.087.234.114.475.205.704.339.49.289.954.656 1.402 1.083 1.163 1.112 2.165 2.602 3.224 4.272.865 1.365 1.732 2.783 2.692 4.153a149.963 149.963 0 002.499 3.46 42.515 42.515 0 002.893 3.49c.438.472.883.933 1.335 1.389a81.2 81.2 0 001.716 1.682 90.53 90.53 0 001.636 1.512c2.016 1.82 4.043 3.452 6.16 5.124 1.544 1.216 2.99 2.349 4.162 3.566.899.933 1.566 1.877 1.874 2.907.114.382.168.772.164 1.17-.006.397-.07.791-.19 1.17zm10.806.326c-.251.685-.657 1.405-1.178 2.132a53.151 53.151 0 01-5.868-.399c.647-.992.95-1.99.957-2.908a5.972 5.972 0 00-.128-1.218 6.009 6.009 0 00-.69-1.851 7.364 7.364 0 00-.946-1.303c-.6-.664-1.343-1.267-2.201-1.849-1.196-.809-2.551-1.54-3.937-2.329a54.613 54.613 0 01-3.5-2.13 21.21 21.21 0 01-1.188-.841c-.485-.376-.659-.798-.545-1.234.16-.579.824-.89 1.537-.847l.113.003c.178.045.357.087.537.125.011.009.019.017.032.021.158.062.3.142.44.233.499.327 1.01.637 1.533.928 1.541.865 3.226 1.602 4.981 2.28 2.057.8 4.08 1.48 5.826 2.375 1.399.715 2.538 1.55 3.354 2.604.07.088.161.165.243.246l.583.986c.009.047.01.096.026.137.088.24.177.48.262.719.15.422.237.876.264 1.358.045.842-.107 1.766-.507 2.762zm19.873-35.936c-.082.902-.213 1.8-.393 2.69-.547 2.703-1.504 5.215-2.922 7.5-2.477 3.985-5.803 6.712-9.974 8.166a16.44 16.44 0 01-2.805.703c-.612.098-1.225.247-1.844.26-.082.002-.164.092-.244.092H63.9c-.087 0-.172-.086-.258-.092-.388-.031-.778-.081-1.164-.128a17.877 17.877 0 01-2.464-.493 16.808 16.808 0 01-5.847-2.875c-1.462-1.11-2.734-2.45-3.863-3.962a16.113 16.113 0 01-2.286-4.268 24.412 24.412 0 01-1.38-7.482 20.572 20.572 0 01.63-5.487c.809-3.12 2.255-5.825 4.342-8.106 1.524-1.664 3.277-2.946 5.262-3.84a14.113 14.113 0 014.742-1.215 14.015 14.015 0 013.595.202 14.84 14.84 0 013.286 1.03c2.484 1.104 4.546 2.826 6.149 5.197 1.726 2.553 2.674 5.433 2.88 8.61.056.847.037 1.693-.04 2.537a16.14 16.14 0 01-.447 2.617c-.523 2.018-1.4 3.822-2.66 5.396a13.154 13.154 0 01-4.369 3.532c-1.541.784-3.155 1.213-4.852 1.252a11.192 11.192 0 01-5.802-1.483 10.33 10.33 0 01-3.352-3.027c-1.347-1.903-2.052-4.078-2.225-6.475-.055-.77-.036-1.54.041-2.308a13.13 13.13 0 01.575-2.76c.52-1.593 1.306-2.996 2.423-4.16 1.645-1.72 3.622-2.58 5.865-2.724a6.11 6.11 0 012.835.5c1.793.768 3.147 2.1 4.092 3.945a8.965 8.965 0 01.834 5.738c-.208 1.117-.645 2.105-1.35 2.942-1.294 1.534-3.305 2.23-5.169 1.768-1.138-.282-2.075-.93-2.78-1.968-.48-.705-.765-1.504-.905-2.37a2.62 2.62 0 01-.006-.912c.178-.96.963-1.69 1.9-1.67.885.018 1.654.728 1.823 1.701.024.131.044.264.08.392.108.398.352.637.716.725.216.054.442.054.658.002.666-.162 1.115-.588 1.287-1.332.133-.58.142-1.166.018-1.75-.267-1.27-.916-2.244-1.908-2.938a3.175 3.175 0 00-1.508-.569 3.542 3.542 0 00-.853.036 4.98 4.98 0 00-1.956.678c-1.014.615-1.743 1.525-2.243 2.667-.529 1.204-.74 2.48-.688 3.814.03.8.16 1.578.4 2.33.467 1.467 1.256 2.667 2.438 3.528 1.441 1.05 3.035 1.516 4.757 1.472a7.224 7.224 0 001.491-.198c.887-.211 1.715-.589 2.506-1.074 1.736-1.064 3.033-2.585 3.83-4.605.674-1.708.884-3.498.728-5.345a12.402 12.402 0 00-.539-2.725c-.81-2.558-2.22-4.606-4.29-6.066-1.67-1.18-3.511-1.8-5.483-1.963a9.843 9.843 0 00-2.47.117 10.695 10.695 0 00-3.458 1.218c-2.588 1.45-4.5 3.636-5.767 6.515a14.91 14.91 0 00-1.153 4.299c-.084.703-.12 1.41-.11 2.118.013.896.1 1.784.241 2.666.183 1.148.454 2.268.837 3.353.303.857.67 1.68 1.16 2.43.322.493.67.97 1.04 1.431 1.379 1.712 3.004 3.048 4.911 3.958 1.765.84 3.617 1.244 5.53 1.33.632.028 1.264.02 1.895-.02a14.461 14.461 0 002.096-.291c1.362-.289 2.67-.78 3.88-1.458 2.708-1.517 4.806-3.749 6.31-6.662 1.337-2.594 2-5.4 2.097-8.376a22.672 22.672 0 00-.197-3.821 21.065 21.065 0 00-.812-3.613c-.936-2.912-2.412-5.438-4.481-7.521-2.732-2.753-5.962-4.288-9.621-4.738a23.378 23.378 0 00-1.864-.14 20.186 20.186 0 00-3.047.096c-.785.085-1.56.216-2.329.41a14.465 14.465 0 00-3.532 1.393c-1.566.872-2.938 2.03-4.155 3.42-1.05 1.2-1.952 2.524-2.74 3.941-.286.513-.55 1.041-.822 1.563-.348.666-.868 1.04-1.564 1.09-.924.067-1.736-.622-1.953-1.58-.014-.045-.048-.095-.048-.145v-.746c0-.016.025-.032.028-.049.042-.226.124-.437.225-.64.355-.72.734-1.427 1.137-2.122 1.17-2.01 2.524-3.847 4.143-5.437 1.898-1.866 4.045-3.26 6.452-4.162 3.056-.938 6.07-1.64 8.43-1.44.388.029.778.157 1.166.186.682.048 1.36.19 2.034.309 1.175.21 2.327.551 3.454.978 5.168 1.958 9.34 6.044 11.738 11.477 1.32 2.994 2.014 6.173 2.144 9.496a26.51 26.51 0 01-.09 3.515zm24.524-16.533c-1.764 1.572-3.66 2.566-5.556 3.037a11.568 11.568 0 01-4.341.23c-.117-.015-.239-.016-.357-.026l-1.167-.232c-.04-.016-.082-.036-.126-.05l-.746-.21a11.642 11.642 0 01-1.27-.444 12.552 12.552 0 01-2.036-1.07c-2.93-1.934-4.958-4.659-6.422-7.493a20.984 20.984 0 01-1.739-4.745 19.406 19.406 0 01-.484-3.106c-.1-1.405-.053-2.806.19-4.283.425-2.565 1.237-4.964 2.943-7.163.378-.484.8-.934 1.26-1.344.301-.267.604-.529.951-.754.045-.03.083-.067.124-.1l1.17-.72.163-.073c.238-.117.471-.244.718-.351.545-.236 1.11-.425 1.688-.566 1.538-.378 3.24-.432 5.085-.053 1.297.267 2.603.754 3.885 1.423a139.234 139.234 0 011.85 4.652 8.684 8.684 0 00-1.12-1c-.413-.3-.842-.578-1.287-.832-1.64-.93-3.32-1.41-4.937-1.45a8.988 8.988 0 00-4.015.836c-.39.179-.769.38-1.134.603a9.258 9.258 0 00-2.897 2.815c-1.072 1.638-1.631 3.372-1.882 5.238-.224 1.663-.147 3.22.154 4.814.128.686.295 1.364.5 2.031.2.656.44 1.3.718 1.929.698 1.573 1.58 3.016 2.788 4.36 1.59 1.768 3.448 3.077 5.838 3.705.403.106.819.186 1.234.257.681.115 1.375.182 2.089.178a10.054 10.054 0 001.679-.14 9.438 9.438 0 002.725-.908c1.26-.642 2.436-1.592 3.48-2.809.481-.56.919-1.171 1.323-1.815.27 1.27.52 2.53.731 3.763a16.752 16.752 0 01-1.77 1.866z"/>',
];
BreedingController.filter = {
    search: ko.observable(new RegExp('', 'i')),
    category: ko.observable(-1).extend({ numeric: 0 }),
    shinyStatus: ko.observable(-1).extend({ numeric: 0 }),
    // All = -2
    type1: ko.observable(-2).extend({ numeric: 0 }),
    type2: ko.observable(-2).extend({ numeric: 0 }),
    region: ko.observable(-2).extend({ numeric: 0 }),
};
// Value displayed at bottom of image
BreedingController.displayValue = ko.observable('attack');
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
/// <reference path="../../declarations/breeding/EggType.d.ts" />
class Egg {
    constructor(type = EggType.None, totalSteps = 0, pokemon = 'MissingNo.', steps = 0, shinyChance = GameConstants.SHINY_CHANCE_BREEDING, notified = false) {
        this.type = type;
        this.totalSteps = totalSteps;
        this.pokemon = pokemon;
        this.shinyChance = shinyChance;
        this.notified = notified;
        this.saveKey = 'egg';
        this.defaults = {};
        this.steps = ko.observable(steps);
        this.init();
    }
    init() {
        this.progress = ko.pureComputed(function () {
            return this.steps() / this.totalSteps * 100;
        }, this);
        this.progressText = ko.pureComputed(function () {
            return `${this.steps()} / ${this.totalSteps}`;
        }, this);
        this.stepsRemaining = ko.pureComputed(function () {
            return this.totalSteps - this.steps();
        }, this);
        if (this.pokemon) {
            const dataPokemon = PokemonHelper.getPokemonByName(this.pokemon);
            this.pokemonType1 = dataPokemon.type1;
            this.pokemonType2 = dataPokemon.type2 === PokemonType.None ? dataPokemon.type1 : dataPokemon.type2;
        }
        else {
            this.pokemonType1 = PokemonType['Normal'];
            this.pokemonType2 = PokemonType['Normal'];
        }
    }
    isNone() {
        return this.type === EggType.None;
    }
    updateShinyChance(steps, multiplier) {
        const stepsChance = GameConstants.SHINY_CHANCE_BREEDING / multiplier.getBonus('shiny');
        const newChance = ((this.shinyChance * this.steps()) + (stepsChance * steps)) / (this.steps() + steps);
        this.shinyChance = newChance;
    }
    addSteps(amount, multiplier) {
        if (this.isNone() || this.notified) {
            return;
        }
        if (!+amount) {
            amount = 1;
        }
        this.updateShinyChance(amount, multiplier);
        this.steps(this.steps() + amount);
        if (this.canHatch()) {
            if (this.type == EggType.Pokemon) {
                Notifier.notify({
                    message: `${this.pokemon} is ready to hatch!`,
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.ready_to_hatch,
                    setting: NotificationConstants.NotificationSetting.ready_to_hatch,
                });
            }
            else {
                Notifier.notify({
                    message: 'An egg is ready to hatch!',
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.ready_to_hatch,
                    setting: NotificationConstants.NotificationSetting.ready_to_hatch,
                });
            }
            this.notified = true;
        }
    }
    canHatch() {
        return !this.isNone() && this.steps() >= this.totalSteps;
    }
    hatch() {
        if (!this.canHatch()) {
            return false;
        }
        const shiny = PokemonFactory.generateShiny(this.shinyChance, true);
        const partyPokemon = App.game.party.caughtPokemon.find(p => p.name == this.pokemon);
        // If the party pokemon exist, increase it's damage output
        if (partyPokemon) {
            // Increase attack
            partyPokemon.attackBonusPercent += GameConstants.BREEDING_ATTACK_BONUS;
            partyPokemon.attackBonusAmount += partyPokemon.proteinsUsed();
            // If breeding (not store egg), reset level, reset evolution check
            if (partyPokemon.breeding) {
                if (partyPokemon.evolutions !== undefined) {
                    partyPokemon.evolutions.forEach(evo => evo instanceof LevelEvolution ? evo.triggered = false : undefined);
                }
                partyPokemon.exp = 0;
                partyPokemon.level = 1;
                partyPokemon.breeding = false;
                partyPokemon.level = partyPokemon.calculateLevelFromExp();
                partyPokemon.checkForLevelEvolution();
            }
            // Recalculate current attack
            partyPokemon.attack = partyPokemon.calculateAttack();
        }
        const pokemonID = PokemonHelper.getPokemonByName(this.pokemon).id;
        App.game.party.gainPokemonById(pokemonID, shiny);
        if (shiny) {
            Notifier.notify({
                message: `✨ You hatched a shiny ${this.pokemon}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.hatched_shiny,
            });
            App.game.logbook.newLog(LogBookTypes.SHINY, `You hatched a shiny ${this.pokemon}!`);
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonHatched[pokemonID]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonHatched);
        }
        else {
            Notifier.notify({
                message: `You hatched ${GameHelper.anOrA(this.pokemon)} ${this.pokemon}!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.hatched,
            });
        }
        // Capture base form if not already caught. This helps players get Gen2 Pokemon that are base form of Gen1
        const baseForm = App.game.breeding.calculateBaseForm(this.pokemon);
        if (this.pokemon != baseForm && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(baseForm).id)) {
            Notifier.notify({
                message: `You also found ${GameHelper.anOrA(baseForm)} ${baseForm} nearby!`,
                type: NotificationConstants.NotificationOption.success,
            });
            App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(baseForm).id);
        }
        // Update statistics
        GameHelper.incrementObservable(App.game.statistics.pokemonHatched[pokemonID]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonHatched);
        App.game.oakItems.use(OakItems.OakItem.Blaze_Cassette);
        return true;
    }
    toJSON() {
        return {
            totalSteps: this.totalSteps,
            steps: this.steps(),
            shinyChance: this.shinyChance,
            pokemon: this.pokemon,
            type: this.type,
            notified: this.notified,
        };
    }
    fromJSON(json) {
        this.totalSteps = json['totalSteps'];
        this.steps = ko.observable(json['steps']);
        this.shinyChance = json['shinyChance'];
        this.pokemon = json['pokemon'];
        this.type = json['type'];
        this.notified = json['notified'];
        this.init();
    }
}
class RedeemableCodeController {
    static enterCode() {
        const el = document.getElementById('redeemable-code-input');
        const code = el.value;
        el.value = '';
        App.game.redeemableCodes.enterCode(code);
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
/// <reference path="../../declarations/codes/RedeemableCode.d.ts" />
class RedeemableCodes {
    constructor() {
        this.saveKey = 'redeemableCodes';
        this.codeList = [
            new RedeemableCode('farming-quick-start', -83143881, false, () => {
                // Give the player 10k farming points, 100 Cheri berries
                App.game.wallet.gainFarmPoints(10000);
                App.game.farming.gainBerry(BerryType.Cheri, 100);
                // Notify that the code was activated successfully
                Notifier.notify({
                    title: 'Code activated!',
                    message: 'You gained 10,000 farmpoints and 100 Cheri berries',
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                });
            }),
            new RedeemableCode('shiny-charmer', -318017456, false, () => {
                // Select a random Pokemon to give the player as a shiny
                const pokemon = pokemonMap.randomRegion(player.highestRegion());
                App.game.party.gainPokemonById(pokemon.id, true, true);
                // Notify that the code was activated successfully
                Notifier.notify({
                    title: 'Code activated!',
                    message: `✨ You found a shiny ${pokemon.name}! ✨`,
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                });
            }),
            new RedeemableCode('complete-kanto', 750807787, false, () => {
                // Complete all routes
                Routes.getRoutesByRegion(GameConstants.Region.kanto).forEach(route => {
                    GameHelper.incrementObservable(App.game.statistics.routeKills[route.region][route.number], 10);
                });
                // Complete all gyms
                GameConstants.KantoGyms.forEach(gym => {
                    GameHelper.incrementObservable(App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gym)]);
                    // Give badge
                    if (!App.game.badgeCase.hasBadge(gymList[gym].badgeReward)) {
                        App.game.badgeCase.gainBadge(gymList[gym].badgeReward);
                    }
                });
                // Complete all dungeons
                GameConstants.KantoDungeons.forEach(dungeon => {
                    GameHelper.incrementObservable(App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(dungeon)]);
                });
                // Catch all Pokemon
                for (let id = 1; id <= GameConstants.TotalPokemonsPerRegion[GameConstants.Region.kanto]; id++) {
                    App.game.party.gainPokemonById(id, false, true);
                }
                // Notify that the code was activated successfully
                Notifier.notify({
                    title: 'Code activated!',
                    message: 'You have unlocked all of the Kanto region',
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                });
            }),
        ];
    }
    isDiscordCode(code) {
        return /^\w{4}-\w{4}-\w{4}$/.test(code);
    }
    enterCode(code) {
        // If this is a Discord code, send it to the Discord class to check
        if (App.game.discord.enabled && this.isDiscordCode(code)) {
            return App.game.discord.enterCode(code);
        }
        const hash = this.hash(code);
        const redeemableCode = this.codeList.find(c => {
            return c.hash === hash;
        });
        if (!redeemableCode) {
            return Notifier.notify({
                message: `Invalid code ${code}`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        if (redeemableCode) {
            redeemableCode.redeem();
        }
    }
    /**
     * Insecure hash, but should keep some of the nosy people out.
     * @param text
     */
    hash(text) {
        let hash = 0, i, chr;
        if (text.length === 0) {
            return hash;
        }
        for (i = 0; i < text.length; i++) {
            chr = text.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        json.forEach(name => {
            const foundCode = this.codeList.find(code => {
                return code.name === name;
            });
            if (foundCode) {
                foundCode.isRedeemed = true;
            }
        });
    }
    toJSON() {
        return this.codeList.reduce((res, code) => {
            if (code.isRedeemed) {
                res.push(code.name);
            }
            return res;
        }, []);
    }
}
class Discord {
    constructor() {
        this.saveKey = 'discord';
        this.defaults = {
            ID: null,
        };
        this.ID = ko.observable(null);
        this.codes = [
            new DiscordPokemonCode(pokemonMap['Unown (D)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (I)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (S)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (C)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (O)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (R)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Surfing Pikachu'], 1500, 'It\'s a Pikachu on a surfboard!'),
        ];
        // Check if code provided by Discord, which means the user has logged in, and we need to get their details
        const search = new URLSearchParams(location.search);
        const discordID = search.get('discordID');
        if (discordID) {
            this.ID(discordID);
            Notifier.notify({
                message: 'Successfully logged in to Discord!',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
            window.history.replaceState('', '', `${location.origin + location.pathname}`);
        }
    }
    get enabled() {
        // This was done like this so es/tslint doesn't throw errors
        // try {
        //     return !!JSON.parse('false');
        // } catch (e) {
        //     return false;
        // }
        return true;
    }
    login() {
        // eslint-disable-next-line no-alert
        const discordID = prompt('Enter your discord id');
        if (discordID) {
            this.ID(discordID);
            Notifier.notify({
                message: 'Successfully logged in to Discord!',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
        }
        // This will be updated from our config values
        // location.href = `false?action=login&redirect_uri=${encodeURIComponent(location.href.replace(location.search, ''))}`;
    }
    logout() {
        this.ID(this.defaults.id);
    }
    calcCode(code) {
        const discordID = +App.game.discord.ID() || false;
        if (!discordID) {
            return;
        }
        // reverse the string (for names that are similar - forms)
        const codeSeed = code.name
            .split('')
            .reverse()
            // map to the character code
            .map((l) => l.charCodeAt(0))
            // multiply the numbers (should be random enough)
            .reduce((s, b) => s * (b / 10), 1);
        SeededRand.seed(discordID + codeSeed);
        const arr = [];
        for (let i = 0; i < 14; i++) {
            let int;
            while (int == undefined || int.length != 1) {
                int = SeededRand.intBetween(0, 35).toString(36);
            }
            arr.push(int);
        }
        arr[4] = '-';
        arr[9] = '-';
        return arr.join('').toUpperCase();
    }
    findCodeMatch(enteredCode) {
        return this.codes.find((code) => enteredCode.toUpperCase() == this.calcCode(code));
    }
    enterCode(enteredCode) {
        // Discord integration disabled
        if (!this.enabled) {
            Notifier.notify({
                message: 'Discord integration not enabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // User not logged in to Discord
        if (!this.ID()) {
            Notifier.notify({
                message: 'You must sign in to Discord before attempting this code',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Try find a matching code
        const code = this.findCodeMatch(enteredCode);
        // No code found
        if (!code) {
            Notifier.notify({
                message: `Invalid code ${enteredCode}`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Claim the code
        code.claim();
        return true;
    }
    loadCodes(codes) {
        codes.forEach((code) => {
            const c = this.codes.find((c) => c.name == code.name);
            if (c) {
                c.claimed = code.claimed;
            }
        });
    }
    fromJSON(json) {
        if (!json || !json.ID) {
            return;
        }
        this.ID(json.ID || this.defaults.ID);
        this.loadCodes(json.codes || []);
    }
    toJSON() {
        return {
            ID: this.ID(),
            codes: this.codes.filter((c) => c.claimed),
        };
    }
}
class DiscordCode {
    // Image, Price and Description fields are not currently used on the website,
    // the data is there so the Discord bot and website can share the same dataset
    constructor(name, image, price, description, claimFunction = () => true) {
        this.name = name;
        this.image = image;
        this.price = price;
        this.description = description;
        this.claimFunction = claimFunction;
        this.claimed = false;
    }
    claim() {
        if (this.claimed) {
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Already claimed!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        if (this.claimFunction()) {
            this.claimed = true;
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Successfully claimed!',
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    toJSON() {
        return {
            name: this.name,
            image: this.image,
            price: this.price,
            description: this.description,
            claimed: this.claimed,
        };
    }
}
class DiscordPokemonCode extends DiscordCode {
    constructor(pokemon, price, description) {
        const image = `assets/images/pokemon/${pokemon.id}.png`;
        const claimFunction = () => {
            const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
            App.game.party.gainPokemonById(pokemon.id, shiny, true);
            // Notify that the code was activated successfully
            Notifier.notify({
                message: `You obtained a${shiny ? ' shiny' : ''} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
            return true;
        };
        super(pokemon.name, image, price, description, claimFunction);
    }
}
class DungeonBossPokemon {
    constructor(name, baseHealth, level, options) {
        this.name = name;
        this.baseHealth = baseHealth;
        this.level = level;
        this.options = options;
    }
}
class Trainer {
    constructor(trainerClass, team, name, subTrainerClass) {
        this.trainerClass = trainerClass;
        this.team = team;
        this.subTrainerClass = subTrainerClass;
        this.name = name ? `${trainerClass} ${name}` : trainerClass;
    }
    get image() {
        const imageName = this.subTrainerClass ? `${this.trainerClass} ${this.subTrainerClass}` : this.trainerClass;
        return `assets/images/trainers/${imageName}.png`;
    }
}
///<reference path="../trainers/Trainer.ts"/>
class DungeonTrainer extends Trainer {
    constructor(trainerClass, team, options, name, subTrainerClass) {
        super(trainerClass, team, name, subTrainerClass);
        this.options = options;
    }
}
class GymPokemon {
    constructor(name, maxHealth, level) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.level = level;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="DungeonBossPokemon.ts"/>
///<reference path="../achievements/GymBadgeRequirement.ts"/>
///<reference path="../achievements/MultiRequirement.ts"/>
///<reference path="../achievements/ObtainedPokemonRequirement.ts"/>
///<reference path="./DungeonTrainer.ts"/>
///<reference path="../gym/GymPokemon.ts"/>
/**
 * Gym class.
 */
class Dungeon {
    constructor(name, enemyList, itemList, baseHealth, bossList, tokenCost, difficultyRoute, // Closest route in terms of difficulty, used for egg steps, dungeon tokens etc.
    level) {
        this.name = name;
        this.enemyList = enemyList;
        this.itemList = itemList;
        this.baseHealth = baseHealth;
        this.bossList = bossList;
        this.tokenCost = tokenCost;
        this.difficultyRoute = difficultyRoute;
        this.level = level;
    }
    isUnlocked() {
        // Player requires the Dungeon Ticket to access the dungeons
        if (!App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Dungeon_ticket)) {
            Notifier.notify({
                message: 'You need the Dungeon ticket to access dungeons',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
    /**
     * Finds the possible Bosses in the dungeon
     * @param includeTrainers Whether to include Trainer Bosses. Defaults to true
     * @param ignoreRequirement Whether to check if requirements are met. Defaults to false
     */
    availableBosses(includeTrainers = true, ignoreRequirement = false) {
        // TODO: HLXII - We need this check as this method is called somewhere during initialization when App isn't initialized yet
        // the requirement.isCompleted call can sometimes use the App object, which will cause this to crash
        // Once App is moved to modules, this check might be able to be removed.
        if (!App.game) {
            return [];
        }
        if (includeTrainers) {
            return this.bossList.filter((boss) => {
                var _a;
                return !ignoreRequirement && ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) ? boss.options.requirement.isCompleted() : true;
            });
        }
        else {
            return this.bossList
                .filter((b) => {
                var _a;
                if (b instanceof DungeonBossPokemon) {
                    return !ignoreRequirement && ((_a = b.options) === null || _a === void 0 ? void 0 : _a.requirement) ? b.options.requirement.isCompleted() : true;
                }
                return false;
            })
                .map((b) => b);
        }
    }
    /**
     * Retreives the weights for all the possible bosses
     */
    get bossWeightList() {
        // Double the chance of encountering a Dungeon Boss Pokemon you have not yet caught
        const list = this.availableBosses().map((boss) => {
            var _a, _b;
            return ((_b = (_a = boss.options) === null || _a === void 0 ? void 0 : _a.weight) !== null && _b !== void 0 ? _b : 1) * (boss instanceof DungeonBossPokemon && !App.game.party.alreadyCaughtPokemonByName(boss.name) ? 2 : 1);
        });
        console.log(list);
        return list;
    }
    /**
     * Returns the possible enemies in the dungeon.
     * @param ignoreRequirement Whether to check if requirements are met. Defaults to false
     */
    availableMinions(ignoreRequirement = false) {
        return this.enemyList.filter((enemy) => {
            var _a;
            if (typeof enemy === 'string') {
                return true;
            }
            else {
                return !ignoreRequirement && ((_a = enemy.options) === null || _a === void 0 ? void 0 : _a.requirement) ? enemy.options.requirement.isCompleted() : true;
            }
        });
    }
    /**
     * Retreives the weights for all the possible enemies
     */
    get weightList() {
        return this.availableMinions().map((enemy) => {
            var _a, _b, _c;
            if (typeof enemy === 'string') {
                return 1;
            }
            else if (enemy.hasOwnProperty('pokemon')) {
                return (_a = enemy.options.weight) !== null && _a !== void 0 ? _a : 1;
            }
            else {
                return (_c = (_b = enemy.options) === null || _b === void 0 ? void 0 : _b.weight) !== null && _c !== void 0 ? _c : 1;
            }
        });
    }
    /**
     * Returns the possible minion Pokemon in the dungeon.
     * Filters out Trainers and collapses DetailedPokemon
     */
    get pokemonList() {
        // Filtering out Trainers
        return this.enemyList
            .filter((enemy) => {
            return !enemy.hasOwnProperty('name');
        })
            .map((enemy) => {
            // Collapsing DetailedPokemon
            if (typeof enemy === 'string') {
                return enemy;
            }
            else if (enemy.hasOwnProperty('pokemon')) {
                return enemy.pokemon;
            }
        });
    }
    /**
     * Returns the possible boss Pokemon in the dungeon.
     * Filters out Trainers
     */
    get bossPokemonList() {
        // Filtering out Trainers
        return this.bossList
            .filter((enemy) => {
            return enemy instanceof DungeonBossPokemon;
        })
            .map((enemy) => {
            return enemy.name;
        });
    }
    /**
     * Gets all possible Pokemon in the dungeon
     */
    get allPokemon() {
        return this.pokemonList.concat(this.bossPokemonList);
    }
    /**
     * Finds all possible encounters in the Dungeon and their details.
     * Used for generating the Dungeon Encounter view
     */
    get encounterList() {
        const encounterInfo = [];
        // Handling minions
        this.enemyList.forEach((enemy) => {
            // Handling Pokemon
            if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
                let pokemonName;
                if (enemy.hasOwnProperty('pokemon')) {
                    pokemonName = enemy.pokemon;
                }
                else {
                    pokemonName = enemy;
                }
                const encounter = {
                    image: `assets/images/${App.game.party.alreadyCaughtPokemonByName(pokemonName, true) ? 'shiny' : ''}pokemon/${pokemonMap[pokemonName].id}.png`,
                    shiny: App.game.party.alreadyCaughtPokemonByName(pokemonName, true),
                    hidden: !App.game.party.alreadyCaughtPokemonByName(pokemonName),
                    lock: false,
                    lockMessage: '',
                    boss: false,
                };
                encounterInfo.push(encounter);
                // Handling Trainers
            }
            else {
                /* We don't display minion Trainers */
            }
        });
        // Handling Bosses
        this.bossList.forEach((boss) => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            // Handling Pokemon
            if (boss instanceof DungeonBossPokemon) {
                const pokemonName = boss.name;
                const encounter = {
                    image: `assets/images/${App.game.party.alreadyCaughtPokemonByName(pokemonName, true) ? 'shiny' : ''}pokemon/${pokemonMap[pokemonName].id}.png`,
                    shiny: App.game.party.alreadyCaughtPokemonByName(pokemonName, true),
                    hidden: !App.game.party.alreadyCaughtPokemonByName(pokemonName),
                    lock: ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) ? !((_b = boss.options) === null || _b === void 0 ? void 0 : _b.requirement.isCompleted()) : false,
                    lockMessage: ((_c = boss.options) === null || _c === void 0 ? void 0 : _c.requirement) ? (_d = boss.options) === null || _d === void 0 ? void 0 : _d.requirement.hint() : '',
                    boss: true,
                };
                encounterInfo.push(encounter);
                // Handling Trainer
            }
            else {
                const encounter = {
                    image: boss.image,
                    shiny: false,
                    hidden: false,
                    lock: ((_e = boss.options) === null || _e === void 0 ? void 0 : _e.requirement) ? !((_f = boss.options) === null || _f === void 0 ? void 0 : _f.requirement.isCompleted()) : false,
                    lockMessage: ((_g = boss.options) === null || _g === void 0 ? void 0 : _g.requirement) ? (_h = boss.options) === null || _h === void 0 ? void 0 : _h.requirement.hint() : '',
                    boss: true,
                };
                encounterInfo.push(encounter);
            }
        });
        return encounterInfo;
    }
}
/**
 * Data list that contains all dungeons, accessible by name.
 */
const dungeonList = {};
// Kanto Dungeons
dungeonList['Viridian Forest'] = new Dungeon('Viridian Forest', [
    { pokemon: 'Caterpie', options: { weight: 2.67 } },
    { pokemon: 'Metapod', options: { weight: 2.67 } },
    { pokemon: 'Weedle', options: { weight: 2.67 } },
    { pokemon: 'Kakuna', options: { weight: 2.67 } },
    { pokemon: 'Pidgey', options: { weight: 2.67 } },
    { pokemon: 'Pidgeotto', options: { weight: 2.67 } },
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Weedle', 50, 6), new GymPokemon('Caterpie', 50, 6)], { weight: 1 }, 'Rick'),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Weedle', 50, 7), new GymPokemon('Kakuna', 50, 7), new GymPokemon('Weedle', 50, 7)], { weight: 1 }, 'Doug'),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Caterpie', 50, 7), new GymPokemon('Caterpie', 50, 8)], { weight: 1 }, 'Anthony'),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Metapod', 50, 7), new GymPokemon('Caterpie', 50, 7), new GymPokemon('Metapod', 50, 7)], { weight: 1 }, 'Charlie'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 102, [new DungeonBossPokemon('Pikachu', 510, 7), new DungeonTrainer('Bug Catcher', [new GymPokemon('Weedle', 510, 9)], { weight: 1 }, 'Sammy')], 50, 1, 5);
dungeonList['Digletts Cave'] = new Dungeon('Digletts Cave', ['Diglett'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 1208, [new DungeonBossPokemon('Dugtrio', 6040, 31)], 95, 2, 22);
dungeonList['Mt. Moon'] = new Dungeon('Mt. Moon', [
    { pokemon: 'Sandshrew', options: { weight: 8.8 } },
    { pokemon: 'Clefairy', options: { weight: 8.8 } },
    { pokemon: 'Zubat', options: { weight: 8.8 } },
    { pokemon: 'Paras', options: { weight: 8.8 } },
    { pokemon: 'Geodude', options: { weight: 8.8 } },
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Weedle', 75, 11), new GymPokemon('Kakuna', 75, 11)], { weight: 1 }, 'Kent'),
    new DungeonTrainer('Lass', [new GymPokemon('Clefairy', 75, 14)], { weight: 1 }, 'Iris'),
    new DungeonTrainer('Super Nerd', [new GymPokemon('Magnemite', 75, 11), new GymPokemon('Voltorb', 75, 11)], { weight: 1 }, 'Jovan'),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Caterpie', 75, 10), new GymPokemon('Metapod', 75, 10), new GymPokemon('Caterpie', 75, 10)], { weight: 1 }, 'Robby'),
    new DungeonTrainer('Lass', [new GymPokemon('Oddish', 75, 11), new GymPokemon('Bellsprout', 75, 11)], { weight: 1 }, 'Miriam'),
    new DungeonTrainer('Youngster', [new GymPokemon('Rattata', 75, 10), new GymPokemon('Rattata', 75, 10), new GymPokemon('Zubat', 75, 10)], { weight: 1 }, 'Josh'),
    new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 75, 10), new GymPokemon('Geodude', 75, 10), new GymPokemon('Onix', 75, 10)], { weight: 1 }, 'Marcos'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Sandshrew', 75, 11), new GymPokemon('Rattata', 75, 11), new GymPokemon('Zubat', 75, 11)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Zubat', 75, 13), new GymPokemon('Ekans', 75, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Rattata', 75, 13), new GymPokemon('Sandshrew', 75, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Rattata', 75, 13), new GymPokemon('Zubat', 75, 13)], { weight: 1 }, undefined, '(male)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Token_collector], 834, [new DungeonBossPokemon('Kabuto', 4170, 12, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Moon')) }), new DungeonBossPokemon('Omanyte', 4170, 12, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Moon')) }), new DungeonTrainer('Super Nerd', [new GymPokemon('Grimer', 2780, 12), new GymPokemon('Voltorb', 2780, 12), new GymPokemon('Koffing', 2780, 12)], { weight: 1 }, 'Miguel')], 75, 4, 10);
dungeonList['Rock Tunnel'] = new Dungeon('Rock Tunnel', [
    { pokemon: 'Zubat', options: { weight: 20 } },
    { pokemon: 'Geodude', options: { weight: 20 } },
    { pokemon: 'Machop', options: { weight: 20 } },
    new DungeonTrainer('PokéManiac', [new GymPokemon('Cubone', 500, 23), new GymPokemon('Slowpoke', 500, 23)], { weight: 1 }, 'Ashton'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Slowpoke', 500, 25)], { weight: 1 }, 'Winston'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Oddish', 500, 22), new GymPokemon('Bulbasaur', 500, 22)], { weight: 1 }, 'Martha'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Charmander', 500, 22), new GymPokemon('Cubone', 500, 22)], { weight: 1 }, 'Steve'),
    new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 500, 25)], { weight: 1 }, 'Allen'),
    new DungeonTrainer('Hiker', [new GymPokemon('Machop', 500, 20), new GymPokemon('Onix', 500, 20)], { weight: 1 }, 'Eric'),
    new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 500, 19), new GymPokemon('Onix', 500, 19), new GymPokemon('Geodude', 500, 19), new GymPokemon('Geodude', 500, 19)], { weight: 1 }, 'Lenny'),
    new DungeonTrainer('Hiker', [new GymPokemon('Onix', 500, 20), new GymPokemon('Onix', 500, 20), new GymPokemon('Geodude', 500, 20)], { weight: 1 }, 'Oliver'),
    new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 500, 21), new GymPokemon('Graveler', 500, 21)], { weight: 1 }, 'Lucas'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Jigglypuff', 500, 21), new GymPokemon('Pidgey', 500, 21), new GymPokemon('Meowth', 500, 21)], { weight: 1 }, 'Sofia'),
    new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 500, 21), new GymPokemon('Geodude', 500, 21), new GymPokemon('Graveler', 500, 21)], { weight: 1 }, 'Dudley'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Slowpoke', 500, 20), new GymPokemon('Slowpoke', 500, 20), new GymPokemon('Slowpoke', 500, 20)], { weight: 1 }, 'Cooper'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Bellsprout', 500, 22), new GymPokemon('Clefairy', 500, 22)], { weight: 1 }, 'Leah'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Meowth', 500, 20), new GymPokemon('Oddish', 500, 20), new GymPokemon('Pidgey', 500, 20)], { weight: 1 }, 'Dana'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 4117, [new DungeonBossPokemon('Onix', 20585, 17), new DungeonTrainer('Picnicker', [new GymPokemon('Pidgey', 13586, 19), new GymPokemon('Rattata', 13586, 19), new GymPokemon('Rattata', 13586, 19), new GymPokemon('Bellsprout', 13586, 19)], { weight: 1 }, 'Ariana')], 500, 5, 15);
dungeonList['Power Plant'] = new Dungeon('Power Plant', ['Pikachu', 'Raichu', 'Magnemite', 'Magneton', 'Grimer', 'Muk', 'Voltorb', 'Electrode'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 13507, [new DungeonBossPokemon('Electabuzz', 67535, 35), new DungeonBossPokemon('Zapdos', 101302, 50)], 1000, 8, 25);
dungeonList['Pokemon Tower'] = new Dungeon('Pokemon Tower', [
    { pokemon: 'Gastly', options: { weight: 21.3 } },
    { pokemon: 'Haunter', options: { weight: 21.3 } },
    { pokemon: 'Cubone', options: { weight: 21.3 } },
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 23)], { weight: 1 }, 'Hope'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Patricia'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Carly'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 23), new GymPokemon('Gastly', 750, 23)], { weight: 1 }, 'Laurel'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Jody'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Paula'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Ruth'),
    new DungeonTrainer('Channeler', [new GymPokemon('Haunter', 750, 23)], { weight: 1 }, 'Tammy'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Karina'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Janae'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22), new GymPokemon('Gastly', 750, 22), new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Angelica'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Jennifer'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Emilia'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Zubat', 750, 25), new GymPokemon('Zubat', 750, 25), new GymPokemon('Golbat', 750, 25)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Koffing', 750, 26), new GymPokemon('Drowzee', 750, 26)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Zubat', 750, 23), new GymPokemon('Rattata', 750, 23), new GymPokemon('Raticate', 750, 23), new GymPokemon('Zubat', 750, 23)], { weight: 1 }, undefined, '(male)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 7523, [new DungeonBossPokemon('Marowak', 37615, 30)], 750, 10, 20);
dungeonList['Seafoam Islands'] = new Dungeon('Seafoam Islands', ['Zubat', 'Golbat', 'Goldeen', 'Poliwag', 'Magikarp', 'Slowpoke', 'Slowbro', 'Tentacool', 'Krabby', 'Kingler', 'Staryu'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_egg], 17226, [new DungeonBossPokemon('Seel', 86130, 35), new DungeonBossPokemon('Articuno', 129195, 50)], 1250, 15, 30);
dungeonList['Pokemon Mansion'] = new Dungeon('Pokemon Mansion', [
    { pokemon: 'Rattata', options: { weight: 3.5 } },
    { pokemon: 'Raticate', options: { weight: 3.5 } },
    { pokemon: 'Growlithe', options: { weight: 3.5 } },
    { pokemon: 'Grimer', options: { weight: 3.5 } },
    { pokemon: 'Muk', options: { weight: 3.5 } },
    { pokemon: 'Koffing', options: { weight: 3.5 } },
    { pokemon: 'Weezing', options: { weight: 3.5 } },
    { pokemon: 'Ditto', options: { weight: 3.5 } },
    new DungeonTrainer('Youngster', [new GymPokemon('Ekans', 1500, 33), new GymPokemon('Ekans', 1500, 33), new GymPokemon('Raticate', 1500, 34)], { weight: 1 }, 'Johnson'),
    new DungeonTrainer('Burglar', [new GymPokemon('Charmander', 1500, 34), new GymPokemon('Charmeleon', 1500, 34)], { weight: 1 }, 'Arnie'),
    new DungeonTrainer('Burglar', [new GymPokemon('Ninetales', 1500, 38)], { weight: 1 }, 'Simon'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magnemite', 1500, 33), new GymPokemon('Magneton', 1500, 33), new GymPokemon('Voltorb', 1500, 33)], { weight: 1 }, 'Braydon', '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Electrode', 1500, 29), new GymPokemon('Weezing', 1500, 29)], { weight: 1 }, 'Ted', '(male)'),
    new DungeonTrainer('Burglar', [new GymPokemon('Growlithe', 1500, 34), new GymPokemon('Ponyta', 1500, 34)], { weight: 1 }, 'Lewis'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magnemite', 1500, 34), new GymPokemon('Electrode', 1500, 34)], { weight: 1 }, 'Ivan', '(male)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 17760, [new DungeonBossPokemon('Magmar', 88800, 40)], 1500, 16, 35);
dungeonList['Victory Road'] = new Dungeon('Victory Road', [
    { pokemon: 'Zubat', options: { weight: 8.8 } },
    { pokemon: 'Golbat', options: { weight: 8.8 } },
    { pokemon: 'Geodude', options: { weight: 8.8 } },
    { pokemon: 'Graveler', options: { weight: 8.8 } },
    { pokemon: 'Onix', options: { weight: 8.8 } },
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Persian', 2000, 42), new GymPokemon('Ponyta', 2000, 42), new GymPokemon('Rapidash', 2000, 42), new GymPokemon('Vulpix', 2000, 42), new GymPokemon('Ninetales', 2000, 42)], { weight: 1 }, 'Naomi', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Raticate', 2000, 42), new GymPokemon('Ivysaur', 2000, 42), new GymPokemon('Wartortle', 2000, 42), new GymPokemon('Charmeleon', 2000, 42), new GymPokemon('Charizard', 2000, 42)], { weight: 1 }, 'Rolando', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Machoke', 2000, 43), new GymPokemon('Machop', 2000, 43), new GymPokemon('Machoke', 2000, 43)], { weight: 1 }, 'Daisuke'),
    new DungeonTrainer('Juggler', [new GymPokemon('Drowzee', 2000, 41), new GymPokemon('Hypno', 2000, 41), new GymPokemon('Kadabra', 2000, 41), new GymPokemon('Kadabra', 2000, 41)], { weight: 1 }, 'Nelson'),
    new DungeonTrainer('Tamer', [new GymPokemon('Persian', 2000, 44), new GymPokemon('Golduck', 2000, 44)], { weight: 1 }, 'Vincent'),
    new DungeonTrainer('Juggler', [new GymPokemon('Mr. Mime', 2000, 48)], { weight: 1 }, 'Gregory'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Exeggutor', 2000, 42), new GymPokemon('Sandslash', 2000, 42), new GymPokemon('Cloyster', 2000, 42), new GymPokemon('Electrode', 2000, 42), new GymPokemon('Arcanine', 2000, 42)], { weight: 1 }, 'George', '(male)'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Charmeleon', 2000, 40), new GymPokemon('Lapras', 2000, 40), new GymPokemon('Lickitung', 2000, 40)], { weight: 1 }, 'Dawson'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Clefairy', 2000, 42), new GymPokemon('Jigglypuff', 2000, 42), new GymPokemon('Persian', 2000, 42), new GymPokemon('Dewgong', 2000, 42), new GymPokemon('Chansey', 2000, 42)], { weight: 1 }, 'Alexa', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Kingler', 2000, 41), new GymPokemon('Poliwhirl', 2000, 42), new GymPokemon('Tentacruel', 2000, 42), new GymPokemon('Seadra', 2000, 42), new GymPokemon('Blastoise', 2000, 42)], { weight: 1 }, 'Colby', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Bellsprout', 2000, 42), new GymPokemon('Weepinbell', 2000, 42), new GymPokemon('Victreebel', 2000, 42), new GymPokemon('Paras', 2000, 42), new GymPokemon('Parasect', 2000, 42)], { weight: 1 }, 'Caroline', '(female)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 24595, [new DungeonBossPokemon('Machoke', 122975, 42), new DungeonBossPokemon('Moltres', 184462, 50), new DungeonTrainer('Cool Couple', [new GymPokemon('Nidoking', 122975, 45), new GymPokemon('Nidoqueen', 122975, 45)], { weight: 1 }, 'Ray & Tyra')], 2000, 20, 40);
dungeonList['Cerulean Cave'] = new Dungeon('Cerulean Cave', ['Arbok', 'Raichu', 'Sandslash', 'Golbat', 'Gloom', 'Parasect', 'Venomoth', 'Weepinbell', 'Graveler', 'Ditto', 'Chansey', 'Magikarp', 'Poliwag', 'Goldeen', 'Seaking'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 28735, [new DungeonBossPokemon('Rhydon', 183675, 60), new DungeonBossPokemon('Mewtwo', 255512, 100)], 2500, 20, 55);
// Johto Dungeons
dungeonList['Sprout Tower'] = new Dungeon('Sprout Tower', ['Rattata', 'Gastly', 'Hoothoot'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 56735, [new DungeonBossPokemon('Bellsprout', 260000, 10)], 2500, 31, 5);
dungeonList['Ruins of Alph'] = new Dungeon('Ruins of Alph', ['Natu', 'Wooper', 'Quagsire', 'Smeargle', 'Magikarp', 'Poliwag', 'Poliwhirl'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 60600, [new DungeonBossPokemon('Unown (A)', 280000, 14), new DungeonBossPokemon('Unown (F)', 280000, 14), new DungeonBossPokemon('Unown (H)', 280000, 14), new DungeonBossPokemon('Unown (L)', 280000, 14), new DungeonBossPokemon('Unown (N)', 280000, 14), new DungeonBossPokemon('Unown (P)', 280000, 14), new DungeonBossPokemon('Unown (U)', 280000, 14)], 3000, 32, 7);
dungeonList['Union Cave'] = new Dungeon('Union Cave', ['Rattata', 'Sandshrew', 'Zubat', 'Geodude', 'Onix', 'Goldeen', 'Magikarp'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 63600, [new DungeonBossPokemon('Wooper', 300000, 14)], 3000, 32, 7);
dungeonList['Slowpoke Well'] = new Dungeon('Slowpoke Well', ['Zubat', 'Slowpoke'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 67900, [new DungeonBossPokemon('Slowbro', 320000, 20)], 3500, 33, 12);
dungeonList['Ilex Forest'] = new Dungeon('Ilex Forest', ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Oddish', 'Paras', 'Hoothoot'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 82200, [new DungeonBossPokemon('Noctowl', 340000, 30), new DungeonBossPokemon('Beedrill', 340000, 30), new DungeonBossPokemon('Butterfree', 340000, 30), new DungeonBossPokemon('Celebi', 800000, 50, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion) })], 4000, 34, 15);
dungeonList['Burned Tower'] = new Dungeon('Burned Tower', ['Rattata', 'Zubat', 'Koffing', 'Raticate'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 88500, [new DungeonBossPokemon('Golbat', 360000, 35), new DungeonBossPokemon('Weezing', 320000, 35), new DungeonBossPokemon('Shuckle', 610000, 50)], 4500, 37, 20);
dungeonList['Tin Tower'] = new Dungeon('Tin Tower', ['Rattata', 'Gastly'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 88500, [new DungeonBossPokemon('Raticate', 380000, 35), new DungeonBossPokemon('Haunter', 380000, 35), new DungeonBossPokemon('Ho-Oh', 1410000, 100, { requirement: new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap.Raikou), new ObtainedPokemonRequirement(pokemonMap.Entei), new ObtainedPokemonRequirement(pokemonMap.Suicune)]) })], 4500, 37, 20);
dungeonList['Whirl Islands'] = new Dungeon('Whirl Islands', ['Zubat', 'Golbat', 'Seel', 'Krabby', 'Horsea'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_egg], 92800, [new DungeonBossPokemon('Dewgong', 400000, 40), new DungeonBossPokemon('Kingler', 400000, 40), new DungeonBossPokemon('Lugia', 1410000, 100)], 5000, 41, 25);
dungeonList['Mt Mortar'] = new Dungeon('Mt Mortar', ['Rattata', 'Zubat', 'Geodude', 'Marill', 'Raticate', 'Golbat', 'Graveler'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 104100, [new DungeonBossPokemon('Tyrogue', 420000, 45)], 5500, 42, 30);
dungeonList['Ice Path'] = new Dungeon('Ice Path', ['Zubat', 'Jynx', 'Swinub'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 120400, [new DungeonBossPokemon('Delibird', 440000, 50)], 6000, 44, 32);
dungeonList['Dark Cave'] = new Dungeon('Dark Cave', ['Zubat', 'Geodude', 'Golbat', 'Graveler', 'Wobbuffet'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 127000, [new DungeonBossPokemon('Dunsparce', 460000, 55)], 6500, 45, 35);
dungeonList['Mt Silver'] = new Dungeon('Mt Silver', ['Ponyta', 'Doduo', 'Tangela', 'Sneasel', 'Ursaring', 'Donphan', 'Teddiursa', 'Phanpy', 'Quagsire', 'Misdreavus'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 130500, [new DungeonBossPokemon('Larvitar', 840000, 60)], 10000, 28, 50);
// Hoenn Dungeons
dungeonList['Petalburg Woods'] = new Dungeon('Petalburg Woods', [
    { pokemon: 'Poochyena', options: { weight: 1.33 } },
    { pokemon: 'Wurmple', options: { weight: 1.33 } },
    { pokemon: 'Silcoon', options: { weight: 1.33 } },
    { pokemon: 'Cascoon', options: { weight: 1.33 } },
    { pokemon: 'Taillow', options: { weight: 1.33 } },
    { pokemon: 'Shroomish', options: { weight: 1.33 } },
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Wurmple', 12000, 3), new GymPokemon('Wurmple', 12000, 3), new GymPokemon('Wurmple', 12000, 3), new GymPokemon('Wurmple', 12000, 3)], { weight: 1 }, 'Lyle'),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Nincada', 12000, 6), new GymPokemon('Nincada', 12000, 6)], { weight: 1 }, 'James'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 380000, [new DungeonBossPokemon('Slakoth', 860000, 10, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods')) }), new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 860000, 9)], { weight: 1 }, undefined, '(male)')], 12000, 101, 5);
dungeonList['Rusturf Tunnel'] = new Dungeon('Rusturf Tunnel', [{ pokemon: 'Whismur', options: { weight: 4 } }, new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 14000, 16), new GymPokemon('Geodude', 14000, 16), new GymPokemon('Machop', 14000, 16)], { weight: 1 }, 'Mike')], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 400000, [new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 900000, 11)], { weight: 1 }, undefined, '(male)')], 14000, 101, 5);
dungeonList['Granite Cave'] = new Dungeon('Granite Cave', ['Zubat', 'Abra', 'Geodude', 'Makuhita', 'Aron', 'Sableye'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 410000, [new DungeonBossPokemon('Mawile', 960000, 20), new DungeonBossPokemon('Nosepass', 660000, 20)], 16000, 101, 5);
dungeonList['Fiery Path'] = new Dungeon('Fiery Path', ['Machop', 'Grimer', 'Koffing', 'Slugma', 'Numel'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 424000, [new DungeonBossPokemon('Torkoal', 1200000, 20)], 17000, 101, 5);
dungeonList['Meteor Falls'] = new Dungeon('Meteor Falls', [{ pokemon: 'Zubat', options: { weight: 0.8 } }, { pokemon: 'Golbat', options: { weight: 0.8 } }, { pokemon: 'Goldeen', options: { weight: 0.8 } }, { pokemon: 'Magikarp', options: { weight: 0.8 } }, { pokemon: 'Barboach', options: { weight: 0.8 } }, new DungeonTrainer('Old Couple', [new GymPokemon('Medicham', 18000, 39), new GymPokemon('Hariyama', 18000, 39)], { weight: 1 }, 'John and Jay')], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 443000, [new DungeonBossPokemon('Solrock', 1240000, 20), new DungeonBossPokemon('Lunatone', 1240000, 20), new DungeonTrainer('Dragon Tamer', [new GymPokemon('Altaria', 640000, 37), new GymPokemon('Altaria', 640000, 37)], { weight: 1 }, 'Nicolas')], 18000, 101, 5);
dungeonList['Mt. Chimney'] = new Dungeon('Mt. Chimney', [new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 20000, 20)], { weight: 1 }, undefined, '(female)'), new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Zubat', 20000, 20)], { weight: 1 }, undefined, '(male)'), new DungeonTrainer('Magma Admin', [new GymPokemon('Numel', 18000, 18), new GymPokemon('Poochyena', 20000, 20), new GymPokemon('Numel', 22000, 22), new GymPokemon('Zubat', 22000, 22)], { weight: 1 }, 'Tabitha')], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 460000, [new DungeonTrainer('Magma Leader', [new GymPokemon('Mightyena', 450000, 24), new GymPokemon('Zubat', 450000, 24), new GymPokemon('Camerupt', 470000, 25)], { weight: 1 }, 'Maxie')], 20000, 101, 5);
dungeonList['Jagged Pass'] = new Dungeon('Jagged Pass', [
    { pokemon: 'Machop', options: { weight: 0.8 } },
    { pokemon: 'Numel', options: { weight: 0.8 } },
    { pokemon: 'Spoink', options: { weight: 0.8 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 22000, 20), new GymPokemon('Baltoy', 22000, 20)], { weight: 1 }, 'Eric'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Shroomish', 22000, 19), new GymPokemon('Oddish', 22000, 19), new GymPokemon('Swablu', 22000, 19)], { weight: 1 }, 'Diana'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Shroomish', 22000, 21)], { weight: 1 }, 'Autumn'),
    new DungeonTrainer('Triathlete', [new GymPokemon('Magnemite', 22000, 21)], { weight: 1 }, 'Julio', '(malecycling)'),
    new DungeonTrainer('Camper', [new GymPokemon('Zigzagoon', 22000, 20), new GymPokemon('Taillow', 22000, 20)], { weight: 1 }, 'Ethan'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 460000, [new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Mightyena', 700000, 22), new GymPokemon('Zubat', 700000, 22)], { weight: 1 }, undefined, '(male)')], 22000, 101, 5);
dungeonList['New Mauville'] = new Dungeon('New Mauville', ['Magnemite', 'Voltorb'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 460000, [new DungeonBossPokemon('Magneton', 1650000, 20), new DungeonBossPokemon('Electrode', 1650000, 20)], 24000, 101, 5);
dungeonList['Weather Institute'] = new Dungeon('Weather Institute', [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 39000, 28)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 39000, 27), new GymPokemon('Poochyena', 39000, 27)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 39000, 27), new GymPokemon('Carvanha', 39000, 27)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 39000, 27), new GymPokemon('Poochyena', 39000, 27)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 39000, 26), new GymPokemon('Zubat', 39000, 26), new GymPokemon('Carvanha', 39000, 26)], { weight: 1 }, undefined, '(male)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 470000, [new DungeonTrainer('Aqua Admin', [new GymPokemon('Carvanha', 910000, 28), new GymPokemon('Mightyena', 910000, 28)], { weight: 1 }, 'Shelly', '(shelly)')], 26000, 101, 5);
dungeonList['Mt. Pyre'] = new Dungeon('Mt. Pyre', [
    { pokemon: 'Shuppet', options: { weight: 12 } },
    { pokemon: 'Duskull', options: { weight: 12 } },
    { pokemon: 'Vulpix', options: { weight: 12 } },
    { pokemon: 'Wingull', options: { weight: 12 } },
    { pokemon: 'Meditite', options: { weight: 12 } },
    new DungeonTrainer('PokéManiac', [new GymPokemon('Rhyhorn', 28000, 31)], { weight: 1 }, 'Mark'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Spoink', 28000, 31)], { weight: 1 }, 'Leah', '(hoenn)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 28000, 31)], { weight: 1 }, 'Zander'),
    new DungeonTrainer('Young Couple', [new GymPokemon('Delcatty', 28000, 31), new GymPokemon('Manectric', 28000, 31)], { weight: 1 }, 'Dez & Luke'),
    new DungeonTrainer('Psychic', [new GymPokemon('Wobbuffet', 28000, 26), new GymPokemon('Natu', 28000, 26), new GymPokemon('Kadabra', 28000, 26)], { weight: 1 }, 'Kayla', '(female)'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Skitty', 15000, 26), new GymPokemon('Poochyena', 15000, 26), new GymPokemon('Zigzagoon', 15000, 26), new GymPokemon('Lotad', 15000, 26), new GymPokemon('Seedot', 15000, 26), new GymPokemon('Taillow', 15000, 26)], { weight: 1 }, 'Gabrielle', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Ralts', 28000, 26), new GymPokemon('Ralts', 28000, 26), new GymPokemon('Kirlia', 28000, 26)], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Shuppet', 28000, 32)], { weight: 1 }, 'Tasha', '(hoenn)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 28000, 32)], { weight: 1 }, 'Atsushi'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Sableye', 28000, 32)], { weight: 1 }, 'Valerie', '(hoenn)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Wobbuffet', 28000, 32)], { weight: 1 }, 'Cedric', '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 28000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 28000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 28000, 30), new GymPokemon('Carvanha', 28000, 30)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Wailmer', 28000, 30), new GymPokemon('Zubat', 28000, 30)], { weight: 1 }, undefined, '(female)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 480000, [new DungeonBossPokemon('Shuppet', 1880000, 20), new DungeonBossPokemon('Duskull', 1890000, 20), new DungeonBossPokemon('Chimecho', 1880000, 20)], 28000, 101, 5);
dungeonList['Magma Hideout'] = new Dungeon('Magma Hideout', [
    { pokemon: 'Geodude', options: { weight: 12 } },
    { pokemon: 'Graveler', options: { weight: 12 } },
    { pokemon: 'Torkoal', options: { weight: 12 } },
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Poochyena', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Mightyena', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Baltoy', 29000, 28), new GymPokemon('Numel', 29000, 28)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Zubat', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Mightyena', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Baltoy', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Baltoy', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Magma Admin', [new GymPokemon('Numel', 6000, 26), new GymPokemon('Mightyena', 8000, 28), new GymPokemon('Zubat', 10000, 30), new GymPokemon('Camerupt', 13000, 33)], { weight: 1 }, 'Tabitha'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 490000, [new DungeonTrainer('Magma Leader', [new GymPokemon('Mightyena', 630000, 37), new GymPokemon('Crobat', 640000, 38), new GymPokemon('Camerupt', 650000, 39)], { weight: 1 }, 'Maxie')], 29000, 101, 5);
dungeonList['Aqua Hideout'] = new Dungeon('Aqua Hideout', [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 30000, 32)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 30000, 31), new GymPokemon('Carvanha', 30000, 31)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 30000, 31), new GymPokemon('Zubat', 30000, 31)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 30000, 32)], { weight: 1 }, undefined, '(female)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 490000, [new DungeonTrainer('Aqua Admin', [new GymPokemon('Mightyena', 900000, 34), new GymPokemon('Golbat', 900000, 34)], { weight: 1 }, 'Matt', '(matt)')], 30000, 101, 5);
dungeonList['Shoal Cave'] = new Dungeon('Shoal Cave', ['Zubat', 'Golbat', 'Spheal', 'Tentacool', 'Magikarp', 'Wailmer'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 490000, [new DungeonBossPokemon('Snorunt', 1900000, 20)], 30000, 101, 5);
dungeonList['Cave of Origin'] = new Dungeon('Cave of Origin', ['Zubat', 'Golbat', 'Sableye', 'Mawile'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 590000, [new DungeonBossPokemon('Exploud', 2000000, 50), new DungeonBossPokemon('Kyogre', 4700000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion) }), new DungeonBossPokemon('Groudon', 4700000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion) })], 34000, 101, 5);
dungeonList['Seafloor Cavern'] = new Dungeon('Seafloor Cavern', [
    { pokemon: 'Zubat', options: { weight: 4.8 } },
    { pokemon: 'Golbat', options: { weight: 4.8 } },
    { pokemon: 'Tentacool', options: { weight: 4.8 } },
    { pokemon: 'Magikarp', options: { weight: 4.8 } },
    { pokemon: 'Wailmer', options: { weight: 4.8 } },
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 32000, 36)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Mightyena', 32000, 35), new GymPokemon('Golbat', 32000, 35)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aqua Admin', [new GymPokemon('Sharpedo', 32000, 37), new GymPokemon('Mightyena', 32000, 37)], { weight: 1 }, 'Shelly', '(shelly)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 530000, [new DungeonTrainer('Aqua Leader', [new GymPokemon('Mightyena', 700000, 41), new GymPokemon('Crobat', 700000, 41), new GymPokemon('Sharpedo', 900000, 43)], { weight: 1 }, 'Archie')], 32000, 101, 5);
dungeonList['Sky Pillar'] = new Dungeon('Sky Pillar', ['Golbat', 'Sableye', 'Claydol', 'Banette', 'Mawile', 'Altaria'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 720000, [new DungeonBossPokemon('Dusclops', 3200000, 20), new DungeonBossPokemon('Rayquaza', 5824002, 100)], 34000, 101, 5);
dungeonList['Sealed Chamber'] = new Dungeon('Sealed Chamber', ['Zubat', 'Golbat', 'Tentacool'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 500000, [new DungeonBossPokemon('Regirock', 4500000, 20), new DungeonBossPokemon('Regice', 4500000, 20), new DungeonBossPokemon('Registeel', 4500000, 20)], 36000, 101, 5);
dungeonList['Victory Road Hoenn'] = new Dungeon('Victory Road Hoenn', [
    { pokemon: 'Zubat', options: { weight: 4 } },
    { pokemon: 'Golbat', options: { weight: 4 } },
    { pokemon: 'Goldeen', options: { weight: 4 } },
    { pokemon: 'Magikarp', options: { weight: 4 } },
    { pokemon: 'Whismur', options: { weight: 4 } },
    { pokemon: 'Loudred', options: { weight: 4 } },
    { pokemon: 'Makuhita', options: { weight: 4 } },
    { pokemon: 'Hariyama', options: { weight: 4 } },
    { pokemon: 'Aron', options: { weight: 4 } },
    { pokemon: 'Lairon', options: { weight: 4 } },
    { pokemon: 'Mawile', options: { weight: 4 } },
    { pokemon: 'Meditite', options: { weight: 4 } },
    { pokemon: 'Medicham', options: { weight: 4 } },
    { pokemon: 'Barboach', options: { weight: 4 } },
    { pokemon: 'Whiscash', options: { weight: 4 } },
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Magneton', 37000, 43), new GymPokemon('Muk', 37000, 43)], { weight: 1 }, 'Albert', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Roselia', 37000, 45)], { weight: 1 }, 'Hope', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Claydol', 37000, 45)], { weight: 1 }, 'Shannon', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Swellow', 37000, 42), new GymPokemon('Mawile', 37000, 42), new GymPokemon('Kadabra', 37000, 42)], { weight: 1 }, 'Samuel', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Sandslash', 37000, 42), new GymPokemon('Ninetales', 37000, 42), new GymPokemon('Tropius', 37000, 42)], { weight: 1 }, 'Julie', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Claydol', 37000, 43), new GymPokemon('Lanturn', 37000, 43)], { weight: 1 }, 'Dianne', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Medicham', 37000, 43), new GymPokemon('Claydol', 37000, 43)], { weight: 1 }, 'Felix', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Skarmory', 37000, 43), new GymPokemon('Sableye', 37000, 43)], { weight: 1 }, 'Caroline', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Dodrio', 30000, 42), new GymPokemon('Kadabra', 30000, 42), new GymPokemon('Electrode', 30000, 42), new GymPokemon('Shiftry', 30000, 42)], { weight: 1 }, 'Vito', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Torkoal', 37000, 42), new GymPokemon('Medicham', 37000, 42), new GymPokemon('Ludicolo', 37000, 42)], { weight: 1 }, 'Michelle', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Lunatone', 37000, 43), new GymPokemon('Solrock', 37000, 43)], { weight: 1 }, 'Mitchell', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Sableye', 37000, 43), new GymPokemon('Absol', 37000, 43)], { weight: 1 }, 'Halle', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Cacturne', 37000, 43), new GymPokemon('Pelipper', 37000, 43)], { weight: 1 }, 'Edgar', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Gardevoir', 37000, 43), new GymPokemon('Slaking', 37000, 43)], { weight: 1 }, 'Katelynn', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Slaking', 37000, 43), new GymPokemon('Dusclops', 37000, 43)], { weight: 1 }, 'Quincy', '(male)'),
], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 560000, [new DungeonTrainer('PKMN Trainer', [new GymPokemon('Altaria', 680000, 44), new GymPokemon('Delcatty', 670000, 43), new GymPokemon('Roselia', 680000, 44), new GymPokemon('Magneton', 650000, 41), new GymPokemon('Gardevoir', 690000, 45)], { weight: 1 }, 'Wally', '(wally)')], 37000, 101, 5);
// Sinnoh
dungeonList['Oreburgh Gate'] = new Dungeon('Oreburgh Gate', ['Zubat', 'Psyduck', 'Geodude', 'Golduck', 'Magikarp', 'Barboach'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 720600, [new DungeonBossPokemon('Gyarados', 3703000, 14), new DungeonBossPokemon('Whiscash', 3703000, 14)], 39000, 201, 7);
dungeonList['Ravaged Path'] = new Dungeon('Ravaged Path', ['Zubat', 'Psyduck', 'Golduck', 'Magikarp', 'Barboach'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 756000, [new DungeonBossPokemon('Gyarados', 3803000, 14), new DungeonBossPokemon('Whiscash', 3803000, 14)], 43000, 201, 7);
dungeonList['Eterna Forest'] = new Dungeon('Eterna Forest', ['Gastly', 'Hoothoot', 'Wurmple', 'Silcoon', 'Cascoon', 'Bidoof', 'Kricketot', 'Budew', 'Buneary'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 812000, [new DungeonBossPokemon('Beautifly', 3950000, 30), new DungeonBossPokemon('Dustox', 3950000, 30)], 48000, 201, 15);
dungeonList['Old Chateau'] = new Dungeon('Old Chateau', ['Gastly', 'Haunter', 'Gengar'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 853000, [
    new DungeonBossPokemon('Rotom', 4200000, 100),
    new DungeonBossPokemon('Rotom (heat)', 4300000, 100, { requirement: new ObtainedPokemonRequirement(pokemonMap.Rotom) }),
    new DungeonBossPokemon('Rotom (wash)', 4300000, 100, { requirement: new ObtainedPokemonRequirement(pokemonMap.Rotom) }),
    new DungeonBossPokemon('Rotom (frost)', 4300000, 100, { requirement: new ObtainedPokemonRequirement(pokemonMap.Rotom) }),
    new DungeonBossPokemon('Rotom (fan)', 4300000, 100, { requirement: new ObtainedPokemonRequirement(pokemonMap.Rotom) }),
    new DungeonBossPokemon('Rotom (mow)', 4300000, 100, { requirement: new ObtainedPokemonRequirement(pokemonMap.Rotom) }),
], 52500, 230, 100);
dungeonList['Wayward Cave'] = new Dungeon('Wayward Cave', ['Zubat', 'Geodude', 'Onix'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 903000, [new DungeonBossPokemon('Bronzor', 4400000, 100)], 56500, 230, 100);
dungeonList['Mt. Coronet South'] = new Dungeon('Mt. Coronet South', [{ pokemon: 'Clefairy', options: { weight: 2 } }, 'Zubat', 'Machop', 'Geodude', 'Nosepass', 'Meditite', 'Chingling', 'Bronzor', 'Magikarp', 'Barboach', 'Noctowl'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 951500, [new DungeonBossPokemon('Machoke', 4000000, 35), new DungeonBossPokemon('Bronzong', 4000000, 50), new DungeonBossPokemon('Absol', 4000000, 50)], 60500, 201, 20);
dungeonList['Solaceon Ruins'] = new Dungeon('Solaceon Ruins', ['Zubat', 'Geodude', 'Natu', 'Bronzor', 'Hippopotas'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 960000, [new DungeonBossPokemon('Unown (A)', 4100000, 30), new DungeonBossPokemon('Unown (E)', 4100000, 30), new DungeonBossPokemon('Unown (L)', 4100000, 30), new DungeonBossPokemon('Unown (N)', 4100000, 30), new DungeonBossPokemon('Unown (U)', 4100000, 30)], 62500, 209, 100);
dungeonList['Iron Island'] = new Dungeon('Iron Island', ['Tentacool', 'Wingull', 'Tentacruel', 'Pelipper', 'Finneon', 'Zubat', 'Geodude', 'Onix', 'Golbat', 'Graveler'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 983000, [new DungeonBossPokemon('Steelix', 4210000, 100)], 66500, 230, 100);
dungeonList['Mt. Coronet North'] = new Dungeon('Mt. Coronet North', [{ pokemon: 'Clefairy', options: { weight: 2 } }, 'Zubat', 'Machop', 'Geodude', 'Meditite', 'Chingling', 'Bronzor', 'Magikarp', 'Barboach', 'Noctowl', 'Snover'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 1015000, [new DungeonBossPokemon('Graveler', 4600000, 35), new DungeonBossPokemon('Feebas', 4600000, 50), new DungeonBossPokemon('Medicham', 4600000, 50)], 69500, 201, 20);
dungeonList['Lake Verity'] = new Dungeon('Lake Verity', ['Starly', 'Bidoof', 'Psyduck', 'Magikarp', 'Goldeen'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 1068735, [new DungeonBossPokemon('Golduck', 4820000, 10), new DungeonBossPokemon('Seaking', 4820000, 10)], 72500, 201, 5);
dungeonList['Lake Valor'] = new Dungeon('Lake Valor', ['Staravia', 'Bibarel', 'Psyduck', 'Golduck', 'Magikarp', 'Goldeen'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 1111500, [new DungeonBossPokemon('Noctowl', 4960000, 35), new DungeonBossPokemon('Azelf', 10060000, 35)], 74500, 201, 20);
dungeonList['Lake Acuity'] = new Dungeon('Lake Acuity', ['Sneasel', 'Bibarel', 'Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Snover', 'Snorunt'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_egg], 1261800, [new DungeonBossPokemon('Gyarados', 5070000, 40), new DungeonBossPokemon('Uxie', 10070000, 40)], 78000, 201, 25);
dungeonList['Distortion World'] = new Dungeon('Distortion World', ['Golbat', 'Gastly', 'Haunter', 'Duskull', 'Chingling', 'Bronzor', 'Chimecho'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 1322100, [new DungeonBossPokemon('Dusclops', 5280000, 45), new DungeonBossPokemon('Bronzong', 5280000, 45), new DungeonBossPokemon('Giratina (altered)', 11880000, 45)], 82500, 201, 30);
dungeonList['Victory Road Sinnoh'] = new Dungeon('Victory Road Sinnoh', ['Golbat', 'Graveler', 'Onix', 'Rhyhorn', 'Magneton', 'Azumarill', 'Floatzel'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 1503000, [new DungeonBossPokemon('Rhydon', 7000000, 100), new DungeonBossPokemon('Steelix', 7000000, 100), new DungeonBossPokemon('Gabite', 7000000, 100)], 86500, 230, 100);
dungeonList['Spear Pillar'] = new Dungeon('Spear Pillar', ['Croagunk', 'Stunky', 'Glameow', 'Bronzor', 'Golbat'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2353000, [new DungeonBossPokemon('Palkia', 11880000, 100), new DungeonBossPokemon('Dialga', 11880000, 100)], 96500, 230, 100);
dungeonList['Hall of Origin'] = new Dungeon('Hall of Origin', ['Slowpoke', 'Spearow', 'Garchomp', 'Slakoth', 'Eevee', 'Breloom', 'Absol'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2653000, [new DungeonBossPokemon('Arceus (normal)', 13000000, 100), new DungeonBossPokemon('Slaking', 10000000, 100), new DungeonBossPokemon('Snorlax', 10000000, 100), new DungeonBossPokemon('Shuckle', 10000000, 100), new DungeonBossPokemon('Blissey', 10000000, 100)], 106500, 230, 100);
dungeonList['Fullmoon Island'] = new Dungeon('Fullmoon Island', ['Illumise', 'Minun', 'Espeon', 'Luvdisc'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2603000, [new DungeonBossPokemon('Clefable', 11000000, 100)], 96500, 230, 100);
dungeonList['Newmoon Island'] = new Dungeon('Newmoon Island', ['Volbeat', 'Plusle', 'Umbreon', 'Luvdisc'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2603000, [new DungeonBossPokemon('Darkrai', 11000000, 100)], 96500, 230, 100);
dungeonList['Flower Paradise'] = new Dungeon('Flower Paradise', ['Vileplume', 'Bellsprout', 'Exeggutor', 'Bellossom', 'Skiploom', 'Sunflora', 'Roselia'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 2603000, [new DungeonBossPokemon('Venusaur', 9900000, 50), new DungeonBossPokemon('Meganium', 11000000, 50), new DungeonBossPokemon('Shaymin (land)', 11000000, 50), new DungeonBossPokemon('Shaymin (sky)', 11000000, 50)], 96500, 201, 32);
dungeonList['Snowpoint Temple'] = new Dungeon('Snowpoint Temple', ['Golbat', 'Sneasel', 'Smoochum'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2603000, [new DungeonBossPokemon('Jynx', 10000000, 100), new DungeonBossPokemon('Regigigas', 11000000, 100)], 96500, 230, 100);
dungeonList['Stark Mountain'] = new Dungeon('Stark Mountain', ['Golbat', 'Graveler', 'Fearow', 'Weezing', 'Rhyhorn', 'Rhydon', 'Numel', 'Slugma', 'Magcargo', 'Camerupt'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2603000, [new DungeonBossPokemon('Skarmory', 10000000, 100), new DungeonBossPokemon('Heatran', 11000000, 100)], 96500, 230, 100);
// Unova
// TODO: Balancing of dungeon Pokemon HP & rewards.
dungeonList['Pledge Grove'] = new Dungeon('Pledge Grove', ['Fearow', 'Furret', 'Ledian', 'Sudowoodo', 'Stantler', 'Breloom', 'Unfezant', 'Sawsbuck (Autumn)', 'Sawsbuck (Winter)'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2403000, [new DungeonBossPokemon('Keldeo (Resolute)', 12000000, 100)], 106500, 20, 100);
dungeonList['Floccesy Ranch'] = new Dungeon('Floccesy Ranch', [
    { pokemon: 'Psyduck', options: { weight: 2 } },
    { pokemon: 'Mareep', options: { weight: 2 } },
    { pokemon: 'Azurill', options: { weight: 2 } },
    { pokemon: 'Patrat', options: { weight: 2 } },
    { pokemon: 'Lillipup', options: { weight: 2 } },
    { pokemon: 'Pidove', options: { weight: 2 } },
    new DungeonTrainer('Lass', [new GymPokemon('Purrloin', 126500, 6), new GymPokemon('Sewaddle', 126500, 6)], { weight: 1 }, 'Molly'),
    new DungeonTrainer('Janitor', [new GymPokemon('Lillipup', 126500, 6), new GymPokemon('Mareep', 126500, 6)], { weight: 1 }, 'Orville'),
    new DungeonTrainer('Youngster', [new GymPokemon('Patrat', 126500, 6), new GymPokemon('Psyduck', 126500, 6)], { weight: 1 }, 'Kenny'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2503000, [new DungeonBossPokemon('Riolu', 13000000, 100)], 126500, 20, 100);
dungeonList['Liberty Garden'] = new Dungeon('Liberty Garden', ['Vulpix', 'Sunflora', 'Abra', 'Wingull', 'Pidove', 'Sentret'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2703000, [new DungeonBossPokemon('Victini', 14000000, 100), new DungeonBossPokemon('Ninetales', 14000000, 100), new DungeonBossPokemon('Alakazam', 14000000, 100)], 136500, 20, 100);
dungeonList['Castelia Sewers'] = new Dungeon('Castelia Sewers', [
    { pokemon: 'Rattata', options: { weight: 5.6 } },
    { pokemon: 'Zubat', options: { weight: 5.6 } },
    { pokemon: 'Grimer', options: { weight: 5.6 } },
    { pokemon: 'Muk', options: { weight: 5.6 } },
    { pokemon: 'Trubbish', options: { weight: 5.6 } },
    new DungeonTrainer('Janitor', [new GymPokemon('Lillipup', 146500, 16), new GymPokemon('Trubbish', 146500, 16)], { weight: 1 }, 'Felix'),
    new DungeonTrainer('Doctor', [new GymPokemon('Sewaddle', 146500, 17)], { weight: 1 }, 'Heath'),
    new DungeonTrainer('Worker', [new GymPokemon('Drilbur', 146500, 17)], { weight: 1 }, 'Zack'),
    new DungeonTrainer('Worker', [new GymPokemon('Timburr', 146500, 17)], { weight: 1 }, 'Scott'),
    new DungeonTrainer('Scientist', [new GymPokemon('Grimer', 146500, 17)], { weight: 1 }, 'Caroline', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magnemite', 146500, 17)], { weight: 1 }, 'Clarke', '(male)'),
    new DungeonTrainer('Janitor', [new GymPokemon('Marill', 146500, 31), new GymPokemon('Cinccino', 146500, 31)], { weight: 1 }, 'Brady'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2603000, [new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Sandile', 15000000, 16)], { weight: 1 }, undefined, '(male)'), new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scraggy', 15000000, 16)], { weight: 1 }, undefined, '(male)')], 146500, 4, 100);
dungeonList['Relic Passage'] = new Dungeon('Relic Passage', [
    { pokemon: 'Rattata', options: { weight: 8 } },
    { pokemon: 'Raticate', options: { weight: 8 } },
    { pokemon: 'Roggenrola', options: { weight: 8 } },
    { pokemon: 'Woobat', options: { weight: 8 } },
    { pokemon: 'Timburr', options: { weight: 8 } },
    new DungeonTrainer('Scientist', [new GymPokemon('Grimer', 156500, 18)], { weight: 1 }, 'Terrance', '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Venipede', 156500, 17), new GymPokemon('Koffing', 156500, 17)], { weight: 1 }, 'Lumina', '(female)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Herdier', 156500, 18)], { weight: 1 }, 'Kendall', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Sandslash', 156500, 32)], { weight: 1 }, 'Eileen', '(female)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Drilbur', 156500, 31), new GymPokemon('Roggenrola', 156500, 31)], { weight: 1 }, 'Keith'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Raticate', 156500, 32)], { weight: 1 }, 'Randall', '(male)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Roggenrola', 156500, 31), new GymPokemon('Timburr', 156500, 31)], { weight: 1 }, 'Tobias'),
    new DungeonTrainer('Psychic', [new GymPokemon('Swoobat', 156500, 33)], { weight: 1 }, 'Tully', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Watchog', 156500, 32)], { weight: 1 }, 'Annie', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Baltoy', 156500, 32), new GymPokemon('Yamask', 156500, 32)], { weight: 1 }, 'Ena', '(female)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2803000, [new DungeonBossPokemon('Onix', 16000000, 100), new DungeonBossPokemon('Drilbur', 16000000, 100)], 156500, 25, 100);
dungeonList['Relic Castle'] = new Dungeon('Relic Castle', [
    { pokemon: 'Sandshrew', options: { weight: 1.33 } },
    { pokemon: 'Sandslash', options: { weight: 1.33 } },
    { pokemon: 'Sandile', options: { weight: 1.33 } },
    { pokemon: 'Baltoy', options: { weight: 1.33 } },
    { pokemon: 'Krokorok', options: { weight: 1.33 } },
    { pokemon: 'Yamask', options: { weight: 1.33 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Gothita', 166500, 23)], { weight: 1 }, 'Dua', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Solosis', 166500, 23)], { weight: 1 }, 'Low', '(male)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 3003000, [new DungeonTrainer('Psychic', [new GymPokemon('Sigilyph', 18000000, 23)], { weight: 1 }, 'Perry', '(male)'), new DungeonBossPokemon('Volcarona', 18000000, 100)], 166500, 25, 100);
dungeonList['Lostlorn Forest'] = new Dungeon('Lostlorn Forest', [
    { pokemon: 'Roselia', options: { weight: 2.67 } },
    { pokemon: 'Combee', options: { weight: 2.67 } },
    { pokemon: 'Sewaddle', options: { weight: 2.67 } },
    { pokemon: 'Venipede', options: { weight: 2.67 } },
    { pokemon: 'Cottonee', options: { weight: 2.67 } },
    { pokemon: 'Petilil', options: { weight: 2.67 } },
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Tranquill', 176500, 24), new GymPokemon('Liepard', 176500, 24)], { weight: 1 }, 'Galen', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Trubbish', 176500, 26)], { weight: 1 }, 'Serenity', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Emolga', 176500, 26)], { weight: 1 }, 'Forrest', '(male)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Larvesta', 176500, 51), new GymPokemon('Pinsir', 176500, 51), new GymPokemon('Heracross', 176500, 51), new GymPokemon('Leavanny', 176500, 51), new GymPokemon('Scolipede', 176500, 51)], { weight: 1 }, 'Murphy', '(male)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 3203000, [new DungeonBossPokemon('Heracross', 19000000, 100), new DungeonBossPokemon('Pinsir', 19000000, 100), new DungeonBossPokemon('Emolga', 21000000, 100)], 176500, 16, 100);
dungeonList['Chargestone Cave'] = new Dungeon('Chargestone Cave', [
    { pokemon: 'Nosepass', options: { weight: 8.8 } },
    { pokemon: 'Boldore', options: { weight: 8.8 } },
    { pokemon: 'Joltik', options: { weight: 8.8 } },
    { pokemon: 'Ferroseed', options: { weight: 8.8 } },
    { pokemon: 'Klink', options: { weight: 8.8 } },
    new DungeonTrainer('Guitarist', [new GymPokemon('Emolga', 186500, 30)], { weight: 1 }, 'Anna'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magneton', 186500, 30)], { weight: 1 }, 'Ronald', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Klink', 186500, 33), new GymPokemon('Unfezant', 186500, 33), new GymPokemon('Sandslash', 186500, 33)], { weight: 1 }, 'Corky', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Ampharos', 186500, 34)], { weight: 1 }, 'Louis', '(male)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Aron', 186500, 32), new GymPokemon('Nosepass', 186500, 32)], { weight: 1 }, 'Otto'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Minccino', 186500, 33), new GymPokemon('Excadrill', 186500, 33)], { weight: 1 }, 'Briana', '(female)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Solosis', 186500, 32), new GymPokemon('Gothita', 186500, 32)], { weight: 1 }, 'Kit'),
    new DungeonTrainer('Scientist', [new GymPokemon('Joltik', 186500, 32), new GymPokemon('Golbat', 186500, 32)], { weight: 1 }, 'Lumi', '(female)'),
    new DungeonTrainer('Guitarist', [new GymPokemon('Zebstrika', 186500, 33)], { weight: 1 }, 'Beverly'),
    new DungeonTrainer('Hiker', [new GymPokemon('Onix', 186500, 32), new GymPokemon('Boldore', 186500, 32)], { weight: 1 }, 'Jeremy'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Stoutland', 186500, 33), new GymPokemon('Krokorok', 186500, 33), new GymPokemon('Ferroseed', 186500, 33)], { weight: 1 }, 'Vicki', '(female)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 3403000, [new DungeonTrainer('Ace Trainer', [new GymPokemon('Tirtouga', 12000000, 34), new GymPokemon('Magmar', 12000000, 34)], { weight: 1 }, 'Mary', '(female)'), new DungeonTrainer('Ace Trainer', [new GymPokemon('Archen', 12000000, 34), new GymPokemon('Electabuzz', 12000000, 34)], { weight: 1 }, 'Shaye', '(male)'), new DungeonBossPokemon('Drilbur', 22000000, 100), new DungeonBossPokemon('Tynamo', 22000000, 100)], 186500, 6, 100);
dungeonList['Mistralton Cave'] = new Dungeon('Mistralton Cave', [
    { pokemon: 'Boldore', options: { weight: 4 } },
    { pokemon: 'Woobat', options: { weight: 4 } },
    { pokemon: 'Aron', options: { weight: 4 } },
    { pokemon: 'Lairon', options: { weight: 4 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Boldore', 196500, 32)], { weight: 1 }, 'Shelby'),
    new DungeonTrainer('Hiker', [new GymPokemon('Onix', 196500, 32)], { weight: 1 }, 'Jebediah'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Tirtouga', 196500, 33), new GymPokemon('Axew', 196500, 33)], { weight: 1 }, 'Geoff', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Archen', 196500, 33), new GymPokemon('Axew', 196500, 33)], { weight: 1 }, 'Belle', '(female)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 3603000, [new DungeonBossPokemon('Drilbur', 23000000, 100), new DungeonBossPokemon('Axew', 24000000, 100), new DungeonBossPokemon('Cobalion', 25000000, 100)], 196500, 6, 100);
dungeonList['Celestial Tower'] = new Dungeon('Celestial Tower', [
    { pokemon: 'Golbat', options: { weight: 8 } },
    { pokemon: 'Haunter', options: { weight: 8 } },
    { pokemon: 'Elgyem', options: { weight: 8 } },
    { pokemon: 'Misdreavus', options: { weight: 8 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Musharna', 206500, 36)], { weight: 1 }, 'Joyce', '(female)'),
    new DungeonTrainer('School Kid', [new GymPokemon('Litwick', 206500, 35)], { weight: 1 }, 'Alberta', '(female)'),
    new DungeonTrainer('Pokéfan', [new GymPokemon('Clefairy', 206500, 35)], { weight: 1 }, 'Jude', '(male)'),
    new DungeonTrainer('Pokéfan', [new GymPokemon('Cubchoo', 206500, 35)], { weight: 1 }, 'Georgia', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Espeon', 206500, 36)], { weight: 1 }, 'Micki', '(male)'),
    new DungeonTrainer('Nurse', [new GymPokemon('Leavanny', 206500, 35)], { weight: 1 }, 'Dixie'),
    new DungeonTrainer('Socialite', [new GymPokemon('Roselia', 206500, 35)], { weight: 1 }, 'Grace'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Umbreon', 206500, 35)], { weight: 1 }, 'Daniel'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 3803000, [new DungeonBossPokemon('Litwick', 25000000, 100), new DungeonTrainer('Psychic', [new GymPokemon('Elgyem', 14000000, 35), new GymPokemon('Duosion', 14000000, 35)], { weight: 1 }, 'Bryce', '(male)'), new DungeonTrainer('Psychic', [new GymPokemon('Yamask', 14000000, 35), new GymPokemon('Gothorita', 14000000, 35)], { weight: 1 }, 'Sarah', '(female)')], 206500, 7, 100);
dungeonList['Reversal Mountain'] = new Dungeon('Reversal Mountain', [
    { pokemon: 'Skarmory', options: { weight: 5.2 } },
    { pokemon: 'Numel', options: { weight: 5.2 } },
    { pokemon: 'Camerupt', options: { weight: 5.2 } },
    { pokemon: 'Spoink', options: { weight: 5.2 } },
    { pokemon: 'Grumpig', options: { weight: 5.2 } },
    { pokemon: 'Trapinch', options: { weight: 5.2 } },
    { pokemon: 'Drifblim', options: { weight: 5.2 } },
    { pokemon: 'Skorupi', options: { weight: 5.2 } },
    { pokemon: 'Boldore', options: { weight: 5.2 } },
    { pokemon: 'Woobat', options: { weight: 5.2 } },
    new DungeonTrainer('Cyclist', [new GymPokemon('Zebstrika', 226500, 37)], { weight: 1 }, 'Jeremiah', '(male)'),
    new DungeonTrainer('Cyclist', [new GymPokemon('Unfezant', 226500, 37)], { weight: 1 }, 'Adalaide', '(female)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Gurdurr', 226500, 37), new GymPokemon('Crustle', 226500, 37)], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Golbat', 226500, 37), new GymPokemon('Swanna', 226500, 37)], { weight: 1 }, 'Kiyo', '(male)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Swoobat', 226500, 38)], { weight: 1 }, 'Derek'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Golbat', 226500, 37), new GymPokemon('Darmanitan', 226500, 37)], { weight: 1 }, 'Kumiko', '(female)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Boldore', 226500, 37), new GymPokemon('Excadrill', 226500, 37)], { weight: 1 }, 'Jared'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Vibrava', 226500, 39), new GymPokemon('Camerupt', 226500, 39)], { weight: 1 }, 'Ray', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Grumpig', 226500, 39), new GymPokemon('Drifblim', 226500, 39)], { weight: 1 }, 'Cora', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Gurdurr', 226500, 37), new GymPokemon('Scraggy', 226500, 37), new GymPokemon('Scraggy', 226500, 37)], { weight: 1 }, 'Corey'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Riolu', 226500, 37), new GymPokemon('Gurdurr', 226500, 37), new GymPokemon('Riolu', 226500, 37)], { weight: 1 }, 'Chan'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Banette', 226500, 38), new GymPokemon('Golduck', 226500, 38)], { weight: 1 }, 'Eliza', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Watchog', 226500, 38), new GymPokemon('Camerupt', 226500, 38)], { weight: 1 }, 'Lewis', '(male)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 4003000, [new DungeonBossPokemon('Cacturne', 24000000, 100), new DungeonBossPokemon('Excadrill', 26000000, 100), new DungeonBossPokemon('Heatran', 30000000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion) })], 226500, 14, 100);
dungeonList['Team Plasma Assault'] = new Dungeon('Team Plasma Assault', [
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Watchog', 241500, 44), new GymPokemon('Muk', 241500, 44)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Golbat', 241500, 44), new GymPokemon('Garbodor', 241500, 44)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Seviper', 241500, 44), new GymPokemon('Weezing', 241500, 44)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma', [new GymPokemon('Pawniard', 241500, 46), new GymPokemon('Pawniard', 241500, 46), new GymPokemon('Absol', 241500, 46)], { weight: 1 }, 'Shadow', '(shadow)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 4603000, [new DungeonTrainer('Team Plasma', [new GymPokemon('Cryogonal', 11000000, 46), new GymPokemon('Cryogonal', 11000000, 46), new GymPokemon('Weavile', 12000000, 48)], { weight: 1 }, 'Zinzolin', '(zinzolin)')], 241500, 20, 100);
dungeonList['Seaside Cave'] = new Dungeon('Seaside Cave', [
    { pokemon: 'Golduck', options: { weight: 3.5 } },
    { pokemon: 'Seel', options: { weight: 3.5 } },
    { pokemon: 'Shellder', options: { weight: 3.5 } },
    { pokemon: 'Luvdisc', options: { weight: 3.5 } },
    { pokemon: 'Boldore', options: { weight: 3.5 } },
    { pokemon: 'Woobat', options: { weight: 3.5 } },
    { pokemon: 'Tynamo', options: { weight: 3.5 } },
    { pokemon: 'Frillish', options: { weight: 3.5 } },
    new DungeonTrainer('Battle Girl', [new GymPokemon('Heracross', 246500, 47)], { weight: 1 }, 'Tia'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Vibrava', 246500, 46), new GymPokemon('Gligar', 246500, 46)], { weight: 1 }, 'Johan', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Onix', 246500, 46), new GymPokemon('Lairon', 246500, 46)], { weight: 1 }, 'Mikiko', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Scrafty', 246500, 47)], { weight: 1 }, 'Drago'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Roggenrola', 246500, 44), new GymPokemon('Roggenrola', 246500, 44), new GymPokemon('Roggenrola', 246500, 44), new GymPokemon('Roggenrola', 246500, 44)], { weight: 1 }, 'Rocky'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Mienfoo', 246500, 47)], { weight: 1 }, 'Maki'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Gurdurr', 246500, 47)], { weight: 1 }, 'Rich'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 4203000, [new DungeonBossPokemon('Eelektrik', 28000000, 100), new DungeonBossPokemon('Crustle', 28000000, 100)], 246500, 21, 100);
dungeonList['Plasma Frigate'] = new Dungeon('Plasma Frigate', [
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Watchog', 257500, 46), new GymPokemon('Garbodor', 257500, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Golbat', 257500, 46), new GymPokemon('Drapion', 257500, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Seviper', 257500, 46), new GymPokemon('Garbodor', 257500, 46)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Krookodile', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Drapion', 257500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Garbodor', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Whirlipede', 257500, 46), new GymPokemon('Watchog', 257500, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Pawniard', 257500, 45), new GymPokemon('Pawniard', 257500, 45), new GymPokemon('Pawniard', 257500, 45)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scraggy', 257500, 46), new GymPokemon('Liepard', 257500, 46)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Weezing', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Krokorok', 257500, 46), new GymPokemon('Raticate', 257500, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Deino', 257500, 45), new GymPokemon('Deino', 257500, 45), new GymPokemon('Sneasel', 257500, 45)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scraggy', 257500, 45), new GymPokemon('Krokorok', 257500, 45), new GymPokemon('Golbat', 257500, 45)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scrafty', 257500, 47)], { weight: 1 }, undefined, '(female)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 4603000, [new DungeonTrainer('Team Plasma', [new GymPokemon('Cryogonal', 12000000, 48), new GymPokemon('Cryogonal', 12000000, 48), new GymPokemon('Weavile', 13000000, 50)], { weight: 1 }, 'Zinzolin', '(zinzolin)')], 257500, 20, 100);
dungeonList['Giant Chasm'] = new Dungeon('Giant Chasm', [
    { pokemon: 'Clefairy', options: { weight: 5.33 } },
    { pokemon: 'Poliwag', options: { weight: 5.33 } },
    { pokemon: 'Seel', options: { weight: 5.33 } },
    { pokemon: 'Tangela', options: { weight: 5.33 } },
    { pokemon: 'Delibird', options: { weight: 5.33 } },
    { pokemon: 'Sneasel', options: { weight: 5.33 } },
    { pokemon: 'Piloswine', options: { weight: 5.33 } },
    { pokemon: 'Pelipper', options: { weight: 5.33 } },
    { pokemon: 'Lunatone', options: { weight: 5.33 } },
    { pokemon: 'Solrock', options: { weight: 5.33 } },
    { pokemon: 'Vanillish', options: { weight: 5.33 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 5.33 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 5.33 } },
    { pokemon: 'Ditto', options: { weight: 5.33 } },
    { pokemon: 'Metang', options: { weight: 5.33 } },
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Weezing', 266500, 46), new GymPokemon('Muk', 266500, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scraggy', 266500, 46), new GymPokemon('Scrafty', 266500, 46), new GymPokemon('Whirlipede', 266500, 46)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Trubbish', 266500, 46), new GymPokemon('Golbat', 266500, 46), new GymPokemon('Garbodor', 266500, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Skorupi', 266500, 45), new GymPokemon('Foongus', 266500, 45), new GymPokemon('Golbat', 266500, 45)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Krookodile', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Leavanny', 266500, 49)], { weight: 1 }, 'Julius'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scrafty', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scolipede', 266500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Trubbish', 266500, 46), new GymPokemon('Zangoose', 266500, 46)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Grimer', 266500, 46), new GymPokemon('Seviper', 266500, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Raticate', 266500, 47), new GymPokemon('Watchog', 266500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Krokorok', 266500, 47), new GymPokemon('Krookodile', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Drapion', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Deino', 266500, 45), new GymPokemon('Deino', 266500, 45), new GymPokemon('Sneasel', 266500, 45)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Koffing', 266500, 46), new GymPokemon('Amoonguss', 266500, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma', [new GymPokemon('Cryogonal', 266500, 49), new GymPokemon('Cryogonal', 266500, 49), new GymPokemon('Weavile', 266500, 51)], { weight: 1 }, 'Zinzolin', '(zinzolin)'),
    new DungeonTrainer('Team Plasma', [new GymPokemon('Magneton', 266500, 50), new GymPokemon('Beheeyem', 266500, 50), new GymPokemon('Metang', 266500, 50), new GymPokemon('Magnezone', 266500, 50), new GymPokemon('Klinklang', 266500, 52)], { weight: 1 }, 'Colress', '(colress)'),
    new DungeonTrainer('Team Plasma', [new GymPokemon('Pawniard', 266500, 49), new GymPokemon('Pawniard', 266500, 49), new GymPokemon('Absol', 266500, 51)], { weight: 1 }, 'Shadow', '(shadow)'),
    new DungeonTrainer('Team Plasma', [new GymPokemon('Pawniard', 266500, 49), new GymPokemon('Pawniard', 266500, 49), new GymPokemon('Banette', 266500, 51)], { weight: 1 }, 'Shadow', '(shadow)'),
    new DungeonTrainer('Team Plasma', [new GymPokemon('Pawniard', 266500, 49), new GymPokemon('Pawniard', 266500, 49), new GymPokemon('Accelgor', 266500, 51)], { weight: 1 }, 'Shadow', '(shadow)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 4403000, [
    new DungeonBossPokemon('Tangrowth', 30000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')) }),
    new DungeonBossPokemon('Audino', 32000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')) }),
    new DungeonBossPokemon('Mamoswine', 32000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')) }),
    new DungeonBossPokemon('Kyurem', 35000000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion) }),
    new DungeonTrainer('Team Plasma', [new GymPokemon('Cofagrigus', 6000000, 50), new GymPokemon('Seismitoad', 6000000, 50), new GymPokemon('Eelektross', 6000000, 50), new GymPokemon('Drapion', 6000000, 50), new GymPokemon('Toxicroak', 6000000, 50), new GymPokemon('Hydreigon', 6500000, 52)], { weight: 1 }, 'Ghetsis', '(ghetsis)'),
], 266500, 22, 100);
dungeonList['Cave of Being'] = new Dungeon('Cave of Being', ['Kadabra', 'Golbat', 'Woobat', 'Gurdurr', 'Graveler', 'Onix'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 4603000, [new DungeonBossPokemon('Uxie', 35000000, 100), new DungeonBossPokemon('Mesprit', 35000000, 100), new DungeonBossPokemon('Azelf', 35000000, 100)], 286500, 20, 100);
dungeonList['Abundant Shrine'] = new Dungeon('Abundant Shrine', [
    { pokemon: 'Vulpix', options: { weight: 1.45 } },
    { pokemon: 'Golduck', options: { weight: 1.45 } },
    { pokemon: 'Marill', options: { weight: 1.45 } },
    { pokemon: 'Azumarill', options: { weight: 1.45 } },
    { pokemon: 'Swablu', options: { weight: 1.45 } },
    { pokemon: 'Bronzor', options: { weight: 1.45 } },
    { pokemon: 'Cottonee', options: { weight: 1.45 } },
    { pokemon: 'Petilil', options: { weight: 1.45 } },
    { pokemon: 'Goldeen', options: { weight: 1.45 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 1.45 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 1.45 } },
    new DungeonTrainer('Youngster', [new GymPokemon('Skorupi', 306500, 39), new GymPokemon('Seviper', 306500, 39)], { weight: 1 }, 'Wes'),
    new DungeonTrainer('Twins', [new GymPokemon('Swablu', 306500, 38), new GymPokemon('Swablu', 306500, 38)], { weight: 1 }, 'Rae & Ula'),
    new DungeonTrainer('Lass', [new GymPokemon('Deerling (Spring)', 306500, 39), new GymPokemon('Zangoose', 306500, 39)], { weight: 1 }, 'Lurleen'),
    new DungeonTrainer('Youngster', [new GymPokemon('Karrablast', 306500, 37), new GymPokemon('Shelmet', 306500, 37), new GymPokemon('Joltik', 306500, 37), new GymPokemon('Scolipede', 306500, 37)], { weight: 1 }, 'Jaye'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 4803000, [new DungeonBossPokemon('Bronzong', 38000000, 100), new DungeonBossPokemon('Altaria', 38000000, 100), new DungeonBossPokemon('Landorus', 42000000, 100)], 306500, 14, 100);
dungeonList['Victory Road Unova'] = new Dungeon('Victory Road Unova', [
    { pokemon: 'Poliwag', options: { weight: 6.67 } },
    { pokemon: 'Onix', options: { weight: 6.67 } },
    { pokemon: 'Marill', options: { weight: 6.67 } },
    { pokemon: 'Roselia', options: { weight: 6.67 } },
    { pokemon: 'Altaria', options: { weight: 6.67 } },
    { pokemon: 'Banette', options: { weight: 6.67 } },
    { pokemon: 'Buizel', options: { weight: 6.67 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 6.67 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 6.67 } },
    { pokemon: 'Boldore', options: { weight: 6.67 } },
    { pokemon: 'Cottonee', options: { weight: 6.67 } },
    { pokemon: 'Petilil', options: { weight: 6.67 } },
    { pokemon: 'Tranquill', options: { weight: 6.67 } },
    { pokemon: 'Unfezant', options: { weight: 6.67 } },
    { pokemon: 'Gurdurr', options: { weight: 6.67 } },
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Golurk', 326500, 55), new GymPokemon('Sigilyph', 326500, 55)], { weight: 1 }, 'Billy', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Drifblim', 326500, 55), new GymPokemon('Claydol', 326500, 55)], { weight: 1 }, 'Jamie', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Lampent', 326500, 54), new GymPokemon('Musharna', 326500, 54)], { weight: 1 }, 'Alia', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Metang', 326500, 54), new GymPokemon('Cofagrigus', 326500, 54)], { weight: 1 }, 'Al', '(male)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Braviary', 326500, 55), new GymPokemon('Carracosta', 326500, 55)], { weight: 1 }, 'Claude', '(male)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Mandibuzz', 326500, 55), new GymPokemon('Archeops', 326500, 55)], { weight: 1 }, 'Cecile', '(female)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Darmanitan', 326500, 55), new GymPokemon('Tangrowth', 326500, 55)], { weight: 1 }, 'Chandra', '(female)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Whimsicott', 326500, 55), new GymPokemon('Unfezant', 326500, 55)], { weight: 1 }, 'Beckett', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Swoobat', 326500, 55), new GymPokemon('Lilligant', 326500, 55)], { weight: 1 }, 'Shelly', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Sigilyph', 326500, 55), new GymPokemon('Crobat', 326500, 55)], { weight: 1 }, 'Cathy', '(female)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Clefable', 326500, 54)], { weight: 1 }, 'Logan'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Sawsbuck (Spring)', 326500, 54)], { weight: 1 }, 'Mae', '(female)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Swanna', 326500, 55), new GymPokemon('Ampharos', 326500, 55)], { weight: 1 }, 'Pierce', '(male)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Gigalith', 326500, 55), new GymPokemon('Skarmory', 326500, 55)], { weight: 1 }, 'Abraham', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Heatmor', 326500, 55), new GymPokemon('Galvantula', 326500, 55)], { weight: 1 }, 'Shanta', '(female)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Durant', 326500, 55), new GymPokemon('Ferrothorn', 326500, 55)], { weight: 1 }, 'Webster', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Electabuzz', 326500, 54), new GymPokemon('Probopass', 326500, 54)], { weight: 1 }, 'Eddie', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Magmar', 326500, 54), new GymPokemon('Camerupt', 326500, 54)], { weight: 1 }, 'Elle', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Fraxure', 326500, 54), new GymPokemon('Zweilous', 326500, 54), new GymPokemon('Flygon', 326500, 54)], { weight: 1 }, 'Hugo', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Pinsir', 326500, 54), new GymPokemon('Heracross', 326500, 54)], { weight: 1 }, 'Martell'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Throh', 326500, 54), new GymPokemon('Sawk', 326500, 54)], { weight: 1 }, 'Chalina'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Zweilous', 326500, 55), new GymPokemon('Eelektross', 326500, 55)], { weight: 1 }, 'Elmer', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Fraxure', 326500, 55), new GymPokemon('Vanilluxe', 326500, 55)], { weight: 1 }, 'Caroll', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Zebstrika', 326500, 54), new GymPokemon('Sawk', 326500, 54), new GymPokemon('Starmie', 326500, 54)], { weight: 1 }, 'Portia', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Beartic', 326500, 54), new GymPokemon('Throh', 326500, 54), new GymPokemon('Golurk', 326500, 54)], { weight: 1 }, 'Sterling', '(male)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 5003000, [new DungeonBossPokemon('Golurk', 44000000, 100), new DungeonBossPokemon('Terrakion', 45000000, 100), new DungeonBossPokemon('Audino', 45000000, 100), new DungeonBossPokemon('Druddigon', 44000000, 100)], 326500, 23, 100);
dungeonList['Twist Mountain'] = new Dungeon('Twist Mountain', [
    { pokemon: 'Onix', options: { weight: 10.4 } },
    { pokemon: 'Boldore', options: { weight: 10.4 } },
    { pokemon: 'Woobat', options: { weight: 10.4 } },
    { pokemon: 'Gurdurr', options: { weight: 10.4 } },
    { pokemon: 'Beartic', options: { weight: 10.4 } },
    new DungeonTrainer('Worker', [new GymPokemon('Roggenrola', 356500, 60), new GymPokemon('Graveler', 356500, 60), new GymPokemon('Excadrill', 356500, 60)], { weight: 1 }, 'Cairn'),
    new DungeonTrainer('Veteran', [new GymPokemon('Tauros', 356500, 64), new GymPokemon('Crobat', 356500, 64), new GymPokemon('Carracosta', 356500, 64)], { weight: 1 }, 'Carter', '(male)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Glaceon', 356500, 63), new GymPokemon('Bastiodon', 356500, 63), new GymPokemon('Rhyperior', 356500, 63), new GymPokemon('Drapion', 356500, 63)], { weight: 1 }, 'Julia', '(female)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Golett', 356500, 61), new GymPokemon('Mamoswine', 356500, 61)], { weight: 1 }, 'Wade'),
    new DungeonTrainer('Worker', [new GymPokemon('Geodude', 356500, 60), new GymPokemon('Steelix', 356500, 60), new GymPokemon('Boldore', 356500, 60)], { weight: 1 }, 'Gus'),
    new DungeonTrainer('Worker', [new GymPokemon('Machoke', 356500, 61), new GymPokemon('Abomasnow', 356500, 61)], { weight: 1 }, 'Patton', '(ice)'),
    new DungeonTrainer('Nurse', [new GymPokemon('Blissey', 356500, 62)], { weight: 1 }, 'Carol'),
    new DungeonTrainer('Veteran', [new GymPokemon('Gyarados', 356500, 64), new GymPokemon('Kangaskhan', 356500, 64), new GymPokemon('Archeops', 356500, 64)], { weight: 1 }, 'Chloris', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Sigilyph', 356500, 62)], { weight: 1 }, 'Cliff'),
    new DungeonTrainer('Hiker', [new GymPokemon('Larvitar', 356500, 61), new GymPokemon('Probopass', 356500, 61)], { weight: 1 }, 'Hunter'),
    new DungeonTrainer('Worker', [new GymPokemon('Glalie', 356500, 61), new GymPokemon('Beartic', 356500, 61)], { weight: 1 }, 'Victor', '(ice)'),
    new DungeonTrainer('Worker', [new GymPokemon('Smoochum', 356500, 60), new GymPokemon('Claydol', 356500, 60), new GymPokemon('Kadabra', 356500, 60)], { weight: 1 }, 'Ryan', '(ice)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Weavile', 356500, 63), new GymPokemon('Rampardos', 356500, 63), new GymPokemon('Toxicroak', 356500, 63), new GymPokemon('Aggron', 356500, 63)], { weight: 1 }, 'Zach', '(male)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 5203000, [new DungeonBossPokemon('Durant', 48000000, 100), new DungeonBossPokemon('Cryogonal', 48000000, 100), new DungeonBossPokemon('Heatmor', 48000000, 100), new DungeonBossPokemon('Regigigas', 50000000, 100)], 356500, 7, 100);
dungeonList['Dragonspiral Tower'] = new Dungeon('Dragonspiral Tower', ['Dratini', 'Tranquill', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Vanillish', 'Sawsbuck (Autumn)', 'Sawsbuck (Winter)', 'Beartic', 'Mienfoo', 'Mienshao', 'Golett', 'Golurk'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 5203000, [new DungeonBossPokemon('Dragonite', 48000000, 100), new DungeonBossPokemon('Reshiram', 48000000, 100), new DungeonBossPokemon('Druddigon', 48000000, 100), new DungeonBossPokemon('Zekrom', 50000000, 100)], 356500, 7, 100);
dungeonList['Moor of Icirrus'] = new Dungeon('Moor of Icirrus', [
    { pokemon: 'Croagunk', options: { weight: 2.67 } },
    { pokemon: 'Palpitoad', options: { weight: 2.67 } },
    { pokemon: 'Karrablast', options: { weight: 2.67 } },
    { pokemon: 'Shelmet', options: { weight: 2.67 } },
    { pokemon: 'Stunfisk', options: { weight: 2.67 } },
    { pokemon: 'Barboach', options: { weight: 2.67 } },
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Accelgor', 356500, 62), new GymPokemon('Swalot', 356500, 62), new GymPokemon('Kecleon', 356500, 62)], { weight: 1 }, 'Elaine', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Escavalier', 356500, 62), new GymPokemon('Skuntank', 356500, 62), new GymPokemon('Carnivine', 356500, 62)], { weight: 1 }, 'Parker', '(male)'),
    new DungeonTrainer('Fisherman', [new GymPokemon('Corphish', 356500, 60), new GymPokemon('Poliwag', 356500, 60), new GymPokemon('Stunfisk', 356500, 60)], { weight: 1 }, 'Eustace'),
    new DungeonTrainer('Fisherman', [new GymPokemon('Poliwhirl', 356500, 60), new GymPokemon('Whiscash', 356500, 60), new GymPokemon('Politoed', 356500, 60)], { weight: 1 }, 'Arnold'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 5203000, [new DungeonBossPokemon('Keldeo', 50000000, 100), new DungeonBossPokemon('Seismitoad', 48000000, 100), new DungeonBossPokemon('Whiscash', 48000000, 100)], 356500, 8, 100);
dungeonList['Pinwheel Forest'] = new Dungeon('Pinwheel Forest', [
    { pokemon: 'Goldeen', options: { weight: 6.57 } },
    { pokemon: 'Marill', options: { weight: 6.57 } },
    { pokemon: 'Yanma', options: { weight: 6.57 } },
    { pokemon: 'Vigoroth', options: { weight: 6.57 } },
    { pokemon: 'Toxicroak', options: { weight: 6.57 } },
    { pokemon: 'Gurdurr', options: { weight: 6.57 } },
    { pokemon: 'Tympole', options: { weight: 6.57 } },
    { pokemon: 'Palpitoad', options: { weight: 6.57 } },
    { pokemon: 'Swadloon', options: { weight: 6.57 } },
    { pokemon: 'Whirlipede', options: { weight: 6.57 } },
    { pokemon: 'Cottonee', options: { weight: 6.57 } },
    { pokemon: 'Petilil', options: { weight: 6.57 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 6.57 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 6.57 } },
    new DungeonTrainer('Preschooler', [new GymPokemon('Wooper', 356500, 60), new GymPokemon('Tympole', 356500, 60)], { weight: 1 }, 'Jojo', '(male)'),
    new DungeonTrainer('Nursery Aide', [new GymPokemon('Exeggcute', 356500, 61), new GymPokemon('Miltank', 356500, 61)], { weight: 1 }, 'Ethel'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Dratini', 356500, 59), new GymPokemon('Gible', 356500, 59), new GymPokemon('Bagon', 356500, 59)], { weight: 1 }, 'Samantha', '(female)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Burmy (plant)', 356500, 59), new GymPokemon('Scyther', 356500, 59), new GymPokemon('Paras', 356500, 59)], { weight: 1 }, 'José', '(male)'),
    new DungeonTrainer('Twins', [new GymPokemon('Plusle', 356500, 60), new GymPokemon('Minun', 356500, 60)], { weight: 1 }, 'Ally & Amy'),
    new DungeonTrainer('Nursery Aide', [new GymPokemon('Chansey', 356500, 61), new GymPokemon('Leavanny', 356500, 61)], { weight: 1 }, 'Rosalyn'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Pineco', 356500, 60), new GymPokemon('Ferrothorn', 356500, 60)], { weight: 1 }, 'Ike', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Sudowoodo', 356500, 62), new GymPokemon('Gloom', 356500, 62), new GymPokemon('Beartic', 356500, 62)], { weight: 1 }, 'Hillary', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Weepinbell', 356500, 62), new GymPokemon('Luxray', 356500, 62), new GymPokemon('Ursaring', 356500, 62)], { weight: 1 }, 'Dwayne', '(male)'),
    new DungeonTrainer('Youngster', [new GymPokemon('Mankey', 356500, 60), new GymPokemon('Snubbull', 356500, 60), new GymPokemon('Crawdaunt', 356500, 60)], { weight: 1 }, 'Keita'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Electrike', 356500, 62), new GymPokemon('Rapidash', 356500, 62), new GymPokemon('Farfetch\'d', 356500, 62)], { weight: 1 }, 'Ralph', '(male)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Crobat', 356500, 64), new GymPokemon('Magmortar', 356500, 64), new GymPokemon('Leafeon', 356500, 64)], { weight: 1 }, 'Rosaline', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Ludicolo', 356500, 64), new GymPokemon('Electivire', 356500, 64), new GymPokemon('Forretress', 356500, 64)], { weight: 1 }, 'Sinan', '(male)'),
    new DungeonTrainer('Lass', [new GymPokemon('Nidoran(F)', 356500, 60), new GymPokemon('Nidoran(M)', 356500, 60), new GymPokemon('Nidoqueen', 356500, 60)], { weight: 1 }, 'Helia'),
    new DungeonTrainer('Youngster', [new GymPokemon('Cascoon', 356500, 60), new GymPokemon('Silcoon', 356500, 60), new GymPokemon('Scolipede', 356500, 60)], { weight: 1 }, 'Henley'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Munchlax', 356500, 62), new GymPokemon('Zebstrika', 356500, 62), new GymPokemon('Kricketune', 356500, 62)], { weight: 1 }, 'Melita', '(female)'),
    new DungeonTrainer('Youngster', [new GymPokemon('Phanpy', 356500, 60), new GymPokemon('Doduo', 356500, 60), new GymPokemon('Fearow', 356500, 60)], { weight: 1 }, 'Nicholas'),
    new DungeonTrainer('School Kid', [new GymPokemon('Oddish', 356500, 60), new GymPokemon('Tangela', 356500, 60), new GymPokemon('Bellossom', 356500, 60)], { weight: 1 }, 'Millie', '(female)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Furret', 356500, 63), new GymPokemon('Braviary', 356500, 63), new GymPokemon('Seismitoad', 356500, 63)], { weight: 1 }, 'Kelsey', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Linoone', 356500, 63), new GymPokemon('Mandibuzz', 356500, 63), new GymPokemon('Toxicroak', 356500, 63)], { weight: 1 }, 'Kathrine', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Tyrogue', 356500, 61), new GymPokemon('Scrafty', 356500, 61), new GymPokemon('Makuhita', 356500, 61)], { weight: 1 }, 'Kentaro'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Tyrogue', 356500, 61), new GymPokemon('Machop', 356500, 61), new GymPokemon('Poliwrath', 356500, 61)], { weight: 1 }, 'Lee'),
    new DungeonTrainer('School Kid', [new GymPokemon('Venonat', 356500, 60), new GymPokemon('Yanma', 356500, 60), new GymPokemon('Venomoth', 356500, 60)], { weight: 1 }, 'Keston', '(male)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 5203000, [new DungeonBossPokemon('Scolipede', 48000000, 100), new DungeonBossPokemon('Seismitoad', 48000000, 100), new DungeonBossPokemon('Virizion', 48000000, 100)], 356500, 3, 100);
dungeonList['Dreamyard'] = new Dungeon('Dreamyard', [
    { pokemon: 'Raticate', options: { weight: 4.67 } },
    { pokemon: 'Jigglypuff', options: { weight: 4.67 } },
    { pokemon: 'Golbat', options: { weight: 4.67 } },
    { pokemon: 'Watchog', options: { weight: 4.67 } },
    { pokemon: 'Liepard', options: { weight: 4.67 } },
    { pokemon: 'Munna', options: { weight: 4.67 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Hypno', 356500, 62), new GymPokemon('Dusclops', 356500, 62)], { weight: 1 }, 'Nandor', '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Gastly', 356500, 63), new GymPokemon('Skuntank', 356500, 63)], { weight: 1 }, 'Athena', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Chingling', 356500, 62), new GymPokemon('Mr. Mime', 356500, 62)], { weight: 1 }, 'Olesia', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Klang', 356500, 63), new GymPokemon('Porygon', 356500, 63)], { weight: 1 }, 'Franklin', '(male)'),
    new DungeonTrainer('School Kid', [new GymPokemon('Shroomish', 356500, 63), new GymPokemon('Tangrowth', 356500, 63)], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Youngster', [new GymPokemon('Slakoth', 356500, 63), new GymPokemon('Slaking', 356500, 63)], { weight: 1 }, 'Keita'),
    new DungeonTrainer('School Kid', [new GymPokemon('Igglybuff', 356500, 63), new GymPokemon('Lickilicky', 356500, 63)], { weight: 1 }, 'Rita', '(female)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 5203000, [new DungeonBossPokemon('Audino', 48000000, 100), new DungeonBossPokemon('Dunsparce', 48000000, 100), new DungeonBossPokemon('Latias', 48000000, 100), new DungeonBossPokemon('Latios', 48000000, 100)], 356500, 3, 100);
dungeonList['P2 Laboratory'] = new Dungeon('P2 Laboratory', ['Scyther', 'Scizor', 'Pineco', 'Forretress', 'Porygon2', 'Electrode', 'Metang'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 5403000, [
    new DungeonBossPokemon('Escavalier', 48000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Porygon-Z', 48000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Genesect', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Porygon', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Audino', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Mawile', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Sableye', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonTrainer('Team Plasma', [new GymPokemon('Magneton', 10000000, 72), new GymPokemon('Rotom (wash)', 10000000, 72), new GymPokemon('Metagross', 10000000, 72), new GymPokemon('Beheeyem', 10000000, 72), new GymPokemon('Magnezone', 10000000, 72), new GymPokemon('Klinklang', 11000000, 74)], { weight: 1 }, 'Colress', '(colress)'),
], 396500, 18, 100);
// Kalos
// TODO: Balancing of dungeon Pokemon HP & rewards.
dungeonList['Santalune Forest'] = new Dungeon('Santalune Forest', [
    { pokemon: 'Caterpie', options: { weight: 0.88 } },
    { pokemon: 'Metapod', options: { weight: 0.88 } },
    { pokemon: 'Weedle', options: { weight: 0.88 } },
    { pokemon: 'Kakuna', options: { weight: 0.88 } },
    { pokemon: 'Pansage', options: { weight: 0.88 } },
    { pokemon: 'Pansear', options: { weight: 0.88 } },
    { pokemon: 'Panpour', options: { weight: 0.88 } },
    { pokemon: 'Fletchling', options: { weight: 0.88 } },
    { pokemon: 'Scatterbug', options: { weight: 0.88 } },
    new DungeonTrainer('Youngster', [new GymPokemon('Scatterbug', 5803000, 3), new GymPokemon('Fletchling', 5803000, 3)], { weight: 1 }, 'Joey'),
    new DungeonTrainer('Lass', [new GymPokemon('Pikachu', 5803000, 5)], { weight: 1 }, 'Anna'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 5803020, [new DungeonTrainer('Lass', [new GymPokemon('Weedle', 24303000, 2), new GymPokemon('Bunnelby', 27303000, 4)], { weight: 1 }, 'Lise'), new DungeonBossPokemon('Pikachu', 51738600, 4)], 400000, 2, 4);
dungeonList['Parfum Palace'] = new Dungeon('Parfum Palace', ['Goldeen', 'Seaking', 'Magikarp', 'Gyarados', 'Corphish', 'Crawdaunt'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 6303405, [new DungeonBossPokemon('Furfrou', 56375930, 50)], 445000, 6, 25);
dungeonList['Connecting Cave'] = new Dungeon('Connecting Cave', [
    { pokemon: 'Zubat', options: { weight: 1.33 } },
    { pokemon: 'Whismur', options: { weight: 1.33 } },
    { pokemon: 'Meditite', options: { weight: 1.33 } },
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 6503370, [new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Ducklett', 13374965, 12), new GymPokemon('Pikachu', 14465837, 12), new GymPokemon('Litleo', 17438602, 12), new GymPokemon('Oddish', 19365784, 12)], { weight: 1 }, 'Mercy', '(female)'), new DungeonBossPokemon('Axew', 59867590, 20)], 475000, 7, 15);
dungeonList['Glittering Cave'] = new Dungeon('Glittering Cave', [
    { pokemon: 'Machop', options: { weight: 0.88 } },
    { pokemon: 'Cubone', options: { weight: 0.88 } },
    { pokemon: 'Rhyhorn', options: { weight: 0.88 } },
    { pokemon: 'Lunatone', options: { weight: 0.88 } },
    { pokemon: 'Solrock', options: { weight: 0.88 } },
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Houndour', 7037592, 18), new GymPokemon('Zubat', 7037592, 18)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Gulpin', 7037592, 18), new GymPokemon('Electrike', 7037592, 18)], { weight: 1 }, undefined, '(female)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 7037500, [new DungeonTrainer('Team Flare Grunt Duo', [new GymPokemon('Scraggy', 33084827, 20), new GymPokemon('Croagunk', 31937395, 20)], { weight: 1 }, undefined), new DungeonBossPokemon('Kangaskhan', 63749659, 20), new DungeonBossPokemon('Mawile', 61285398, 20)], 505000, 9, 16);
dungeonList['Reflection Cave'] = new Dungeon('Reflection Cave', [
    { pokemon: 'Mr. Mime', options: { weight: 4 } },
    { pokemon: 'Wobbuffet', options: { weight: 4 } },
    { pokemon: 'Sableye', options: { weight: 4 } },
    { pokemon: 'Chingling', options: { weight: 4 } },
    { pokemon: 'Roggenrola', options: { weight: 4 } },
    { pokemon: 'Solosis', options: { weight: 4 } },
    { pokemon: 'Carbink', options: { weight: 4 } },
    { pokemon: 'Mime Jr.', options: { weight: 4 } },
    new DungeonTrainer('Backpacker', [new GymPokemon('Linoone', 7353000, 26)], { weight: 1 }, 'Lane', '(male)'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Throh', 7353000, 25), new GymPokemon('Hawlucha', 7353000, 26)], { weight: 1 }, 'Hedvig'),
    new DungeonTrainer('Hiker', [new GymPokemon('Sandile', 7353000, 23), new GymPokemon('Dwebble', 7353000, 23), new GymPokemon('Diggersby', 7353000, 24)], { weight: 1 }, 'Dunstan'),
    new DungeonTrainer('Tourist', [new GymPokemon('Nidorina', 7353000, 26)], { weight: 1 }, 'Monami', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Sawk', 7353000, 28)], { weight: 1 }, 'Igor'),
    new DungeonTrainer('Psychic', [new GymPokemon('Chimecho', 7353000, 24), new GymPokemon('Golett', 7353000, 24)], { weight: 1 }, 'Franz', '(male)'),
    new DungeonTrainer('Tourist', [new GymPokemon('Nidorino', 7353000, 26)], { weight: 1 }, 'Haruto', '(male)'),
    new DungeonTrainer('Honeymooners', [new GymPokemon('Combee', 7353000, 26), new GymPokemon('Vespiquen', 7353000, 26)], { weight: 1 }, 'Yuu & Ami'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 7353000, [new DungeonTrainer('Ace Trainer', [new GymPokemon('Absol', 33468400, 26), new GymPokemon('Pinsir', 37474200, 25)], { weight: 1 }, 'Emil', '(male)'), new DungeonTrainer('Ace Trainer', [new GymPokemon('Doduo', 20365400, 24), new GymPokemon('Granbull', 23366400, 24), new GymPokemon('Helioptile', 25476400, 25)], { weight: 1 }, 'Monique', '(female)'), new DungeonBossPokemon('Diancie', 69694200, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion) })], 555000, 11, 22);
//Tower of Mastery?
dungeonList['Kalos Power Plant'] = new Dungeon('Kalos Power Plant', //keep going from here down
[
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Croagunk', 7903570, 32), new GymPokemon('Scraggy', 7903570, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Golbat', 7903570, 32), new GymPokemon('Scraggy', 7903570, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Mightyena', 7903570, 34)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Golbat', 7903570, 32), new GymPokemon('Mightyena', 7903570, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Golbat', 7903570, 33), new GymPokemon('Croagunk', 7903570, 31)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Liepard', 7903570, 31), new GymPokemon('Scraggy', 7903570, 31), new GymPokemon('Croagunk', 7903570, 31)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Swalot', 7903570, 34)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Liepard', 7903570, 31), new GymPokemon('Swalot', 7903570, 33)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Houndoom', 7903570, 36)], { weight: 8 }, undefined, '(male)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 7903570, [
    new DungeonTrainer('Team Flare', [new GymPokemon('Mightyena', 75384400, 38)], { weight: 1 }, 'Aliana', '(aliana)'),
    new DungeonBossPokemon('Volcanion', 83945700, 100, {
        requirement: new MultiRequirement([new ClearDungeonRequirement(5, GameConstants.getDungeonIndex('Kalos Power Plant')), new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)]),
    }),
], 575000, 13, 32);
dungeonList['Sea Spirit\'s Den'] = new Dungeon('Sea Spirit\'s Den', ['Lapras', 'Dwebble', 'Lanturn', 'Binacle', 'Woobat', 'Onix'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 7543000, [new DungeonBossPokemon('Lugia', 92375000, 100)], 600000, 23, 30);
dungeonList['Pokéball Factory'] = new Dungeon('Pokéball Factory', [
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Toxicroak', 8173950, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Mightyena', 8173950, 36), new GymPokemon('Golbat', 8173950, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Scraggy', 8173950, 36), new GymPokemon('Mightyena', 8173950, 36)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Swalot', 8173950, 37)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Scraggy', 8173950, 37), new GymPokemon('Houndoom', 8173950, 38)], { weight: 4 }, undefined, '(female)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 8173950, [new DungeonTrainer('Team Flare', [new GymPokemon('Manectric', 79385030, 41)], { weight: 1 }, 'Celosia'), new DungeonTrainer('Team Flare', [new GymPokemon('Liepard', 79284730, 41)], { weight: 1 }, 'Bryony')], 615000, 14, 37);
dungeonList['Lost Hotel'] = new Dungeon('Lost Hotel', [
    { pokemon: 'Magneton', options: { weight: 2.6 } },
    { pokemon: 'Electrode', options: { weight: 2.6 } },
    { pokemon: 'Litwick', options: { weight: 2.6 } },
    { pokemon: 'Pawniard', options: { weight: 2.6 } },
    { pokemon: 'Klefki', options: { weight: 2.6 } },
    new DungeonTrainer('Punk Guy', [new GymPokemon('Scrafty', 8375300, 39), new GymPokemon('Sharpedo', 8375300, 39), new GymPokemon('Pawniard', 8375300, 39)], { weight: 1 }, 'Sid'),
    new DungeonTrainer('Punk Guy', [new GymPokemon('Skuntank', 8375300, 40), new GymPokemon('Crawdaunt', 8375300, 40)], { weight: 1 }, 'Jacques'),
    new DungeonTrainer('Punk Guy', [new GymPokemon('Dunsparce', 8375300, 42)], { weight: 1 }, 'Slater'),
    new DungeonTrainer('Punk Girl', [new GymPokemon('Seviper', 8375300, 40), new GymPokemon('Arbok', 8375300, 40)], { weight: 1 }, 'Jeanne'),
    new DungeonTrainer('Punk Girl', [new GymPokemon('Liepard', 8375300, 40), new GymPokemon('Liepard', 8375300, 40)], { weight: 1 }, 'Cecile'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 8375300, [new DungeonTrainer('Punk Couple', [new GymPokemon('Garbodor', 42664500, 42), new GymPokemon('Pangoro', 42765500, 42)], { weight: 2 }, 'Zoya & Asa'), new DungeonBossPokemon('Rotom', 82376500, 38)], 635000, 15, 37);
dungeonList['Frost Cavern'] = new Dungeon('Frost Cavern', [
    { pokemon: 'Haunter', options: { weight: 2.6 } },
    { pokemon: 'Jynx', options: { weight: 2.6 } },
    { pokemon: 'Piloswine', options: { weight: 2.6 } },
    { pokemon: 'Beartic', options: { weight: 2.6 } },
    { pokemon: 'Cryogonal', options: { weight: 2.6 } },
    { pokemon: 'Bergmite', options: { weight: 2.6 } },
    { pokemon: 'Smoochum', options: { weight: 0.53 } },
    { pokemon: 'Vanillite', options: { weight: 0.53 } },
    { pokemon: 'Cubchoo', options: { weight: 0.53 } },
    { pokemon: 'Poliwhirl', options: { weight: 0.53 } },
    { pokemon: 'Floatzel', options: { weight: 0.53 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 0.53 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 0.53 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Vibrava', 8537490, 44)], { weight: 1 }, 'Ross'),
    new DungeonTrainer('Sky Trainer', [new GymPokemon('Carnivine', 8537490, 41), new GymPokemon('Swanna', 8537490, 44)], { weight: 1 }, 'Celso', '(male)'),
    new DungeonTrainer('Sky Trainer', [new GymPokemon('Cryogonal', 8537490, 45)], { weight: 1 }, 'Era', '(female)'),
    new DungeonTrainer('Artist', [new GymPokemon('Smeargle', 8537490, 44)], { weight: 1 }, 'Salvador'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Doublade', 8537490, 46)], { weight: 1 }, 'Cordelia', '(female)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Raichu', 8537490, 42), new GymPokemon('Golduck', 8537490, 42), new GymPokemon('Marowak', 8537490, 43)], { weight: 1 }, 'Neil', '(male)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Graveler', 8537490, 40), new GymPokemon('Graveler', 8537490, 41), new GymPokemon('Carbink', 8537490, 42)], { weight: 1 }, 'Alain'),
    new DungeonTrainer('Hiker', [new GymPokemon('Relicanth', 8537490, 42), new GymPokemon('Rhydon', 8537490, 42)], { weight: 1 }, 'Delmon'),
    new DungeonTrainer('Brains & Brawn', [new GymPokemon('Grumpig', 8537490, 44), new GymPokemon('Hariyama', 8537490, 46)], { weight: 1 }, 'Eoin & Wolf'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Scrafty', 8537490, 43), new GymPokemon('Throh', 8537490, 44)], { weight: 1 }, 'Alonzo'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Sawk', 8537490, 43), new GymPokemon('Mienshao', 8537490, 44)], { weight: 1 }, 'Kinsey'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Gurdurr', 8537490, 46)], { weight: 1 }, 'Kenji'),
    new DungeonTrainer('Hiker', [new GymPokemon('Probopass', 8537490, 44)], { weight: 1 }, 'Brent'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Medicham', 8537490, 46)], { weight: 1 }, 'Gabrielle'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Golbat', 8537490, 42), new GymPokemon('Manectric', 8537490, 42)], { weight: 1 }, undefined, '(female)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 8537490, [new DungeonTrainer('Team Flare', [new GymPokemon('Houndoom', 87365830, 48)], { weight: 1 }, 'Mable'), new DungeonBossPokemon('Abomasnow', 85376500, 50)], 665500, 15, 40);
dungeonList['Team Flare Secret HQ'] = new Dungeon('Team Flare Secret HQ', [
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Toxicroak', 8739480, 50)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Liepard', 8739480, 48)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Manectric', 8739480, 50)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Mightyena', 8739480, 48)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Houndoom', 8739480, 50)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Scrafty', 8739480, 48)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Liepard', 8739480, 47), new GymPokemon('Manectric', 8739480, 48)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Mightyena', 8739480, 47), new GymPokemon('Houndoom', 8739480, 48)], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Swalot', 8739480, 50)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Golbat', 8739480, 50)], { weight: 2 }, undefined, '(male)'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 8739480, [
    new DungeonTrainer('Team Flare', [new GymPokemon('Mienshao', 22464940, 49), new GymPokemon('Honchkrow', 22564950, 49), new GymPokemon('Pyroar', 23375580, 51), new GymPokemon('Gyarados', 27385730, 53)], { weight: 2 }, 'Lysandre', '(lysandre)'),
    new DungeonBossPokemon('Xerneas', 93659460, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ')) }),
    new DungeonBossPokemon('Yveltal', 93659450, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ')) }),
], 675000, 16, 48);
dungeonList['Terminus Cave'] = new Dungeon('Terminus Cave', [
    { pokemon: 'Sandslash', options: { weight: 3.27 } },
    { pokemon: 'Graveler', options: { weight: 3.27 } },
    { pokemon: 'Pupitar', options: { weight: 3.27 } },
    { pokemon: 'Lairon', options: { weight: 3.27 } },
    { pokemon: 'Durant', options: { weight: 3.27 } },
    { pokemon: 'Geodude', options: { weight: 3.27 } },
    { pokemon: 'Larvitar', options: { weight: 3.27 } },
    { pokemon: 'Aron', options: { weight: 3.27 } },
    new DungeonTrainer('Worker', [new GymPokemon('Graveler', 8924330, 46), new GymPokemon('Graveler', 8924330, 47), new GymPokemon('Golem', 8924330, 48)], { weight: 1 }, 'Narek'),
    new DungeonTrainer('Hiker', [new GymPokemon('Steelix', 8924330, 48), new GymPokemon('Boldore', 8924330, 48)], { weight: 1 }, 'Bergin'),
    new DungeonTrainer('Hiker', [new GymPokemon('Rhydon', 8924330, 50)], { weight: 1 }, 'Aaron'),
    new DungeonTrainer('Worker', [new GymPokemon('Octillery', 8924330, 50)], { weight: 1 }, 'Dimitri'),
    new DungeonTrainer('Worker', [new GymPokemon('Probopass', 8924330, 50)], { weight: 1 }, 'Yusif'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Throh', 8924330, 49), new GymPokemon('Conkeldurr', 8924330, 50)], { weight: 1 }, 'Andrea'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Toxicroak', 8924330, 49), new GymPokemon('Sawk', 8924330, 50)], { weight: 1 }, 'Gunnar'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Medicham', 8924330, 48), new GymPokemon('Hawlucha', 8924330, 51)], { weight: 1 }, 'Hailey'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 8924330, 52)], { weight: 1 }, 'Ricardo'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 8924330, [new DungeonTrainer('Pokémon Rangers', [new GymPokemon('Nidoqueen', 46659450, 51), new GymPokemon('Nidoking', 46654990, 51)], { weight: 3 }, 'Fern & Lee'), new DungeonBossPokemon('Zygarde', 92485360, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion) })], 700000, 18, 45);
dungeonList['Pokémon Village'] = new Dungeon('Pokémon Village', ['Jigglypuff', 'Poliwhirl', 'Noctowl', 'Lombre', 'Gothorita', 'Amoonguss'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 9003000, [new DungeonBossPokemon('Ditto', 94836530, 50), new DungeonBossPokemon('Zoroark', 95743340, 50)], 725000, 20, 48);
dungeonList['Victory Road Kalos'] = new Dungeon('Victory Road Kalos', [
    { pokemon: 'Haunter', options: { weight: 3.27 } },
    { pokemon: 'Graveler', options: { weight: 3.27 } },
    { pokemon: 'Lickitung', options: { weight: 3.27 } },
    { pokemon: 'Gurdurr', options: { weight: 3.27 } },
    { pokemon: 'Druddigon', options: { weight: 3.27 } },
    { pokemon: 'Zweilous', options: { weight: 3.27 } },
    { pokemon: 'Geodude', options: { weight: 3.27 } },
    { pokemon: 'Lombre', options: { weight: 3.27 } },
    { pokemon: 'Floatzel', options: { weight: 3.27 } },
    { pokemon: 'Poliwhirl', options: { weight: 3.27 } },
    { pokemon: 'Poliwag', options: { weight: 3.27 } },
    { pokemon: 'Noibat', options: { weight: 3.27 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 3.27 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 3.27 } },
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Carbink', 3500000, 56), new GymPokemon('Raichu', 3500000, 56), new GymPokemon('Kingdra', 3500000, 57)], { weight: 1 }, 'Robbie', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Weavile', 3500000, 60)], { weight: 1 }, 'Alanza', '(female)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Steelix', 3500000, 56), new GymPokemon('Electrode', 3500000, 56), new GymPokemon('Kangaskhan', 3500000, 57)], { weight: 1 }, 'Bence', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Machamp', 3500000, 60)], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Hawlucha', 3500000, 57), new GymPokemon('Mienshao', 3500000, 58)], { weight: 1 }, 'Veronique'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Haxorus', 3500000, 58)], { weight: 1 }, 'Farid', '(male)'),
    new DungeonTrainer('Batlle Girl', [new GymPokemon('Medicham', 3500000, 60)], { weight: 1 }, 'Sigrid'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Pangoro', 3500000, 57), new GymPokemon('Heracross', 3500000, 58)], { weight: 1 }, 'Ander'),
    new DungeonTrainer('Psychic', [new GymPokemon('Espeon', 3500000, 58)], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Brains & Brawn', [new GymPokemon('Medicham', 3500000, 58), new GymPokemon('Gallade', 3500000, 60)], { weight: 1 }, 'Arman & Hugo'),
    new DungeonTrainer('Fairy Tale Girl', [new GymPokemon('Azumarill', 3500000, 56), new GymPokemon('Florges (Red)', 3500000, 56)], { weight: 1 }, 'Corinne'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Gourgeist', 3500000, 58)], { weight: 1 }, 'Raziah', '(kalos)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Slowbro', 3500000, 57), new GymPokemon('Altaria', 3500000, 57)], { weight: 1 }, 'Petra', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Talonflame', 3500000, 61)], { weight: 1 }, 'Inga', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Crobat', 3500000, 59)], { weight: 1 }, 'Ralf', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Banette', 3500000, 57), new GymPokemon('Leafeon', 3500000, 59)], { weight: 1 }, 'Gerard', '(male)'),
    new DungeonTrainer('Artist', [new GymPokemon('Smeargle', 3500000, 58)], { weight: 1 }, 'Vincent'),
    new DungeonTrainer('Hiker', [new GymPokemon('Torkoal', 3500000, 56), new GymPokemon('Golem', 3500000, 56)], { weight: 1 }, 'Corwin'),
], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 9003000, [
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Magcargo', 48593850, 57), new GymPokemon('Scizor', 49355840, 58)], { weight: 1 }, 'Michele', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Trevenant', 48329640, 57), new GymPokemon('Gigalith', 49355820, 59)], { weight: 1 }, 'Timeo', '(male)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Glaceon', 48395740, 57), new GymPokemon('Snorlax', 49265840, 59)], { weight: 1 }, 'Catrina', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Skarmory', 32395730, 55), new GymPokemon('Umbreon', 33254840, 55), new GymPokemon('Alakazam', 35385940, 57)], { weight: 1 }, 'Gilles', '(male)'),
], 750500, 21, 59);
//Unknown Dungeon? Contains Mewtwo.
// Alola
// TODO: Balancing of dungeon Pokemon HP & rewards.
dungeonList['Trainers\' School'] = new Dungeon('Trainers\' School', ['Alolan Meowth', 'Abra', 'Magnemite', 'Wingull', 'Mime Jr.', 'Zorua'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Alolan Grimer', 8000000, 70), new DungeonBossPokemon('Furfrou', 8000000, 70)], 96500, 201, 35);
dungeonList['Hau\'oli Cemetery'] = new Dungeon('Hau\'oli Cemetery', ['Zubat', 'Gastly', 'Misdreavus'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Drifloon', 8000000, 70), new DungeonBossPokemon('Litwick', 8000000, 70)], 96500, 201, 35);
dungeonList['Verdant Cavern'] = new Dungeon('Verdant Cavern', ['Zubat', 'Alolan Diglett', 'Noibat', 'Alolan Rattata', 'Yungoos'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Alolan Raticate', 8000000, 70), new DungeonBossPokemon('Gumshoos', 8000000, 70), new DungeonBossPokemon('Totem Alolan Raticate', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }), new DungeonBossPokemon('Totem Gumshoos', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) })], 96500, 201, 35);
dungeonList['Melemele Meadow'] = new Dungeon('Melemele Meadow', ['Caterpie', 'Metapod', 'Butterfree', 'Cottonee', 'Petilil', 'Cutiefly'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Flabébé (Red)', 8000000, 70), new DungeonBossPokemon('Oricorio (Pom-pom)', 8000000, 70)], 96500, 201, 35);
dungeonList['Seaward Cave'] = new Dungeon('Seaward Cave', ['Zubat', 'Psyduck', 'Seel', 'Magikarp', 'Smoochum'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Delibird', 8000000, 70), new DungeonBossPokemon('Barboach', 8000000, 70)], 96500, 201, 35);
dungeonList['Ten Carat Hill'] = new Dungeon('Ten Carat Hill', ['Zubat', 'Machop', 'Psyduck', 'Mawile', 'Roggenrola'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Spinda', 8000000, 70), new DungeonBossPokemon('Carbink', 8000000, 70), new DungeonBossPokemon('Rockruff', 8000000, 70)], 96500, 201, 35);
dungeonList['Ruins of Conflict'] = new Dungeon('Ruins of Conflict', ['Florges (Red)', 'Comfey', 'Dedenne', 'Ampharos', 'Electivire'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Jolteon', 8000000, 70), new DungeonBossPokemon('Sylveon', 8000000, 70), new DungeonBossPokemon('Tapu Koko', 8000000, 70)], 96500, 201, 35);
dungeonList['Pikachu Valley'] = new Dungeon('Pikachu Valley', ['Pikachu', 'Pichu'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Pikachu (Original cap)', 8000000, 70), new DungeonBossPokemon('Pikachu (Hoenn cap)', 8000000, 70), new DungeonBossPokemon('Pikachu (Sinnoh cap)', 8000000, 70), new DungeonBossPokemon('Pikachu (Unova cap)', 8000000, 70), new DungeonBossPokemon('Pikachu (Kalos cap)', 8000000, 70), new DungeonBossPokemon('Pikachu (Alola cap)', 8000000, 70), new DungeonBossPokemon('Pikachu (Partner cap)', 8000000, 70)], 96500, 201, 35);
dungeonList['Paniola Ranch'] = new Dungeon('Paniola Ranch', ['Mareep', 'Lillipup', 'Mudbray'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Tauros', 8000000, 70), new DungeonBossPokemon('Miltank', 8000000, 70)], 96500, 201, 35);
dungeonList['Brooklet Hill'] = new Dungeon('Brooklet Hill', ['Paras', 'Psyduck', 'Poliwag', 'Tentacool', 'Goldeen', 'Magikarp', 'Wingull', 'Surskit', 'Feebas', 'Finneon', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Alomomola', 'Dewpider'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Wishiwashi (School)', 8000000, 70), new DungeonBossPokemon('Araquanid', 8000000, 70), new DungeonBossPokemon('Totem Wishiwashi (School)', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }), new DungeonBossPokemon('Totem Araquanid', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) })], 96500, 201, 35);
dungeonList['Wela Volcano Park'] = new Dungeon('Wela Volcano Park', ['Cubone', 'Kangaskhan', 'Magby', 'Magmar', 'Fletchling', 'Salandit'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Alolan Marowak', 8000000, 70), new DungeonBossPokemon('Salazzle', 8000000, 70), new DungeonBossPokemon('Totem Alolan Marowak', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }), new DungeonBossPokemon('Totem Salazzle', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) })], 96500, 201, 35);
dungeonList['Lush Jungle'] = new Dungeon('Lush Jungle', ['Metapod', 'Paras', 'Pinsir', 'Hoothoot', 'Bonsly', 'Trumbeak', 'Fomantis', 'Steenee', 'Comfey', 'Oranguru', 'Passimian'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Lurantis', 8000000, 70), new DungeonBossPokemon('Totem Lurantis', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) })], 96500, 201, 35);
dungeonList['Diglett\'s Tunnel'] = new Dungeon('Diglett\'s Tunnel', ['Zubat', 'Alolan Diglett'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Larvitar', 8000000, 70)], 96500, 201, 35);
dungeonList['Memorial Hill'] = new Dungeon('Memorial Hill', ['Zubat', 'Gastly'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Phantump', 8000000, 70)], 96500, 201, 35);
dungeonList['Ruins of Life'] = new Dungeon('Ruins of Life', ['Florges (Red)', 'Comfey', 'Gardevoir', 'Chimecho', 'Musharna'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Espeon', 8000000, 70), new DungeonBossPokemon('Sylveon', 8000000, 70), new DungeonBossPokemon('Tapu Lele', 8000000, 70)], 96500, 201, 35);
dungeonList['Malie Garden'] = new Dungeon('Malie Garden', ['Alolan Meowth', 'Psyduck', 'Poliwhirl', 'Goldeen', 'Magikarp', 'Gyarados', 'Ledian', 'Ariados', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Cottonee', 'Petilil'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Masquerain', 8000000, 70), new DungeonBossPokemon('Araquanid', 8000000, 70)], 96500, 201, 35);
dungeonList['Hokulani Observatory'] = new Dungeon('Hokulani Observatory', ['Grubbin', 'Charjabug', 'Elekid', 'Electabuzz', 'Skarmory', 'Dedenne'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Vikavolt', 8000000, 70), new DungeonBossPokemon('Togedemaru', 8000000, 70), new DungeonBossPokemon('Totem Vikavolt', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }), new DungeonBossPokemon('Totem Togedemaru', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) })], 96500, 201, 35);
dungeonList['Thrifty Megamart'] = new Dungeon('Thrifty Megamart', ['Golbat', 'Gastly', 'Haunter', 'Gengar', 'Shuppet', 'Banette', 'Jellicent', 'Klefki'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Mimikyu', 8000000, 70), new DungeonBossPokemon('Totem Mimikyu', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) })], 96500, 201, 35);
dungeonList['Ula\'ula Meadow'] = new Dungeon('Ula\'ula Meadow', ['Ledian', 'Ariados', 'Cottonee', 'Petilil', 'Ribombee'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Floette (Red)', 8000000, 70), new DungeonBossPokemon('Oricorio (Baile)', 8000000, 70)], 96500, 201, 35);
dungeonList['Po Town'] = new Dungeon('Po Town', ['Alolan Rattata', 'Alolan Raticate', 'Ekans', 'Drowzee', 'Golbat', 'Alolan Grimer', 'Spinarak', 'Houndour', 'Trubbish', 'Scraggy', 'Fomantis', 'Mareanie'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Pawniard', 8000000, 70), new DungeonBossPokemon('Masquerain', 8000000, 70), new DungeonBossPokemon('Pinsir', 8000000, 70), new DungeonBossPokemon('Haunter', 8000000, 70)], 96500, 201, 35);
dungeonList['Mount Lanikala'] = new Dungeon('Mount Lanikala', ['Alolan Raticate', 'Alolan Sandshrew', 'Alolan Vulpix', 'Sneasel', 'Snorunt', 'Gumshoos'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Absol', 8000000, 70), new DungeonBossPokemon('Glalie', 8000000, 70), new DungeonBossPokemon('Vanilluxe', 8000000, 70), new DungeonBossPokemon('Necrozma', 8000000, 70)], 96500, 201, 35);
dungeonList['Ruins of Abundance'] = new Dungeon('Ruins of Abundance', ['Florges (Red)', 'Comfey', 'Whimsicott', 'Bellossom', 'Lilligant'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Leafeon', 8000000, 70), new DungeonBossPokemon('Sylveon', 8000000, 70), new DungeonBossPokemon('Tapu Bulu', 8000000, 70)], 96500, 201, 35);
dungeonList['Exeggutor Island Hill'] = new Dungeon('Exeggutor Island Hill', ['Exeggcute', 'Pelipper', 'Gastrodon (east)'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Pinsir', 8000000, 70), new DungeonBossPokemon('Tropius', 8000000, 70)], 96500, 201, 35);
dungeonList['Vast Poni Canyon'] = new Dungeon('Vast Poni Canyon', [{ pokemon: 'Golbat', options: { weight: 2 } }, 'Alolan Dugtrio', 'Machoke', 'Magikarp', 'Skarmory', 'Barboach', 'Corphish', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Boldore', 'Mienfoo', 'Carbink', 'Lycanroc (Midday)', 'Lycanroc (Midnight)', 'Jangmo-o', 'Hakamo-o'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Kommo-o', 8000000, 70), new DungeonBossPokemon('Totem Kommo-o', 8000000, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) })], 96500, 201, 35);
dungeonList['Nebby'] = new Dungeon('Nebby', ['Clefable', 'Delcatty', 'Sunflora', 'Heliolisk', 'Lunatone', 'Solrock'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Lunala', 8000000, 70), new DungeonBossPokemon('Solgaleo', 8000000, 70)], 96500, 201, 35);
dungeonList['Ruins of Hope'] = new Dungeon('Ruins of Hope', ['Florges (Red)', 'Comfey', 'Azumarill', 'Politoed', 'Gorebyss'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Vaporeon', 8000000, 70), new DungeonBossPokemon('Sylveon', 8000000, 70), new DungeonBossPokemon('Tapu Fini', 8000000, 70)], 96500, 201, 35);
dungeonList['Poni Meadow'] = new Dungeon('Poni Meadow', ['Magikarp', 'Dratini', 'Cottonee', 'Petilil', 'Ribombee', 'Misdreavus', 'Barboach'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Oricorio (Sensu)', 8000000, 70), new DungeonBossPokemon('Floette (Red)', 8000000, 70)], 96500, 201, 35);
dungeonList['Resolution Cave'] = new Dungeon('Resolution Cave', ['Golbat', 'Alolan Dugtrio', 'Druddigon'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Crobat', 8000000, 70), new DungeonBossPokemon('Noivern', 8000000, 70), new DungeonBossPokemon('Guzzlord', 8000000, 70)], 96500, 201, 35);
//Galar Dungeons
dungeonList['Slumbering Weald'] = new Dungeon('Slumbering Weald', ['Hoothoot', 'Grubbin', 'Skwovet', 'Rookidee'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Blipbug', 8000000, 70)], 96500, 201, 35);
dungeonList['Inner Slumbering Weald'] = new Dungeon('Inner Slumbering Weald', ['Galarian Weezing', 'Corviknight', 'Galarian Stunfisk', 'Munna', 'Butterfree', 'Orbeetle'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Zamazenta (Battle Hero)', 8000000, 70), new DungeonBossPokemon('Zacian (Battle Hero)', 8000000, 70)], 96500, 201, 35);
dungeonList['Galar Mine'] = new Dungeon('Galar Mine', ['Diglett', 'Roggenrola', 'Woobat', 'Drilbur', 'Timburr', 'Rolycoly'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Carkol', 8000000, 70), new DungeonBossPokemon('Woobat', 8000000, 70)], 96500, 201, 35);
dungeonList['Galar Mine No. 2'] = new Dungeon('Galar Mine No. 2', ['Shuckle', 'Shellos (east)', 'Croagunk', 'Scraggy', 'Binacle', 'Noibat', 'Chewtle'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Galarian Stunfisk', 8000000, 70), new DungeonBossPokemon('Gastrodon (east)', 8000000, 70), new DungeonBossPokemon('Drednaw', 8000000, 70)], 96500, 201, 35);
dungeonList['Rose Tower'] = new Dungeon('Rose Tower', ['Cufant', 'Bronzong', 'Klang', 'Mawile', 'Steelix', 'Galarian Stunfisk'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Froslass', 8000000, 70), new DungeonBossPokemon('Tsareena', 8000000, 70), new DungeonBossPokemon('Salazzle', 8000000, 70), new DungeonBossPokemon('Milotic', 8000000, 70), new DungeonBossPokemon('Garbodor', 8000000, 70)], 96500, 201, 35);
dungeonList['Glimwood Tangle'] = new Dungeon('Glimwood Tangle', ['Galarian Ponyta', 'Spritzee', 'Swirlix', 'Phantump', 'Oranguru', 'Passimian', 'Sinistea'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Hattrem', 8000000, 70), new DungeonBossPokemon('Morgrem', 8000000, 70), new DungeonBossPokemon('Indeedee', 8000000, 70)], 96500, 201, 35);
dungeonList['Watchtower Ruins'] = new Dungeon('Watchtower Ruins', ['Gastly', 'Noibat', 'Purrloin', 'Duskull', 'Woobat', 'Haunter', 'Shuckle', 'Ralts', 'Golett', 'Electrike', 'Snorunt'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Corviknight', 8000000, 70), new DungeonBossPokemon('Golurk', 8000000, 70), new DungeonBossPokemon('Drifblim', 8000000, 70), new DungeonBossPokemon('Glalie', 8000000, 70)], 96500, 201, 35);
dungeonList['Lake of Outrage'] = new Dungeon('Lake of Outrage', ['Stonjourner', 'Cramorant', 'Galarian Mr. Mime', 'Morpeko', 'Coalossal', 'Sandaconda', 'Galarian Stunfisk', 'Copperajah', 'Indeedee', 'Obstagoon', 'Grimmsnarl'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Hatterene', 8000000, 70), new DungeonBossPokemon('Perrserker', 8000000, 70), new DungeonBossPokemon('Barraskewda', 8000000, 70), new DungeonBossPokemon('Drakloak', 8000000, 70)], 96500, 201, 35);
dungeonList['Dusty Bowl'] = new Dungeon('Dusty Bowl', ['Gurdurr', 'Ferrothorn', 'Klang', 'Meowstic', 'Barbaracle', 'Applin', 'Hattrem', 'Qwilfish', 'Hitmonlee', 'Hitmonchan', 'Koffing'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Gigalith', 8000000, 70), new DungeonBossPokemon('Flygon', 8000000, 70), new DungeonBossPokemon('Sigilyph', 8000000, 70), new DungeonBossPokemon('Tyranitar', 8000000, 70)], 96500, 201, 35);
//Isle of Armor
dungeonList['Master Dojo Trial'] = new Dungeon('Master Dojo Trial', ['Mienfoo', 'Shinx', 'Kadabra', 'Whirlipede'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Kubfu', 8000000, 70)], 96500, 201, 35);
dungeonList['Tower of Darkness'] = new Dungeon('Tower of Darkness', ['Zorua', 'Scraggy', 'Inkay', 'Krokorok'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Kubfu', 8000000, 70)], 96500, 201, 35);
dungeonList['Tower of Water'] = new Dungeon('Tower of Water', ['Psyduck', 'Krabby', 'Marill', 'Poliwhirl'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Kubfu', 8000000, 70)], 96500, 201, 35);
//Crown Tundra
dungeonList['Split-Decision Ruins'] = new Dungeon('Split-Decision Ruins', ['Golurk', 'Electivire', 'Dragapult', 'Araquanid', 'Cryogonal', 'Bronzong', 'Claydol', 'Absol', 'Galvantula', 'Audino'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Regidrago', 8000000, 70), new DungeonBossPokemon('Regieleki', 8000000, 70)], 96500, 201, 35);
dungeonList['Dyna Tree Hill'] = new Dungeon('Dyna Tree Hill', ['Magmar', 'Absol', 'Beartic', 'Cryogonal', 'Dubwool', 'Glalie', 'Clefable'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Greedent', 8000000, 70)], 96500, 201, 35);
dungeonList['Crown Shrine'] = new Dungeon('Crown Shrine', ['Snom', 'Hatenna', 'Solosis', 'Jynx', 'Piloswine', 'Dubwool'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Sneasel', 8000000, 70),
    new DungeonBossPokemon('Calyrex', 8000000, 70, {
        requirement: new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap.Spectrier), new ObtainedPokemonRequirement(pokemonMap.Glastrier)]),
    }),
], 96500, 201, 35);
/// <reference path="../../declarations/GameHelper.d.ts" />
class DungeonBattle extends Battle {
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        const enemyPokemon = this.enemyPokemon();
        // Handle Rrainer Pokemon defeat
        if (this.trainer()) {
            this.defeatTrainerPokemon();
            return;
        }
        DungeonRunner.fighting(false);
        if (DungeonRunner.fightingBoss()) {
            DungeonRunner.fightingBoss(false);
            DungeonRunner.defeatedBoss(true);
        }
        enemyPokemon.defeat();
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        // Clearing Dungeon tile
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        // Attempting to catch Pokemon
        const isShiny = enemyPokemon.shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon);
                if (DungeonRunner.defeatedBoss()) {
                    DungeonRunner.dungeonWon();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else if (DungeonRunner.defeatedBoss()) {
            DungeonRunner.dungeonWon();
        }
    }
    /**
     * Handles defeating a trainer Pokemon
     */
    static defeatTrainerPokemon() {
        this.enemyPokemon().defeat(true);
        GameHelper.incrementObservable(this.trainerPokemonIndex);
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        // No Pokemon left, trainer defeated
        if (this.trainerPokemonIndex() >= this.trainer().team.length) {
            if (this.trainer().options.reward) {
                // Custom reward amount on defeat
                App.game.wallet.addAmount(this.trainer().options.reward);
            }
            else {
                // Reward back 50% or 100% (boss) of the total dungeon DT cost as money
                const money = Math.round(DungeonRunner.dungeon.tokenCost * (DungeonRunner.fightingBoss() ? 1 : 0.5));
                App.game.wallet.gainMoney(money);
            }
            DungeonRunner.fighting(false);
            this.trainer(null);
            this.trainerPokemonIndex(0);
            // Clearing Dungeon tile
            DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
            DungeonRunner.map.currentTile().calculateCssClass();
            // Update boss
            if (DungeonRunner.fightingBoss()) {
                DungeonRunner.fightingBoss(false);
                DungeonRunner.defeatedBoss(true);
                DungeonRunner.dungeonWon();
            }
            // Generate next trainer Pokemon
        }
        else {
            this.generateTrainerPokemon();
        }
    }
    static generateNewEnemy() {
        this.catching(false);
        this.counter = 0;
        // Finding enemy from enemyList
        const enemy = GameHelper.fromWeightedArray(DungeonRunner.dungeon.availableMinions(), DungeonRunner.dungeon.weightList);
        // Pokemon
        if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
            const pokemon = (typeof enemy === 'string') ? enemy : enemy.pokemon;
            const enemyPokemon = PokemonFactory.generateDungeonPokemon(pokemon, DungeonRunner.chestsOpened, DungeonRunner.dungeon.baseHealth, DungeonRunner.dungeon.level);
            this.enemyPokemon(enemyPokemon);
            GameHelper.incrementObservable(App.game.statistics.pokemonEncountered[enemyPokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalPokemonEncountered);
            if (enemyPokemon.shiny) {
                GameHelper.incrementObservable(App.game.statistics.shinyPokemonEncountered[enemyPokemon.id]);
                GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonEncountered);
                App.game.logbook.newLog(LogBookTypes.SHINY, `You encountered a Shiny ${this.enemyPokemon().name} at ${player.town().dungeon.name}.`);
            }
            else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
                App.game.logbook.newLog(LogBookTypes.NEW, `You encountered a wild ${this.enemyPokemon().name} at ${player.town().dungeon.name}.`);
            }
            // Trainer
        }
        else {
            const trainer = enemy;
            this.trainer(trainer);
            this.trainerPokemonIndex(0);
            this.generateTrainerPokemon();
        }
        DungeonRunner.fighting(true);
    }
    /**
     * Handles generating the enemy Trainer Pokemon
     */
    static generateTrainerPokemon() {
        this.counter = 0;
        const pokemon = this.trainer().team[this.trainerPokemonIndex()];
        const baseHealth = DungeonRunner.fightingBoss() ? pokemon.maxHealth : DungeonRunner.dungeon.baseHealth;
        const level = DungeonRunner.fightingBoss() ? pokemon.level : DungeonRunner.dungeon.level;
        const enemyPokemon = PokemonFactory.generateDungeonTrainerPokemon(pokemon, DungeonRunner.chestsOpened, baseHealth, level);
        this.enemyPokemon(enemyPokemon);
    }
    static generateNewBoss() {
        DungeonRunner.fighting(true);
        this.catching(false);
        this.counter = 0;
        // Finding boss from bossList
        const enemy = GameHelper.fromWeightedArray(DungeonRunner.dungeon.availableBosses(), DungeonRunner.dungeon.bossWeightList);
        // Pokemon
        if (enemy instanceof DungeonBossPokemon) {
            this.enemyPokemon(PokemonFactory.generateDungeonBoss(enemy, DungeonRunner.chestsOpened));
            GameHelper.incrementObservable(App.game.statistics.pokemonEncountered[this.enemyPokemon().id]);
            GameHelper.incrementObservable(App.game.statistics.totalPokemonEncountered);
            if (this.enemyPokemon().shiny) {
                GameHelper.incrementObservable(App.game.statistics.shinyPokemonEncountered[this.enemyPokemon().id]);
                GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonEncountered);
                App.game.logbook.newLog(LogBookTypes.SHINY, `You encountered a Shiny ${this.enemyPokemon().name} at ${player.town().dungeon.name}.`);
            }
            else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
                App.game.logbook.newLog(LogBookTypes.NEW, `You encountered a wild ${this.enemyPokemon().name} at ${player.town().dungeon.name}.`);
            }
        }
        else {
            this.trainer(enemy);
            this.trainerPokemonIndex(0);
            this.generateTrainerPokemon();
        }
    }
}
DungeonBattle.trainer = ko.observable(null);
DungeonBattle.trainerPokemonIndex = ko.observable(0);
DungeonBattle.remainingTrainerPokemon = ko.pureComputed(() => {
    if (!DungeonBattle.trainer()) {
        return 0;
    }
    return DungeonBattle.trainer().team.length - DungeonBattle.trainerPokemonIndex();
});
DungeonBattle.defeatedTrainerPokemon = ko.pureComputed(() => {
    if (!DungeonBattle.trainer()) {
        return 0;
    }
    return DungeonBattle.trainerPokemonIndex();
});
class DungeonMap {
    constructor(size) {
        this.size = size;
        this.board = ko.observable(this.generateMap());
        this.playerPosition = ko.observable(new Point(Math.floor(size / 2), size - 1));
        this.playerMoved = ko.observable(false);
        // Move the boss if it spawns on the player.
        if (this.currentTile().type() == GameConstants.DungeonTile.boss) {
            this.currentTile().type(GameConstants.DungeonTile.entrance);
            const newX = GameConstants.randomIntBetween(0, size - 2);
            const newY = GameConstants.randomIntBetween(0, size - 2);
            this.board()[newY][newX].type(GameConstants.DungeonTile.boss);
            this.board()[newY][newX].calculateCssClass();
        }
        this.currentTile().isVisible = true;
        this.currentTile().type(GameConstants.DungeonTile.entrance);
        this.currentTile().hasPlayer = true;
        this.currentTile().calculateCssClass();
    }
    moveToCoordinates(x, y) {
        if (this.moveToTile(new Point(x, y))) {
            this.playerMoved(true);
        }
    }
    moveUp() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y - 1);
    }
    moveRight() {
        this.moveToCoordinates(this.playerPosition().x + 1, this.playerPosition().y);
    }
    moveDown() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y + 1);
    }
    moveLeft() {
        this.moveToCoordinates(this.playerPosition().x - 1, this.playerPosition().y);
    }
    moveToTile(point) {
        if (this.hasAccesToTile(point)) {
            this.currentTile().hasPlayer = false;
            this.currentTile().calculateCssClass();
            this.playerPosition(point);
            this.currentTile().hasPlayer = true;
            this.currentTile().isVisible = true;
            this.currentTile().calculateCssClass();
            if (this.currentTile().type() == GameConstants.DungeonTile.enemy) {
                DungeonBattle.generateNewEnemy();
            }
            if (this.currentTile().type() == GameConstants.DungeonTile.chest && Settings.getSetting('autoChest').value) {
                DungeonRunner.openChest();
            }
            return true;
        }
        return false;
    }
    showChestTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                if (this.board()[i][j].type() == GameConstants.DungeonTile.chest) {
                    this.board()[i][j].isVisible = true;
                    this.board()[i][j].calculateCssClass();
                }
            }
        }
    }
    showAllTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                this.board()[i][j].isVisible = true;
                this.board()[i][j].calculateCssClass();
            }
        }
    }
    currentTile() {
        return this.board()[this.playerPosition().y][this.playerPosition().x];
    }
    hasAccesToTile(point) {
        if (DungeonRunner.fighting() || DungeonBattle.catching()) {
            return false;
        }
        //If any of the adjacent Tiles is visited, it's a valid Tile.
        if (point.x < 0 || point.x >= this.size || point.y < 0 || point.y >= this.size) {
            return false;
        }
        if (point.y < this.size - 1 && this.board()[point.y + 1][point.x].isVisible) {
            return true;
        }
        if (point.y > 0 && this.board()[point.y - 1][point.x].isVisible) {
            return true;
        }
        if (point.x < this.size - 1 && this.board()[point.y][point.x + 1].isVisible) {
            return true;
        }
        if (point.x > 0 && this.board()[point.y][point.x - 1].isVisible) {
            return true;
        }
        return false;
    }
    generateMap() {
        // Fill mapList with required Tiles
        const mapList = [];
        // Boss
        mapList.push(new DungeonTile(GameConstants.DungeonTile.boss));
        // Chests
        for (let i = 0; i < this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.chest));
        }
        // Enemy Pokemon
        for (let i = 0; i < this.size * 2 + 3; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.enemy));
        }
        // Fill with empty tiles
        for (let i = mapList.length; i < this.size * this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.empty));
        }
        // Shuffle the tiles randomly
        this.shuffle(mapList);
        while (mapList[mapList.length - Math.floor(this.size / 2) - 1].type() != GameConstants.DungeonTile.empty) {
            this.shuffle(mapList);
        }
        // Create a 2d array
        const map = [];
        while (mapList.length) {
            map.push(mapList.splice(0, this.size));
        }
        return map;
    }
    /**
     * Shuffles array in place.
     * @param {Array} a items The array containing the items.
     */
    shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Math.floor(Math.random() * i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
class DungeonRunner {
    static initializeDungeon(dungeon) {
        if (!dungeon.isUnlocked()) {
            return false;
        }
        DungeonRunner.dungeon = dungeon;
        if (!DungeonRunner.hasEnoughTokens()) {
            Notifier.notify({
                message: 'You don\'t have enough dungeon tokens',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        App.game.wallet.loseAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
        DungeonRunner.timeLeft(GameConstants.DUNGEON_TIME);
        DungeonRunner.map = new DungeonMap(GameConstants.DUNGEON_SIZE + player.region);
        DungeonRunner.chestsOpened = 0;
        DungeonRunner.currentTileType = ko.pureComputed(() => {
            return DungeonRunner.map.currentTile().type;
        });
        DungeonRunner.fightingBoss(false);
        DungeonRunner.defeatedBoss(false);
        DungeonRunner.dungeonFinished(false);
        if (App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]() > 100) {
            DungeonRunner.map.showAllTiles();
        }
        App.game.gameState = GameConstants.GameState.dungeon;
    }
    static tick() {
        if (this.timeLeft() <= 0) {
            if (this.defeatedBoss()) {
                this.dungeonWon();
            }
            else {
                this.dungeonLost();
            }
        }
        this.timeLeft(this.timeLeft() - GameConstants.DUNGEON_TICK);
        this.timeLeftPercentage(Math.floor((this.timeLeft() / GameConstants.DUNGEON_TIME) * 100));
    }
    /**
     * Handles the click event in the dungeon view
     */
    static handleClick() {
        if (DungeonRunner.fighting() && !DungeonBattle.catching()) {
            DungeonBattle.clickAttack();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.entrance) {
            DungeonRunner.dungeonLeave();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.chest) {
            DungeonRunner.openChest();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.boss && !DungeonRunner.fightingBoss()) {
            DungeonRunner.startBossFight();
        }
    }
    static openChest() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.chest) {
            return;
        }
        DungeonRunner.chestsOpened++;
        const random = GameConstants.randomIntBetween(0, DungeonRunner.dungeon.itemList.length - 1);
        const input = GameConstants.BattleItemType[DungeonRunner.dungeon.itemList[random]];
        let amount = 1;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Item_magnet)()) {
            if (Math.random() < 0.5) {
                amount += 1;
            }
        }
        Notifier.notify({
            message: `Found ${amount} ${GameConstants.humanifyString(input)} in a dungeon chest`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.dungeon_item_found,
        });
        player.gainItem(input, amount);
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        if (DungeonRunner.chestsOpened == GameConstants.DUNGEON_CHEST_SHOW) {
            DungeonRunner.map.showChestTiles();
        }
        if (DungeonRunner.chestsOpened == GameConstants.DUNGEON_MAP_SHOW) {
            DungeonRunner.map.showAllTiles();
        }
    }
    static startBossFight() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.boss || DungeonRunner.fightingBoss()) {
            return;
        }
        DungeonRunner.fightingBoss(true);
        DungeonBattle.generateNewBoss();
    }
    static dungeonLeave() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.entrance || DungeonRunner.dungeonFinished() || !DungeonRunner.map.playerMoved()) {
            return;
        }
        DungeonRunner.dungeonFinished(true);
        DungeonRunner.fighting(false);
        DungeonRunner.fightingBoss(false);
        MapHelper.moveToTown(DungeonRunner.dungeon.name);
    }
    static dungeonLost() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            DungeonRunner.fighting(false);
            DungeonRunner.fightingBoss(false);
            MapHelper.moveToTown(DungeonRunner.dungeon.name);
            Notifier.notify({
                message: 'You could not complete the dungeon in time',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    static dungeonWon() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            GameHelper.incrementObservable(App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]);
            MapHelper.moveToTown(DungeonRunner.dungeon.name);
            // TODO award loot with a special screen
            Notifier.notify({
                message: 'You have successfully completed the dungeon',
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    static dungeonCompleted(dungeon, includeShiny) {
        const possiblePokemon = dungeon.allPokemon;
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static hasEnoughTokens() {
        return App.game.wallet.hasAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
    }
}
DungeonRunner.timeLeft = ko.observable(GameConstants.DUNGEON_TIME);
DungeonRunner.timeLeftPercentage = ko.observable(100);
DungeonRunner.fighting = ko.observable(false);
DungeonRunner.fightingBoss = ko.observable(false);
DungeonRunner.defeatedBoss = ko.observable(false);
DungeonRunner.dungeonFinished = ko.observable(false);
DungeonRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(DungeonRunner.timeLeft() / 10) / 10).toFixed(1);
});
class DungeonTile {
    constructor(type) {
        this.isVisible = false;
        this.hasPlayer = false;
        this.type = ko.observable(type);
        this.cssClass = ko.observable('');
        this.calculateCssClass();
    }
    calculateCssClass() {
        if (!this.isVisible) {
            this.cssClass('tile tile-invisible');
            return;
        }
        if (this.hasPlayer) {
            this.cssClass('tile tile-player');
            return;
        }
        this.cssClass(`tile tile-${GameConstants.DungeonTile[this.type()]}`);
    }
}
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
class EffectEngineRunner {
    static initialize(multiplier) {
        GameHelper.enumStrings(GameConstants.BattleItemType).forEach((itemName) => {
            const item = ItemList[itemName];
            if (item.multiplierType) {
                multiplier.addBonus(item.multiplierType, () => this.isActive(itemName)() ? item.multiplyBy : 1);
            }
        });
    }
    static tick() {
        this.counter = 0;
        const timeToReduce = 1;
        for (const itemName in GameConstants.BattleItemType) {
            const timeRemaining = player.effectList[itemName]();
            if (timeRemaining > 0) {
                player.effectList[itemName](Math.max(0, timeRemaining - timeToReduce));
                this.updateFormattedTimeLeft(itemName);
            }
            if (player.effectList[itemName]() == 5) {
                Notifier.notify({
                    message: `The ${GameConstants.humanifyString(itemName)}s effect is about to wear off!`,
                    type: NotificationConstants.NotificationOption.warning,
                    sound: NotificationConstants.NotificationSound.battle_item_timer,
                    setting: NotificationConstants.NotificationSetting.battle_item_timer,
                });
            }
        }
    }
    static incrementMultiplier() {
        this.multIndex((this.multIndex() + 1) % this.multipliers.length);
    }
    static decrementMultiplier() {
        this.multIndex((this.multIndex() + this.multipliers.length - 1) % this.multipliers.length);
    }
    static getEffect(itemName) {
        if (!player) {
            return 0;
        }
        return player.effectList[itemName]();
    }
    static addEffect(itemName, amount) {
        player.effectList[itemName](Math.max(0, player.effectList[itemName]() + (GameConstants.ITEM_USE_TIME * amount)));
        this.updateFormattedTimeLeft(itemName);
    }
    static updateFormattedTimeLeft(itemName) {
        const times = GameConstants.formatTime(player.effectList[itemName]()).split(':');
        if (+times[0] > 99) {
            return player.effectTimer[itemName]('99h+');
        }
        else if (+times[0] > 0) {
            return player.effectTimer[itemName](`${+times[0]}h`);
        }
        times.shift();
        player.effectTimer[itemName](times.join(':'));
    }
    static getDungeonTokenMultiplier() {
        return this.isActive(GameConstants.BattleItemType.Token_collector)() ? 1.5 : 1;
    }
    static isActive(itemName) {
        return ko.pureComputed(() => {
            if (!player) {
                return false;
            }
            return !!player.effectList[itemName]();
        });
    }
}
EffectEngineRunner.counter = 0;
EffectEngineRunner.multipliers = ['×1', '×10', '×100', '×1000', 'All'];
EffectEngineRunner.multIndex = ko.observable(0);
EffectEngineRunner.amountToUse = ko.pureComputed(() => {
    // Either the digits specified, or All (Infinity)
    return Number(EffectEngineRunner.multipliers[EffectEngineRunner.multIndex()].replace(/\D/g, '')) || Infinity;
});
///<reference path="./BerryType.ts"/>
class Berry {
    constructor(type, growthTime, harvestAmount, replantRate, farmValue, exp, flavors, color, description, aura, wander) {
        this.type = type;
        this.growthTime = growthTime;
        this.harvestAmount = harvestAmount;
        this.replantRate = replantRate;
        this.farmValue = farmValue;
        this.exp = exp;
        this.color = color;
        this.description = description;
        this.aura = aura;
        this.flavors = [];
        for (let i = 0; i < 5; i++) {
            this.flavors.push({ type: i, value: flavors[i] });
        }
        this.wander = wander ? Berry.baseWander.concat(wander) : Berry.baseWander;
    }
    get descriptionHTML() {
        return this.description.join('<br/>');
    }
}
Berry.baseWander = [
    'Tangela', 'Scyther',
    'Pineco', 'Heracross',
    'Volbeat', 'Illumise',
    'Burmy (plant)', 'Combee', 'Cherubi', 'Munchlax',
    'Sewaddle', 'Karrablast',
];
var BerryColor;
(function (BerryColor) {
    BerryColor[BerryColor["Red"] = 0] = "Red";
    BerryColor[BerryColor["Purple"] = 1] = "Purple";
    BerryColor[BerryColor["Pink"] = 2] = "Pink";
    BerryColor[BerryColor["Green"] = 3] = "Green";
    BerryColor[BerryColor["Yellow"] = 4] = "Yellow";
    BerryColor[BerryColor["Blue"] = 5] = "Blue";
})(BerryColor || (BerryColor = {}));
class BerryDeal {
    constructor(berry, berryAmount, item, itemAmount) {
        this.berries = [];
        berry.forEach((berry, idx) => {
            this.berries.push({ berryType: berry, amount: berryAmount[idx] });
        });
        this.item = { itemType: item, amount: itemAmount };
    }
    static randomBerry(berryList) {
        return berryList[Math.floor(berryList.length * SeededRand.next())];
    }
    static randomBattleItem() {
        const battleItem = SeededRand.fromArray(GameHelper.enumStrings(GameConstants.BattleItemType));
        return ItemList[battleItem];
    }
    static randomEvoItem() {
        const evoItem = SeededRand.fromArray(GameHelper.enumStrings(GameConstants.StoneType).filter(name => name != 'None'));
        return ItemList[evoItem];
    }
    static randomUndergroundItem() {
        return SeededRand.fromArray(UndergroundItem.list);
    }
    static randomPokeballDeal() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        return SeededRand.fromArray([
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Fastball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Quickball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Timerball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Duskball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
                this.randomBerry(thirdGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
                SeededRand.intBetween(5, 10),
            ], ItemList.Luxuryball, 1),
        ]);
    }
    static getDeals(region) {
        return BerryDeal.list[region];
    }
    static generateDeals(date) {
        SeededRand.seedWithDate(date);
        const berryMasterRegions = [GameConstants.Region.johto, GameConstants.Region.hoenn, GameConstants.Region.sinnoh];
        // Removing old deals
        for (const region of berryMasterRegions) {
            if (!BerryDeal.list[region]) {
                BerryDeal.list[region] = ko.observableArray();
            }
            else {
                BerryDeal.list[region].removeAll();
            }
        }
        BerryDeal.list[GameConstants.Region.johto].push(...this.generateJohtoDeals());
        BerryDeal.list[GameConstants.Region.hoenn].push(...this.generateHoennDeals());
        BerryDeal.list[GameConstants.Region.sinnoh].push(...this.generateSinnohDeals());
    }
    static generateJohtoDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const list = [];
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
        ], [
            SeededRand.intBetween(30, 70),
            SeededRand.intBetween(10, 30),
        ], this.randomBattleItem(), SeededRand.intBetween(3, 7)));
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
            this.randomBerry(thirdGen),
        ], [
            SeededRand.intBetween(70, 130),
            SeededRand.intBetween(30, 70),
            SeededRand.intBetween(10, 30),
        ], this.randomEvoItem(), SeededRand.intBetween(1, 3)));
        list.push(this.randomPokeballDeal());
        return list;
    }
    static generateHoennDeals() {
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const temp = [];
        const maxTries = 30;
        let i = 0;
        while (i < maxTries && temp.length < 3) {
            const deal = new BerryDeal([
                this.randomBerry(thirdGen),
                this.randomBerry(fourthGen),
            ], [
                SeededRand.intBetween(30, 70),
                SeededRand.intBetween(10, 30),
            ], this.randomUndergroundItem(), SeededRand.intBetween(1, 3));
            if (temp.every(madeDeal => madeDeal.item.name !== deal.item.itemType.name)) {
                temp.push(deal);
            }
            i++;
        }
        return temp;
    }
    static generateSinnohDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const fifthGen = Farming.getGeneration(4);
        const list = [];
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
            this.randomBerry(thirdGen),
            this.randomBerry(fourthGen),
            this.randomBerry(fifthGen),
        ], [
            SeededRand.intBetween(500, 1000),
            SeededRand.intBetween(200, 500),
            SeededRand.intBetween(100, 200),
            SeededRand.intBetween(50, 100),
            SeededRand.intBetween(10, 50),
        ], ItemList['Masterball'], 1));
        list.push(new BerryDeal([
            this.randomBerry(fourthGen),
            this.randomBerry(fifthGen),
        ], [
            SeededRand.intBetween(50, 100),
            SeededRand.intBetween(10, 50),
        ], ItemList['Protein'], 1));
        return [SeededRand.fromArray(list)];
    }
    static canUse(region, i) {
        const deal = BerryDeal.list[region].peek()[i];
        return deal.berries.every((value) => App.game.farming.berryList[value.berryType]() >= value.amount);
    }
    static use(region, i, tradeTimes = 1) {
        const deal = BerryDeal.list[region].peek()[i];
        if (BerryDeal.canUse(region, i)) {
            const trades = deal.berries.map(berry => {
                const amt = App.game.farming.berryList[berry.berryType]();
                const maxTrades = Math.floor(amt / berry.amount);
                return maxTrades;
            });
            const maxTrades = trades.reduce((a, b) => Math.min(a, b), tradeTimes);
            deal.berries.forEach((value) => GameHelper.incrementObservable(App.game.farming.berryList[value.berryType], -value.amount * maxTrades));
            if (deal.item.itemType instanceof UndergroundItem) {
                Underground.gainMineItem(deal.item.itemType.id, deal.item.amount * maxTrades);
            }
            else {
                deal.item.itemType.gain(deal.item.amount * maxTrades);
            }
            GameHelper.incrementObservable(App.game.statistics.berryDailyDealTrades);
        }
    }
}
BerryDeal.list = {};
var MulchType;
(function (MulchType) {
    MulchType[MulchType["None"] = -1] = "None";
    MulchType[MulchType["Boost_Mulch"] = 0] = "Boost_Mulch";
    MulchType[MulchType["Rich_Mulch"] = 1] = "Rich_Mulch";
    MulchType[MulchType["Surprise_Mulch"] = 2] = "Surprise_Mulch";
    MulchType[MulchType["Amaze_Mulch"] = 3] = "Amaze_Mulch";
})(MulchType || (MulchType = {}));
///<reference path="./MulchType.ts"/>
class FarmController {
    static initialize() {
        this.berryListFiltered(Array.from(Array(GameHelper.enumLength(BerryType) - 1).keys()));
        this.numberOfTabs = ko.pureComputed(() => {
            return Math.floor(App.game.farming.highestUnlockedBerry() / this.BERRIES_PER_PAGE);
        });
        this.berryListEnd = ko.pureComputed(() => {
            var _a;
            const highestMutation = App.game.farming.mutations.slice().reverse().find(mut => mut._hintSeen() && !App.game.farming.unlockedBerries[mut.mutatedBerry]());
            const highestMutationHint = (_a = highestMutation === null || highestMutation === void 0 ? void 0 : highestMutation.mutatedBerry) !== null && _a !== void 0 ? _a : 0;
            return Math.max(App.game.farming.highestUnlockedBerry(), highestMutationHint);
        });
        this.navigateIndex(0);
    }
    static openFarmModal() {
        if (App.game.farming.canAccess()) {
            $('#farmModal').modal('show');
        }
        else {
            Notifier.notify({
                message: `You need the ${GameConstants.humanifyString(KeyItems.KeyItem[KeyItems.KeyItem.Wailmer_pail])} to access this location`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getImage(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.berry === BerryType.None) {
            return '';
        }
        if (plot.stage() === PlotStage.Seed) {
            return 'assets/images/farm/AllTreeSeed.png';
        }
        else if (plot.stage() === PlotStage.Sprout) {
            return 'assets/images/farm/AllTreeSprout.png';
        }
        return `assets/images/farm/${BerryType[plot.berry]}Tree${PlotStage[plot.stage()]}.png`;
    }
    static calculateCssClass() {
        if (this.selectedShovel()) {
            return 'ShovelSelected';
        }
        if (this.berryListVisible()) {
            return 'BerrySelected';
        }
        return 'MulchSelected';
    }
    static calcMulchClass(plot) {
        if (plot.mulch === MulchType.None) {
            return '';
        }
        return MulchType[plot.mulch];
    }
    static plotClick(index) {
        const plot = App.game.farming.plotList[index];
        // Unlocking Plot
        if (!plot.isUnlocked) {
            App.game.farming.unlockPlot(index);
            // Handle Shovel
        }
        else if (this.selectedShovel()) {
            App.game.farming.shovel(index);
            // Handle Berries
        }
        else if (this.berryListVisible()) {
            if (plot.isEmpty()) {
                App.game.farming.plant(index, this.selectedBerry());
            }
            else {
                App.game.farming.harvest(index);
            }
            // Handle Mulches
        }
        else {
            App.game.farming.addMulch(index, this.selectedMulch(), this.getAmount());
        }
    }
    static mulchAll() {
        App.game.farming.mulchAll(FarmController.selectedMulch(), this.getAmount());
    }
    static navigateRight() {
        if (FarmController.navigateIndex() < FarmController.numberOfTabs()) {
            FarmController.navigateIndex(FarmController.navigateIndex() + 1);
            this.selectedBerry(this.getBerryListWithIndex()[0]);
        }
    }
    static navigateLeft() {
        if (FarmController.navigateIndex() > 0) {
            FarmController.navigateIndex(FarmController.navigateIndex() - 1);
            this.selectedBerry(this.getBerryListWithIndex()[0]);
        }
    }
    static getBerryListWithIndex() {
        return this.berryListFiltered().slice(this.navigateIndex() * this.BERRIES_PER_PAGE, (this.navigateIndex() * this.BERRIES_PER_PAGE) + this.BERRIES_PER_PAGE);
    }
    static getUnlockedBerryList() {
        return this.berryListFiltered().filter((berry) => berry <= this.berryListEnd());
    }
    static getAmount() {
        return Number(this.multipliers[this.multIndex()].replace(/\D/g, '')) || Infinity;
    }
    static incrementMultiplier() {
        this.multIndex((this.multIndex() + 1) % this.multipliers.length);
    }
    static decrementMultiplier() {
        this.multIndex((this.multIndex() + this.multipliers.length - 1) % this.multipliers.length);
    }
    static getBackgroundColor(index) {
        if (App.game.farming.unlockedBerries[index]()) {
            return GameConstants.BerryColor[App.game.farming.berryData[index].color];
        }
        else if (FarmController.getHint(index, true) !== '') {
            return GameConstants.BerryColor[6];
        }
        else {
            return GameConstants.BerryColor[7];
        }
    }
    static getBerryImage(index) {
        return `assets/images/items/berry/${BerryType[index]}.png`;
    }
    static getHint(index, checkSeen = false, checkUnlocked = false) {
        if (checkUnlocked && App.game.farming.unlockedBerries[index]()) {
            return '';
        }
        const mutation = App.game.farming.mutations.find(mutation => mutation.mutatedBerry === index && mutation.showHint);
        if (mutation) {
            if (checkSeen && !mutation.hintSeen) {
                return '';
            }
            return mutation.hint;
        }
        return '';
    }
}
FarmController.navigateIndex = ko.observable(0);
FarmController.berryListFiltered = ko.observableArray([]);
FarmController.selectedBerry = ko.observable(BerryType.Cheri);
FarmController.selectedMulch = ko.observable(MulchType.Boost_Mulch);
FarmController.selectedShovel = ko.observable(false);
FarmController.berryListVisible = ko.observable(true);
FarmController.multipliers = ['×1', '×10', '×100', '×1000', 'All'];
FarmController.multIndex = ko.observable(0);
FarmController.BERRIES_PER_PAGE = 8;
FarmController.additionalInfoTooltip = ko.pureComputed(() => {
    const tooltip = [];
    // External Auras
    App.game.farming.externalAuras.forEach((aura, idx) => {
        if (typeof aura === 'undefined') {
            return;
        }
        if (aura() === 1) {
            return;
        }
        tooltip.push(`${AuraType[idx]}: ${aura().toFixed(2)}x`);
    });
    // Adding header if necessary
    if (tooltip.length) {
        tooltip.unshift('<u>External Auras</u>');
    }
    return tooltip.join('<br>');
});
var FarmNotificationType;
(function (FarmNotificationType) {
    FarmNotificationType[FarmNotificationType["Ripe"] = 0] = "Ripe";
    FarmNotificationType[FarmNotificationType["AboutToWither"] = 1] = "AboutToWither";
    FarmNotificationType[FarmNotificationType["Withered"] = 2] = "Withered";
    FarmNotificationType[FarmNotificationType["Mutated"] = 3] = "Mutated";
    FarmNotificationType[FarmNotificationType["Replanted"] = 4] = "Replanted";
    FarmNotificationType[FarmNotificationType["Dropped"] = 5] = "Dropped";
    FarmNotificationType[FarmNotificationType["MulchRanOut"] = 6] = "MulchRanOut";
    FarmNotificationType[FarmNotificationType["Wander"] = 7] = "Wander";
})(FarmNotificationType || (FarmNotificationType = {}));
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class Farming {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Farming';
        this.saveKey = 'farming';
        this.berryData = [];
        this.mutations = [];
        this.mutationCounter = 0;
        this.wanderCounter = 0;
        // You may be wondering why this is necessary.
        // It turns out for some reason the plot age doesn't update in time in the same tick.
        // This means that if we attempt to reset the auras in the same tick, the plant that changed stages
        // will still act like it's in the previous stage, which means the wrong aura is applied.
        // Queueing an aura reset in later ticks fixes this issue, and is barely noticable to the player.
        this.queuedAuraReset = -1;
        this.defaults = {
            berryList: Array(GameHelper.enumLength(BerryType) - 1).fill(0),
            unlockedBerries: Array(GameHelper.enumLength(BerryType) - 1).fill(false),
            mulchList: Array(GameHelper.enumLength(MulchType)).fill(0),
            plotList: new Array(Farming.PLOT_WIDTH * Farming.PLOT_HEIGHT).fill(null).map((value, index) => {
                const middle = Math.floor(Farming.PLOT_HEIGHT / 2) * Farming.PLOT_WIDTH + Math.floor(Farming.PLOT_WIDTH / 2);
                return new Plot(index === middle, BerryType.None, 0, MulchType.None, 0);
            }),
            shovelAmt: 0,
        };
        this.berryList = this.defaults.berryList.map((v) => ko.observable(v));
        this.unlockedBerries = this.defaults.unlockedBerries.map((v) => ko.observable(v));
        this.mulchList = this.defaults.mulchList.map((v) => ko.observable(v));
        this.plotList = this.defaults.plotList;
        this.shovelAmt = ko.observable(this.defaults.shovelAmt);
        this.externalAuras = [];
        this.externalAuras[AuraType.Attract] = ko.observable(1);
        this.externalAuras[AuraType.Egg] = ko.observable(1);
        this.externalAuras[AuraType.Shiny] = ko.observable(1);
        this.multiplier.addBonus('shiny', () => this.externalAuras[AuraType.Shiny]());
        this.multiplier.addBonus('eggStep', () => this.externalAuras[AuraType.Egg]());
        this.highestUnlockedBerry = ko.pureComputed(() => {
            for (let i = GameHelper.enumLength(BerryType) - 2; i >= 0; i--) {
                if (this.unlockedBerries[i]()) {
                    return i;
                }
            }
            return 0;
        });
    }
    initialize() {
        //#region Berry Data
        //#region First Generation
        this.berryData[BerryType.Cheri] = new Berry(BerryType.Cheri, [5, 10, 20, 30, 60], 2, 0.5, 5, 1, [10, 0, 0, 0, 0], BerryColor.Red, ['This bright red Berry is very spicy and has a provocative flavor. It blooms with delicate, pretty flowers.']);
        this.berryData[BerryType.Chesto] = new Berry(BerryType.Chesto, [5, 15, 25, 40, 80], 3, 0.5, 6, 2, [0, 10, 0, 0, 0], BerryColor.Purple, ['This Berry\'s thick skin and fruit are very tough and dry tasting. However, every bit of it can be eaten.']);
        this.berryData[BerryType.Pecha] = new Berry(BerryType.Pecha, [10, 35, 50, 60, 120], 4, 0.5, 7, 3, [0, 0, 10, 0, 0], BerryColor.Pink, ['Because of its hollow inside pocket, there isn\'t a lot to eat. What can be eaten is very sweet and delicious']);
        this.berryData[BerryType.Rawst] = new Berry(BerryType.Rawst, [15, 30, 45, 80, 160], 5, 0.5, 8, 4, [0, 0, 0, 10, 0], BerryColor.Green, ['If the leaves grow longer and curlier than average, this Berry will have a somewhat-bitter taste.']);
        this.berryData[BerryType.Aspear] = new Berry(BerryType.Aspear, [10, 40, 60, 120, 240], 6, 0.5, 9, 5, [0, 0, 0, 0, 10], BerryColor.Yellow, ['This Berry\'s peel is hard, but the flesh inside is very juicy. It is distinguished by its bracing sourness.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Leppa] = new Berry(BerryType.Leppa, [100, 120, 140, 240, 480], 7, 0.5, 10, 6, [10, 0, 10, 10, 10], BerryColor.Red, ['It takes longer to grow than Berries such as Cheri. The smaller Berries taste better.']);
        this.berryData[BerryType.Oran] = new Berry(BerryType.Oran, [120, 180, 240, 300, 600], 8, 0.5, 20, 7, [10, 10, 0, 10, 10], BerryColor.Blue, ['Nature\'s gifts came together as one in this Berry. It has a wondrous mix of flavors that spread in the mouth.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Sitrus] = new Berry(BerryType.Sitrus, [150, 300, 450, 600, 1200], 9, 0.5, 30, 8, [0, 10, 10, 10, 10], BerryColor.Yellow, ['Sitrus came from the same family as Oran. It is larger and smoother tasting than Oran.'], undefined, ['Flabébé (Yellow)']);
        //#endregion
        //#region Second Generation
        this.berryData[BerryType.Persim] = new Berry(BerryType.Persim, [20, 40, 50, 90, 180], 5, 0.4, 10, 2, [10, 10, 10, 0, 10], BerryColor.Pink, ['The more this Berry absorbs energy from sunlight, the more vividly colorful it grows.']);
        this.berryData[BerryType.Razz] = new Berry(BerryType.Razz, [100, 150, 200, 250, 500], 7, 0.4, 15, 2, [10, 10, 0, 0, 0], BerryColor.Red, ['A small hint of spiciness lingers in the red granules surrounding this Berry. Their centers have a dry taste.']);
        this.berryData[BerryType.Bluk] = new Berry(BerryType.Bluk, [200, 250, 300, 330, 660], 9, 0.4, 20, 2, [0, 10, 10, 0, 0], BerryColor.Purple, ['Though this small, delicately skinned Berry is blue in color, it dyes the mouth black when eaten.']);
        this.berryData[BerryType.Nanab] = new Berry(BerryType.Nanab, [25, 30, 35, 250, 500], 11, 0.4, 25, 2, [0, 0, 10, 10, 0], BerryColor.Pink, ['Bitter, but with a trace of sweetness, the Nanab Berry was the seventh to be discovered in the world.']);
        this.berryData[BerryType.Wepear] = new Berry(BerryType.Wepear, [150, 350, 375, 400, 800], 12, 0.4, 30, 2, [0, 0, 0, 10, 10], BerryColor.Green, ['The potent mix of bitter and sour in this Berry seems to promote digestion. The flower is white and beautiful.']);
        this.berryData[BerryType.Pinap] = new Berry(BerryType.Pinap, [30, 60, 180, 240, 480], 13, 0.4, 35, 2, [10, 0, 0, 0, 10], BerryColor.Yellow, ['It is said that when the sour skin is peeled, this spicy Berry can be crushed to make medicine.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Figy] = new Berry(BerryType.Figy, [40, 160, 230, 350, 700], 14, 0.3, 40, 3, [15, 0, 0, 0, 0], BerryColor.Red, ['This Berry is oddly shaped, appearing as if someone took a bite out of it. It is packed full of spicy substances.']);
        this.berryData[BerryType.Wiki] = new Berry(BerryType.Wiki, [40, 190, 210, 360, 720], 15, 0.3, 45, 3, [0, 15, 0, 0, 0], BerryColor.Purple, ['It is said that this Berry grew lumps to help Pokémon grip it, allowing propagation farther afield.']);
        this.berryData[BerryType.Mago] = new Berry(BerryType.Mago, [40, 180, 240, 370, 740], 16, 0.3, 50, 3, [0, 0, 15, 0, 0], BerryColor.Pink, ['This Berry progressively curves as it grows. The curvier the Berry, the sweeter and tastier.']);
        this.berryData[BerryType.Aguav] = new Berry(BerryType.Aguav, [40, 170, 220, 350, 700], 17, 0.3, 55, 3, [0, 0, 0, 15, 0], BerryColor.Green, ['This Berry turns bitter toward the stem. The dainty flower it grows from doesn\'t absorb much sunlight.']);
        this.berryData[BerryType.Iapapa] = new Berry(BerryType.Iapapa, [40, 200, 230, 380, 760], 18, 0.3, 60, 3, [0, 0, 0, 0, 15], BerryColor.Yellow, ['This Berry is very big and sour. The juiciness of the pulp accentuates the sourness.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Lum] = new Berry(BerryType.Lum, [3000, 3200, 3400, 3600, 43200], 1, 0, 1000, 3, [10, 10, 10, 10, 0], BerryColor.Green, ['This Berry\'s gradual process of storing nutrients beneficial to Pokémon health causes it to mature slowly.', 'This Berry multiplies the effect of Berry plants around it.'], new Aura(AuraType.Boost, [1.01, 1.02, 1.03]));
        //#endregion
        //#region Third Generation
        this.berryData[BerryType.Pomeg] = new Berry(BerryType.Pomeg, [200, 1200, 4000, 5400, 10800], 20, 0.2, 500, 10, [10, 0, 10, 10, 0], BerryColor.Red, ['When this sweetly spicy Berry\'s thick skin is peeled, many pieces of the fruit spill out.']);
        this.berryData[BerryType.Kelpsy] = new Berry(BerryType.Kelpsy, [240, 2000, 3400, 6000, 12000], 21, 0.2, 525, 10, [0, 10, 0, 10, 10], BerryColor.Blue, ['This Berry can be eaten as is or boiled to obtain an extract that adds a dash of flavor to food.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Qualot] = new Berry(BerryType.Qualot, [230, 1000, 2500, 4800, 9600], 22, 0.2, 550, 10, [10, 0, 10, 0, 10], BerryColor.Yellow, ['Even in places of constant rain and high humidity, this Berry\'s plant grows healthy and strong.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Hondew] = new Berry(BerryType.Hondew, [1000, 2000, 5000, 10800, 21600], 23, 0.2, 2000, 10, [10, 10, 0, 10, 0], BerryColor.Green, ['This somewhat-rare Berry projects an image of luxury, so it is favored as a gift item.']);
        this.berryData[BerryType.Grepa] = new Berry(BerryType.Grepa, [300, 3400, 5600, 7200, 14400], 24, 0.2, 600, 10, [0, 10, 10, 0, 10], BerryColor.Yellow, ['One bite of this very tender Berry fills the mouth with its sweet and tangy flavor.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Tamato] = new Berry(BerryType.Tamato, [430, 1400, 4000, 8640, 17280], 25, 0.2, 625, 10, [20, 10, 0, 0, 0], BerryColor.Red, ['This Berry is large and spicy. When eaten during the cold season, it warms the body from inside.']);
        this.berryData[BerryType.Cornn] = new Berry(BerryType.Cornn, [1100, 4000, 8000, 9000, 18000], 26, 0.1, 700, 10, [0, 20, 10, 0, 0], BerryColor.Purple, ['Its dryness is quite strong. As a result, its true deliciousness can\'t be appreciated by just eating one or two.']);
        this.berryData[BerryType.Magost] = new Berry(BerryType.Magost, [2400, 6500, 10000, 14400, 28800], 27, 0.1, 750, 10, [0, 0, 20, 10, 0], BerryColor.Pink, ['The grown-up flavor and dreamy sweetness of this Berry make it a favorite of Pokémon everywhere.']);
        this.berryData[BerryType.Rabuta] = new Berry(BerryType.Rabuta, [2310, 5400, 9500, 12240, 24480], 28, 0.1, 800, 10, [0, 0, 0, 20, 10], BerryColor.Green, ['Even though it is bitter, it should be eaten peel and all. The hair on the peel cleans the stomach from the inside.']);
        this.berryData[BerryType.Nomel] = new Berry(BerryType.Nomel, [1240, 5200, 10500, 15120, 30240], 29, 0.1, 850, 10, [10, 0, 0, 0, 20], BerryColor.Yellow, ['This Berry is quite sour overall, with the sourness especially concentrated at the pointed end.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Spelon] = new Berry(BerryType.Spelon, [2000, 7000, 12000, 15480, 30960], 30, 0.1, 900, 10, [30, 10, 0, 0, 0], BerryColor.Red, ['So spicy is the Spelon Berry that, Fire type or not, Pokémon will try to breathe fire after eating a single one.']);
        this.berryData[BerryType.Pamtre] = new Berry(BerryType.Pamtre, [3000, 10000, 16400, 18000, 36000], 31, 0.1, 950, 10, [0, 30, 10, 0, 0], BerryColor.Purple, ['This Berry drifted from a faraway sea. It is now cultivated in the Sinnoh region.']);
        this.berryData[BerryType.Watmel] = new Berry(BerryType.Watmel, [2300, 3400, 9800, 16560, 33120], 32, 0.1, 1000, 10, [0, 0, 30, 10, 0], BerryColor.Pink, ['A bounty of nature that is exceedingly sweet. The Berry is huge, with some discovered that exceed 20 inches.']);
        this.berryData[BerryType.Durin] = new Berry(BerryType.Durin, [10000, 14000, 18000, 21600, 43200], 33, 0.1, 1050, 10, [0, 0, 0, 30, 10], BerryColor.Green, ['This Berry is tremendously bitter. Just one bite is enough to instantly stop hiccups.']);
        this.berryData[BerryType.Belue] = new Berry(BerryType.Belue, [5000, 9800, 14500, 19800, 39600], 20, 0.1, 1100, 10, [10, 0, 0, 0, 30], BerryColor.Purple, ['This glossy and colorful Berry has a mouthwateringly delicious appearance. However, it is awfully sour.']);
        //#endregion
        //#region Fourth Generation (Typed)
        this.berryData[BerryType.Occa] = new Berry(BerryType.Occa, [8090, 13200, 16000, 21960, 43920], 21, 0.05, 1200, 15, [15, 0, 10, 0, 0], BerryColor.Red, ['This Berry is said to have grown plentiful in the tropics of the past. It boasts an intensely hot spiciness.', 'It has a tendency to overtake nearby plants.'], undefined, ['Charmander', 'Cyndaquil', 'Torchic', 'Chimchar', 'Tepig']);
        this.berryData[BerryType.Passho] = new Berry(BerryType.Passho, [490, 3600, 10800, 21600, 43200], 22, 0.05, 1300, 15, [0, 15, 0, 10, 0], BerryColor.Blue, ['This Berry\'s flesh is dotted with countless tiny bubbles of air that keep it afloat in water.', 'This Berry promotes the fruiting of nearby Berry plants.'], new Aura(AuraType.Harvest, [1.1, 1.2, 1.3]), ['Squirtle', 'Totodile', 'Mudkip', 'Piplup', 'Oshawott', 'Flabébé (Blue)']);
        this.berryData[BerryType.Wacan] = new Berry(BerryType.Wacan, [10, 180, 900, 1800, 3600], 2, 0.05, 250, 1, [0, 0, 15, 0, 10], BerryColor.Yellow, ['Energy from lightning strikes is drawn into the plant, making the Berries grow big and rich.', 'The same energy promotes the growth of nearby Berries.'], new Aura(AuraType.Growth, [1.1, 1.2, 1.3]), ['Pikachu', 'Flabébé (Yellow)']);
        this.berryData[BerryType.Rindo] = new Berry(BerryType.Rindo, [3600, 7200, 16200, 28800, 57600], 24, 0.05, 1400, 15, [10, 0, 0, 15, 0], BerryColor.Green, ['This Berry has a disagreeable "green" flavor and scent typical of vegetables. It is rich in health-promoting fiber.', 'It has a tendency to expand into nearby plots.'], undefined, ['Bulbasaur', 'Chikorita', 'Treecko', 'Turtwig', 'Snivy']);
        this.berryData[BerryType.Yache] = new Berry(BerryType.Yache, [3600, 14400, 28800, 43200, 86400], 25, 0.05, 1500, 15, [0, 10, 0, 0, 15], BerryColor.Blue, ['This Berry has a refreshing flavor that strikes a good balance of dryness and sourness. It tastes better chilled.', 'This Berry slows the growth of nearby Berries.'], new Aura(AuraType.Growth, [0.9, 0.8, 0.7]), ['Snover', 'Flabébé (Blue)']);
        this.berryData[BerryType.Chople] = new Berry(BerryType.Chople, [5400, 10800, 25200, 36000, 72000], 26, 0.05, 1600, 15, [15, 0, 0, 10, 0], BerryColor.Red, ['This Berry contains a substance that generates heat. It can even heat up a chilly heart.', 'Growing these Berries will promote Egg growth.'], new Aura(AuraType.Egg, [1.01, 1.02, 1.03]), ['Riolu']);
        this.berryData[BerryType.Kebia] = new Berry(BerryType.Kebia, [100, 200, 400, 600, 86400], 1, 1, 50, 1, [0, 15, 0, 0, 10], BerryColor.Green, ['This Berry is a brilliant green on the outside. Inside, it is packed with a dry-flavored, black-colored flesh.', 'It has a tendency to overtake nearby plants.', 'Due to its poisonous nature, it increases the chances of mutations near it.'], new Aura(AuraType.Mutation, [1.2, 1.4, 1.6]), ['Gulpin']);
        this.berryData[BerryType.Shuca] = new Berry(BerryType.Shuca, [7200, 16200, 32400, 39600, 79200], 28, 1, 1700, 15, [10, 0, 15, 0, 0], BerryColor.Yellow, ['The sweetness-laden pulp has just the hint of a hard-edged and fragrant bite to it.', 'Growing these Berries will soften the ground around it, increasing the chances of replanting.'], new Aura(AuraType.Replant, [1.01, 1.02, 1.03]), ['Larvitar', 'Flabébé (Yellow)']);
        this.berryData[BerryType.Coba] = new Berry(BerryType.Coba, [9000, 12600, 16200, 19800, 39600], 29, 0.05, 1800, 15, [0, 10, 0, 15, 0], BerryColor.Blue, ['This Berry is said to be a new kind that is a cross of two Berries brought together by winds from far away.'], undefined, ['Tropius', 'Flabébé (Blue)']);
        this.berryData[BerryType.Payapa] = new Berry(BerryType.Payapa, [4680, 11880, 23400, 34200, 68400], 30, 0.05, 1900, 15, [0, 0, 10, 0, 15], BerryColor.Purple, ['This Berry is said to sense human emotions for the way it swells roundly when a person approaches.', 'The same behavior affects nearby plants, causing additional mutations.'], new Aura(AuraType.Mutation, [1.1, 1.2, 1.3]), ['Natu']);
        this.berryData[BerryType.Tanga] = new Berry(BerryType.Tanga, [450, 900, 1800, 3600, 7200], 3, 0.5, 500, 15, [20, 0, 0, 0, 10], BerryColor.Green, ['The flower grows at the tip of this Berry. It attracts Bug Pokémon by letting its stringy petals stream out.', 'The attracted Bug Pokémon decreases the amount of harvestable Berries in nearby plants'], new Aura(AuraType.Harvest, [0.9, 0.8, 0.7]), ['Nincada']);
        this.berryData[BerryType.Charti] = new Berry(BerryType.Charti, [8600, 12960, 23040, 37800, 75600], 32, 0.05, 2000, 15, [10, 20, 0, 0, 0], BerryColor.Yellow, ['It is often used for pickles because of its very dry flavor. It can also be eaten raw for its provocative taste.', 'This Berry plant hardens the surrounding soil, decreasing the chances of replanting.'], new Aura(AuraType.Replant, [0.99, 0.98, 0.97]), ['Sudowoodo', 'Flabébé (Yellow)']);
        this.berryData[BerryType.Kasib] = new Berry(BerryType.Kasib, [30, 60, 120, 300, 86400], 1, 1, 25, 1, [0, 10, 20, 0, 0], BerryColor.Purple, ['Considered to have a special power from the olden days, this Berry is sometimes dried and used as a good-luck charm.', 'This Berry causes other nearby Berries to wither away faster.'], new Aura(AuraType.Death, [1.25, 1.5, 2.0]), ['Shedinja']);
        this.berryData[BerryType.Haban] = new Berry(BerryType.Haban, [10800, 21600, 43200, 86400, 172800], 34, 0, 4000, 15, [0, 0, 10, 20, 0], BerryColor.Red, ['If a large enough volume of this Berry is boiled down, its bitterness fades away. It makes a good jam.', 'This Berry requires a lot of energy to grow, stealing away nutrients from nearby plots.'], new Aura(AuraType.Growth, [0.8, 0.6, 0.5]), ['Bagon']);
        this.berryData[BerryType.Colbur] = new Berry(BerryType.Colbur, [2880, 10080, 19440, 27000, 54000], 35, 0.05, 2300, 15, [0, 0, 0, 10, 20], BerryColor.Purple, ['Tiny hooks grow on the surface of this Berry. It latches on to Pokémon so it can be carried to far-off places.', 'It has a tendency to overtake nearby plants.'], undefined, ['Absol']);
        this.berryData[BerryType.Babiri] = new Berry(BerryType.Babiri, [7200, 16200, 32400, 64800, 129600], 36, 0.05, 2400, 15, [25, 10, 0, 0, 0], BerryColor.Green, ['This Berry is very tough with a strong flavor. It was used to make medicine by people in the past.', 'This Berry plant is very hardy and resistant, making it resistant to mutations, and also decreasing the chance of mutations around it.'], new Aura(AuraType.Mutation, [0.5, 0.25, 0.0]), ['Skarmory']);
        this.berryData[BerryType.Chilan] = new Berry(BerryType.Chilan, [240, 1430, 2970, 7200, 14400], 10, 0.05, 500, 15, [0, 25, 10, 0, 0], BerryColor.Yellow, ['This Berry can be cored out and dried to make a whistle. Blowing through its hole makes an indescribable sound.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Roseli] = new Berry(BerryType.Roseli, [2410, 5040, 12600, 25200, 50400], 38, 0.05, 2500, 15, [0, 0, 25, 10, 0], BerryColor.Pink, ['This Berry is sweet with a hint of bitterness and has a lingering sweet scent. It is often dried and used to make tea.', 'The scent of this Berry plant attracts wild Pokémon.'], new Aura(AuraType.Attract, [1.01, 1.02, 1.03]), ['Togepi']);
        //#endregion
        //#region Fifth Generation
        this.berryData[BerryType.Micle] = new Berry(BerryType.Micle, [3960, 7920, 15840, 31680, 63360], 1, 0.05, 2600, 20, [0, 40, 10, 0, 0], BerryColor.Green, ['This Berry has a very dry flavor. It has the effect of making other food eaten at the same time taste sweet.']);
        this.berryData[BerryType.Custap] = new Berry(BerryType.Custap, [3240, 8280, 13320, 27360, 54720], 1, 0.05, 2700, 20, [0, 0, 40, 10, 0], BerryColor.Red, ['The flesh underneath the Custap Berry\'s tough skin is sweet and creamy soft.']);
        this.berryData[BerryType.Jaboca] = new Berry(BerryType.Jaboca, [4320, 8640, 16560, 33480, 66960], 1, 0.05, 2800, 20, [0, 0, 0, 40, 10], BerryColor.Yellow, ['The cluster of drupelets that make up this Berry pop rhythmically if the Berry is handled roughly.', 'The sound of these Berries attracts wild Pokémon.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Rowap] = new Berry(BerryType.Rowap, [5760, 9000, 14040, 21240, 42480], 1, 0.05, 2900, 20, [10, 0, 0, 0, 40], BerryColor.Blue, ['In days of old, people worked the top-shaped pieces of this Berry free and used them as toys.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Kee] = new Berry(BerryType.Kee, [4680, 9360, 18360, 36360, 72720], 1, 0.05, 3000, 20, [30, 30, 10, 10, 10], BerryColor.Yellow, ['This Berry remains poisonous until fully ripened. Once ripe it has a spicy and sweet complex flavor.'], undefined, ['Flabébé (Yellow)']);
        this.berryData[BerryType.Maranga] = new Berry(BerryType.Maranga, [5040, 10080, 20160, 40320, 80640], 1, 0.05, 3100, 20, [10, 10, 30, 30, 10], BerryColor.Blue, ['This Berry resembles the Durin Berry, however its spikes are less pronounced. It is quite delicious when roasted.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Liechi] = new Berry(BerryType.Liechi, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [30, 10, 30, 0, 0], BerryColor.Red, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the sea.'], undefined, ['Manaphy']);
        this.berryData[BerryType.Ganlon] = new Berry(BerryType.Ganlon, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [0, 30, 10, 30, 0], BerryColor.Purple, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the land.']);
        this.berryData[BerryType.Salac] = new Berry(BerryType.Salac, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [0, 0, 30, 10, 30], BerryColor.Green, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the sky.']);
        this.berryData[BerryType.Petaya] = new Berry(BerryType.Petaya, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 0, 0, 30, 10], BerryColor.Pink, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of all living things.', 'This power keeps other Berries alive for longer.'], undefined, ['Mew']);
        this.berryData[BerryType.Apicot] = new Berry(BerryType.Apicot, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [10, 30, 0, 0, 30], BerryColor.Blue, ['This is a very, very mystifying Berry. There is no telling how it can be used, or what may happen if it is used.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Lansat] = new Berry(BerryType.Lansat, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 10, 30, 10, 30], BerryColor.Red, ['This is said to be a legendary Berry. Holding it supposedly brings great joy.']);
        this.berryData[BerryType.Starf] = new Berry(BerryType.Starf, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 10, 30, 10, 30], BerryColor.Green, ['This Berry is considered a mirage. It was said to be so strong that it had to be abandoned at the world\'s edge.'], new Aura(AuraType.Shiny, [1.005, 1.01, 1.015]), ['Jirachi']);
        this.berryData[BerryType.Enigma] = new Berry(BerryType.Enigma, [10800, 21600, 43200, 86400, 604800], 0.5, 0, 15000, 20, [40, 10, 0, 0, 0], BerryColor.Purple, ['A completely enigmatic Berry. It apparently has the power of the stars that fill the night sky.']);
        //#endregion
        //#endregion
        //#region Mutations
        /**
         * NOTE: ONLY ADD NEW MUTATIONS AT THE END OF THE LIST. MUTATION INDEX IS USED TO STORE HINT SEEN DATA
         */
        //#region Second Generation
        // Persim
        this.mutations.push(new GrowNearBerryMutation(0.02, BerryType.Persim, [BerryType.Pecha, BerryType.Oran]));
        // Razz
        this.mutations.push(new GrowNearBerryMutation(0.019, BerryType.Razz, [BerryType.Cheri, BerryType.Leppa]));
        // Bluk
        this.mutations.push(new GrowNearBerryMutation(0.018, BerryType.Bluk, [BerryType.Chesto, BerryType.Leppa]));
        // Nanab
        this.mutations.push(new GrowNearBerryMutation(0.017, BerryType.Nanab, [BerryType.Pecha, BerryType.Aspear]));
        // Wepear
        this.mutations.push(new GrowNearBerryMutation(0.016, BerryType.Wepear, [BerryType.Rawst, BerryType.Oran]));
        // Pinap
        this.mutations.push(new GrowNearBerryMutation(0.015, BerryType.Pinap, [BerryType.Sitrus, BerryType.Aspear]));
        // Figy
        this.mutations.push(new GrowNearFlavorMutation(0.009, BerryType.Figy, [
            [25, 80],
            [0, 5],
            [0, 5],
            [0, 5],
            [0, 5],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too spicy!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Cheri]();
            },
        }));
        // Wiki
        this.mutations.push(new GrowNearFlavorMutation(0.008, BerryType.Wiki, [
            [0, 5],
            [25, 80],
            [0, 5],
            [0, 5],
            [0, 5],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too dry!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Chesto]();
            },
        }));
        // Mago
        this.mutations.push(new GrowNearFlavorMutation(0.007, BerryType.Mago, [
            [0, 5],
            [0, 5],
            [25, 80],
            [0, 5],
            [0, 5],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too sweet!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Pecha]();
            },
        }));
        // Aguav
        this.mutations.push(new GrowNearFlavorMutation(0.006, BerryType.Aguav, [
            [0, 5],
            [0, 5],
            [0, 5],
            [25, 80],
            [0, 5],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too bitter!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Rawst]();
            },
        }));
        // Iapapa
        this.mutations.push(new GrowNearFlavorMutation(0.005, BerryType.Iapapa, [
            [0, 5],
            [0, 5],
            [0, 5],
            [0, 5],
            [25, 80],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too sour!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Aspear]();
            },
        }));
        // Lum
        this.mutations.push(new GrowNearBerryMutation(0.001, BerryType.Lum, [BerryType.Cheri, BerryType.Chesto, BerryType.Pecha, BerryType.Rawst, BerryType.Aspear, BerryType.Leppa, BerryType.Oran, BerryType.Sitrus], {
            hint: 'I\'ve heard that there\'s a legendary Berry that only appears when fully surrounded by unique ripe Berry plants!',
        }));
        //#endregion
        //#region Third Generation
        // Pomeg
        this.mutations.push(new GrowNearBerryMutation(0.0005, BerryType.Pomeg, [BerryType.Iapapa, BerryType.Mago]));
        // Kelpsy
        this.mutations.push(new GrowNearBerryMutation(0.0005, BerryType.Kelpsy, [BerryType.Chesto, BerryType.Persim]));
        // Qualot
        this.mutations.push(new GrowNearFlavorMutation(0.0005, BerryType.Qualot, [
            [10, 15],
            [0, 0],
            [10, 15],
            [0, 0],
            [10, 15],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little spicy, a little sweet, and a little sour at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Cheri]() && App.game.farming.unlockedBerries[BerryType.Pecha]() && App.game.farming.unlockedBerries[BerryType.Aspear]();
            },
        }));
        // Hondew
        this.mutations.push(new GrowNearFlavorMutation(0.0004, BerryType.Hondew, [
            [15, 15],
            [15, 15],
            [0, 0],
            [15, 15],
            [0, 0],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted fairly spicy, dry, and bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Figy]() && App.game.farming.unlockedBerries[BerryType.Wiki]() && App.game.farming.unlockedBerries[BerryType.Aguav]();
            },
        }));
        // Grepa
        this.mutations.push(new GrowNearBerryMutation(0.0005, BerryType.Grepa, [BerryType.Aguav, BerryType.Figy]));
        // Tamato
        this.mutations.push(new EvolveNearBerryMutation(0.0005, BerryType.Tamato, BerryType.Razz, [BerryType.Pomeg]));
        // Cornn
        this.mutations.push(new GrowNearBerryMutation(0.0003, BerryType.Cornn, [BerryType.Leppa, BerryType.Bluk, BerryType.Wiki]));
        // Magost
        this.mutations.push(new GrowNearBerryMutation(0.0003, BerryType.Magost, [BerryType.Pecha, BerryType.Nanab, BerryType.Mago]));
        // Rabuta
        this.mutations.push(new EvolveNearBerryMutation(0.0003, BerryType.Rabuta, BerryType.Aspear, [BerryType.Aguav]));
        // Nomel
        this.mutations.push(new GrowNearBerryMutation(0.0003, BerryType.Nomel, [BerryType.Pinap]));
        // Spelon
        this.mutations.push(new EvolveNearFlavorMutation(0.0002, BerryType.Spelon, BerryType.Tamato, [
            [130, 160],
            [0, 80],
            [0, 80],
            [0, 80],
            [0, 80],
        ], {
            hint: 'I\'ve heard that a Tamato berry will change if its surroundings get extremely spicy!',
        }));
        // Pamtre
        this.mutations.push(new EvolveNearFlavorMutation(0.0002, BerryType.Pamtre, BerryType.Cornn, [
            [0, 80],
            [130, 160],
            [0, 80],
            [0, 80],
            [0, 80],
        ], {
            hint: 'I\'ve heard that a Cornn berry will change if its surroundings get extremely dry!',
        }));
        // Pamtre Overgrow
        this.mutations.push(new GrowNearBerryMutation(0.0004, BerryType.Pamtre, [BerryType.Pamtre], { showHint: false }));
        // Watmel
        this.mutations.push(new EvolveNearFlavorMutation(0.0002, BerryType.Watmel, BerryType.Magost, [
            [0, 80],
            [0, 80],
            [130, 160],
            [0, 80],
            [0, 80],
        ], {
            hint: 'I\'ve heard that a Magost berry will change if its surroundings get extremely sweet!',
        }));
        // Durin
        this.mutations.push(new EvolveNearFlavorMutation(0.0002, BerryType.Durin, BerryType.Rabuta, [
            [0, 80],
            [0, 80],
            [0, 80],
            [130, 160],
            [0, 80],
        ], {
            hint: 'I\'ve heard that a Rabuta berry will change if its surroundings get extremely bitter!',
        }));
        // Belue
        this.mutations.push(new EvolveNearFlavorMutation(0.0002, BerryType.Belue, BerryType.Nomel, [
            [0, 80],
            [0, 80],
            [0, 80],
            [0, 80],
            [130, 160],
        ], {
            hint: 'I\'ve heard that a Nomel berry will change if its surroundings get extremely sour!',
        }));
        //#endregion
        //#region Fourth Generation
        // Occa
        this.mutations.push(new GrowNearBerryMutation(0.0001, BerryType.Occa, [BerryType.Razz, BerryType.Figy, BerryType.Tamato, BerryType.Spelon]));
        // Occa Parasite
        this.mutations.push(new ParasiteMutation(0.0004, BerryType.Occa));
        // Passho
        this.mutations.push(new GrowNearBerryMutation(0.0001, BerryType.Passho, [BerryType.Oran, BerryType.Chesto, BerryType.Kelpsy, BerryType.Coba]));
        // Wacan
        this.mutations.push(new GrowNearBerryMutation(0.0001, BerryType.Wacan, [BerryType.Pinap, BerryType.Iapapa, BerryType.Qualot, BerryType.Grepa]));
        // Rindo
        // TODO: HLXII - Change mutation to grow spontaneously when Grass pokemon in party
        this.mutations.push(new GrowNearFlavorMutation(0.0001, BerryType.Rindo, [
            [10, 15],
            [0, 0],
            [0, 0],
            [15, 20],
            [0, 0],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little spicy and fairly bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Aguav]() && App.game.farming.unlockedBerries[BerryType.Cheri]();
            },
        }));
        // Rindo Overgrow
        this.mutations.push(new GrowNearBerryMutation(0.0004, BerryType.Rindo, [BerryType.Rindo], { showHint: false }));
        // Yache
        this.mutations.push(new EvolveNearBerryStrictMutation(0.0001, BerryType.Yache, BerryType.Passho, {}, PlotStage.Seed, {
            hint: 'I\'ve heard that growing a Passho Berry alone will cause it to change!',
        }));
        // Chople
        this.mutations.push(new OakMutation(0.0001, BerryType.Chople, BerryType.Spelon, OakItems.OakItem.Blaze_Cassette));
        // Kebia
        this.mutations.push(new OakMutation(0.0001, BerryType.Kebia, BerryType.Pamtre, OakItems.OakItem.Poison_Barb));
        // Kebia Parasite
        this.mutations.push(new ParasiteMutation(0.0004, BerryType.Kebia));
        // Shuca
        this.mutations.push(new OakMutation(0.0001, BerryType.Shuca, BerryType.Watmel, OakItems.OakItem.Sprinklotad));
        // Coba
        // TODO: HLXII - Change mutation to grow spontaneously when Flying pokemon in party
        this.mutations.push(new GrowNearFlavorMutation(0.0001, BerryType.Coba, [
            [0, 0],
            [10, 15],
            [0, 0],
            [15, 20],
            [0, 0],
        ], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little dry and fairly bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Chesto]() && App.game.farming.unlockedBerries[BerryType.Aguav]();
            },
        }));
        // Payapa
        this.mutations.push(new GrowNearBerryMutation(0.0001, BerryType.Payapa, [BerryType.Wiki, BerryType.Bluk, BerryType.Cornn, BerryType.Pamtre]));
        // Tanga
        let berryReqs = {};
        berryReqs[BerryType.Rindo] = 8;
        this.mutations.push(new GrowNearBerryStrictMutation(0.0001, BerryType.Tanga, berryReqs, {
            hint: 'I\'ve heard that a special Berry can appear after being surrounded by Rindo Berries!',
        }));
        // Charti
        this.mutations.push(new OakMutation(0.0001, BerryType.Charti, BerryType.Cornn, OakItems.OakItem.Cell_Battery));
        // Kasib
        // No mutation, will check withers
        // Haban
        this.mutations.push(new GrowNearBerryMutation(0.0001, BerryType.Haban, [BerryType.Occa, BerryType.Rindo, BerryType.Passho, BerryType.Wacan]));
        // Colbur
        this.mutations.push(new GrowNearBerryMutation(0.0001, BerryType.Colbur, [BerryType.Rabuta, BerryType.Kasib, BerryType.Payapa]));
        // Colbur Parasite
        this.mutations.push(new ParasiteMutation(0.0004, BerryType.Colbur));
        // Babiri
        berryReqs = {};
        berryReqs[BerryType.Shuca] = 4;
        berryReqs[BerryType.Charti] = 4;
        this.mutations.push(new GrowNearBerryStrictMutation(0.0001, BerryType.Babiri, berryReqs, {
            hint: 'I\'ve heard that a special Berry can appear after being surrounded by Shuca and Charti Berries!',
        }));
        // Chilan
        berryReqs = {};
        berryReqs[BerryType.Chople] = 3;
        this.mutations.push(new EvolveNearBerryMinMutation(0.0001, BerryType.Chilan, BerryType.Chople, berryReqs, {
            hint: 'I\'ve heard that Chople Berries will turn into a different Berry if surrounded by more than two of its own kind',
        }));
        // Roseli
        this.mutations.push(new GrowNearBerryMutation(0.0001, BerryType.Roseli, [BerryType.Mago, BerryType.Nanab, BerryType.Magost, BerryType.Watmel]));
        //#endregion
        //#region Fifth Generation
        // Micle
        this.mutations.push(new FieldFlavorMutation(0.0003, BerryType.Micle, [0, 600, 0, 0, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the driest of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Pamtre](),
        }));
        // Custap
        this.mutations.push(new FieldFlavorMutation(0.0003, BerryType.Custap, [0, 0, 600, 0, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the sweetest of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Watmel](),
        }));
        // Jaboca
        this.mutations.push(new FieldFlavorMutation(0.0003, BerryType.Jaboca, [0, 0, 0, 600, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the most bitter of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Durin](),
        }));
        // Rowap
        this.mutations.push(new FieldFlavorMutation(0.0003, BerryType.Rowap, [0, 0, 0, 0, 600], {
            hint: 'I\'ve heard of a Berry that only appears in the most sour of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Belue](),
        }));
        // Kee
        this.mutations.push(new GrowNearBerryMutation(0.0003, BerryType.Kee, [BerryType.Liechi, BerryType.Ganlon]));
        // Maranga
        this.mutations.push(new GrowNearBerryMutation(0.0003, BerryType.Maranga, [BerryType.Salac, BerryType.Petaya]));
        // Liechi
        this.mutations.push(new FieldMutation(0.00001, BerryType.Liechi, BerryType.Passho, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Kyogre').id](); },
        }));
        // Ganlon
        this.mutations.push(new FieldMutation(0.00001, BerryType.Ganlon, BerryType.Shuca, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Groudon').id](); },
        }));
        // Salac
        this.mutations.push(new FieldMutation(0.00001, BerryType.Salac, BerryType.Coba, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Rayquaza').id](); },
        }));
        // Petaya
        this.mutations.push(new PetayaMutation(0.00001));
        // Apicot
        // Lansat
        // TODO: HLXII - Add Mutation to evolve Payapa when Milotic, Gardevoir, Blissey, and Togekiss in party.
        // Starf
        // No mutation, obtained by wandering shiny pokemon
        // Enigma
        this.mutations.push(new EnigmaMutation(0.0001));
        // Enigma Mutations
        this.mutations.push(new EvolveNearBerryMutation(0.0004, BerryType.Liechi, BerryType.Passho, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Liechi](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(0.0004, BerryType.Ganlon, BerryType.Shuca, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Ganlon](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(0.0004, BerryType.Salac, BerryType.Coba, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Salac](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(0.0004, BerryType.Petaya, BerryType.Payapa, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Petaya](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(0.0004, BerryType.Apicot, BerryType.Chilan, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Apicot](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(0.0004, BerryType.Lansat, BerryType.Roseli, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Lansat](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(0.0004, BerryType.Starf, BerryType.Haban, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Starf](),
        }));
        // Empty Mutations for hints
        // Kasib
        this.mutations.push(new BlankMutation(0, BerryType.Kasib, {
            hint: 'I\'ve heard of a Berry that only appears after a Berry plant has withered, but is repelled by Colbur Plants.',
            unlockReq: () => App.game.farming.highestUnlockedBerry() > BerryType.Occa,
        }));
        // Starf
        this.mutations.push(new BlankMutation(0, BerryType.Starf, {
            hint: 'I\'ve heard of a Berry that only appears after a Shiny Pokémon wanders near open soil.',
            unlockReq: () => App.game.farming.highestUnlockedBerry() > BerryType.Occa,
        }));
        //#endregion
        //#endregion
    }
    getGrowthMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItems.OakItem.Sprayduck);
        return multiplier;
    }
    getReplantMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItems.OakItem.Sprinklotad);
        return multiplier;
    }
    getMutationMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItems.OakItem.Squirtbottle);
        return multiplier;
    }
    update(delta) {
        const timeToReduce = delta;
        const notifications = new Set();
        let change = false;
        // Handle updating auras
        if (this.queuedAuraReset >= 0) {
            this.queuedAuraReset -= 1;
            if (this.queuedAuraReset === 0) {
                this.resetAuras();
            }
        }
        // Updating Berries
        this.plotList.forEach((plot) => {
            if (plot.update(timeToReduce)) {
                change = true;
            }
            if (plot.notifications) {
                plot.notifications.forEach((n) => notifications.add(n));
                plot.notifications = [];
            }
        });
        // Running Mutations
        this.mutationCounter += GameConstants.TICK_TIME;
        if (this.mutationCounter >= GameConstants.MUTATION_TICK) {
            this.mutations.forEach((mutation) => {
                if (mutation.mutate()) {
                    GameHelper.incrementObservable(App.game.statistics.totalBerriesMutated, 1);
                    notifications.add(FarmNotificationType.Mutated);
                    change = true;
                }
            });
            this.mutationCounter = 0;
        }
        // Wandering Pokemon
        this.wanderCounter += GameConstants.TICK_TIME;
        let wanderPokemon;
        if (this.wanderCounter >= GameConstants.WANDER_TICK) {
            for (let i = 0; i < App.game.farming.plotList.length; i++) {
                const plot = App.game.farming.plotList[i];
                wanderPokemon = plot.generateWanderPokemon();
                if (wanderPokemon !== undefined) {
                    // TODO: HLXII Handle other bonus (DT?)
                    notifications.add(FarmNotificationType.Wander);
                    break;
                }
            }
            this.wanderCounter = 0;
        }
        // Handle queueing aura reset
        if (change) {
            this.queuedAuraReset = 2;
        }
        if (notifications.size) {
            notifications.forEach((n) => this.handleNotification(n, wanderPokemon));
        }
    }
    handleNotification(farmNotiType, wander) {
        let message = '';
        let settingOveride = null;
        let type = NotificationConstants.NotificationOption.success;
        switch (farmNotiType) {
            case FarmNotificationType.Ripe:
                message = 'A Berry is ready to harvest!';
                break;
            case FarmNotificationType.AboutToWither:
                message = 'A Berry plant is about to wither!';
                type = NotificationConstants.NotificationOption.warning;
                settingOveride = NotificationConstants.NotificationSetting.berry_wither;
                break;
            case FarmNotificationType.Withered:
                message = 'A Berry plant has withered!';
                settingOveride = NotificationConstants.NotificationSetting.berry_wither;
                type = NotificationConstants.NotificationOption.warning;
                break;
            case FarmNotificationType.Mutated:
                message = 'A Berry plant has mutated!';
                settingOveride = NotificationConstants.NotificationSetting.berry_mutated;
                break;
            case FarmNotificationType.Replanted:
                message = 'A Berry has been replanted!';
                break;
            case FarmNotificationType.Dropped:
                message = 'A Berry has been dropped!';
                break;
            case FarmNotificationType.MulchRanOut:
                message = 'A plot has run out of mulch!';
                type = NotificationConstants.NotificationOption.warning;
                break;
            case FarmNotificationType.Wander:
                const pokemon = (wander === null || wander === void 0 ? void 0 : wander.shiny) ? `shiny ${wander === null || wander === void 0 ? void 0 : wander.pokemon}` : wander === null || wander === void 0 ? void 0 : wander.pokemon;
                message = `A wild ${pokemon} has wandered onto the farm!`;
                type = (wander === null || wander === void 0 ? void 0 : wander.shiny) ? NotificationConstants.NotificationOption.warning : NotificationConstants.NotificationOption.success;
                break;
        }
        Notifier.notify({
            message,
            type,
            sound: NotificationConstants.NotificationSound.ready_to_harvest,
            setting: settingOveride || NotificationConstants.NotificationSetting.ready_to_harvest,
        });
    }
    resetAuras() {
        this.externalAuras[AuraType.Attract](1);
        this.externalAuras[AuraType.Egg](1);
        this.externalAuras[AuraType.Shiny](1);
        this.plotList.forEach((plot) => plot.clearAuras());
        // Handle Boost Auras first
        this.plotList.forEach((plot, idx) => {
            var _a, _b;
            if (((_a = plot.berryData) === null || _a === void 0 ? void 0 : _a.aura) && ((_b = plot.berryData) === null || _b === void 0 ? void 0 : _b.aura.auraType) === AuraType.Boost) {
                plot.emitAura(idx);
            }
        });
        // Handle rest of Auras
        this.plotList.forEach((plot, idx) => {
            var _a, _b;
            if (!((_a = plot.berryData) === null || _a === void 0 ? void 0 : _a.aura) || ((_b = plot.berryData) === null || _b === void 0 ? void 0 : _b.aura.auraType) !== AuraType.Boost) {
                plot.emitAura(idx);
            }
        });
    }
    unlockPlot(index) {
        if (this.allPlotsUnlocked()) {
            return;
        }
        if (this.canBuyPlot(index)) {
            const berryData = this.plotBerryCost(index);
            GameHelper.incrementObservable(this.berryList[berryData.type], -berryData.amount);
            const cost = this.plotFPCost(index);
            App.game.wallet.loseAmount(new Amount(cost, GameConstants.Currency.farmPoint));
            this.plotList[index].isUnlocked = true;
        }
    }
    allPlotsUnlocked() {
        return this.plotList.every((plot) => plot.isUnlocked);
    }
    canBuyPlot(index) {
        const berryData = this.plotBerryCost(index);
        if (App.game.farming.berryList[berryData.type]() < berryData.amount) {
            return false;
        }
        const cost = this.plotFPCost(index);
        if (!App.game.wallet.hasAmount(new Amount(cost, GameConstants.Currency.farmPoint))) {
            return false;
        }
        return true;
    }
    plotFPCost(index) {
        const berryType = Farming.unlockMatrix[index];
        return 10 * Math.floor(Math.pow(berryType + 1, 2));
    }
    plotBerryCost(index) {
        const berryType = Farming.unlockMatrix[index];
        return { type: berryType, amount: 10 * (berryType + 1) };
    }
    //#endregion
    plant(index, berry, suppressResetAura = false) {
        const plot = this.plotList[index];
        if (!plot.isEmpty() || !plot.isUnlocked || !this.hasBerry(berry)) {
            return;
        }
        GameHelper.incrementObservable(this.berryList[berry], -1);
        plot.plant(berry);
        if (!suppressResetAura) {
            this.resetAuras();
        }
    }
    plantAll(berry) {
        this.plotList.forEach((plot, index) => {
            this.plant(index, berry, true);
        });
        this.resetAuras();
    }
    /**
     * Harvest a plot at the given index
     * @param index The index of the plot to harvest
     */
    harvest(index, suppressResetAura = false) {
        const plot = this.plotList[index];
        this.harvestPlot(plot, suppressResetAura);
    }
    harvestPlot(plot, suppressResetAura = false) {
        if (plot.berry === BerryType.None || plot.stage() != PlotStage.Berry) {
            console.log(`failed to harvest ${plot.stage()}`);
            return;
        }
        App.game.wallet.gainFarmPoints(this.berryData[plot.berry].farmValue);
        const amount = plot.harvestAmount();
        this.gainBerry(plot.berry, amount);
        App.game.oakItems.use(OakItems.OakItem.Sprayduck, this.berryData[plot.berry].exp);
        GameHelper.incrementObservable(App.game.statistics.totalManualHarvests, 1);
        player.lowerItemMultipliers(MultiplierDecreaser.Berry, this.berryData[plot.berry].exp);
        plot.die(true);
        if (!suppressResetAura) {
            this.resetAuras();
        }
    }
    /**
     * Try to harvest all plots
     */
    harvestAll() {
        this.plotList.forEach((plot, index) => {
            this.harvest(index, true);
        });
        this.resetAuras();
    }
    /**
     * Handles using the Berry Shovel to remove a Berry plant
     * @param index The plot index
     */
    shovel(index) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked) {
            return;
        }
        if (plot.isEmpty()) {
            return;
        }
        if (this.shovelAmt() <= 0) {
            return;
        }
        plot.die(true);
        GameHelper.incrementObservable(this.shovelAmt, -1);
        GameHelper.incrementObservable(App.game.statistics.totalShovelsUsed, 1);
        this.resetAuras();
    }
    /**
     * Adds mulch to a plot
     * @param index The plot index
     * @param mulch The MulchType to be added
     * @param amount The amount of mulch to apply. Defaults to 1
     */
    addMulch(index, mulch, amount = 1) {
        const plot = this.plotList[index];
        if (!this.canMulch(index, mulch)) {
            return;
        }
        amount = Math.min(this.mulchList[mulch](), amount);
        GameHelper.incrementObservable(this.mulchList[mulch], -amount);
        GameHelper.incrementObservable(App.game.statistics.totalMulchesUsed, amount);
        GameHelper.incrementObservable(App.game.statistics.mulchesUsed[mulch], amount);
        plot.mulch = +mulch;
        plot.mulchTimeLeft += GameConstants.MULCH_USE_TIME * amount;
    }
    /**
     * Attempts to add mulch to all plots
     * @param mulch The MulchType to be added
     * @param amount The amount of mulch to apply to each plot. Defaults to 1
     */
    mulchAll(mulch, amount = 1) {
        const mulchPlots = this.plotList.filter((_, index) => this.canMulch(index, mulch));
        amount *= mulchPlots.length;
        amount = Math.min(this.mulchList[mulch](), amount);
        const sharedMulch = Math.floor(amount / mulchPlots.length);
        if (sharedMulch <= 0) {
            return;
        }
        this.plotList.forEach((_, index) => {
            this.addMulch(index, mulch, sharedMulch);
        });
    }
    canMulch(index, mulch) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked || !this.hasMulch(mulch)) {
            return false;
        }
        if (plot.mulch != MulchType.None && plot.mulch != mulch) {
            return false;
        }
        return true;
    }
    /**
     * Gives the player a random Berry from the first 8 types
     * @param amount Amount of berries to give. Defaults to 1.
     * @param disableNotification Set to true to not notify the player. Defaults to false.
     */
    gainRandomBerry(amount = 1, disableNotification = false) {
        const berry = GameHelper.getIndexFromDistribution(GameConstants.BerryDistribution);
        if (!disableNotification) {
            Notifier.notify({
                message: `You got a ${BerryType[berry]} berry!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.route_item_found,
            });
        }
        this.gainBerry(berry, amount);
    }
    gainBerry(berry, amount = 1) {
        GameHelper.incrementObservable(this.berryList[berry], Math.floor(amount));
        if (amount > 0) {
            this.unlockBerry(berry);
            GameHelper.incrementObservable(App.game.statistics.totalBerriesHarvested, amount);
            GameHelper.incrementObservable(App.game.statistics.berriesHarvested[berry], amount);
        }
    }
    hasBerry(berry) {
        return this.berryList[berry]() > 0;
    }
    hasMulch(mulch) {
        return this.mulchList[mulch]() > 0;
    }
    canAccess() {
        return MapHelper.accessToRoute(14, 0) && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Wailmer_pail);
    }
    unlockBerry(berry) {
        if (!this.unlockedBerries[berry]()) {
            Notifier.notify({
                message: `You've discovered a ${BerryType[berry]} Berry!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.route_item_found,
            });
            this.unlockedBerries[berry](true);
        }
    }
    /**
     * Checks whether a Berry plant exists on the farm
     * @param berry The Berry type
     * @param stage The stage of the Berry plant. Defaults to PlotStage.Berry
     */
    berryInFarm(berry, stage = PlotStage.Berry) {
        return this.plotList.some((plot) => plot.berry == berry && plot.stage() >= stage);
    }
    toJSON() {
        return {
            berryList: this.berryList.map(ko.unwrap),
            unlockedBerries: this.unlockedBerries.map(ko.unwrap),
            mulchList: this.mulchList.map(ko.unwrap),
            plotList: this.plotList.map((plot) => plot.toJSON()),
            shovelAmt: this.shovelAmt(),
            mutations: this.mutations.map((mutation) => mutation.toJSON()),
        };
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const savedBerries = json['berryList'];
        if (savedBerries == null) {
            this.berryList = this.defaults.berryList.map((v) => ko.observable(v));
        }
        else {
            savedBerries.forEach((value, index) => {
                this.berryList[index](value);
            });
        }
        const savedUnlockedBerries = json['unlockedBerries'];
        if (savedUnlockedBerries == null) {
            this.unlockedBerries = this.defaults.unlockedBerries.map((v) => ko.observable(v));
        }
        else {
            savedUnlockedBerries.forEach((value, index) => {
                this.unlockedBerries[index](value);
            });
        }
        const savedMulches = json['mulchList'];
        if (savedMulches == null) {
            this.mulchList = this.defaults.mulchList.map((v) => ko.observable(v));
        }
        else {
            savedMulches.forEach((value, index) => {
                this.mulchList[index](value);
            });
        }
        const savedPlots = json['plotList'];
        if (savedPlots == null) {
            this.plotList = this.defaults.plotList;
        }
        else {
            savedPlots.forEach((value, index) => {
                const plot = new Plot(false, BerryType.None, 0, MulchType.None, 0);
                plot.fromJSON(value);
                this.plotList[index] = plot;
            });
        }
        const shovelAmt = json['shovelAmt'];
        if (shovelAmt == null) {
            this.shovelAmt = ko.observable(this.defaults.shovelAmt);
        }
        else {
            this.shovelAmt(shovelAmt);
        }
        const mutations = json['mutations'];
        if (mutations == null) {
            this.mutations.forEach((mutation) => mutation.fromJSON({}));
        }
        else {
            this.mutations.forEach((mutation, i) => mutation.fromJSON(mutations[i]));
        }
    }
    static getGeneration(gen) {
        const genBounds = Farming.genBounds;
        const minBound = genBounds[gen - 1] || 0;
        const maxBound = genBounds[gen] || Infinity;
        return App.game.farming.berryData.filter((berry) => berry.type >= minBound && berry.type < maxBound).map((berry) => berry.type);
    }
    static getColor(color) {
        return App.game.farming.berryData.filter((berry) => berry.color === color).map((berry) => berry.type);
    }
}
Farming.PLOT_WIDTH = 5;
Farming.PLOT_HEIGHT = 5;
//#region Plot Unlocking
Farming.unlockMatrix = [BerryType.Kelpsy, BerryType.Mago, BerryType.Persim, BerryType.Wepear, BerryType.Qualot, BerryType.Wiki, BerryType.Aspear, BerryType.Cheri, BerryType.Leppa, BerryType.Aguav, BerryType.Nanab, BerryType.Rawst, BerryType.None, BerryType.Chesto, BerryType.Razz, BerryType.Pomeg, BerryType.Sitrus, BerryType.Pecha, BerryType.Oran, BerryType.Pinap, BerryType.Grepa, BerryType.Figy, BerryType.Bluk, BerryType.Iapapa, BerryType.Hondew];
Farming.genBounds = [8, 20, 35, 53, Infinity];
var FlavorType;
(function (FlavorType) {
    FlavorType[FlavorType["Spicy"] = 0] = "Spicy";
    FlavorType[FlavorType["Dry"] = 1] = "Dry";
    FlavorType[FlavorType["Sweet"] = 2] = "Sweet";
    FlavorType[FlavorType["Bitter"] = 3] = "Bitter";
    FlavorType[FlavorType["Sour"] = 4] = "Sour";
})(FlavorType || (FlavorType = {}));
class Plot {
    constructor(isUnlocked, berry, age, mulch, mulchTimeLeft) {
        this.saveKey = '';
        this.defaults = {
            isUnlocked: false,
            berry: BerryType.None,
            age: 0,
            mulch: MulchType.None,
            mulchTimeLeft: 0,
        };
        this._isUnlocked = ko.observable(isUnlocked);
        this._berry = ko.observable(berry).extend({ numeric: 0 });
        this._age = ko.observable(age).extend({ numeric: 3 });
        this._mulch = ko.observable(mulch).extend({ numeric: 0 });
        this._mulchTimeLeft = ko.observable(mulchTimeLeft).extend({ numeric: 3 });
        this._auras = [];
        this._auras[AuraType.Growth] = ko.observable(1);
        this._auras[AuraType.Harvest] = ko.observable(1);
        this._auras[AuraType.Mutation] = ko.observable(1);
        this._auras[AuraType.Replant] = ko.observable(1);
        this._auras[AuraType.Death] = ko.observable(1);
        this._auras[AuraType.Boost] = ko.observable(1);
        this.formattedStageTimeLeft = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return '';
            }
            const growthTime = this.berryData.growthTime.find((t) => this.age < t);
            const timeLeft = Math.ceil(growthTime - this.age);
            const growthMultiplier = App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            return GameConstants.formatTime(timeLeft / growthMultiplier);
        });
        this.formattedTimeLeft = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return '';
            }
            let timeLeft = 0;
            if (this.age < this.berryData.growthTime[3]) {
                timeLeft = Math.ceil(this.berryData.growthTime[3] - this.age);
            }
            else {
                timeLeft = Math.ceil(this.berryData.growthTime[4] - this.age);
            }
            const growthMultiplier = App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            return GameConstants.formatTime(timeLeft / growthMultiplier);
        });
        this.formattedMulchTimeLeft = ko.pureComputed(() => {
            if (this.mulch === MulchType.None) {
                return '';
            }
            return GameConstants.formatTime(this.mulchTimeLeft);
        });
        this.auraGrowth = ko.pureComputed(() => {
            return this._auras[AuraType.Growth]();
        });
        this.auraHarvest = ko.pureComputed(() => {
            return this._auras[AuraType.Harvest]();
        });
        this.auraMutation = ko.pureComputed(() => {
            return this._auras[AuraType.Mutation]();
        });
        this.auraReplant = ko.pureComputed(() => {
            return this._auras[AuraType.Replant]();
        });
        this.auraDeath = ko.pureComputed(() => {
            return this._auras[AuraType.Death]();
        });
        this.auraBoost = ko.pureComputed(() => {
            return this._auras[AuraType.Boost]();
        });
        this.formattedAuras = ko.pureComputed(() => {
            const auraStr = [];
            if (this.auraGrowth() !== 1) {
                auraStr.push(`Growth: ${this.auraGrowth().toFixed(2)}x`);
            }
            if (this.auraHarvest() !== 1) {
                auraStr.push(`Harvest: ${this.auraHarvest().toFixed(2)}x`);
            }
            if (this.auraMutation() !== 1) {
                auraStr.push(`Mutation: ${this.auraMutation().toFixed(2)}x`);
            }
            if (this.auraReplant() !== 1) {
                auraStr.push(`Replant: ${this.auraReplant().toFixed(2)}x`);
            }
            if (this.auraDeath() !== 1) {
                auraStr.push(`Death: ${this.auraDeath().toFixed(2)}x`);
            }
            if (this.auraBoost() !== 1) {
                auraStr.push(`Boost: ${this.auraBoost().toFixed(2)}x`);
            }
            return auraStr.join('<br/>');
        });
        this.isEmpty = ko.pureComputed(() => {
            return this.berry === BerryType.None;
        });
        this.stage = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return PlotStage.Seed;
            }
            return this.berryData.growthTime.findIndex((t) => this.age <= t);
        });
        this.tooltip = ko.pureComputed(() => {
            const tooltip = [];
            // Time
            if (this.berry !== BerryType.None) {
                tooltip.push(`<u>${BerryType[this.berry]}</u>`);
                // Petaya Effect
                if (App.game.farming.berryInFarm(BerryType.Petaya) && this.berry !== BerryType.Petaya && this.stage() == PlotStage.Berry) {
                    tooltip.push('∞ until death');
                    // Normal Time
                }
                else {
                    const timeType = Settings.getSetting('farmDisplay').observableValue();
                    if (timeType === 'nextStage') {
                        const formattedTime = this.formattedStageTimeLeft();
                        switch (this.stage()) {
                            case PlotStage.Seed:
                                tooltip.push(`${formattedTime} until sprout`);
                                break;
                            case PlotStage.Sprout:
                                tooltip.push(`${formattedTime} until grown`);
                                break;
                            case PlotStage.Taller:
                                tooltip.push(`${formattedTime} until bloom`);
                                break;
                            case PlotStage.Bloom:
                                tooltip.push(`${formattedTime} until ripe`);
                                break;
                            case PlotStage.Berry:
                                tooltip.push(`${formattedTime} until death`);
                                break;
                        }
                    }
                    else {
                        const formattedTime = this.formattedTimeLeft();
                        switch (this.stage()) {
                            case PlotStage.Seed:
                            case PlotStage.Sprout:
                            case PlotStage.Taller:
                            case PlotStage.Bloom:
                                tooltip.push(`${formattedTime} until ripe`);
                                break;
                            case PlotStage.Berry:
                                tooltip.push(`${formattedTime} until death`);
                                break;
                        }
                    }
                }
            }
            // Aura
            if (this.stage() >= PlotStage.Taller && this.berryData.aura) {
                tooltip.push('<u>Aura Emitted:</u>');
                const emittedAura = this.berryData.aura.getAuraValue(this.stage()) * this._auras[AuraType.Boost]();
                tooltip.push(`${AuraType[this.berryData.aura.auraType]}: ${emittedAura.toFixed(2)}x`);
            }
            const auraStr = this.formattedAuras();
            if (auraStr) {
                tooltip.push('<u>Aura Received:</u>');
                tooltip.push(auraStr);
            }
            // Mulch
            if (this.mulch !== MulchType.None) {
                const mulchTime = this.formattedMulchTimeLeft();
                tooltip.push('<u>Mulch</u>');
                tooltip.push(`${MulchType[this.mulch].replace('_Mulch', '')} : ${mulchTime}`);
            }
            return tooltip.join('<br/>');
        });
        this.notifications = [];
    }
    /**
     * Handles updating the berry plant
     * @param seconds Number of seconds to add to the plants age
     * @returns Whether the plot stage has changed this update
     */
    update(seconds) {
        // Updating Berry
        let change = false;
        if (this.berry !== BerryType.None) {
            const growthTime = seconds * App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            const oldAge = this.age;
            this.age += growthTime;
            // Checking for Petaya Berries
            if (App.game.farming.berryInFarm(BerryType.Petaya) && this.berry !== BerryType.Petaya) {
                this.age = Math.min(this.age, this.berryData.growthTime[3] + 1);
            }
            const updatedStage = this.stageUpdated(oldAge, this.age);
            if (updatedStage !== PlotStage.Seed) {
                change = true;
            }
            if (updatedStage === PlotStage.Berry) {
                this.notifications.push(FarmNotificationType.Ripe);
                change = true;
            }
            if (!this._hasWarnedAboutToWither && this.age + 15 > this.berryData.growthTime[4]) {
                this.notifications.push(FarmNotificationType.AboutToWither);
                this._hasWarnedAboutToWither = true;
            }
            if (this.age > this.berryData.growthTime[4]) {
                this.die();
                change = true;
            }
            if (this.stage() === PlotStage.Berry && Settings.getSetting('autoHarvest').observableValue()) {
                App.game.farming.harvestPlot(this);
            }
        }
        // Updating Mulch
        if (this.mulch !== MulchType.None) {
            this.mulchTimeLeft = Math.max(this.mulchTimeLeft - seconds, 0);
            if (this.mulchTimeLeft === 0) {
                this.notifications.push(FarmNotificationType.MulchRanOut);
                this.mulch = MulchType.None;
            }
        }
        return change;
    }
    stageUpdated(oldAge, newAge) {
        const oldStage = this.berryData.growthTime.findIndex((t) => oldAge < t);
        const newStage = this.berryData.growthTime.findIndex((t) => newAge < t);
        if (oldStage !== newStage) {
            return newStage;
        }
        return PlotStage.Seed;
    }
    /**
     * Handles planting a berry on the plot
     * @param berry The BerryType
     */
    plant(berry) {
        this.berry = berry;
        this.age = 0;
        this.notifications = [];
        this._hasWarnedAboutToWither = false;
    }
    /**
     * Returns how many berries will be harvested
     */
    harvestAmount() {
        return this.berryData.harvestAmount * this.getHarvestMultiplier();
    }
    /**
     * Handles killing the berry plant
     * @param harvested Whether this death was due to the player harvesting manually, or by withering
     */
    die(harvested = false) {
        if (!harvested) {
            // Withered Berry plant drops half of the berries
            const amount = Math.ceil(this.harvestAmount() / 2);
            if (amount) {
                App.game.farming.gainBerry(this.berry, amount);
                this.notifications.push(FarmNotificationType.Dropped);
            }
            // Check if berry replants itself
            const replantChance = this.berryData.replantRate * App.game.farming.getReplantMultiplier() * this.getReplantMultiplier();
            if (Math.random() < replantChance) {
                this.age = 0;
                this.notifications.push(FarmNotificationType.Replanted);
                App.game.oakItems.use(OakItems.OakItem.Sprinklotad);
                GameHelper.incrementObservable(App.game.statistics.totalBerriesReplanted, 1);
                return;
            }
            this.notifications.push(FarmNotificationType.Withered);
            // Check for Kasib berry mutation/replant chance
            if (App.game.farming.highestUnlockedBerry() > BerryType.Occa) {
                if (!App.game.farming.berryInFarm(BerryType.Colbur)) {
                    if (Math.random() < 0.05) {
                        this.notifications.push(FarmNotificationType.Mutated);
                        this.berry = BerryType.Kasib;
                        this.age = 0;
                        App.game.farming.unlockBerry(BerryType.Kasib);
                        return;
                    }
                }
            }
        }
        // Reset plant
        if (!Settings.getSetting('autoReplant').observableValue()) {
            this.berry = BerryType.None;
        }
        this.age = 0;
    }
    generateWanderPokemon() {
        // Check if plot is eligible for wandering Pokemon
        if (!this.isUnlocked || this.berry === BerryType.None || this.stage() !== PlotStage.Berry) {
            return undefined;
        }
        // Chance to generate wandering Pokemon
        if (Math.random() < GameConstants.WANDER_RATE * App.game.farming.externalAuras[AuraType.Attract]()) {
            // Get a random Pokemon from the list of possible encounters
            const availablePokemon = this.berryData.wander.filter((pokemon) => PokemonHelper.calcNativeRegion(pokemon) <= player.highestRegion());
            const wanderPokemon = availablePokemon[Math.floor(Math.random() * availablePokemon.length)];
            const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_FARM);
            // Add to log book
            const pokemonStr = shiny ? `shiny ${wanderPokemon}` : wanderPokemon;
            App.game.logbook.newLog(LogBookTypes.WANDER, `A wild ${pokemonStr} has wandered onto the farm!`);
            // Gain Pokemon
            App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(wanderPokemon).id, shiny, true);
            // Check for Starf berry generation
            if (shiny) {
                const emptyPlots = App.game.farming.plotList.filter((plot) => plot.isUnlocked && plot.isEmpty());
                // No Starf generation if no empty plots :(
                if (emptyPlots.length) {
                    const chosenPlot = emptyPlots[Math.floor(Math.random() * emptyPlots.length)];
                    chosenPlot.plant(BerryType.Starf);
                    App.game.farming.unlockBerry(BerryType.Starf);
                }
            }
            return { pokemon: wanderPokemon, shiny: shiny };
        }
        return undefined;
    }
    /**
     * Gets the growth multiplier for this plot
     */
    getGrowthMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Boost_Mulch) {
            multiplier = GameConstants.BOOST_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_GROWTH_MULTIPLIER;
        }
        multiplier *= this._auras[AuraType.Growth]();
        // Handle Death Aura
        if (this.stage() == PlotStage.Berry && this.berry != BerryType.Kasib) {
            multiplier *= this._auras[AuraType.Death]();
        }
        return multiplier;
    }
    /**
     * Gets the harvest multiplier for this plot
     */
    getHarvestMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Rich_Mulch) {
            multiplier = GameConstants.RICH_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_PRODUCE_MULTIPLIER;
        }
        multiplier *= this._auras[AuraType.Harvest]();
        return multiplier;
    }
    /**
     * Gets the replant multiplier for this plot
     */
    getReplantMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Rich_Mulch) {
            multiplier = GameConstants.RICH_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_PRODUCE_MULTIPLIER;
        }
        multiplier *= this._auras[AuraType.Replant]();
        return multiplier;
    }
    /**
     * Gets the mutation multiplier for this plot
     */
    getMutationMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Surprise_Mulch) {
            multiplier = GameConstants.SURPRISE_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_MUTATE_MULTIPLIER;
        }
        multiplier *= this._auras[AuraType.Mutation]();
        return multiplier;
    }
    /**
     * Handles adding a multiplicative aura to the Plot
     * @param auraType The AuraType
     * @param multiplier The multiplier to modify the current aura by
     */
    addAura(auraType, multiplier) {
        const currentMultiplier = this._auras[auraType]();
        this._auras[auraType](currentMultiplier * multiplier);
    }
    /**
     * Handles setting the value of an aura to the Plot
     * @param auraType The AuraType
     * @param value The value to be set
     */
    setAura(auraType, value) {
        // Death Aura doesn't apply to Kasib
        if (auraType == AuraType.Death && this.berry === BerryType.Kasib) {
            return;
        }
        // Boost Aura doesn't apply to Lum
        if (auraType == AuraType.Boost && this.berry === BerryType.Lum) {
            return;
        }
        this._auras[auraType](value);
    }
    clearAuras() {
        this._auras.forEach((aura) => aura(1));
    }
    emitAura(index) {
        var _a;
        if (this.berry === BerryType.None) {
            return;
        }
        (_a = this.berryData.aura) === null || _a === void 0 ? void 0 : _a.emitAura(index);
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e;
        if (json == null) {
            return;
        }
        this.isUnlocked = (_a = json['isUnlocked']) !== null && _a !== void 0 ? _a : this.defaults.isUnlocked;
        this.berry = (_b = json['berry']) !== null && _b !== void 0 ? _b : this.defaults.berry;
        this.age = (_c = json['age']) !== null && _c !== void 0 ? _c : this.defaults.age;
        this.mulch = (_d = json['mulch']) !== null && _d !== void 0 ? _d : this.defaults.mulch;
        this.mulchTimeLeft = (_e = json['mulchTimeLeft']) !== null && _e !== void 0 ? _e : this.defaults.mulchTimeLeft;
    }
    toJSON() {
        return {
            isUnlocked: this.isUnlocked,
            berry: this.berry,
            age: this.age,
            mulch: this.mulch,
            mulchTimeLeft: this.mulchTimeLeft,
        };
    }
    /**
     * Finds the plot indices that are around the plot in a 3x3 square
     * @param index The plot index
     */
    static findNearPlots(index) {
        const plots = [];
        const posX = index % Farming.PLOT_WIDTH;
        const posY = (index - posX) / Farming.PLOT_HEIGHT;
        for (let y = posY - 1; y <= posY + 1; y++) {
            for (let x = posX - 1; x <= posX + 1; x++) {
                if (y < 0 || y > Farming.PLOT_HEIGHT - 1 || x < 0 || x > Farming.PLOT_WIDTH - 1) {
                    continue;
                }
                if (y === posY && x === posX) {
                    continue;
                }
                const id = y * Farming.PLOT_HEIGHT + x;
                plots.push(id);
            }
        }
        return plots;
    }
    /**
     * Finds the plot indices that are directly next to the plot (aka a plus sign)
     * @param index The plot index
     */
    static findPlusPlots(index, filter) {
        const posX = index % Farming.PLOT_WIDTH;
        const posY = (index - posX) / Farming.PLOT_HEIGHT;
        const possiblePlots = [
            [posY - 1, posX],
            [posY, posX - 1],
            [posY, posX + 1],
            [posY + 1, posX],
        ];
        return possiblePlots
            .filter(([y, x]) => {
            return y >= 0 && y < Farming.PLOT_HEIGHT && x >= 0 && x < Farming.PLOT_WIDTH;
        })
            .map(([y, x]) => y * Farming.PLOT_HEIGHT + x);
    }
    get berryData() {
        return App.game.farming.berryData[this.berry];
    }
    // Knockout getters
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(value) {
        this._isUnlocked(value);
    }
    get berry() {
        return this._berry();
    }
    set berry(berry) {
        this._berry(berry);
    }
    get age() {
        return this._age();
    }
    set age(value) {
        this._age(value);
    }
    get mulch() {
        return this._mulch();
    }
    set mulch(value) {
        this._mulch(value);
    }
    get mulchTimeLeft() {
        return this._mulchTimeLeft();
    }
    set mulchTimeLeft(value) {
        this._mulchTimeLeft(value);
    }
    get auras() {
        return this._auras.map((aura) => aura());
    }
}
var PlotStage;
(function (PlotStage) {
    PlotStage[PlotStage["Seed"] = 0] = "Seed";
    PlotStage[PlotStage["Sprout"] = 1] = "Sprout";
    PlotStage[PlotStage["Taller"] = 2] = "Taller";
    PlotStage[PlotStage["Bloom"] = 3] = "Bloom";
    PlotStage[PlotStage["Berry"] = 4] = "Berry";
})(PlotStage || (PlotStage = {}));
class Aura {
    constructor(auraType, auraMultipliers) {
        this.auraType = auraType;
        this.auraMultipliers = auraMultipliers;
    }
    /**
     * Handles applying the berry's Aura to its neighbors
     */
    emitAura(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.stage() < PlotStage.Taller) {
            return;
        }
        const multiplier = this.auraMultipliers[plot.stage() - 2] * plot._auras[AuraType.Boost]();
        const plots = Plot.findNearPlots(index);
        switch (this.auraType) {
            // External Auras
            case AuraType.Attract:
            case AuraType.Egg:
            case AuraType.Shiny:
                const currentMultiplier = App.game.farming.externalAuras[this.auraType]();
                App.game.farming.externalAuras[this.auraType](currentMultiplier * multiplier);
                break;
            // Auras that are the max magnitude of surroundings
            case AuraType.Death:
            case AuraType.Boost:
                for (const nearIdx of plots) {
                    const nearPlot = App.game.farming.plotList[nearIdx];
                    const currentMultiplier = nearPlot._auras[this.auraType]();
                    nearPlot.setAura(this.auraType, Math.max(currentMultiplier, multiplier));
                }
                break;
            // Default auras are multiplicative
            default:
                for (const nearIdx of plots) {
                    const nearPlot = App.game.farming.plotList[nearIdx];
                    nearPlot.addAura(this.auraType, multiplier);
                }
                break;
        }
    }
    getAuraValue(stage) {
        if (!stage || stage < PlotStage.Taller) {
            return 1;
        }
        return this.auraMultipliers[stage - 2];
    }
}
var AuraType;
(function (AuraType) {
    AuraType[AuraType["Growth"] = 0] = "Growth";
    AuraType[AuraType["Replant"] = 1] = "Replant";
    AuraType[AuraType["Mutation"] = 2] = "Mutation";
    AuraType[AuraType["Harvest"] = 3] = "Harvest";
    AuraType[AuraType["Egg"] = 4] = "Egg";
    AuraType[AuraType["Attract"] = 5] = "Attract";
    AuraType[AuraType["Shiny"] = 6] = "Shiny";
    AuraType[AuraType["Death"] = 7] = "Death";
    AuraType[AuraType["Boost"] = 8] = "Boost";
})(AuraType || (AuraType = {}));
class Mutation {
    constructor(mutationChance, mutatedBerry, options) {
        var _a;
        this._mutationChance = mutationChance;
        this.mutatedBerry = mutatedBerry;
        this._hint = options === null || options === void 0 ? void 0 : options.hint;
        this._unlockReq = options === null || options === void 0 ? void 0 : options.unlockReq;
        this.showHint = (_a = options === null || options === void 0 ? void 0 : options.showHint) !== null && _a !== void 0 ? _a : true;
        this._hintSeen = ko.observable(false);
    }
    toJSON() {
        return {
            hintSeen: this.hintSeen,
        };
    }
    fromJSON(json) {
        var _a;
        this.hintSeen = (_a = json === null || json === void 0 ? void 0 : json.hintSeen) !== null && _a !== void 0 ? _a : false;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        if (!this._unlockReq) {
            return true;
        }
        return this._unlockReq();
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (!this.showHint) {
            return '';
        }
        if (this._hint) {
            return this._hint;
        }
        return '';
    }
    /**
     * Handles getting the mutation chance
     * @param idx The plot index
     */
    mutationChance(idx) {
        return this._mutationChance;
    }
    /**
     * Update tag for mutations. Returns true if this mutation will occur
     */
    mutate() {
        if (!this.unlocked) {
            return false;
        }
        const plots = this.getMutationPlots();
        if (!plots.length) {
            return false;
        }
        let mutated = false;
        plots.forEach((idx) => {
            const willMutate = Math.random() < this.mutationChance(idx) * App.game.farming.getMutationMultiplier() * App.game.farming.plotList[idx].getMutationMultiplier();
            if (!willMutate) {
                return;
            }
            this.handleMutation(idx);
            App.game.oakItems.use(OakItems.OakItem.Squirtbottle);
            mutated = true;
        });
        return mutated;
    }
    get hintSeen() {
        return this._hintSeen();
    }
    set hintSeen(bool) {
        this._hintSeen(bool);
    }
}
/// <reference path="../Mutation.ts" />
/**
 * A Blank Mutation to be used to store hint data.
 * This is mostly because the Mutation framework controls the hints, but some mutations are outside of the Mutation framework
 */
class BlankMutation extends Mutation {
    getMutationPlots() {
        return [];
    }
    handleMutation(index) {
        return;
    }
}
/// <reference path="../Mutation.ts" />
/**
 * Mutation that occurs on an empty Plot
 */
class GrowMutation extends Mutation {
    constructor(mutationChance, mutatedBerry, options) {
        super(mutationChance, mutatedBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = [];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (!plot.isEmpty()) {
                return;
            }
            plots.push(idx);
        });
        return plots;
    }
    /**
     * Handles updating the farm with the mutation
     * @param index The plot index to mutate
     */
    handleMutation(index) {
        const plot = App.game.farming.plotList[index];
        plot.berry = this.mutatedBerry;
        plot.age = 0;
        plot.notifications = [];
        App.game.farming.unlockBerry(this.mutatedBerry);
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation to produce the Enigma Berry
 */
class EnigmaMutation extends GrowMutation {
    constructor(mutationChance) {
        super(mutationChance, BerryType.Enigma, {
            unlockReq: function () {
                if (App.game.discord.ID === null) {
                    return false;
                }
                return EnigmaMutation.getReqs().every((req) => { var _a, _b; return (_b = (_a = App.game.farming.unlockedBerries)[req]) === null || _b === void 0 ? void 0 : _b.call(_a); });
            },
        });
        this.hintsSeen = Array(4)
            .fill(false)
            .map((val) => ko.observable(val));
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        const reqs = EnigmaMutation.getReqs();
        return plots.filter((idx) => {
            const nearPlots = Plot.findPlusPlots(idx);
            if (nearPlots.length !== 4) {
                return false;
            }
            return nearPlots.every((idx, n) => {
                const plot = App.game.farming.plotList[idx];
                if (!plot.isUnlocked) {
                    return false;
                }
                if (plot.isEmpty()) {
                    return false;
                }
                if (plot.stage() !== PlotStage.Berry) {
                    return false;
                }
                if (plot.berry !== reqs[n]) {
                    return false;
                }
                return true;
            });
        });
    }
    /**
     * Returns a list of 4 Berry types to cause the mutation
     */
    static getReqs() {
        SeededRand.seed(+App.game.discord.ID());
        // Getting possible Berries
        // Only Gen 3 and 4 Berries so there isn't as big of a growth discrepancy (e.g. Cheri and Haban)
        let berryTypes = Farming.getGeneration(2).concat(Farming.getGeneration(3));
        // Remove parasite Berries, as having four sides for mutation requirements means parasite
        // mutations can make it difficult to have all four plants fully grown.
        // Also remove Babiri since they'll stop mutations
        berryTypes = berryTypes.filter((berry) => {
            return ![BerryType.Occa, BerryType.Kebia, BerryType.Colbur, BerryType.Babiri].includes(berry);
        });
        return [...new Array(4)].map((_) => SeededRand.fromArray(berryTypes));
    }
    get hintIndex() {
        SeededRand.seedWithDate(new Date());
        return Math.floor(SeededRand.next() * 4);
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get partialHint() {
        if (App.game.discord.ID === null) {
            return 'There is a Berry that requires a linked <u>Discord</u> account to appear...';
        }
        const idx = this.hintIndex;
        return `There's a mysterious berry that requires ${this.getHint(idx)}.`;
    }
    getHint(idx) {
        let direction = '';
        switch (idx) {
            case 0:
                direction = 'north';
                break;
            case 1:
                direction = 'west';
                break;
            case 2:
                direction = 'east';
                break;
            case 3:
                direction = 'south';
        }
        return `a ${BerryType[EnigmaMutation.getReqs()[idx]]} Berry to the ${direction}`;
    }
    /**
     * Handles getting the full hint for the BerryDex
     */
    get hint() {
        if (App.game.discord.ID === null) {
            return 'There is a Berry that requires a linked <u>Discord</u> account to appear...';
        }
        const hints = [];
        this.hintsSeen.forEach((hintSeen, idx) => {
            if (!hintSeen()) {
                return false;
            }
            hints.push(this.getHint(idx));
        });
        let tempHint = `There's a mysterious berry that requires ${hints.join(', ').replace(/, ([\w\s]+)$/, ' and $1')}`;
        if (hints.length === 0) {
            tempHint += 'a specific configuration of Berries';
        }
        tempHint += hints.length !== 4 ? '. However there\'s still something missing...' : '.';
        return tempHint;
    }
    toJSON() {
        const json = super.toJSON();
        json['hintsSeen'] = this.hintsSeen.map(ko.unwrap);
        return json;
    }
    fromJSON(json) {
        super.fromJSON(json);
        const hintsSeen = json['hintsSeen'];
        if (hintsSeen == null) {
            this.hintsSeen = Array(4)
                .fill(false)
                .map((v) => ko.observable(v));
        }
        else {
            hintsSeen.forEach((value, index) => {
                this.hintsSeen[index](value);
            });
        }
    }
}
/// <reference path="../Mutation.ts" />
/**
 * Mutation that occurs on a Berry plant that is PlotStage.Taller or older.
 */
class EvolveMutation extends Mutation {
    constructor(mutationChance, mutatedBerry, originalBerry, options) {
        super(mutationChance, mutatedBerry, options);
        this.originalBerry = originalBerry;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = [];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            if (this.originalBerry && plot.berry !== this.originalBerry) {
                return;
            }
            // Babiri Berries can't mutate
            if (plot.berry === BerryType.Babiri) {
                return;
            }
            plots.push(idx);
        });
        return plots;
    }
    /**
     * Handles updating the farm with the mutation.
     * Mutations will keep the new Berry plant in the same stage as it was previously
     * @param index The plot index to mutate
     */
    handleMutation(index) {
        const plot = App.game.farming.plotList[index];
        const currentStage = plot.stage();
        let newAge = 0;
        if (currentStage !== PlotStage.Seed) {
            newAge = App.game.farming.berryData[this.mutatedBerry].growthTime[currentStage - 1] + 1;
        }
        plot.berry = this.mutatedBerry;
        plot.age = newAge;
        plot.notifications = [];
        App.game.farming.unlockBerry(this.mutatedBerry);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for unlocked original berry
        if (this.originalBerry && !App.game.farming.unlockedBerries[this.originalBerry]()) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveMutation.ts" />
/**
 * Mutation that requires a specific environment near a Berry plot.
 */
class EvolveNearMutation extends EvolveMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const nearPlots = Plot.findNearPlots(idx);
            return this.nearPlotsFitRequirements(nearPlots);
        });
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires at least some amount of specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryMinMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return Object.keys(this.berryReqs).every(key => currentReqs[key] !== undefined && currentReqs[key] >= this.berryReqs[key]);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires specific Berry plants near a Berry plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        return this.berryReqs.every((req) => {
            return plots.some((plot) => {
                return this.checkRequirement(plot, req);
            });
        });
    }
    /**
     * Checks an individual plot for a Berry requirement
     */
    checkRequirement(index, berryReq) {
        const plot = App.game.farming.plotList[index];
        if (!plot.isUnlocked) {
            return false;
        }
        if (plot.berry !== berryReq) {
            return false;
        }
        if (plot.stage() !== PlotStage.Berry) {
            return false;
        }
        return true;
    }
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        const berryType = this.originalBerry !== undefined ? BerryType[this.originalBerry] : 'some';
        if (this.berryReqs.length === 0) {
            return `I've heard that ${berryType} Berries can spontaneously change!`;
        }
        let str = `I've heard that growing ${berryType} Berries`;
        str += ` near ${this.berryReqs.map(b => BerryType[b]).join(', ').replace(/, ([\w\s]+)$/, ' and $1')} Berries`;
        str += ' can cause it to change!';
        return str;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!this.berryReqs.every(req => App.game.farming.unlockedBerries[req]())) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires very specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryStrictMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, neighborStageReq, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
        this.neighborStageReq = neighborStageReq;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < this.neighborStageReq) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return GameHelper.shallowEqual(this.berryReqs, currentReqs);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires specific flavored Berry plants near a Berry plot
 * Will check the surround plots for the flavors of the nearby Berry plants. Must be in the range of the flavorReqs
 */
class EvolveNearFlavorMutation extends EvolveNearMutation {
    /**
     * Constructor for a FlavorMutation
     * @param mutationChance The chance of the mutation occuring
     * @param mutatedBerry The mutated BerryType
     * @param flavorReqs The flavor requirements for the mutation to occur
     * @param options The additional MutationOptions
     */
    constructor(mutationChance, mutatedBerry, originalBerry, flavorReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.flavorReqs = flavorReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const nearFlavors = [0, 0, 0, 0, 0];
        plots.forEach(idx => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        return this.flavorReqs.every((value, idx) => value[0] <= nearFlavors[idx] && nearFlavors[idx] <= value[1]);
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a total amount of flavor in the field
 */
class FieldFlavorMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, fieldFlavor, options) {
        super(mutationChance, mutatedBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.fieldFlavor = fieldFlavor;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const nearFlavors = [0, 0, 0, 0, 0];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        const reqMatched = this.fieldFlavor.every((value, idx) => value <= nearFlavors[idx]);
        if (reqMatched) {
            return emptyPlots;
        }
        return [];
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a number of Berry plants in the farm
 */
class FieldMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, fieldBerry, fieldAmount = 22, options) {
        super(mutationChance, mutatedBerry, options);
        this.fieldBerry = fieldBerry;
        this.fieldAmount = fieldAmount;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        let fieldPlots = 0;
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.berry === this.fieldBerry && plot.stage() === PlotStage.Berry) {
                fieldPlots += 1;
            }
        });
        if (fieldPlots > this.fieldAmount) {
            return emptyPlots;
        }
        return [];
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!App.game.farming.unlockedBerries[this.fieldBerry]()) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return `Legends tell of a mysterious Berry that only appears in a field of ${BerryType[this.fieldBerry]} Berries.`;
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a specific environment near an empty plot.
 */
class GrowNearMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, options) {
        super(mutationChance, mutatedBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const nearPlots = Plot.findNearPlots(idx);
            return this.nearPlotsFitRequirements(nearPlots);
        });
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class GrowNearBerryMutation extends GrowNearMutation {
    constructor(mutationChance, mutatedBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        return this.berryReqs.every((req) => {
            return plots.some((plot) => {
                return this.checkRequirement(plot, req);
            });
        });
    }
    /**
     * Checks an individual plot for a Berry requirement
     */
    checkRequirement(index, berryReq) {
        const plot = App.game.farming.plotList[index];
        if (!plot.isUnlocked) {
            return false;
        }
        if (plot.berry !== berryReq) {
            return false;
        }
        if (plot.stage() !== PlotStage.Berry) {
            return false;
        }
        return true;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        if (this.berryReqs.length === 1) {
            return `I've heard that growing ${BerryType[this.berryReqs[0]]} Berries can spread a new Berry into nearby empty plots!`;
        }
        if (this.berryReqs.length >= 2) {
            return `I've heard that growing ${this.berryReqs.map(b => BerryType[b]).join(', ').replace(/, ([\w\s]+)$/, ' and $1')} Berries near each other will produce something interesting!`;
        }
        return '';
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!this.berryReqs.every(req => App.game.farming.unlockedBerries[req]())) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires very specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class GrowNearBerryStrictMutation extends GrowNearMutation {
    constructor(mutationChance, mutatedBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return GameHelper.shallowEqual(this.berryReqs, currentReqs);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires specific flavored Berry plants near an empty plot
 * Will check the surround plots for the flavors of the nearby Berry plants. Must be in the range of the flavorReqs
 */
class GrowNearFlavorMutation extends GrowNearMutation {
    /**
     * Constructor for a FlavorMutation
     * @param mutationChance The chance of the mutation occuring
     * @param mutatedBerry The mutated BerryType
     * @param flavorReqs The flavor requirements for the mutation to occur
     * @param options The additional MutationOptions
     */
    constructor(mutationChance, mutatedBerry, flavorReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.flavorReqs = flavorReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const nearFlavors = [0, 0, 0, 0, 0];
        plots.forEach(idx => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        return this.flavorReqs.every((value, idx) => value[0] <= nearFlavors[idx] && nearFlavors[idx] <= value[1]);
    }
    /**
     * Handles getting the mutation chance.
     * Will decrease the mutation chance if the mutatedBerry already exists around this one.
     * @param idx The plot index
     */
    mutationChance(idx) {
        const sameBerries = Plot.findNearPlots(idx).filter(plotIndex => {
            return App.game.farming.plotList[plotIndex].berry === this.mutatedBerry;
        }).length;
        return super.mutationChance(idx) * Math.pow(4, -sameBerries);
    }
}
/// <reference path="./EvolveMutation.ts" />
/**
 * Mutation that applies to a current Berry plant based on the active state of Oak Items
 */
class OakMutation extends EvolveMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, oakItem, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.oakItem = oakItem;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const plot = App.game.farming.plotList[idx];
            return this.plotFitRequirements(plot, idx);
        });
    }
    /**
     * Checks whether a plot fits the requirements for a mutation
     * @param plot The Plot
     * @param idx The Plot index
     */
    plotFitRequirements(plot, idx) {
        if (!App.game.oakItems.isActive(this.oakItem)) {
            return false;
        }
        if (this.originalBerry && plot.berry !== this.originalBerry) {
            return false;
        }
        return true;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check Oak Item unlock status
        if (!App.game.oakItems.isUnlocked(this.oakItem)) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return `I've heard that using the ${App.game.oakItems.itemList[this.oakItem].displayName} can cause ${BerryType[this.originalBerry]} Berries to change!`;
    }
}
/// <reference path="./EvolveNearBerryMutation.ts" />
/**
 * Parasite Mutation
 */
class ParasiteMutation extends EvolveNearBerryMutation {
    constructor(mutationChance, berry) {
        super(mutationChance, berry, undefined, [berry], { showHint: false });
    }
    /**
     * Determines which plots can mutate. Excludes the parasite berry
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            return App.game.farming.plotList[idx].berry !== this.mutatedBerry;
        });
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation for the Petaya Berry. Requires all 18 typed Berries to be in the field.
 */
class PetayaMutation extends GrowMutation {
    constructor(mutationChance, options) {
        super(mutationChance, BerryType.Petaya, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const fieldPlots = {};
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!fieldPlots[plot.berry]) {
                fieldPlots[plot.berry] = 1;
            }
            else {
                fieldPlots[plot.berry] += 1;
            }
        });
        const requiredBerries = Farming.getGeneration(3);
        if (requiredBerries.every(berry => fieldPlots[berry])) {
            return emptyPlots;
        }
        return [];
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        const requiredBerries = Farming.getGeneration(3);
        if (!requiredBerries.every(berry => App.game.farming.unlockedBerries[berry]())) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return 'Legends tell of a mysterious Berry that only appears while surrounded by all types of Berries.';
    }
}
///<reference path="GymPokemon.ts"/>
///<reference path="../pokemons/PokemonFactory.ts"/>
///<reference path="../achievements/OneFromManyRequirement.ts"/>
///<reference path="../../declarations/enums/Badges.d.ts"/>
/**
 * Data list that contains all gymLeaders, accessible by townName.
 */
const gymList = {};
/**
 * Gym class.
 */
class Gym {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, defeatMessage, requirements = [], rewardFunction = () => { }) {
        this.leaderName = leaderName;
        this.town = town;
        this.pokemons = pokemons;
        this.badgeReward = badgeReward;
        this.moneyReward = moneyReward;
        this.defeatMessage = defeatMessage;
        this.requirements = requirements;
        this.rewardFunction = rewardFunction;
    }
    static isUnlocked(gym) {
        return gym.requirements.every(requirement => requirement.isCompleted());
    }
    static calculateCssClass(gym) {
        return ko.pureComputed(() => {
            if (App.game.badgeCase.hasBadge(gym.badgeReward)) {
                return 'btn btn-success';
            }
            return 'btn btn-secondary';
        });
    }
    static getLeaderByBadge(badge) {
        for (const item in gymList) {
            const gym = gymList[item];
            if (BadgeEnums[gym.badgeReward] == BadgeEnums[BadgeEnums[badge]]) {
                return gym.leaderName;
            }
        }
        return 'Brock';
    }
    firstWinReward() {
        // Give the player this gyms badge
        App.game.badgeCase.gainBadge(this.badgeReward);
        // Show the badge modal
        $('#receiveBadgeModal').modal('show');
        // Run the first time reward function
        this.rewardFunction();
    }
    get imagePath() {
        return `assets/images/gymLeaders/${GymBattle.gym.leaderName}.png`;
    }
}
// Kanto Gyms
gymList['Pewter City'] = new Gym('Brock', 'Pewter City', [
    new GymPokemon('Geodude', 770, 10),
    new GymPokemon('Onix', 1554, 12),
], BadgeEnums.Boulder, 250, 'I took you for granted. As proof of your victory, here\'s the Boulder Badge!', [new RouteKillRequirement(10, GameConstants.Region.kanto, 2)]);
gymList['Cerulean City'] = new Gym('Misty', 'Cerulean City', [
    new GymPokemon('Staryu', 4000, 18),
    new GymPokemon('Starmie', 6800, 21),
], BadgeEnums.Cascade, 500, 'I can\'t believe I lost! All right! You can have the Cascade Badge to show you beat me!', [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)]);
gymList['Vermilion City'] = new Gym('Lt. Surge', 'Vermilion City', [new GymPokemon('Raichu', 37000, 28)], BadgeEnums.Thunder, 1000, 'Whoa! You\'re the real deal, kid! Fine then, take the Thunder Badge!', [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 6),
    new GymBadgeRequirement(BadgeEnums.Cascade),
]);
gymList['Celadon City'] = new Gym('Erika', 'Celadon City', [
    new GymPokemon('Tangela', 38810, 30),
    new GymPokemon('Weepinbell', 30340, 32),
    new GymPokemon('Gloom', 36400, 32),
], BadgeEnums.Rainbow, 1500, 'Oh! I concede defeat. You are remarkably strong. I must confer you the Rainbow Badge.', [new RouteKillRequirement(10, GameConstants.Region.kanto, 7)]);
gymList['Saffron City'] = new Gym('Sabrina', 'Saffron City', [
    new GymPokemon('Abra', 23040, 50),
    new GymPokemon('Kadabra', 25600, 50),
    new GymPokemon('Alakazam', 28400, 50),
], BadgeEnums.Marsh, 2500, 'I\'m shocked! But a loss is a loss. I admit I didn\'t work hard enough to win! You earned the Marsh Badge!', [new GymBadgeRequirement(BadgeEnums.Rainbow)]);
gymList['Fuchsia City'] = new Gym('Koga', 'Fuchsia City', [
    new GymPokemon('Venonat', 30780, 44),
    new GymPokemon('Venonat', 32460, 46),
    new GymPokemon('Venonat', 36540, 48),
    new GymPokemon('Venomoth', 37430, 50),
], BadgeEnums.Soul, 3500, 'Humph! You have proven your worth! Here! Take the Soul Badge!', [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
    ]),
], () => {
    App.game.quests.getQuestLine('Mining Expedition').beginQuest();
});
gymList['Cinnabar Island'] = new Gym('Blaine', 'Cinnabar Island', [
    new GymPokemon('Ninetales', 37430, 48),
    new GymPokemon('Rapidash', 45230, 50),
    new GymPokemon('Arcanine', 50290, 54),
], BadgeEnums.Volcano, 5000, 'I\'ve burnt out! You have earned the Volcano Badge!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokemon Mansion'))]);
gymList['Viridian City'] = new Gym('Giovanni', 'Viridian City', [
    new GymPokemon('Dugtrio', 45230, 50),
    new GymPokemon('Persian', 47530, 53),
    new GymPokemon('Nidoqueen', 48740, 53),
    new GymPokemon('Nidoking', 48350, 55),
    new GymPokemon('Rhydon', 55000, 55),
], BadgeEnums.Earth, 6000, 'Ha! That was a truly intense fight! You have won! As proof, here is the Earth Badge!', [
    new GymBadgeRequirement(BadgeEnums.Volcano),
    new GymBadgeRequirement(BadgeEnums.Marsh),
    new GymBadgeRequirement(BadgeEnums.Thunder),
]);
// Kanto Elite 4
gymList['Elite Lorelei'] = new Gym('Lorelei', 'Elite Lorelei', [
    new GymPokemon('Dewgong', 45330, 54),
    new GymPokemon('Cloyster', 48300, 53),
    new GymPokemon('Slowbro', 52000, 54),
    new GymPokemon('Jynx', 57000, 56),
    new GymPokemon('Lapras', 60250, 56),
], BadgeEnums.Elite_Lorelei, 7500, 'You\'re better than I thought! Go on ahead! You only got a taste of Pokémon League power!', [new GymBadgeRequirement(BadgeEnums.Earth)]);
gymList['Elite Bruno'] = new Gym('Bruno', 'Elite Bruno', [
    new GymPokemon('Onix', 45330, 53),
    new GymPokemon('Hitmonchan', 48300, 55),
    new GymPokemon('Hitmonlee', 52000, 55),
    new GymPokemon('Onix', 57000, 56),
    new GymPokemon('Machamp', 60250, 58),
], BadgeEnums.Elite_Bruno, 7500, 'My job is done! Go face your next challenge!', [new GymBadgeRequirement(BadgeEnums.Elite_Lorelei)]);
gymList['Elite Agatha'] = new Gym('Agatha', 'Elite Agatha', [
    new GymPokemon('Gengar', 45330, 56),
    new GymPokemon('Golbat', 48300, 56),
    new GymPokemon('Haunter', 52000, 55),
    new GymPokemon('Arbok', 57000, 58),
    new GymPokemon('Gengar', 60250, 60),
], BadgeEnums.Elite_Agatha, 7500, 'You win! I see what the old duff sees in you now. I\'ve nothing else to say. Run along now, child!', [new GymBadgeRequirement(BadgeEnums.Elite_Bruno)]);
gymList['Elite Lance'] = new Gym('Lance', 'Elite Lance', [
    new GymPokemon('Gyarados', 48300, 58),
    new GymPokemon('Dragonair', 52000, 56),
    new GymPokemon('Dragonair', 57000, 56),
    new GymPokemon('Aerodactyl', 60250, 60),
    new GymPokemon('Dragonite', 66000, 62),
], BadgeEnums.Elite_Lance, 7500, 'I still can’t believe my dragons lost to you! You’re now the Pokémon League champion! …Or, you would have been, but you have one more challenge ahead. You have to face another trainer!', [new GymBadgeRequirement(BadgeEnums.Elite_Agatha)]);
//TODO make champion Gym
//Johto Gyms
gymList['Violet City'] = new Gym('Falkner', 'Violet City', [
    new GymPokemon('Pidgey', 108000, 7),
    new GymPokemon('Pidgeotto', 112000, 9),
], BadgeEnums.Zephyr, 250, '...Darn! My Dad\'s cherished bird Pokémon... All right. Take this. It\'s the official Pokémon League Zephyr Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sprout Tower'))]);
gymList['Azalea Town'] = new Gym('Bugsy', 'Azalea Town', [
    new GymPokemon('Metapod', 103000, 14),
    new GymPokemon('Kakuna', 101500, 14),
    new GymPokemon('Scyther', 119000, 16),
], BadgeEnums.Hive, 500, 'Whoa, amazing! You\'re an expert on Pokémon! My research isn\'t complete yet. Ok, you win. Take this Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slowpoke Well'))]);
gymList['Goldenrod City'] = new Gym('Whitney', 'Goldenrod City', [
    new GymPokemon('Clefairy', 130000, 18),
    new GymPokemon('Miltank', 170000, 20),
], BadgeEnums.Plain, 1000, '...Sniff... What? What do you want? A badge? Oh, right. I forgot. Here\'s Plain Badge.', [new RouteKillRequirement(10, GameConstants.Region.johto, 34)]);
gymList['Ecruteak City'] = new Gym('Morty', 'Ecruteak City', [
    new GymPokemon('Gastly', 127000, 21),
    new GymPokemon('Haunter', 128000, 21),
    new GymPokemon('Gengar', 132000, 25),
    new GymPokemon('Haunter', 130000, 23),
], BadgeEnums.Fog, 1500, 'I\'m not good enough yet... All right. This Badge is yours.', [new GymBadgeRequirement(BadgeEnums.Plain)]);
gymList['Cianwood City'] = new Gym('Chuck', 'Cianwood City', [
    new GymPokemon('Primeape', 177000, 27),
    new GymPokemon('Poliwrath', 183000, 30),
], BadgeEnums.Storm, 2500, 'Wha? Huh? I lost? How about that! You\'re worthy of Storm Badge!', [new GymBadgeRequirement(BadgeEnums.Fog)]);
gymList['Olivine City'] = new Gym('Jasmine', 'Olivine City', [
    new GymPokemon('Magnemite', 177000, 30),
    new GymPokemon('Magnemite', 178000, 30),
    new GymPokemon('Steelix', 182000, 35),
], BadgeEnums.Mineral, 3500, '...You are a better trainer than me, in both skill and kindness. In accordance with League rules, I confer upon you this Badge.', [new GymBadgeRequirement(BadgeEnums.Storm)]);
gymList['Mahogany Town'] = new Gym('Pryce', 'Mahogany Town', [
    new GymPokemon('Seel', 190000, 27),
    new GymPokemon('Dewgong', 192500, 29),
    new GymPokemon('Piloswine', 196000, 31),
], BadgeEnums.Glacier, 4000, 'Ah, I am impressed by your prowess. With your strong will, I know you will overcome all life\'s obstacles. You are worthy of this Badge!', [new RouteKillRequirement(10, GameConstants.Region.johto, 43)]);
gymList['Blackthorn City'] = new Gym('Clair', 'Blackthorn City', [
    new GymPokemon('Dragonair', 205000, 37),
    new GymPokemon('Dragonair', 205000, 37),
    new GymPokemon('Dragonair', 218000, 37),
    new GymPokemon('Kingdra', 220000, 40),
], BadgeEnums.Rising, 5000, 'Here, this is the Rising Badge... Hurry up! Take it!', [new GymBadgeRequirement(BadgeEnums.Glacier)]);
//Johto Elite 4
gymList['Elite Will'] = new Gym('Will', 'Elite Will', [
    new GymPokemon('Xatu', 245330, 40),
    new GymPokemon('Exeggutor', 248300, 41),
    new GymPokemon('Slowbro', 252000, 41),
    new GymPokemon('Jynx', 257000, 41),
    new GymPokemon('Xatu', 260250, 42),
], BadgeEnums.Elite_Will, 7500, 'Even though I was defeated, I won\'t change my course. I will continue battling until I stand above all Trainers! Now move on and experience the true ferocity of the Elite Four.', [new GymBadgeRequirement(BadgeEnums.Rising)]);
gymList['Elite Koga'] = new Gym('Koga2', 'Elite Koga', [
    new GymPokemon('Ariados', 245330, 40),
    new GymPokemon('Venomoth', 248300, 41),
    new GymPokemon('Forretress', 252000, 43),
    new GymPokemon('Muk', 257000, 42),
    new GymPokemon('Crobat', 260250, 44),
], BadgeEnums.Elite_Koga, 7500, 'I subjected you to everything I could muster. But my efforts failed. I must hone my skills. Go on to the next room, and put your abilities to the test!', [new GymBadgeRequirement(BadgeEnums.Elite_Will)]);
gymList['Elite Bruno2'] = new Gym('Bruno2', 'Elite Bruno2', [
    new GymPokemon('Hitmontop', 245330, 42),
    new GymPokemon('Hitmonlee', 248300, 42),
    new GymPokemon('Hitmonchan', 252000, 42),
    new GymPokemon('Onix', 257000, 43),
    new GymPokemon('Machamp', 260250, 46),
], BadgeEnums.Elite_Bruno2, 7500, 'Having lost, I have no right to say anything… Go face your next challenge!', [new GymBadgeRequirement(BadgeEnums.Elite_Koga)]);
gymList['Elite Karen'] = new Gym('Karen', 'Elite Karen', [
    new GymPokemon('Umbreon', 248300, 42),
    new GymPokemon('Vileplume', 252000, 42),
    new GymPokemon('Murkrow', 257000, 44),
    new GymPokemon('Gengar', 260250, 45),
    new GymPokemon('Houndoom', 266000, 47),
], BadgeEnums.Elite_Karen, 7500, 'Strong Pokémon. Weak Pokémon. That is only the selfish perception of people. Truly skilled Trainers should try to win with the Pokémon they love best. I like your style. You understand what\'s important. Go on — — the Champion is waiting.', [new GymBadgeRequirement(BadgeEnums.Elite_Bruno2)]);
gymList['Champion Lance'] = new Gym('Lance2', 'Champion Lance', [
    new GymPokemon('Gyarados', 258300, 44),
    new GymPokemon('Dragonite', 262000, 47),
    new GymPokemon('Charizard', 264000, 46),
    new GymPokemon('Aerodactyl', 260250, 46),
    new GymPokemon('Dragonite', 270000, 47),
    new GymPokemon('Dragonite', 270000, 50),
], BadgeEnums.Elite_JohtoChampion, 7500, '…It\'s over. But it\'s an odd feeling. I\'m not angry that I lost. In fact, I feel happy. Happy that I witnessed the rise of a great new Champion!', [new GymBadgeRequirement(BadgeEnums.Elite_Karen)]);
// Hoenn Gyms
gymList['Rustboro City'] = new Gym('Roxanne', 'Rustboro City', [
    new GymPokemon('Geodude', 382900, 12),
    new GymPokemon('Geodude', 382900, 12),
    new GymPokemon('Nosepass', 410200, 15),
], BadgeEnums.Stone, 1000, 'So… I lost… It seems that I still have much more to learn… I understand. The Pokémon League\'s rules state that Trainers are to be given this if they defeat a Gym Leader. Please accept the official Pokémon League Stone Badge.', [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]);
gymList['Dewford Town'] = new Gym('Brawly', 'Dewford Town', [
    new GymPokemon('Machop', 424000, 16),
    new GymPokemon('Meditite', 424000, 16),
    new GymPokemon('Makuhita', 444000, 19),
], BadgeEnums.Knuckle, 2000, 'Whoah, wow! You made a much bigger splash than I expected! You swamped me! Okay, you\'ve got me. Take this Gym Badge!', []);
gymList['Mauville City'] = new Gym('Wattson', 'Mauville City', [
    new GymPokemon('Voltorb', 452000, 20),
    new GymPokemon('Electrike', 448000, 20),
    new GymPokemon('Magneton', 483000, 22),
    new GymPokemon('Manectric', 448000, 24),
], BadgeEnums.Dynamo, 3000, 'Wahahahah! Fine, I lost! You ended up giving me a thrill! Take this Badge!', []);
gymList['Lavaridge Town'] = new Gym('Flannery', 'Lavaridge Town', [
    new GymPokemon('Numel', 472000, 24),
    new GymPokemon('Slugma', 472000, 24),
    new GymPokemon('Camerupt', 492000, 26),
    new GymPokemon('Torkoal', 524000, 29),
], BadgeEnums.Heat, 4000, 'Oh... I guess I was trying too hard... I... I\'ve only recently become a Gym Leader. I tried too hard to be someone I\'m not. I have to do things my natural way. If I don\'t, my Pokémon will be confused. Thanks for teaching me that. For that, you deserve this.', []);
gymList['Petalburg City'] = new Gym('Norman', 'Petalburg City', [
    new GymPokemon('Spinda', 490000, 27),
    new GymPokemon('Vigoroth', 530000, 27),
    new GymPokemon('Linoone', 560000, 29),
    new GymPokemon('Slaking', 596000, 31),
], BadgeEnums.Balance, 5000, '… I… I can\'t… I can\'t believe it. I lost to you? But, rules are rules! Here, take this.', [new GymBadgeRequirement(BadgeEnums.Heat)]);
gymList['Fortree City'] = new Gym('Winona', 'Fortree City', [
    new GymPokemon('Swablu', 605000, 29),
    new GymPokemon('Tropius', 650000, 29),
    new GymPokemon('Pelipper', 630000, 30),
    new GymPokemon('Skarmory', 667000, 31),
    new GymPokemon('Altaria', 669000, 33),
], BadgeEnums.Feather, 6000, 'Never before have I seen a Trainer command Pokémon with more grace than I... In recognition of your prowess, I present to you this Gym Badge.', []);
gymList['Mossdeep City'] = new Gym('Tate & Liza', 'Mossdeep City', [
    new GymPokemon('Claydol', 702000, 41),
    new GymPokemon('Xatu', 703000, 41),
    new GymPokemon('Lunatone', 702000, 42),
    new GymPokemon('Solrock', 703000, 42),
], BadgeEnums.Mind, 8000, 'What? Our combination... Was shattered! It can\'t be helped. You\'ve won... So, in recognition, take this Gym Badge.', []);
gymList['Sootopolis City'] = new Gym('Juan', 'Sootopolis City', [
    new GymPokemon('Luvdisc', 798000, 41),
    new GymPokemon('Whiscash', 813000, 41),
    new GymPokemon('Sealeo', 823400, 43),
    new GymPokemon('Crawdaunt', 842000, 43),
    new GymPokemon('Kingdra', 865000, 46),
], BadgeEnums.Rain, 10000, 'Ahahaha, excellent! Very well, you are the winner. From you, I sense the brilliant shine of skill that will overcome all. However, compared with me or even Wallace, you are lacking in elegance. Perhaps I should make you a loan of my outfit? ... Hahaha, I merely jest! Rather than my clothes, I shall reward you with this, the Rain Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sky Pillar'))]);
// Hoenn Elite 4
gymList['Elite Sidney'] = new Gym('Sidney', 'Elite Sidney', [
    new GymPokemon('Mightyena', 972000, 46),
    new GymPokemon('Shiftry', 980000, 48),
    new GymPokemon('Cacturne', 1002000, 46),
    new GymPokemon('Crawdaunt', 1015000, 48),
    new GymPokemon('Absol', 1020000, 49),
], BadgeEnums.Elite_Sidney, 15000, 'Well, listen to what this loser has to say. You\'ve got what it takes to go far. Now, go on to the next room and enjoy your next battle!', [new GymBadgeRequirement(BadgeEnums.Rain)]);
gymList['Elite Phoebe'] = new Gym('Phoebe', 'Elite Phoebe', [
    new GymPokemon('Dusclops', 1036700, 48),
    new GymPokemon('Banette', 1038000, 49),
    new GymPokemon('Sableye', 1052000, 50),
    new GymPokemon('Banette', 1038000, 49),
    new GymPokemon('Dusclops', 1063000, 51),
], BadgeEnums.Elite_Phoebe, 15000, 'There\'s a definite bond between you and your Pokémon, too. I didn\'t recognize it, so it\'s only natural that I lost. Yup, I\'d like to see how far your bond will carry you. Go ahead, move to the next room.', [new GymBadgeRequirement(BadgeEnums.Elite_Sidney)]);
gymList['Elite Glacia'] = new Gym('Glacia', 'Elite Glacia', [
    new GymPokemon('Sealeo', 1082000, 50),
    new GymPokemon('Glalie', 1072000, 50),
    new GymPokemon('Sealeo', 1086000, 52),
    new GymPokemon('Glalie', 1076000, 52),
    new GymPokemon('Walrein', 1100000, 53),
], BadgeEnums.Elite_Glacia, 15000, 'Advance to the next room. And there, confirm the truly fearsome side of the Pokémon League.', [new GymBadgeRequirement(BadgeEnums.Elite_Phoebe)]);
gymList['Elite Drake'] = new Gym('Drake', 'Elite Drake', [
    new GymPokemon('Shelgon', 1064000, 52),
    new GymPokemon('Altaria', 1072000, 54),
    new GymPokemon('Flygon', 1076000, 53),
    new GymPokemon('Flygon', 1076000, 53),
    new GymPokemon('Salamence', 1157000, 55),
], BadgeEnums.Elite_Drake, 15000, 'You deserve every credit for coming this far as a Trainer of Pokémon. You do seem to know what is needed. Yes, what a Trainer needs is a virtuous heart. Pokémon touch the good hearts of Trainers and learn good from wrong. They touch the good hearts of Trainers and grow strong. Go! Go onwards! The Champion is waiting!', [new GymBadgeRequirement(BadgeEnums.Elite_Glacia)]);
gymList['Champion Wallace'] = new Gym('Wallace', 'Champion Wallace', [
    new GymPokemon('Wailord', 1202000, 57),
    new GymPokemon('Tentacruel', 1164000, 55),
    new GymPokemon('Ludicolo', 1184000, 56),
    new GymPokemon('Whiscash', 1172000, 56),
    new GymPokemon('Gyarados', 1163000, 56),
    new GymPokemon('Milotic', 1182000, 58),
], BadgeEnums.Elite_HoennChampion, 16000, 'I, the Champion, fall in defeat… That was wonderful work. You were elegant, infuriatingly so. And yet it was utterly glorious! Kudos to you! You are a truly noble Pokémon Trainer!', [new GymBadgeRequirement(BadgeEnums.Elite_Drake)], () => {
    App.game.quests.getQuestLine('Mystery of Deoxys').beginQuest();
});
//Sinnoh Gyms
gymList['Oreburgh City'] = new Gym('Roark', 'Oreburgh City', [
    new GymPokemon('Geodude', 1338000, 12),
    new GymPokemon('Onix', 1342000, 12),
    new GymPokemon('Cranidos', 1342000, 14),
], BadgeEnums.Coal, 250, 'This is embarrassing... I went and lost to a Trainer who didn\'t have a single Gym Badge... But that\'s tough. You were strong, and I was weak. That\'s all there is. According to Pokémon League rules, I have to give you our Gym Badge since you\'ve beaten me, the Leader. Heres your official Pokémon League Coal Badge.', [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)]);
gymList['Eterna City'] = new Gym('Gardenia', 'Eterna City', [
    new GymPokemon('Turtwig', 1433000, 20),
    new GymPokemon('Cherrim (overcast)', 1437500, 20),
    new GymPokemon('Roserade', 1439000, 22),
], BadgeEnums.Forest, 400, 'I might\'ve said it before, but you\'re really tough! Wasn\'t it hard for you to raise your Pokémon to be so good? I guess that\'s a measure of how much you love your Pokémon. In recognition of that, I proudly grant you this!"', [new GymBadgeRequirement(BadgeEnums.Coal)]);
gymList['Hearthome City'] = new Gym('Fantina', 'Hearthome City', [
    new GymPokemon('Duskull', 1450000, 24),
    new GymPokemon('Haunter', 1480000, 24),
    new GymPokemon('Mismagius', 1480000, 26),
], BadgeEnums.Relic, 740, 'I am dumbfounded! So very, very strong! You, your Pokémon, so strong! Your power is admirable! I shall honor it with this Gym Badge!"', [new GymBadgeRequirement(BadgeEnums.Forest)]);
gymList['Veilstone City'] = new Gym('Maylene', 'Veilstone City', [
    new GymPokemon('Meditite', 1537000, 28),
    new GymPokemon('Machoke', 1538000, 29),
    new GymPokemon('Lucario', 1540000, 32),
], BadgeEnums.Cobble, 1200, '...OK. You win. That was a tough loss. I learned a lot from it. Please, accept this Gym Badge.', [new GymBadgeRequirement(BadgeEnums.Relic)]);
gymList['Pastoria City'] = new Gym('Crasher Wake', 'Pastoria City', [
    new GymPokemon('Gyarados', 1687000, 33),
    new GymPokemon('Quagsire', 1693000, 34),
    new GymPokemon('Floatzel', 1693000, 37),
], BadgeEnums.Fen, 2500, 'It seems the undertow pulled me under... But I had a great time battling with you! You\'ve earned this!', [new GymBadgeRequirement(BadgeEnums.Cobble)]);
gymList['Canalave City'] = new Gym('Byron', 'Canalave City', [
    new GymPokemon('Magneton', 1767000, 37),
    new GymPokemon('Steelix', 1772000, 38),
    new GymPokemon('Bastiodon', 1768000, 41),
], BadgeEnums.Mine, 4800, 'You were strong enough to take down my prized team of Pokémon. In recognition of that power, I give you this: the Mine Badge!', [new GymBadgeRequirement(BadgeEnums.Fen)]);
gymList['Snowpoint City'] = new Gym('Candice', 'Snowpoint City', [
    new GymPokemon('Sneasel', 1872500, 40),
    new GymPokemon('Piloswine', 1876000, 40),
    new GymPokemon('Abomasnow', 1870000, 42),
    new GymPokemon('Froslass', 1870000, 44),
], BadgeEnums.Icicle, 8000, 'Wow! You\'re great! You\'ve earned my respect! I think your focus and will bowled us over totally. Oh, that\'s right! I\'m supposed to give you this!', [new GymBadgeRequirement(BadgeEnums.Mine)]);
gymList['Sunyshore City'] = new Gym('Volkner', 'Sunyshore City', [
    new GymPokemon('Jolteon', 1965000, 46),
    new GymPokemon('Raichu', 1965000, 46),
    new GymPokemon('Luxray', 1978000, 48),
    new GymPokemon('Electivire', 1980000, 50),
], BadgeEnums.Beacon, 12000, '...Hehehe. Hahahah! ...That was the most fun I\'ve had in a battle since...I don\'t know when! It\'s also made me excited to know you and your team will keep battling to greater heights! This is your eighth Gym Badge. You\'ve earned this!', [new GymBadgeRequirement(BadgeEnums.Icicle)]);
//Sinnoh Elite 4
gymList['Elite Aaron'] = new Gym('Aaron', 'Elite Aaron', [
    new GymPokemon('Yanmega', 2545330, 49),
    new GymPokemon('Scizor', 2548300, 49),
    new GymPokemon('Vespiquen', 2552000, 50),
    new GymPokemon('Heracross', 2557000, 51),
    new GymPokemon('Drapion', 2560250, 53),
], BadgeEnums.Elite_Aaron, 18000, 'I lost with the most beautiful and toughest of the bug Pokémon... We lost because I wasn\'t good enough... That\'s it! Back to training camp! Let\'s hear it for me! No... That was wrong... Anyway... Go on to the next room! Three Trainers are waiting for you. They are all tougher than me.', [new GymBadgeRequirement(BadgeEnums.Beacon)]);
gymList['Elite Bertha'] = new Gym('Bertha', 'Elite Bertha', [
    new GymPokemon('Whiscash', 2645330, 50),
    new GymPokemon('Gliscor', 2648300, 53),
    new GymPokemon('Hippowdon', 2652000, 52),
    new GymPokemon('Golem', 2657000, 52),
    new GymPokemon('Rhyperior', 2660250, 55),
], BadgeEnums.Elite_Bertha, 18000, 'You\'re quite something, youngster. I like how you and your Pokémon earned the win by working as one. That\'s what makes you so strong. Ahahaha! I think that you can go as far as you want.', [new GymBadgeRequirement(BadgeEnums.Elite_Aaron)]);
gymList['Elite Flint'] = new Gym('Flint', 'Elite Flint', [
    new GymPokemon('Houndoom', 2845330, 52),
    new GymPokemon('Flareon', 2848300, 55),
    new GymPokemon('Rapidash', 2852000, 53),
    new GymPokemon('Infernape', 2857000, 55),
    new GymPokemon('Magmortar', 2860250, 57),
], BadgeEnums.Elite_Flint, 18000, '.........Keep going...I know your spirit burns hot. Your whole team does.', [new GymBadgeRequirement(BadgeEnums.Elite_Bertha)]);
gymList['Elite Lucian'] = new Gym('Lucian', 'Elite Lucian', [
    new GymPokemon('Mr. Mime', 3048300, 53),
    new GymPokemon('Espeon', 3052000, 55),
    new GymPokemon('Bronzong', 3057000, 54),
    new GymPokemon('Alakazam', 3060250, 56),
    new GymPokemon('Gallade', 3066000, 59),
], BadgeEnums.Elite_Lucian, 18000, 'Congratulations. You have beaten the Elite Four. However, that doesn\'t mean you\'re done with the Pokémon league. There remains the Champion. I should warn you—the Champion is far stronger than the Elite Four. Now, go on. Step through the doorway to your final battle.', [new GymBadgeRequirement(BadgeEnums.Elite_Flint)]);
gymList['Champion Cynthia'] = new Gym('Cynthia', 'Champion Cynthia', [
    new GymPokemon('Spiritomb', 3458300, 58),
    new GymPokemon('Roserade', 3462000, 58),
    new GymPokemon('Togekiss', 3464000, 60),
    new GymPokemon('Lucario', 3460250, 60),
    new GymPokemon('Milotic', 3470000, 58),
    new GymPokemon('Garchomp', 3570000, 62),
], BadgeEnums.Elite_SinnohChampion, 32000, 'That was excellent. Truly, an outstanding battle. You gave the support your Pokémon needed to maximize their power. And you guided them with certainty to secure victory. You have both passion and calculating coolness. Together, you and your Pokémon can overcome any challenge that may come your way. Those are the impressions I got from our battle. I\'m glad I got to take part in the crowning of Sinnoh\'s new Champion! Come with me. We\'ll take the lift.', [new GymBadgeRequirement(BadgeEnums.Elite_Lucian)]);
//Unova Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
gymList['Aspertia City'] = new Gym('Cheren', 'Aspertia City', [
    new GymPokemon('Patrat', 3458300, 58),
    new GymPokemon('Pidove', 3462000, 58),
    new GymPokemon('Lillipup', 3464000, 58),
], BadgeEnums.Basic, 500, 'That battle has made me feel really glad you were my first challenger as a Gym Leader… I give you this in honor of the strength you and your Pokémon showed!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Floccesy Ranch'))]);
gymList['Virbank City'] = new Gym('Roxie', 'Virbank City', [
    new GymPokemon('Koffing', 3658300, 58),
    new GymPokemon('Grimer', 3662000, 58),
    new GymPokemon('Whirlipede', 3664000, 58),
], BadgeEnums.Toxic, 800, 'Sigh! What are you doing losing, Roxie?! Well…I guess that means you\'re strong! This stinks, but I gave it everything I had, and I feel revitalized and refreshed now! Here! Proof that you beat me!', [new GymBadgeRequirement(BadgeEnums.Basic)]);
gymList['Castelia City'] = new Gym('Burgh', 'Castelia City', [
    new GymPokemon('Dwebble', 3858300, 58),
    new GymPokemon('Shelmet', 3862000, 58),
    new GymPokemon('Karrablast', 3964000, 58),
    new GymPokemon('Leavanny', 4064000, 58),
], BadgeEnums.Insect, 1500, 'Oh hoo… You are very strong indeed! I guess it\'s no surprise I lost. Here! Take this Insect Badge! I think it\'ll suit you!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Castelia Sewers'))]);
gymList['Nimbasa City'] = new Gym('Elesa', 'Nimbasa City', [
    new GymPokemon('Emolga', 4258300, 58),
    new GymPokemon('Flaaffy', 4262000, 58),
    new GymPokemon('Joltik', 4464000, 58),
    new GymPokemon('Zebstrika', 4464000, 58),
], BadgeEnums.Bolt, 2600, 'Well… Now you… you\'re an even more wonderful Trainer than I expected. Your sweet fighting style swept me off my feet! Take this!', [new GymBadgeRequirement(BadgeEnums.Insect)]);
gymList['Driftveil City'] = new Gym('Clay', 'Driftveil City', [
    new GymPokemon('Krokorok', 4658300, 58),
    new GymPokemon('Sandslash', 4662000, 58),
    new GymPokemon('Onix', 4864000, 58),
    new GymPokemon('Excadrill', 5064000, 58),
], BadgeEnums.Quake, 4800, 'Phew… You\'re really somethin\'! Li\'l whippersnapper Trainers who pack a real punch keep showin\' up one after another. Mrmph. Here! Take this!', [new GymBadgeRequirement(BadgeEnums.Bolt)]);
gymList['Mistralton City'] = new Gym('Skyla', 'Mistralton City', [
    new GymPokemon('Swoobat', 5458300, 58),
    new GymPokemon('Skarmory', 6062000, 58),
    new GymPokemon('Sigilyph', 5664000, 58),
    new GymPokemon('Swanna', 5864000, 58),
], BadgeEnums.Jet, 7600, 'You\'re an amazing Pokémon Trainer. My Pokémon and I are happy because for the first time in quite a while--about two years, I\'d say--we could fight with our full strength. This is an official League Gym Badge. But this is just a stepping-stone.', [new GymBadgeRequirement(BadgeEnums.Quake)]);
gymList['Opelucid City'] = new Gym('Drayden', 'Opelucid City', [
    new GymPokemon('Druddigon', 6558300, 58),
    new GymPokemon('Flygon', 6662000, 58),
    new GymPokemon('Altaria', 6464000, 58),
    new GymPokemon('Haxorus', 6964000, 58),
], BadgeEnums.Legend, 14000, 'Wonderful. I\'m grateful that we had a chance to meet and battle. It reminded me that Pokémon battles are about working with others to meet our challenges together.', [new GymBadgeRequirement(BadgeEnums.Jet)]);
gymList['Humilau City'] = new Gym('Marlon', 'Humilau City', [
    new GymPokemon('Wailord', 7458300, 58),
    new GymPokemon('Mantine', 7262000, 58),
    new GymPokemon('Carracosta', 7064000, 58),
    new GymPokemon('Jellicent', 7464000, 58),
], BadgeEnums.Wave, 27000, 'You don\'t just look strong, you\'re strong fo\' reals! Eh, I was swept away, too! Oh yeah, yo. I was so surprised that I forgot! I gotta give this to you!', [new GymBadgeRequirement(BadgeEnums.Legend)]);
//Unova Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
gymList['Elite Shauntal'] = new Gym('Shauntal', 'Elite Shauntal', [
    new GymPokemon('Cofagrigus', 8945330, 49),
    new GymPokemon('Gengar', 8948300, 49),
    new GymPokemon('Froslass', 8952000, 50),
    new GymPokemon('Drifblim', 8957000, 51),
    new GymPokemon('Golurk', 8960250, 53),
    new GymPokemon('Chandelure', 8960250, 53),
], BadgeEnums.Elite_Shauntal, 32000, 'My Pokémon and the challenger\'s Pokémon. Everyone battled even though they were hurt... Thank you.', [new GymBadgeRequirement(BadgeEnums.Wave)]);
gymList['Elite Marshal'] = new Gym('Marshal', 'Elite Marshal', [
    new GymPokemon('Throh', 9945330, 49),
    new GymPokemon('Sawk', 9948300, 49),
    new GymPokemon('Lucario', 9952000, 50),
    new GymPokemon('Mienshao', 9957000, 51),
    new GymPokemon('Machamp', 9957000, 51),
    new GymPokemon('Conkeldurr', 9960250, 53),
], BadgeEnums.Elite_Marshal, 32000, 'Whew! Well done! As your battles continue, aim for even greater heights!', [new GymBadgeRequirement(BadgeEnums.Elite_Shauntal)]);
gymList['Elite Grimsley'] = new Gym('Grimsley', 'Elite Grimsley', [
    new GymPokemon('Honchkrow', 10945330, 49),
    new GymPokemon('Scrafty', 10948300, 49),
    new GymPokemon('Krookodile', 10952000, 50),
    new GymPokemon('Houndoom', 10957000, 51),
    new GymPokemon('Tyranitar', 10957000, 51),
    new GymPokemon('Bisharp', 10960250, 53),
], BadgeEnums.Elite_Grimsley, 32000, 'Whether or not you get to fight at full strength, whether or not luck smiles on you--none of that matters. Only results matter. And a loss is a loss. See, victory shines like a bright light. And right now, you and your Pokémon are shining brilliantly.', [new GymBadgeRequirement(BadgeEnums.Elite_Marshal)]);
gymList['Elite Caitlin'] = new Gym('Caitlin', 'Elite Caitlin', [
    new GymPokemon('Musharna', 11945330, 49),
    new GymPokemon('Alakazam', 11948300, 49),
    new GymPokemon('Gothitelle', 11957000, 51),
    new GymPokemon('Gallade', 11957000, 51),
    new GymPokemon('Reuniclus', 11952000, 50),
    new GymPokemon('Metagross', 11960250, 53),
], BadgeEnums.Elite_Caitlin, 32000, 'You and your Pokémon are both excellent and elegant. To have been able to battle against such a splendid team... My Pokémon and I learned a lot! I offer you my thanks', [new GymBadgeRequirement(BadgeEnums.Elite_Grimsley)]);
gymList['Champion Iris'] = new Gym('Iris', 'Champion Iris', [
    new GymPokemon('Hydreigon', 12458300, 58),
    new GymPokemon('Salamence', 12462000, 58),
    new GymPokemon('Aggron', 12464000, 58),
    new GymPokemon('Archeops', 12460250, 60),
    new GymPokemon('Lapras', 12470000, 58),
    new GymPokemon('Haxorus', 14570000, 62),
], BadgeEnums.Elite_UnovaChampion, 64000, 'I\'m upset I couldn\'t win! But you know what? More than that, I\'m happy! I mean, come on. By having a serious battle, you and your Pokémon, and me and my Pokémon, we all got to know one another better than before! Yep, we sure did! OK, let\'s go!', [new GymBadgeRequirement(BadgeEnums.Elite_Caitlin)]);
//Kalos Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
gymList['Santalune City'] = new Gym('Viola', 'Santalune City', [
    new GymPokemon('Surskit', 23737400, 10),
    new GymPokemon('Vivillon', 27395730, 12),
], BadgeEnums.Bug, 800, 'Young Trainer, you... No, it wasn\'t you alone. You and your Pokémon have shown me a whole new depth of field! Fantastic! Just fantastic!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)]);
gymList['Cyllage City'] = new Gym('Grant', 'Cyllage City', [
    new GymPokemon('Amaura', 31937530, 25),
    new GymPokemon('Tyrunt', 31837400, 25),
], BadgeEnums.Cliff, 1700, 'There are some things that seem out of reach no matter how hard you try. However, it\'s important that you never give up--no matter the opponent or the odds. I could tell from our battle that you and your Pokémon understand that. To commemorate such an impressive show of teamwork, please accept the Cliff Badge!', [new GymBadgeRequirement(BadgeEnums.Bug)]);
gymList['Shalour City'] = new Gym('Korrina', 'Shalour City', [
    new GymPokemon('Mienfoo', 36558300, 29),
    new GymPokemon('Machoke', 36062000, 28),
    new GymPokemon('Hawlucha', 38362000, 32),
], BadgeEnums.Rumble, 3800, 'Oh! I have been defeated! Alack, alay! Lady Korrina gave a terrible display! This is it. I must give up my title and admit that your strength far exceeds-- Just teasing! But here\'s your Badge. Boy, you\'ll be rolling in \'em soon!', [new GymBadgeRequirement(BadgeEnums.Cliff)]);
gymList['Coumarine City'] = new Gym('Ramos', 'Coumarine City', [
    new GymPokemon('Jumpluff', 41508300, 30),
    new GymPokemon('Weepinbell', 41562000, 31),
    new GymPokemon('Gogoat', 43502000, 34),
], BadgeEnums.Plant, 5500, 'Yeh believe in yer Pokémon... And they believe in yeh, too... Mighty oaks from acorns grow. Go on, then. Yeh\'ve earned it. Here\'s yer own Plant Badge, sprout.', [new GymBadgeRequirement(BadgeEnums.Rumble)]);
gymList['Lumiose City'] = new Gym('Clemont', 'Lumiose City', [
    new GymPokemon('Emolga', 44058300, 35),
    new GymPokemon('Magneton', 44062000, 35),
    new GymPokemon('Heliolisk', 46062000, 37),
], BadgeEnums.Voltage, 9000, 'Oh, Bonnie... When will you learn there\'s no shame in losing? I\'m glad whenever I get to learn something new thanks to strong challengers like you here.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Kalos Power Plant'))]);
gymList['Laverre City'] = new Gym('Valerie', 'Laverre City', [
    new GymPokemon('Mawile', 45058300, 38),
    new GymPokemon('Mr. Mime', 46462000, 38),
    new GymPokemon('Sylveon', 48062000, 42),
], BadgeEnums.Fairy, 16000, 'Yes... That was a fine battle. I shall reward you for this great victory. This is the Fairy Badge. It is yours now. Its beauty is captivating, is it not? ... ... ... ... ... ... Ah... Do forgive me. I was so captivated, I forgot for a moment that it is yours.', [new GymBadgeRequirement(BadgeEnums.Voltage)]);
gymList['Anistar City'] = new Gym('Olympia', 'Anistar City', [
    new GymPokemon('Sigilyph', 50058300, 44),
    new GymPokemon('Slowking', 52062000, 45),
    new GymPokemon('Meowstic', 54462000, 48),
], BadgeEnums.Psychic, 30000, 'Now, the Psychic Badge. A testament to your skill. Proof of your power.', [new GymBadgeRequirement(BadgeEnums.Fairy)]);
gymList['Snowbelle City'] = new Gym('Wulfric', 'Snowbelle City', [
    new GymPokemon('Abomasnow', 59558300, 56),
    new GymPokemon('Cryogonal', 60654830, 55),
    new GymPokemon('Avalugg', 63062000, 59),
], BadgeEnums.Iceberg, 52000, 'Impressive! Your Pokémon fought with great courage. I can tell that you\'ve trained your Pokémon well.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Village'))]);
//Kalos Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
gymList['Elite Malva'] = new Gym('Malva', 'Elite Malva', [
    new GymPokemon('Pyroar', 69696969, 63),
    new GymPokemon('Torkoal', 70048300, 63),
    new GymPokemon('Chandelure', 70052000, 63),
    new GymPokemon('Talonflame', 73557000, 65),
], BadgeEnums.Elite_Malva, 64000, 'What news... So a new challenger has defeated Malva of the Elite Four!', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
gymList['Elite Siebold'] = new Gym('Siebold', 'Elite Siebold', [
    new GymPokemon('Clawitzer', 69696969, 63),
    new GymPokemon('Gyarados', 70405330, 63),
    new GymPokemon('Starmie', 70405330, 63),
    new GymPokemon('Barbaracle', 73557000, 65),
], BadgeEnums.Elite_Siebold, 64000, 'I shall store my memory of you and your Pokémon forever away within my heart.', [new GymBadgeRequirement(BadgeEnums.Elite_Malva)]);
gymList['Elite Wikstrom'] = new Gym('Wikstrom', 'Elite Wikstrom', [
    new GymPokemon('Klefki', 69696969, 63),
    new GymPokemon('Probopass', 70405330, 63),
    new GymPokemon('Scizor', 70405330, 63),
    new GymPokemon('Aegislash', 73557000, 65),
], BadgeEnums.Elite_Wikstrom, 64000, 'Glorious! The trust that you share with your honorable Pokémon surpasses even mine!', [new GymBadgeRequirement(BadgeEnums.Elite_Siebold)]);
gymList['Elite Drasna'] = new Gym('Drasna', 'Elite Drasna', [
    new GymPokemon('Dragalge', 69696969, 63),
    new GymPokemon('Druddigon', 70405330, 63),
    new GymPokemon('Altaria', 70405330, 63),
    new GymPokemon('Noivern', 73557000, 65),
], BadgeEnums.Elite_Drasna, 64000, 'Oh, dear me. That sure was a quick battle... I do hope you\'ll come back again sometime!', [new GymBadgeRequirement(BadgeEnums.Elite_Wikstrom)]);
gymList['Champion Diantha'] = new Gym('Diantha', 'Champion Diantha', [
    new GymPokemon('Hawlucha', 72083000, 64),
    new GymPokemon('Tyrantrum', 74057000, 65),
    new GymPokemon('Aurorus', 74057000, 65),
    new GymPokemon('Gourgeist', 74557000, 65),
    new GymPokemon('Goodra', 76170000, 66),
    new GymPokemon('Gardevoir', 77070000, 68),
], BadgeEnums.Elite_KalosChampion, 128000, 'Witnessing the noble spirits of you and your Pokémon in battle has really touched my heart...', [new GymBadgeRequirement(BadgeEnums.Elite_Drasna)]);
//Alola Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
gymList['Iki Town'] = new Gym('Hala', 'Iki Town', [
    new GymPokemon('Machop', 2458300, 15),
    new GymPokemon('Makuhita', 2462000, 15),
    new GymPokemon('Crabrawler', 2462000, 16),
], BadgeEnums.MelemeleKahuna, 128000, 'The results come as no surprise to me. What a fine Trainer...and what fine Pokémon, too!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Melemele Meadow'))]);
gymList['Konikoni City'] = new Gym('Olivia', 'Konikoni City', [
    new GymPokemon('Anorith', 2458300, 27),
    new GymPokemon('Lileep', 2462000, 27),
    new GymPokemon('Lycanroc (Midnight)', 2462000, 28),
], BadgeEnums.AkalaKahuna, 128000, 'How lovely.', [new RouteKillRequirement(10, GameConstants.Region.alola, 9)]);
gymList['Aether Paradise'] = new Gym('Ultra Wormhole', 'Aether Paradise', [new GymPokemon('???', 2458300, 27)], BadgeEnums.Elite_Nihilego, 128000, 'The creature escaped back into the ultra wormhole.', [new GymBadgeRequirement(BadgeEnums.AkalaKahuna)]);
gymList['Malie City'] = new Gym('Nanu', 'Malie City', [
    new GymPokemon('Sableye', 2458300, 43),
    new GymPokemon('Krokorok', 2462000, 43),
    new GymPokemon('Alolan Persian', 2462000, 44),
], BadgeEnums.UlaulaKahuna, 128000, 'Hmph...', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Po Town'))]);
gymList['Altar of the Sunne and Moone'] = new Gym('Ultra Megalopolis', 'Altar of the Sunne and Moone', [new GymPokemon('Necrozma (Ultra)', 2458300, 60)], BadgeEnums.Elite_UltraNecrozma, 128000, 'Necrozma fled. It left something behind.', [new GymBadgeRequirement(BadgeEnums.AkalaKahuna)]);
gymList['Seafolk Village'] = new Gym('Mina', 'Seafolk Village', [
    new GymPokemon('Mawile', 2458300, 51),
    new GymPokemon('Granbull', 2462000, 51),
    new GymPokemon('Ribombee', 2462000, 51),
], BadgeEnums.MinaTrail, 128000, 'Woah! I\'m shocked at your strength!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Nebby'))]);
gymList['Exeggutor Island'] = new Gym('Hapu', 'Exeggutor Island', [
    new GymPokemon('Golurk', 2458300, 53),
    new GymPokemon('Gastrodon (east)', 2462000, 53),
    new GymPokemon('Flygon', 2462000, 53),
    new GymPokemon('Mudsdale', 2462000, 54),
], BadgeEnums.PoniKahuna, 128000, 'You have succeeded in your final grand trial!', [new GymBadgeRequirement(BadgeEnums.MinaTrail)]);
//Alola Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
gymList['Elite Molayne'] = new Gym('Molayne', 'Elite Molayne', [
    new GymPokemon('Klefki', 1945330, 56),
    new GymPokemon('Bisharp', 1948300, 56),
    new GymPokemon('Magnezone', 1952000, 56),
    new GymPokemon('Metagross', 1957000, 56),
    new GymPokemon('Alolan Dugtrio', 1957000, 57),
], BadgeEnums.Elite_Molayne, 64000, 'That Kukui... He certainly found an interesting Trainer for me to face!', [new GymBadgeRequirement(BadgeEnums.PoniKahuna)]);
gymList['Elite Olivia'] = new Gym('Olivia', 'Elite Olivia', [
    new GymPokemon('Armaldo', 1945330, 56),
    new GymPokemon('Cradily', 1948300, 56),
    new GymPokemon('Gigalith', 1952000, 56),
    new GymPokemon('Probopass', 1957000, 56),
    new GymPokemon('Lycanroc (Midnight)', 1957000, 57),
], BadgeEnums.Elite_Olivia, 64000, 'I don\'t see the same look in your eyes that I saw when we first met on Akala Island. Have you had some experiences that you\'ll carry with you in your heart forever? Well, it\'s time for you to move on.', [new GymBadgeRequirement(BadgeEnums.Elite_Molayne)]);
gymList['Elite Acerola'] = new Gym('Acerola', 'Elite Acerola', [
    new GymPokemon('Banette', 1945330, 56),
    new GymPokemon('Drifblim', 1948300, 56),
    new GymPokemon('Dhelmise', 1952000, 56),
    new GymPokemon('Froslass', 1957000, 56),
    new GymPokemon('Palossand', 1957000, 57),
], BadgeEnums.Elite_Acerola, 64000, 'I\'m...I\'m speechless! You\'ve done me in!', [new GymBadgeRequirement(BadgeEnums.Elite_Olivia)]);
gymList['Elite Kahili'] = new Gym('Kahili', 'Elite Kahili', [
    new GymPokemon('Braviary', 1945330, 56),
    new GymPokemon('Hawlucha', 1948300, 56),
    new GymPokemon('Oricorio (Baile)', 1952000, 56),
    new GymPokemon('Mandibuzz', 1957000, 56),
    new GymPokemon('Toucannon', 1957000, 57),
], BadgeEnums.Elite_Kahili, 64000, 'It\'s frustrating to me as a member of the Elite Four, but it seems your strength is the real deal.', [new GymBadgeRequirement(BadgeEnums.Elite_Acerola)]);
//Galar Leaders
//TODO  Balancing of levels, rewards, and hp
gymList['Turffield'] = new Gym('Milo', 'Turffield', [
    new GymPokemon('Gossifleur', 2458300, 19),
    new GymPokemon('Eldegoss', 2462000, 20),
], BadgeEnums.Galar_Grass, 128000, 'The power of Grass has wilted... What an incredible Gym Challenger!', [new RouteKillRequirement(10, GameConstants.Region.galar, 4)]);
gymList['Hulbury'] = new Gym('Nessa', 'Hulbury', [
    new GymPokemon('Goldeen', 2458300, 22),
    new GymPokemon('Arrokuda', 2462000, 23),
    new GymPokemon('Drednaw', 2458300, 24),
], BadgeEnums.Galar_Water, 128000, 'I may proudly be the strongest member of this Gym, but I was totally washed away!', [new RouteKillRequirement(10, GameConstants.Region.galar, 5)]);
gymList['Motostoke'] = new Gym('Kabu', 'Motostoke', [
    new GymPokemon('Ninetales', 2458300, 25),
    new GymPokemon('Arcanine', 2462000, 25),
    new GymPokemon('Centiskorch', 2458300, 27),
], BadgeEnums.Galar_Fire, 128000, 'I\'m often regarded as the first real roadblock of the Gym Challenge, and yet you defeated me! Clearly, your talent surpassed my many years of experience. I still have much to learn!', [new RouteKillRequirement(10, GameConstants.Region.galar, 13)]);
gymList['Stow-on-Side'] = new Gym('Bea', 'Stow-on-Side', [
    new GymPokemon('Hitmontop', 2458300, 34),
    new GymPokemon('Pangoro', 2462000, 34),
    new GymPokemon('Sirfetch\'d', 2458300, 35),
    new GymPokemon('Machamp', 2458300, 36),
], BadgeEnums.Galar_Fighting, 128000, 'Your strength nearly made me want to turn and run in my bare feet!', [new RouteKillRequirement(10, GameConstants.Region.galar, 15)]);
gymList['Ballonlea'] = new Gym('Opal', 'Ballonlea', [
    new GymPokemon('Galarian Weezing', 2458300, 36),
    new GymPokemon('Mawile', 2462000, 36),
    new GymPokemon('Togekiss', 2458300, 37),
    new GymPokemon('Alcremie (Strawberry Vanilla)', 2458300, 38),
], BadgeEnums.Galar_Fairy, 128000, 'Your pink is still lacking, but you\'re an excellent Trainer with some excellent Pokémon.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glimwood Tangle'))]);
gymList['Circhester'] = new Gym('Gordie', 'Circhester', [
    new GymPokemon('Barbaracle', 2458300, 40),
    new GymPokemon('Shuckle', 2462000, 40),
    new GymPokemon('Stonjourner', 2458300, 41),
    new GymPokemon('Coalossal', 2458300, 42),
], BadgeEnums.Galar_Rock, 128000, 'I just want to climb into a hole... Well, I guess it\'d be more like falling from here.', [new RouteKillRequirement(10, GameConstants.Region.galar, 18)]);
gymList['Spikemuth'] = new Gym('Piers', 'Spikemuth', [
    new GymPokemon('Scrafty', 2458300, 44),
    new GymPokemon('Malamar', 2462000, 45),
    new GymPokemon('Skuntank', 2458300, 45),
    new GymPokemon('Obstagoon', 2458300, 46),
], BadgeEnums.Galar_Dark, 128000, 'Me an\' my team gave it our best. Let\'s meet up again for a battle some time...', [new RouteKillRequirement(10, GameConstants.Region.galar, 22)]);
gymList['Hammerlocke'] = new Gym('Raihan', 'Hammerlocke', [
    new GymPokemon('Gigalith', 2458300, 46),
    new GymPokemon('Flygon', 2462000, 47),
    new GymPokemon('Sandaconda', 2458300, 46),
    new GymPokemon('Duraludon', 2458300, 48),
], BadgeEnums.Galar_Dragon, 128000, 'I might have lost, but I still look good. Maybe I should snap a quick selfie...', [
    new RouteKillRequirement(20, GameConstants.Region.galar, 22),
    new GymBadgeRequirement(BadgeEnums.Galar_Dark),
]);
gymList['Trainer Marnie'] = new Gym('Marnie', 'Trainer Marnie', [
    new GymPokemon('Liepard', 1945330, 49),
    new GymPokemon('Toxicroak', 1948300, 49),
    new GymPokemon('Scrafty', 1952000, 50),
    new GymPokemon('Morpeko', 1957000, 51),
    new GymPokemon('Grimmsnarl', 1945330, 50),
], BadgeEnums.Elite_Marnie, 64000, 'I mean, If you\'re gonna win, you could at least win in a way that makes me look good, right?', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rose Tower'))]);
gymList['Trainer Bede'] = new Gym('Bede', 'Trainer Bede', [
    new GymPokemon('Mawile', 1945330, 49),
    new GymPokemon('Gardevoir', 1948300, 49),
    new GymPokemon('Galarian Rapidash', 1952000, 50),
    new GymPokemon('Sylveon', 1957000, 51),
    new GymPokemon('Hatterene', 1945330, 50),
], BadgeEnums.Elite_Bede, 64000, 'I couldn\'t win, but at least I was able to show everyone how great Fairy types are.', [new GymBadgeRequirement(BadgeEnums.Elite_Hop)]);
// Armor + crown gyms
gymList['Gym Leader Klara'] = new Gym('Klara', 'Gym Leader Klara', [
    new GymPokemon('Galarian Slowking', 1948300, 49),
    new GymPokemon('Galarian Weezing', 1952000, 50),
    new GymPokemon('Drapion', 1957000, 51),
    new GymPokemon('Scolipede', 1945330, 60),
    new GymPokemon('Galarian Slowbro', 1945330, 50),
], BadgeEnums.Armor_Poison, 64000, 'Aww, come on! What a drag! But...I guess it was also kinda fun!', [
    new MultiRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Darkness')),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Water')),
    ]),
]);
gymList['Gym Leader Avery'] = new Gym('Avery', 'Gym Leader Avery', [
    new GymPokemon('Galarian Slowking', 1948300, 49),
    new GymPokemon('Galarian Rapidash', 1952000, 50),
    new GymPokemon('Swoobat', 1957000, 51),
    new GymPokemon('Alakazam', 1945330, 60),
    new GymPokemon('Galarian Slowbro', 1945330, 50),
], BadgeEnums.Armor_Psychic, 64000, 'More! I require more! Show me your Stored Power!', [new GymBadgeRequirement(BadgeEnums.Armor_Poison)]);
gymList['Dojo Master Mustard'] = new Gym('Mustard', 'Dojo Master Mustard', [
    new GymPokemon('Luxray', 1945330, 49),
    new GymPokemon('Corviknight', 1948300, 49),
    new GymPokemon('Lycanroc (Midday)', 1952000, 50),
    new GymPokemon('Kommo-o', 1957000, 51),
    new GymPokemon('Urshifu (Single Strike)', 1945330, 60),
    new GymPokemon('Urshifu (Rapid Strike)', 1945330, 50),
], BadgeEnums.Elite_ArmorChampion, 64000, 'That strength of yours doesn\'t bend easily!', [new GymBadgeRequirement(BadgeEnums.Armor_Psychic)]);
gymList['Trainer Peony'] = new Gym('Freezington', 'Trainer Peony', [
    new GymPokemon('Perrserker', 1948300, 49),
    new GymPokemon('Bronzong', 1952000, 50),
    new GymPokemon('Scizor', 1957000, 51),
    new GymPokemon('Aggron', 1945330, 60),
    new GymPokemon('Copperajah', 1945330, 50),
], BadgeEnums.Elite_CrownChampion, 64000, 'Gone and got stronger again, have you? Ah well! Hats off to you-in more ways than one!', [new ObtainedPokemonRequirement(pokemonMap.Calyrex)]);
/// <reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="Gym.ts"/>
class Champion extends Gym {
    constructor(leaderName, town, basePokemon, badgeReward, moneyReward, rewardMessage, requirements = [], alternativePokemon1, alternativePokemon2, alternativePokemon3) {
        super(leaderName, town, basePokemon, badgeReward, moneyReward, rewardMessage, requirements);
        this.basePokemon = basePokemon;
        this.alternativePokemon1 = alternativePokemon1;
        this.alternativePokemon2 = alternativePokemon2;
        this.alternativePokemon3 = alternativePokemon3;
    }
    setPokemon(starter) {
        this.pokemons = [...this.basePokemon];
        switch (starter) {
            case GameConstants.Starter.Bulbasaur: {
                this.pokemons.push(...this.alternativePokemon1);
                break;
            }
            case GameConstants.Starter.Charmander: {
                this.pokemons.push(...this.alternativePokemon2);
                break;
            }
            case GameConstants.Starter.Squirtle:
            default: {
                this.pokemons.push(...this.alternativePokemon3);
                break;
            }
        }
    }
}
gymList['Champion Blue'] = new Champion('Blue', 'Champion Blue', [
    new GymPokemon('Pidgeot', 52340, 59),
    new GymPokemon('Alakazam', 56320, 57),
    new GymPokemon('Rhydon', 58340, 59),
], BadgeEnums.Elite_KantoChampion, 10000, 'Why? Why did I lose? I never made any mistakes raising my Pokémon… Darn it! You\'re the new Pokémon League Champion! Although I don\'t like to admit it…', [new GymBadgeRequirement(BadgeEnums.Elite_Lance)], 
// Bulbasaur
[
    new GymPokemon('Exeggutor', 57520, 59),
    new GymPokemon('Gyarados', 63040, 61),
    new GymPokemon('Charizard', 70000, 63),
], 
// Charmander
[
    new GymPokemon('Arcanine', 65340, 59),
    new GymPokemon('Exeggutor', 57520, 61),
    new GymPokemon('Blastoise', 70000, 63),
], 
// Squirtle/Pikachu
[
    new GymPokemon('Gyarados', 63040, 59),
    new GymPokemon('Arcanine', 65340, 61),
    new GymPokemon('Venusaur', 70000, 63),
]);
// TODO: Balancing - Set HP - Set win message
gymList['Champion Hao'] = new Champion('Hao', 'Champion Hao', [
    new GymPokemon('Alolan Raichu', 2015330, 59),
    new GymPokemon('Tauros', 2015330, 58),
    new GymPokemon('Noivern', 2015330, 58),
    new GymPokemon('Crabominable', 2015330, 59),
], BadgeEnums.Elite_AlolaChampion, 100000, 'We\'re gonna keep moving forward, by staying at full power all the time!', [new GymBadgeRequirement(BadgeEnums.Elite_Kahili)], 
// Bulbasaur
[
    new GymPokemon('Flareon', 2015330, 58),
    new GymPokemon('Primarina', 2015330, 60),
], 
// Charmander
[
    new GymPokemon('Vaporeon', 2015330, 58),
    new GymPokemon('Decidueye', 2015330, 60),
], 
// Squirtle/Pikachu
[
    new GymPokemon('Leafeon', 2015330, 58),
    new GymPokemon('Incineroar', 2015330, 60),
]);
//TODO: rewards/hp rebalance
gymList['Champion Leon'] = new Champion('Leon', 'Champion Leon', [
    new GymPokemon('Aegislash', 2015330, 59),
    new GymPokemon('Dragapult', 2015330, 58),
    new GymPokemon('Haxorus', 2015330, 58),
    new GymPokemon('Seismitoad', 2015330, 59),
    new GymPokemon('Charizard', 2015330, 59),
], BadgeEnums.Elite_GalarChampion, 100000, 'My time as Champion is over... But what a champion time it\'s been! Thank you for the greatest battle I\'ve ever had!', [new GymBadgeRequirement(BadgeEnums.Elite_Bede)], 
// Bulbasaur
[new GymPokemon('Cinderace', 2015330, 60)], 
// Charmander
[new GymPokemon('Inteleon', 2015330, 60)], 
// Squirtle/Pikachu
[new GymPokemon('Rillaboom', 2015330, 60)]);
//TODO: rewards/hp rebalance
gymList['Trainer Hop'] = new Champion('Hop', 'Trainer Hop', [
    new GymPokemon('Dubwool', 1945330, 49),
    new GymPokemon('Cramorant', 1948300, 49),
    new GymPokemon('Pincurchin', 1952000, 50),
    new GymPokemon('Snorlax', 1957000, 51),
    new GymPokemon('Corviknight', 1945330, 50),
], BadgeEnums.Elite_Hop, 100000, 'Thanks, mate. I\'m really glad you were the one here with me.', [new GymBadgeRequirement(BadgeEnums.Elite_Marnie)], 
// Bulbasaur
[new GymPokemon('Inteleon', 2015330, 60)], 
// Charmander
[new GymPokemon('Rillaboom', 2015330, 60)], 
// Squirtle/Pikachu
[new GymPokemon('Cinderace', 2015330, 60)]);
///<reference path="../Battle.ts"/>
class GymBattle extends Battle {
    /**
     * Award the player with exp, and go to the next pokemon
     */
    static defeatPokemon() {
        this.enemyPokemon().defeat(true);
        // Make gym "route" regionless
        App.game.breeding.progressEggsBattle(this.gym.badgeReward * 3 + 1, GameConstants.Region.none);
        this.index(this.index() + 1);
        if (this.index() >= this.gym.pokemons.length) {
            GymRunner.gymWon(this.gym);
        }
        else {
            this.generateNewEnemy();
        }
    }
    /**
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateGymPokemon(this.gym.town, this.index()));
    }
}
GymBattle.index = ko.observable(0);
GymBattle.totalPokemons = ko.observable(0);
GymBattle.pokemonsDefeatedComputable = ko.pureComputed(() => {
    return GymBattle.index();
});
GymBattle.pokemonsUndefeatedComputable = ko.pureComputed(() => {
    return GymBattle.totalPokemons() - GymBattle.index();
});
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/enums/Badges.d.ts" />
class GymRunner {
    static startGym(gym) {
        var _a;
        this.started = false;
        this.gymObservable(gym);
        if (Gym.isUnlocked(gym)) {
            if (gym instanceof Champion) {
                gym.setPokemon(player.starter());
            }
            App.game.gameState = GameConstants.GameState.idle;
            GymRunner.timeLeft(GameConstants.GYM_TIME);
            GymRunner.timeLeftPercentage(100);
            GymBattle.gym = gym;
            GymBattle.totalPokemons(gym.pokemons.length);
            GymBattle.index(0);
            GymBattle.generateNewEnemy();
            App.game.gameState = GameConstants.GameState.gym;
            this.resetGif();
            setTimeout(() => {
                this.started = true;
                this.hideGif();
            }, GameConstants.GYM_COUNTDOWN);
        }
        else {
            const reqsList = [];
            (_a = gym.requirements) === null || _a === void 0 ? void 0 : _a.forEach((requirement) => {
                if (!requirement.isCompleted()) {
                    reqsList.push(requirement.hint());
                }
            });
            Notifier.notify({
                message: `You don't have access to ${gym.leaderName}s Gym yet.<br/>${reqsList.join('<br/>')}`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static hideGif() {
        $('#gymCountdown').hide();
    }
    static resetGif() {
        $('#gymCountdown').show();
        setTimeout(() => {
            $('#gymGo').attr('src', 'assets/gifs/go.gif');
        }, 0);
    }
    static tick() {
        if (!this.started) {
            return;
        }
        if (this.timeLeft() < 0) {
            GymRunner.gymLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor((this.timeLeft() / GameConstants.GYM_TIME) * 100));
    }
    static gymLost() {
        Notifier.notify({
            message: `It appears you are not strong enough to defeat ${GymBattle.gym.leaderName}`,
            type: NotificationConstants.NotificationOption.danger,
        });
        App.game.gameState = GameConstants.GameState.town;
    }
    static gymWon(gym) {
        Notifier.notify({
            message: `Congratulations, you defeated ${GymBattle.gym.leaderName}!`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.gym_won,
        });
        this.gymObservable(gym);
        App.game.wallet.gainMoney(gym.moneyReward);
        // If this is the first time defeating this gym
        if (!App.game.badgeCase.hasBadge(gym.badgeReward)) {
            gym.firstWinReward();
        }
        GameHelper.incrementObservable(App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gym.town)]);
        player.town(TownList[gym.town]);
        App.game.gameState = GameConstants.GameState.town;
        GymRunner.startGym(gym);
    }
}
GymRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
GymRunner.timeLeftPercentage = ko.observable(100);
GymRunner.gymObservable = ko.observable(gymList['Pewter City']);
GymRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(GymRunner.timeLeft() / 10) / 10).toFixed(1);
});
document.addEventListener('DOMContentLoaded', () => {
    $('#receiveBadgeModal').on('hidden.bs.modal', () => {
        if (GymBattle.gym.badgeReward == BadgeEnums.Soul) {
            App.game.keyItems.gainKeyItem(KeyItems.KeyItem.Safari_ticket);
        }
        if (GymBattle.gym.badgeReward == BadgeEnums.Earth) {
            App.game.keyItems.gainKeyItem(KeyItems.KeyItem.Shard_case);
        }
    });
});
/**
 * Static class as an API for handling items.
 */
class BagHandler {
    /**
     * Gets the display name for the item
     * @param item The item identifier
     */
    static displayName(item) {
        if (!item) {
            return '';
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).displayName;
            case ItemType.underground:
                return this.getUndergroundItem(item.id).displayName;
            case ItemType.berry:
                return `${BerryType[this.getBerry(item.id)]} Berry`;
            case ItemType.shard:
                return `${PokemonType[this.getShard(item.id)]} Shard`;
        }
    }
    /**
     * Gets the image path for the item
     * @param item The item identifier
     */
    static image(item) {
        if (!item) {
            return '';
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).image;
            case ItemType.underground:
                return this.getUndergroundItem(item.id).image;
            case ItemType.berry:
                return FarmController.getBerryImage(this.getBerry(item.id));
            case ItemType.shard:
                return Shards.image(this.getShard(item.id));
        }
    }
    /**
     * Gets the amount observable for the item. NOTE: You shouldn't use this to modify the amount, as there might
     * be some additional code that needs to be run via the base gainItem API calls. Use BagHandler.gainItem instead.
     * @param item The item identifier
     */
    static amount(item) {
        if (!item) {
            return null;
        }
        switch (item.type) {
            case ItemType.item:
                return player.itemList[this.getItem(item.id).name];
            case ItemType.underground:
                return player.mineInventory()[player.mineInventoryIndex(this.getUndergroundItem(item.id).id)].amount;
            case ItemType.berry:
                return App.game.farming.berryList[this.getBerry(item.id)];
            case ItemType.shard:
                return App.game.shards.shardWallet[this.getShard(item.id)];
        }
    }
    /**
     * Handles updating the amount for an item. This should be used instead of modifying the amount observable
     * directly, as the base method might have additional handling.
     * @param item The item identifier
     * @param amount The amount to be added to the Bag. Defaults to 1.
     */
    static gainItem(item, amount = 1) {
        if (!item) {
            return;
        }
        switch (item.type) {
            case ItemType.item:
                this.getItem(item.id).gain(amount);
                return;
            case ItemType.underground:
                Underground.gainMineItem(this.getUndergroundItem(item.id).id, amount);
                return;
            case ItemType.berry:
                App.game.farming.gainBerry(this.getBerry(item.id), amount);
                return;
            case ItemType.shard:
                App.game.shards.gainShards(amount, this.getShard(item.id));
                return;
        }
    }
    //#region Item getters
    static getItem(id) {
        return ItemList[id];
    }
    static getUndergroundItem(id) {
        if (typeof id === 'string') {
            return Underground.getMineItemByName(id);
        }
        else {
            return Underground.getMineItemById(id);
        }
    }
    static getBerry(id) {
        if (typeof id === 'string') {
            id = App.game.farming.berryData.findIndex((_, idx) => BerryType[idx] === id);
        }
        return id;
    }
    static getShard(id) {
        if (typeof id === 'string') {
            id = PokemonType[id];
        }
        return id;
    }
}
class Shop {
    constructor(items, name) {
        this.items = items;
        this.name = name;
    }
}
///<reference path="Shop.ts"/>
class ShopHandler {
    static showShop(shop) {
        this.setSelected(0);
        this.resetAmount();
        this.shopObservable(shop);
        shop.items.forEach(item => {
            item.price(Math.round(item.basePrice * (player.itemMultipliers[item.saveName] || 1)));
        });
    }
    //#region Controls
    static setSelected(i) {
        this.selected(i);
    }
    static buyItem() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        item.buy(this.amount());
        ShopHandler.resetAmount();
    }
    static resetAmount() {
        const input = $('input[name="amountOfItems"]');
        input.val(1).change();
    }
    static increaseAmount(n) {
        const input = $('input[name="amountOfItems"]');
        const newVal = (parseInt(input.val().toString(), 10) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static multiplyAmount(n) {
        const input = $('input[name="amountOfItems"]');
        const newVal = (parseInt(input.val().toString(), 10) || 0) * n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static maxAmount(n) {
        const item = this.shopObservable().items[ShopHandler.selected()];
        const input = $('input[name="amountOfItems"]');
        if (!item || !item.isAvailable()) {
            return input.val(0).change();
        }
        const tooMany = (amt) => amt > item.maxAmount || !App.game.wallet.hasAmount(new Amount(item.totalPrice(amt), item.currency));
        const amt = GameHelper.binarySearch(tooMany, 0, Number.MAX_SAFE_INTEGER);
        input.val(amt).change();
    }
    //#endregion
    //#region UI
    static getShopName() {
        if (this.shopObservable().name) {
            return this.shopObservable().name;
        }
        if (player.town()) {
            return `${player.town().name} Shop`;
        }
        return 'Shop';
    }
    static calculateCss(i) {
        if (this.selected() == i) {
            return 'shopItem clickable btn btn-secondary active';
        }
        else {
            return 'shopItem clickable btn btn-secondary';
        }
    }
    static calculateButtonCss() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        if (item && !(item.isAvailable() && App.game.wallet.hasAmount(new Amount(item.totalPrice(this.amount()), item.currency)))
            || this.amount() < 1) {
            return 'btn btn-danger smallButton smallFont';
        }
        else {
            return 'btn btn-success smallButton smallFont';
        }
    }
}
ShopHandler.shopObservable = ko.observable(new Shop([]));
ShopHandler.selected = ko.observable(0);
ShopHandler.amount = ko.observable(1);
///<reference path="../shop/ShopHandler.ts"/>
/**
 * Source event for decreasing shop multipliers
 */
var MultiplierDecreaser;
(function (MultiplierDecreaser) {
    MultiplierDecreaser[MultiplierDecreaser["Battle"] = 0] = "Battle";
    MultiplierDecreaser[MultiplierDecreaser["Berry"] = 1] = "Berry";
})(MultiplierDecreaser || (MultiplierDecreaser = {}));
class Item {
    constructor(name, basePrice, currency = GameConstants.Currency.money, { saveName = '', maxAmount = Number.MAX_SAFE_INTEGER, multiplier = GameConstants.ITEM_PRICE_MULTIPLIER, multiplierDecrease = true, multiplierDecreaser = MultiplierDecreaser.Battle, } = {}, displayName, description, imageDirectory) {
        this.name = name;
        this.basePrice = basePrice;
        this.currency = currency;
        this.price = ko.observable(this.basePrice);
        // If no custom save name specified, default to item name
        this.saveName = saveName || name || `${name}|${GameConstants.Currency[currency]}`;
        this.maxAmount = maxAmount || Number.MAX_SAFE_INTEGER;
        // Multiplier needs to be above 1
        this.multiplier = Math.max(1, multiplier || GameConstants.ITEM_PRICE_MULTIPLIER);
        this.multiplierDecrease = multiplierDecrease;
        this.multiplierDecreaser = multiplierDecreaser || MultiplierDecreaser.Battle;
        if (!ItemList[this.saveName]) {
            ItemList[this.saveName] = this;
        }
        this._displayName = displayName !== null && displayName !== void 0 ? displayName : name;
        this.description = description;
        this.imageDirectory = imageDirectory;
    }
    totalPrice(amount) {
        if (this.name == GameConstants.Pokeball[GameConstants.Pokeball.Pokeball]) {
            return Math.max(0, this.basePrice * amount);
        }
        else {
            // multiplier should be capped at 100, so work out how many to buy at increasing price and how many at max
            //    (m_start) * (m^k) = 100
            // => k = (2 - log(m_start)) / log(m)
            const mStart = Math.max(player.itemMultipliers[this.saveName] || 1, 1);
            const k = (mStart < 100)
                ? Math.ceil((2 - Math.log10(mStart)) / Math.log10(this.multiplier))
                : 0;
            const incAmount = Math.min(k, amount);
            const incCost = (this.price() * (1 - Math.pow(this.multiplier, incAmount))) / (1 - this.multiplier);
            const maxCost = (this.basePrice * 100 * (amount - incAmount));
            const total = incCost + maxCost;
            return Math.max(0, Math.floor(total));
        }
    }
    buy(n) {
        if (n <= 0) {
            return;
        }
        if (n > this.maxAmount) {
            Notifier.notify({
                message: `You can only buy ${this.maxAmount} &times; ${GameConstants.humanifyString(this.name)}!`,
                type: NotificationConstants.NotificationOption.danger,
            });
            n = this.maxAmount;
        }
        if (!this.isAvailable()) {
            Notifier.notify({
                message: `${GameConstants.humanifyString(this.name)} is sold out!`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        const multiple = n > 1 ? 's' : '';
        if (App.game.wallet.hasAmount(new Amount(this.totalPrice(n), this.currency))) {
            App.game.wallet.loseAmount(new Amount(this.totalPrice(n), this.currency));
            this.gain(n);
            this.increasePriceMultiplier(n);
            Notifier.notify({
                message: `You bought ${n} ${GameConstants.humanifyString(this.name)}${multiple}`,
                type: NotificationConstants.NotificationOption.success,
            });
        }
        else {
            let curr = GameConstants.camelCaseToString(GameConstants.Currency[this.currency]);
            switch (this.currency) {
                case GameConstants.Currency.money:
                    break;
                default:
                    curr += 's';
                    break;
            }
            Notifier.notify({
                message: `You don't have enough ${curr} to buy ${n} ${GameConstants.humanifyString(this.name) + multiple}`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    gain(n) {
        player.gainItem(this.name, n);
    }
    use() {
        return false;
    }
    isAvailable() {
        return true;
    }
    increasePriceMultiplier(amount = 1) {
        player.itemMultipliers[this.saveName] = Math.min(100, (player.itemMultipliers[this.saveName] || 1) * Math.pow(this.multiplier, amount));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.saveName]));
    }
    decreasePriceMultiplier(amount = 1, multiplierDecreaser) {
        if (!this.multiplierDecrease) {
            return;
        }
        if (this.multiplierDecreaser !== multiplierDecreaser) {
            return;
        }
        player.itemMultipliers[this.saveName] = Math.max(1, (player.itemMultipliers[this.saveName] || 1) / Math.pow(this.multiplier, amount));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.saveName]));
    }
    get displayName() {
        return GameConstants.humanifyString(this._displayName);
    }
    get image() {
        const subDirectory = this.imageDirectory ? `${this.imageDirectory}/` : '';
        return `assets/images/items/${subDirectory}${this.name}.png`;
    }
}
const ItemList = {};
///<reference path="Item.ts"/>
class BattleItem extends Item {
    constructor(type, description, basePrice, currency = GameConstants.Currency.money, displayName, multiplierType, multiplyBy) {
        super(GameConstants.BattleItemType[type], basePrice, currency, undefined, displayName, description, 'battleItem');
        this.multiplierType = multiplierType;
        this.multiplyBy = multiplyBy;
        this.type = type;
    }
    use() {
        EffectEngineRunner.addEffect(this.name, ItemHandler.amountToUse);
        return true;
    }
}
ItemList['xAttack'] = new BattleItem(GameConstants.BattleItemType.xAttack, '+50% Bonus to Pokémon attack', 600, undefined, undefined, 'pokemonAttack', 1.5);
ItemList['xClick'] = new BattleItem(GameConstants.BattleItemType.xClick, '+50% Bonus to click attack', 400, undefined, undefined, 'clickAttack', 1.5);
ItemList['Lucky_egg'] = new BattleItem(GameConstants.BattleItemType.Lucky_egg, '+50% Bonus to experience gained', 800, undefined, 'Lucky Egg', 'exp', 1.5);
ItemList['Token_collector'] = new BattleItem(GameConstants.BattleItemType.Token_collector, '+50% Bonus to dungeon tokens gained', 1000, undefined, 'Token Collector', 'dungeonToken', 1.5);
ItemList['Item_magnet'] = new BattleItem(GameConstants.BattleItemType.Item_magnet, '+50% Chance of gaining an extra item', 1500, undefined, 'Item Magnet');
ItemList['Lucky_incense'] = new BattleItem(GameConstants.BattleItemType.Lucky_incense, '+50% Bonus to money gained', 2000, undefined, 'Lucky Incense', 'money', 1.5);
class CaughtIndicatingItem extends Item {
}
/// <reference path="CaughtIndicatingItem.ts" />
class EggItem extends CaughtIndicatingItem {
    constructor(type, basePrice, currency = GameConstants.Currency.questPoint, displayName) {
        super(GameConstants.EggItemType[type], basePrice, currency, undefined, displayName, undefined, 'egg');
        this.type = type;
    }
    use() {
        if (player.itemList[this.name]() <= 0) {
            return false;
        }
        let success;
        if (this.type === GameConstants.EggItemType.Pokemon_egg) {
            success = App.game.breeding.gainPokemonEgg(pokemonMap.random(GameConstants.TotalPokemonsPerRegion[player.highestRegion()]));
        }
        else if (this.type === GameConstants.EggItemType.Mystery_egg) {
            success = App.game.breeding.gainRandomEgg();
        }
        else {
            const etype = EggType[GameConstants.EggItemType[this.type].split('_')[0]];
            success = App.game.breeding.gainEgg(App.game.breeding.createTypedEgg(etype));
        }
        if (success) {
            player.loseItem(this.name, 1);
        }
        return success;
    }
    getCaughtStatus() {
        switch (this.type) {
            case (GameConstants.EggItemType.Pokemon_egg): {
                // random pokemon
                return CaughtStatus.NotCaught;
            }
            case (GameConstants.EggItemType.Mystery_egg): {
                return App.game.breeding.getAllCaughtStatus();
            }
            default: {
                const etype = EggType[GameConstants.EggItemType[this.type].split('_')[0]];
                return App.game.breeding.getTypeCaughtStatus(etype);
            }
        }
    }
}
ItemList['Fire_egg'] = new EggItem(GameConstants.EggItemType.Fire_egg, 1000, undefined, 'Fire Egg');
ItemList['Water_egg'] = new EggItem(GameConstants.EggItemType.Water_egg, 1000, undefined, 'Water Egg');
ItemList['Grass_egg'] = new EggItem(GameConstants.EggItemType.Grass_egg, 1000, undefined, 'Grass Egg');
ItemList['Fighting_egg'] = new EggItem(GameConstants.EggItemType.Fighting_egg, 1000, undefined, 'Fighting Egg');
ItemList['Electric_egg'] = new EggItem(GameConstants.EggItemType.Electric_egg, 1000, undefined, 'Electric Egg');
ItemList['Dragon_egg'] = new EggItem(GameConstants.EggItemType.Dragon_egg, 1000, undefined, 'Dragon Egg');
ItemList['Pokemon_egg'] = new EggItem(GameConstants.EggItemType.Pokemon_egg, 1000, undefined, 'Pokémon Egg');
ItemList['Mystery_egg'] = new EggItem(GameConstants.EggItemType.Mystery_egg, 700, undefined, 'Mystery Egg');
///<reference path="Item.ts"/>
class EnergyRestore extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, displayName) {
        super(GameConstants.EnergyRestoreSize[type], basePrice, currency, undefined, displayName);
        this.type = type;
    }
    use() {
        if (player.itemList[this.name]() <= 0) {
            return false;
        }
        if (App.game.underground.energy === App.game.underground.getMaxEnergy()) {
            Notifier.notify({
                message: 'Your mining energy is already full!',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        App.game.underground.gainEnergyThroughItem(this.type);
        player.loseItem(this.name, 1);
        return true;
    }
}
ItemList['SmallRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 30000, undefined, 'Small Restore');
ItemList['MediumRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 100000, undefined, 'Medium Restore');
ItemList['LargeRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 400000, undefined, 'Large Restore');
///<reference path="Item.ts"/>
class EvolutionStone extends CaughtIndicatingItem {
    constructor(type, basePrice, currency = GameConstants.Currency.questPoint, displayName) {
        super(GameConstants.StoneType[type], basePrice, currency, undefined, displayName, undefined, 'evolution');
        this.type = type;
    }
    gain(n) {
        player.gainItem(GameConstants.StoneType[this.type], n);
    }
    use(pokemon) {
        const partyPokemon = App.game.party.getPokemon(PokemonHelper.getPokemonByName(pokemon).id);
        const shiny = partyPokemon.useStone(this.type);
        return shiny;
    }
    getCaughtStatus() {
        const unlockedEvolutions = pokemonList.filter((p) => p.evolutions)
            .map((p) => p.evolutions.find(e => e.type.includes(EvolutionType.Stone) && e.stone === this.type))
            .filter(evolution => evolution)
            .filter(evolution => PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion())
            .map(evolution => evolution.getEvolvedPokemon());
        return unlockedEvolutions.reduce((status, pokemonName) => {
            return Math.min(status, PartyController.getCaughtStatusByName(pokemonName));
        }, CaughtStatus.CaughtShiny);
    }
}
// TODO: Set prices for different kinds of stones
ItemList['Fire_stone'] = new EvolutionStone(GameConstants.StoneType.Fire_stone, 2500, undefined, 'Fire Stone');
ItemList['Water_stone'] = new EvolutionStone(GameConstants.StoneType.Water_stone, 2500, undefined, 'Water Stone');
ItemList['Thunder_stone'] = new EvolutionStone(GameConstants.StoneType.Thunder_stone, 2500, undefined, 'Thunder Stone');
ItemList['Leaf_stone'] = new EvolutionStone(GameConstants.StoneType.Leaf_stone, 2500, undefined, 'Leaf Stone');
ItemList['Moon_stone'] = new EvolutionStone(GameConstants.StoneType.Moon_stone, 2500, undefined, 'Moon Stone');
ItemList['Sun_stone'] = new EvolutionStone(GameConstants.StoneType.Sun_stone, 2500, undefined, 'Sun Stone');
ItemList['Trade_stone'] = new EvolutionStone(GameConstants.StoneType.Trade_stone, 2500, undefined, 'Trade Stone');
ItemList['Dragon_scale'] = new EvolutionStone(GameConstants.StoneType.Dragon_scale, 2500, undefined, 'Dragon Scale');
ItemList['Metal_coat'] = new EvolutionStone(GameConstants.StoneType.Metal_coat, 2500, undefined, 'Metal Coat');
ItemList['Kings_rock'] = new EvolutionStone(GameConstants.StoneType.Kings_rock, 2500, undefined, 'King\'s Rock');
ItemList['Upgrade'] = new EvolutionStone(GameConstants.StoneType.Upgrade, 2500, undefined, 'Upgrade');
ItemList['Soothe_bell'] = new EvolutionStone(GameConstants.StoneType.Soothe_bell, 2500, undefined, 'Soothe Bell');
ItemList['Deepsea_tooth'] = new EvolutionStone(GameConstants.StoneType.Deepsea_tooth, 2500, undefined, 'Deep Sea Tooth');
ItemList['Deepsea_scale'] = new EvolutionStone(GameConstants.StoneType.Deepsea_scale, 2500, undefined, 'Deep Sea Scale');
ItemList['Dawn_stone'] = new EvolutionStone(GameConstants.StoneType.Dawn_stone, 2500, undefined, 'Dawn Stone');
ItemList['Dusk_stone'] = new EvolutionStone(GameConstants.StoneType.Dusk_stone, 2500, undefined, 'Dusk Stone');
ItemList['Shiny_stone'] = new EvolutionStone(GameConstants.StoneType.Shiny_stone, 2500, undefined, 'Shiny Stone');
ItemList['Dubious_disc'] = new EvolutionStone(GameConstants.StoneType.Dubious_disc, 2500, undefined, 'Dubious Disc');
ItemList['Electirizer'] = new EvolutionStone(GameConstants.StoneType.Electirizer, 2500, undefined, 'Electirizer');
ItemList['Magmarizer'] = new EvolutionStone(GameConstants.StoneType.Magmarizer, 2500, undefined, 'Magmarizer');
ItemList['Protector'] = new EvolutionStone(GameConstants.StoneType.Protector, 2500, undefined, 'Protector');
ItemList['Reaper_cloth'] = new EvolutionStone(GameConstants.StoneType.Reaper_cloth, 2500, undefined, 'Reaper Cloth');
ItemList['Razor_claw'] = new EvolutionStone(GameConstants.StoneType.Razor_claw, 2500, undefined, 'Razor Claw');
ItemList['Razor_fang'] = new EvolutionStone(GameConstants.StoneType.Razor_fang, 2500, undefined, 'Razor Fang');
ItemList['Prism_scale'] = new EvolutionStone(GameConstants.StoneType.Prism_scale, 2500, undefined, 'Prism Scale');
ItemList['Sachet'] = new EvolutionStone(GameConstants.StoneType.Sachet, 2500, undefined, 'Sachet');
ItemList['Whipped_dream'] = new EvolutionStone(GameConstants.StoneType.Whipped_dream, 2500, undefined, 'Whipped Dream');
ItemList['Ice_stone'] = new EvolutionStone(GameConstants.StoneType.Ice_stone, 2500, undefined, 'Ice Stone');
class ItemHandler {
    static useItem(name, amount = 1) {
        if (!player.itemList[name]()) {
            Notifier.notify({
                message: `You don't have any ${ItemList[name].displayName}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (ItemList[name] instanceof BattleItem && App.game.challenges.list.disableBattleItems.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Battle Items are disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Only allow the player to use the amount they have maximum
        this.amountToUse = Math.min(player.itemList[name](), amount);
        player.itemList[name](player.itemList[name]() - this.amountToUse);
        // run the function
        const result = ItemList[name].use();
        // If the function returned nothing assume it went fine
        return result == undefined ? true : result;
    }
    static hasItem(name) {
        return player.itemList[name] ? !!player.itemList[name]() : false;
    }
    static resetAmount() {
        const input = $('input[name="amountOfStones"]');
        input.val(1).change();
    }
    static increaseAmount(n) {
        const input = $('input[name="amountOfItems"]');
        const newVal = (parseInt(input.val().toString(), 10) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static useStones() {
        if (!this.pokemonSelected()) {
            return Notifier.notify({
                message: 'No Pokémon selected',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        const amountTotal = Math.min(this.amountSelected(), player.itemList[this.stoneSelected()]());
        if (!amountTotal) {
            return Notifier.notify({
                // TODO: PMX - Update plural system to handle all cases
                message: `You don't have any ${ItemList[this.stoneSelected()].displayName}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        let amountUsed = 0;
        for (let i = 0; i < amountTotal; i++) {
            player.itemList[this.stoneSelected()](player.itemList[this.stoneSelected()]() - 1);
            amountUsed++;
            if (ItemList[this.stoneSelected()].use(this.pokemonSelected())) {
                // Stop when a shiny is encountered
                break;
            }
        }
        const multiple = amountUsed == 1 ? '' : 's';
        Notifier.notify({
            // TODO: PMX - Update plural system to handle all cases
            message: `You used ${amountUsed} ${ItemList[this.stoneSelected()].displayName}${multiple}`,
            type: NotificationConstants.NotificationOption.success,
        });
    }
    static buyStone() {
        const stoneSelected = ItemList[this.stoneSelected()];
        if (stoneSelected.isAvailable()) {
            stoneSelected.buy(Math.min(this.amountSelected(), 1));
        }
    }
}
ItemHandler.stoneSelected = ko.observable('Fire_stone');
ItemHandler.pokemonSelected = ko.observable('Vulpix');
ItemHandler.amountSelected = ko.observable(1);
ItemHandler.amount = ko.observable(1);
ItemHandler.amountToUse = 1;
///<reference path="Item.ts"/>
///<reference path="../farming/MulchType.ts"/>
class MulchItem extends Item {
    constructor(type, basePrice, displayName, description) {
        super(MulchType[type], basePrice, GameConstants.Currency.farmPoint, { multiplierDecreaser: MultiplierDecreaser.Berry }, displayName, description, 'farm');
        this.type = type;
    }
    gain(amt) {
        GameHelper.incrementObservable(App.game.farming.mulchList[this.type], amt);
    }
}
ItemList['Boost_Mulch'] = new MulchItem(MulchType.Boost_Mulch, 50, 'Boost Mulch', 'Increases Berry growth rate.');
ItemList['Rich_Mulch'] = new MulchItem(MulchType.Rich_Mulch, 100, 'Rich Mulch', 'Increases Berry harvest rate.');
ItemList['Surprise_Mulch'] = new MulchItem(MulchType.Surprise_Mulch, 150, 'Surprise Mulch', 'Increases Berry mutation rate.');
ItemList['Amaze_Mulch'] = new MulchItem(MulchType.Amaze_Mulch, 200, 'Amaze Mulch', 'Increases all Berry effects.');
class PokeBlock extends Item {
    constructor(color, basePrice, currency = GameConstants.Currency.money) {
        super(`PokeBlock_${GameConstants.PokeBlockColor[color]}`, basePrice, currency);
        this.type = color;
    }
}
ItemList['PokeBlock_Black'] = new PokeBlock(GameConstants.PokeBlockColor.Black, Infinity);
ItemList['PokeBlock_Red'] = new PokeBlock(GameConstants.PokeBlockColor.Red, Infinity);
ItemList['PokeBlock_Gold'] = new PokeBlock(GameConstants.PokeBlockColor.Gold, Infinity);
ItemList['PokeBlock_Purple'] = new PokeBlock(GameConstants.PokeBlockColor.Purple, Infinity);
ItemList['PokeBlock_Gray'] = new PokeBlock(GameConstants.PokeBlockColor.Gray, Infinity);
ItemList['PokeBlock_White'] = new PokeBlock(GameConstants.PokeBlockColor.White, Infinity);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="Item.ts" />
class PokeballItem extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, options, displayName) {
        super(GameConstants.Pokeball[type], basePrice, currency, options, displayName, undefined, 'pokeball');
        this.type = type;
    }
    gain(amt) {
        App.game.pokeballs.gainPokeballs(this.type, amt);
        GameHelper.incrementObservable(App.game.statistics.pokeballsBought[this.type], amt);
    }
}
ItemList['Pokeball'] = new PokeballItem(GameConstants.Pokeball.Pokeball, 100, undefined, undefined, 'Pokéball');
ItemList['Greatball'] = new PokeballItem(GameConstants.Pokeball.Greatball, 500);
ItemList['Ultraball'] = new PokeballItem(GameConstants.Pokeball.Ultraball, 2000);
ItemList['Masterball'] = new PokeballItem(GameConstants.Pokeball.Masterball, 2500, GameConstants.Currency.questPoint);
// Not sold in shops
ItemList['Fastball'] = new PokeballItem(GameConstants.Pokeball.Fastball, Infinity, GameConstants.Currency.farmPoint);
ItemList['Quickball'] = new PokeballItem(GameConstants.Pokeball.Quickball, Infinity, GameConstants.Currency.farmPoint);
ItemList['Timerball'] = new PokeballItem(GameConstants.Pokeball.Timerball, Infinity, GameConstants.Currency.farmPoint);
ItemList['Duskball'] = new PokeballItem(GameConstants.Pokeball.Duskball, Infinity, GameConstants.Currency.farmPoint);
ItemList['Luxuryball'] = new PokeballItem(GameConstants.Pokeball.Luxuryball, Infinity, GameConstants.Currency.farmPoint);
/// <reference path="CaughtIndicatingItem.ts" />
class PokemonItem extends CaughtIndicatingItem {
    constructor(pokemon, basePrice, currency = GameConstants.Currency.questPoint) {
        super(pokemon, basePrice, currency, undefined, undefined, undefined, 'pokemonItem');
        this.type = pokemon;
    }
    gain() {
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
        const pokemonName = this.name;
        if (shiny) {
            Notifier.notify({
                message: `✨ You obtained a shiny ${pokemonName}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(pokemonName).id, shiny, true);
    }
    getCaughtStatus() {
        return PartyController.getCaughtStatusByName(this.name);
    }
    get image() {
        const subDirectory = this.imageDirectory ? `${this.imageDirectory}/` : '';
        return `assets/images/items/${subDirectory}${this.name.replace(/[^\s\w.()-]/g, '')}.png`;
    }
}
ItemList['Eevee'] = new PokemonItem('Eevee', 5000);
ItemList['Porygon'] = new PokemonItem('Porygon', 2000);
ItemList['Jynx'] = new PokemonItem('Jynx', 2500);
ItemList['Mr. Mime'] = new PokemonItem('Mr. Mime', 1500);
ItemList['Lickitung'] = new PokemonItem('Lickitung', 1000);
ItemList['Togepi'] = new PokemonItem('Togepi', 2500);
ItemList['Beldum'] = new PokemonItem('Beldum', 5000);
ItemList['Skorupi'] = new PokemonItem('Skorupi', 5000);
ItemList['Combee'] = new PokemonItem('Combee', 5000);
ItemList['Burmy (plant)'] = new PokemonItem('Burmy (plant)', 5000);
ItemList['Cherubi'] = new PokemonItem('Cherubi', 5000);
ItemList['Spiritomb'] = new PokemonItem('Spiritomb', 5000);
ItemList['Zorua'] = new PokemonItem('Zorua', 5000);
ItemList['Meloetta (pirouette)'] = new PokemonItem('Meloetta (pirouette)', 150000);
ItemList['Type: Null'] = new PokemonItem('Type: Null', 5000);
ItemList['Poipole'] = new PokemonItem('Poipole', 5000);
ItemList['Eternatus'] = new PokemonItem('Eternatus', 10000);
ItemList['Toxel'] = new PokemonItem('Toxel', 5000);
///<reference path="Item.ts"/>
class ShovelItem extends Item {
    constructor(basePrice, displayName, description) {
        super('Berry_Shovel', basePrice, GameConstants.Currency.farmPoint, { multiplierDecreaser: MultiplierDecreaser.Berry }, displayName, description, 'farm');
    }
    gain(amt) {
        GameHelper.incrementObservable(App.game.farming.shovelAmt, amt);
    }
}
ItemList['Berry_Shovel'] = new ShovelItem(300, 'Berry Shovel', 'Removes Berry Plants in the Farm.');
class Vitamin extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, options, displayName) {
        super(GameConstants.VitaminType[type], basePrice, currency, options, displayName);
        this.type = type;
    }
    use() {
        return true;
    }
}
ItemList.RareCandy = new Vitamin(GameConstants.VitaminType.RareCandy, Infinity, undefined, undefined, 'Rare Candy');
ItemList.RareCandy.description = 'A rare to find candy that currently has no use.';
ItemList.Protein = new Vitamin(GameConstants.VitaminType.Protein, 1e4, GameConstants.Currency.money, { multiplier: 1.1, multiplierDecrease: false, saveName: `${GameConstants.VitaminType[GameConstants.VitaminType.Protein]}|${GameConstants.Currency[GameConstants.Currency.money]}` });
ItemList.Protein.description = 'Increases Pokemon attack bonus<br/><i>(attack gained per breeding cycle)</i>';
class VitaminController {
    static incrementMultiplier() {
        this.multiplierIndex((this.multiplierIndex() + 1) % this.multiplier.length);
    }
    static decrementMultiplier() {
        this.multiplierIndex((this.multiplierIndex() + this.multiplier.length - 1) % this.multiplier.length);
    }
    static getMultiplier() {
        return Number(VitaminController.multiplier[VitaminController.multiplierIndex()].replace(/\D/g, '')) || Infinity;
    }
}
VitaminController.multiplier = ['×1', '×5', 'x10', 'Max'];
VitaminController.multiplierIndex = ko.observable(0);
class KeyItems {
    constructor() {
        this.name = 'Key Items';
        this.saveKey = 'keyItems';
        this.itemList = [];
    }
    initialize() {
        this.itemList = [
            new KeyItem(KeyItems.KeyItem.Teachy_tv, 'A television set that is tuned to a program with useful tips for novice TRAINERS', null, true, undefined, 'Teachy TV'),
            new KeyItem(KeyItems.KeyItem.Coin_case, 'A case for holding money', null, true, undefined, 'Coin Case'),
            new KeyItem(KeyItems.KeyItem.Pokeball_bag, 'A small bag that can hold many different types of PokéBalls', null, true, undefined, 'Pokéball Bag'),
            new KeyItem(KeyItems.KeyItem.Town_map, 'A very convenient map that can be viewed anytime. It even shows you your present location in the region', () => {
                return App.game.statistics.routeKills[GameConstants.Region.kanto][1]() >= GameConstants.ROUTE_KILLS_NEEDED;
            }, false, () => {
                Information.show({
                    steps: [
                        {
                            element: document.getElementById('townMap'),
                            intro: 'This is the Town Map,<br/>Use this to move to between different Routes, Towns and Dungeons.',
                        },
                    ],
                });
            }, 'Town Map'),
            // TODO obtain somewhere at the start
            new KeyItem(KeyItems.KeyItem.Factory_key, 'This pass serves as an ID card for gaining access to the Pokéball factory that lies along Route 13', undefined, undefined, undefined, 'Factory Key'),
            new KeyItem(KeyItems.KeyItem.Dungeon_ticket, 'This ticket grants access to all dungeons in the Kanto region and beyond,<br/><strong>Tip:</strong> You gain Dungeon Tokens by capturing Pokémon', null, false, () => {
                Information.show({
                    steps: [
                        {
                            element: document.getElementById('pokeballSelector'),
                            intro: 'Select which Pokéball types to catch Pokémon with based on their caught/shiny status.<br/><i><sup>Hover over the column titles for more info.</sup></i><br/><br/>Capturing Pokémon gains you <img title="Dungeon Tokens\nGained by capturing Pokémon" src="assets/images/currency/dungeonToken.svg" height="25px"> Dungeon Tokens.<br/><br/>Try now by clicking the "Caught" selector to change it.',
                        },
                    ],
                    exitOnEsc: false,
                    showButtons: false,
                });
                const caughtSelector = document.querySelector('.pokeball-small.clickable.pokeball-selected');
                caughtSelector.addEventListener('click', () => {
                    Information.hide();
                    $('#pokeballSelectorModal').one('shown.bs.modal', null, () => {
                        // Need to set a timeout, otherwise it messes up the modal layout
                        setTimeout(() => {
                            Information.show({
                                steps: [
                                    {
                                        element: document.querySelector('#pokeballSelectorModal .modal-body'),
                                        intro: 'Select the <img title="Pokéball" src="assets/images/pokeball/Pokeball.svg" height="25px"> Pokéball to use this type of ball to capture already caught Pokémon, which will give you <img title="Dungeon Tokens\nGained by capturing Pokémon" src="assets/images/currency/dungeonToken.svg" height="25px"> Dungeon Tokens when captured.',
                                    },
                                ],
                                // Needed for IntroJs on modals
                                overlayOpacity: 0,
                            });
                        }, 100);
                        // Hide the IntroJS overlay once the user selects the Pokeball
                        const selectPokeball = document.querySelectorAll('#pokeballSelectorModal .clickable')[1];
                        selectPokeball.addEventListener('click', () => {
                            Information.hide();
                        }, {
                            once: true,
                        });
                    });
                }, {
                    once: true,
                });
            }, 'Dungeon Ticket'),
            new KeyItem(KeyItems.KeyItem.Super_rod, 'The best fishing rod for catching wild water Pokémon', () => {
                return App.game.statistics.routeKills[GameConstants.Region.kanto][12]() >= GameConstants.ROUTE_KILLS_NEEDED;
            }, undefined, undefined, 'Super Rod'),
            // TODO obtain somewhere at the start
            new KeyItem(KeyItems.KeyItem.Holo_caster, 'A device that allows users to receive and view hologram clips at any time. It’s also used to chat with others', undefined, undefined, undefined, 'Holo Caster'),
            new KeyItem(KeyItems.KeyItem.Mystery_egg, 'A mysterious Egg obtained from Mr. Pokémon. This allows you to use the Pokémon Day Care to help improve your Pokémons attack; some baby Pokémon can only be found through breeding too!', () => {
                return App.game.statistics.routeKills[GameConstants.Region.kanto][5]() >= GameConstants.ROUTE_KILLS_NEEDED;
            }, undefined, undefined, 'Mystery Egg'),
            new KeyItem(KeyItems.KeyItem.Safari_ticket, 'This ticket grants access to the Safari Zone right outside Fuchsia City'),
            new KeyItem(KeyItems.KeyItem.Wailmer_pail, 'This is a tool for watering Berries to allow you to operate the farm.', () => {
                return MapHelper.accessToRoute(14, GameConstants.Region.kanto);
            }, undefined, undefined, 'Wailmer Pail'),
            new KeyItem(KeyItems.KeyItem.Explorer_kit, 'A bag filled with convenient tools for exploring. It provides access to the Underground', undefined, undefined, undefined, 'Explorer Kit'),
            // TODO buy for 500 quest points
            new KeyItem(KeyItems.KeyItem.Event_calendar, 'This calendar will keep you up to date on the latest events', undefined, undefined, undefined, 'Event Calender'),
            new KeyItem(KeyItems.KeyItem.Shard_case, 'A case specifically designed for holding shards', undefined, undefined, undefined, 'Shard Case'),
            new KeyItem(KeyItems.KeyItem.DNA_splicers, 'A splicer that fuses certain Pokémon', () => {
                return App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Giant Chasm')]() > 0;
            }, undefined, undefined, 'DNA Splicers'),
        ];
    }
    hasKeyItem(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return this.itemList[item].isUnlocked;
    }
    gainKeyItem(item) {
        if (!this.hasKeyItem(item)) {
            KeyItemController.showGainModal(item);
            this.itemList[item].unlock();
        }
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        for (const key in json) {
            if (json.hasOwnProperty(key)) {
                if (json[key] === true) {
                    // Unlock to dispose unlocker if needed
                    this.itemList[KeyItems.KeyItem[key]].unlock();
                }
            }
        }
        // Gain the item in case the requirements changed.
        for (const keyItem of this.itemList) {
            if (!keyItem.isUnlocked && keyItem.unlockReq !== null) {
                if (keyItem.unlockReq()) {
                    App.game.keyItems.gainKeyItem(keyItem.name);
                }
            }
        }
    }
    toJSON() {
        const save = {};
        for (let i = 0; i < this.itemList.length; i++) {
            save[KeyItems.KeyItem[this.itemList[i].name]] = this.itemList[i].isUnlocked;
        }
        return save;
    }
    update(delta) {
        // This method intentionally left blank
    }
}
(function (KeyItems) {
    let KeyItem;
    (function (KeyItem) {
        KeyItem[KeyItem["Teachy_tv"] = 0] = "Teachy_tv";
        KeyItem[KeyItem["Coin_case"] = 1] = "Coin_case";
        KeyItem[KeyItem["Pokeball_bag"] = 2] = "Pokeball_bag";
        KeyItem[KeyItem["Town_map"] = 3] = "Town_map";
        KeyItem[KeyItem["Factory_key"] = 4] = "Factory_key";
        KeyItem[KeyItem["Dungeon_ticket"] = 5] = "Dungeon_ticket";
        KeyItem[KeyItem["Super_rod"] = 6] = "Super_rod";
        KeyItem[KeyItem["Holo_caster"] = 7] = "Holo_caster";
        KeyItem[KeyItem["Mystery_egg"] = 8] = "Mystery_egg";
        KeyItem[KeyItem["Safari_ticket"] = 9] = "Safari_ticket";
        KeyItem[KeyItem["Wailmer_pail"] = 10] = "Wailmer_pail";
        KeyItem[KeyItem["Explorer_kit"] = 11] = "Explorer_kit";
        KeyItem[KeyItem["Event_calendar"] = 12] = "Event_calendar";
        KeyItem[KeyItem["Shard_case"] = 13] = "Shard_case";
        KeyItem[KeyItem["DNA_splicers"] = 14] = "DNA_splicers";
    })(KeyItem = KeyItems.KeyItem || (KeyItems.KeyItem = {}));
})(KeyItems || (KeyItems = {}));
///<reference path="../keyItems/KeyItems.ts"/>
class BuyKeyItem extends Item {
    constructor(item, basePrice, currency = GameConstants.Currency.questPoint, options, displayName) {
        super(KeyItems.KeyItem[item], basePrice, currency, Object.assign({ maxAmount: 1 }, options), displayName);
        this.item = item;
    }
    totalPrice(amt) {
        if (amt > this.maxAmount) {
            amt = this.maxAmount;
        }
        return this.basePrice * amt;
    }
    gain(amt) {
        App.game.keyItems.gainKeyItem(this.item);
    }
    isAvailable() {
        return super.isAvailable() && !App.game.keyItems.hasKeyItem(this.item);
    }
    get image() {
        return `assets/images/keyitems/${this.name}.png`;
    }
}
ItemList['Dungeon_ticket'] = new BuyKeyItem(KeyItems.KeyItem.Dungeon_ticket, 100, undefined, undefined, 'Dungeon Ticket');
ItemList['Explorer_kit'] = new BuyKeyItem(KeyItems.KeyItem.Explorer_kit, 5000, undefined, undefined, 'Explorer Kit');
class OakItems {
    constructor(unlockRequirements, multiplier) {
        this.multiplier = multiplier;
        this.name = 'Oak Items';
        this.saveKey = 'oakItems';
        this.itemList = [];
        this.unlockRequirements = unlockRequirements;
    }
    canAccess() {
        return App.game.party.caughtPokemon.length >= 20;
    }
    initialize() {
        this.itemList = [
            new OakItem(OakItems.OakItem.Magic_Ball, 'Magic Ball', 'Gives a bonus to your catchrate', true, [5, 6, 7, 8, 9, 10], 0, 20, 2, undefined, undefined, undefined, '%'),
            new OakItem(OakItems.OakItem.Amulet_Coin, 'Amulet Coin', 'Gain more coins from battling', true, [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, 30, 1),
            new OakItem(OakItems.OakItem.Poison_Barb, 'Poison Barb', 'Clicks do more damage', true, [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, 40, 3),
            new OakItem(OakItems.OakItem.Exp_Share, 'EXP Share', 'Gain more exp from battling', true, [1.15, 1.18, 1.21, 1.24, 1.27, 1.30], 1, 50, 1),
            new OakItem(OakItems.OakItem.Sprayduck, 'Sprayduck', 'Makes your berries grow faster', false, [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, 60, 1),
            new OakItem(OakItems.OakItem.Shiny_Charm, 'Shiny Charm', 'Encounter shinies more often', true, [1.50, 1.60, 1.70, 1.80, 1.90, 2.00], 1, 70, 150),
            new OakItem(OakItems.OakItem.Blaze_Cassette, 'Blaze Cassette', 'Hatch eggs faster', false, [1.50, 1.60, 1.70, 1.80, 1.90, 2.00], 1, 80, 10),
            new OakItem(OakItems.OakItem.Cell_Battery, 'Cell Battery', 'More passive mining energy regen', false, [1.5, 1.6, 1.7, 1.8, 1.9, 2], 1, 90, 20),
            new BoughtOakItem(OakItems.OakItem.Squirtbottle, 'Squirtbottle', 'Increases the chance of berry mutations', 'Johto Berry Master', true, [1.25, 1.5, 1.75, 2, 2.25, 2.5], 1, 10, undefined, undefined, AmountFactory.createArray([2000, 5000, 10000, 20000, 50000], GameConstants.Currency.farmPoint)),
            new BoughtOakItem(OakItems.OakItem.Sprinklotad, 'Sprinklotad', 'Increases the chance of berry replants', 'Hoenn Berry Master', true, [1.15, 1.3, 1.45, 1.6, 1.75, 1.9], 1, 2, undefined, undefined, AmountFactory.createArray([2000, 5000, 10000, 20000, 50000], GameConstants.Currency.farmPoint)),
            new BoughtOakItem(OakItems.OakItem.Explosive_Charge, 'Explosive Charge', 'All new mining layers start with damaged tiles', 'Cinnabar Island Shop', true, [2, 4, 7, 11, 15, 20], 1, 50, undefined, undefined, AmountFactory.createArray([50000, 100000, 400000, 1000000, 2000000], GameConstants.Currency.money)),
            new BoughtOakItem(OakItems.OakItem.Treasure_Scanner, 'Treasure Scanner', 'Chance to multiply mining rewards', 'Cinnabar Island Shop', true, [4, 8, 12, 16, 20, 24], 1, 25, undefined, undefined, AmountFactory.createArray([50000, 100000, 250000, 500000, 1000000], GameConstants.Currency.money), '%'),
        ];
        this.addMultiplier('clickAttack', OakItems.OakItem.Poison_Barb);
        this.addMultiplier('exp', OakItems.OakItem.Exp_Share);
        this.addMultiplier('money', OakItems.OakItem.Amulet_Coin);
        this.addMultiplier('shiny', OakItems.OakItem.Shiny_Charm);
        this.addMultiplier('eggStep', OakItems.OakItem.Blaze_Cassette);
    }
    addMultiplier(type, item) {
        this.multiplier.addBonus(type, this.createMultiplierFunction(item));
    }
    createMultiplierFunction(item) {
        return (useBonus) => this.calculateBonus(item, useBonus);
    }
    calculateBonus(item, useItem = false) {
        const oakItem = this.itemList[item];
        if (oakItem == undefined) {
            console.error('Could not find oakItem', item, 'This could have unintended consequences');
            return 1;
        }
        if (useItem) {
            oakItem.use();
        }
        return oakItem.calculateBonus();
    }
    isUnlocked(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return this.itemList[item].isUnlocked();
    }
    use(item, scale = 1) {
        if (!this.isUnlocked(item)) {
            return;
        }
        this.itemList[item].use(undefined, scale);
    }
    maxActiveCount() {
        for (let i = 0; i < this.unlockRequirements.length; i++) {
            if (App.game.party.caughtPokemon.length < this.unlockRequirements[i]) {
                return i;
            }
        }
        return this.unlockRequirements.length;
    }
    activeCount() {
        let count = 0;
        for (let i = 0; i < this.itemList.length; i++) {
            if (this.itemList[i].isActive) {
                count++;
            }
        }
        return count;
    }
    hasAvailableSlot() {
        return this.activeCount() < this.maxActiveCount();
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        // Loading OakItems
        GameHelper.enumStrings(OakItems.OakItem).forEach((oakItem) => {
            if (json.hasOwnProperty(oakItem)) {
                this.itemList[OakItems.OakItem[oakItem]].fromJSON(json[oakItem]);
            }
        });
    }
    toJSON() {
        const save = {};
        for (let i = 0; i < this.itemList.length; i++) {
            save[OakItems.OakItem[this.itemList[i].name]] = this.itemList[i].toJSON();
        }
        return save;
    }
    update(delta) {
        // This method intentionally left blank
    }
    isActive(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return this.itemList[item].isActive;
    }
    activate(item) {
        if (App.game.challenges.list.disableOakItems.active()) {
            return;
        }
        if (!this.isUnlocked(item)) {
            return;
        }
        if (this.maxActiveCount() == 0) {
            return;
        }
        if (this.maxActiveCount() == 1) {
            this.deactivateAll();
            this.itemList[item].isActive = true;
        }
        if (this.activeCount() < this.maxActiveCount()) {
            this.itemList[item].isActive = true;
        }
    }
    deactivateAll() {
        for (let i = 0; i < this.itemList.length; i++) {
            this.itemList[i].isActive = false;
        }
    }
    deactivate(item) {
        this.itemList[item].isActive = false;
    }
}
(function (OakItems) {
    let OakItem;
    (function (OakItem) {
        OakItem[OakItem["Magic_Ball"] = 0] = "Magic_Ball";
        OakItem[OakItem["Amulet_Coin"] = 1] = "Amulet_Coin";
        OakItem[OakItem["Poison_Barb"] = 2] = "Poison_Barb";
        OakItem[OakItem["Exp_Share"] = 3] = "Exp_Share";
        OakItem[OakItem["Sprayduck"] = 4] = "Sprayduck";
        OakItem[OakItem["Shiny_Charm"] = 5] = "Shiny_Charm";
        OakItem[OakItem["Blaze_Cassette"] = 6] = "Blaze_Cassette";
        OakItem[OakItem["Cell_Battery"] = 7] = "Cell_Battery";
        OakItem[OakItem["Squirtbottle"] = 8] = "Squirtbottle";
        OakItem[OakItem["Sprinklotad"] = 9] = "Sprinklotad";
        OakItem[OakItem["Explosive_Charge"] = 10] = "Explosive_Charge";
        OakItem[OakItem["Treasure_Scanner"] = 11] = "Treasure_Scanner";
    })(OakItem = OakItems.OakItem || (OakItems.OakItem = {}));
})(OakItems || (OakItems = {}));
///<reference path="../oakItems/OakItems.ts"/>
class BuyOakItem extends Item {
    constructor(item, basePrice, currency = GameConstants.Currency.questPoint) {
        super(OakItems.OakItem[item], basePrice, currency, { maxAmount: 1 }, undefined, 'Purchase to unlock this Oak Item');
        this.item = item;
    }
    totalPrice(amt) {
        if (amt > this.maxAmount) {
            amt = this.maxAmount;
        }
        return this.basePrice * amt;
    }
    gain(amt) {
        const oakItem = App.game.oakItems.itemList[this.item];
        if (oakItem instanceof BoughtOakItem) {
            oakItem.purchased = true;
        }
    }
    isAvailable() {
        const oakItem = App.game.oakItems.itemList[this.item];
        const purchased = (oakItem instanceof BoughtOakItem) ? oakItem.purchased : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        return `assets/images/oakitems/${this.name}.png`;
    }
}
ItemList['Squirtbottle'] = new BuyOakItem(OakItems.OakItem.Squirtbottle, 5000, Currency.farmPoint);
ItemList['Sprinklotad'] = new BuyOakItem(OakItems.OakItem.Sprinklotad, 10000, Currency.farmPoint);
ItemList['Explosive_Charge'] = new BuyOakItem(OakItems.OakItem.Explosive_Charge, 5000, Currency.questPoint);
ItemList['Treasure_Scanner'] = new BuyOakItem(OakItems.OakItem.Treasure_Scanner, 10000, Currency.questPoint);
class KeyItem {
    constructor(name, description, unlockReq, isUnlocked = false, unlockReward = () => { }, displayName) {
        this._name = ko.observable(name);
        this._description = ko.observable(description);
        this._displayName = displayName;
        this._isUnlocked = ko.observable(isUnlocked !== null && isUnlocked !== void 0 ? isUnlocked : false);
        this.unlockReward = unlockReward;
        if (this.isUnlocked || unlockReq == undefined) {
            this.unlockReq = null;
            return;
        }
        // This computed is disposed by unlock()
        this.unlockReq = ko.computed(unlockReq);
        this.unlocker = this.unlockReq.subscribe(() => {
            if (this.unlockReq()) {
                App.game.keyItems.gainKeyItem(this.name);
            }
        });
    }
    unlock() {
        this.isUnlocked = true;
        if (this.unlocker) {
            this.unlocker.dispose();
        }
    }
    get displayName() {
        var _a;
        return (_a = this._displayName) !== null && _a !== void 0 ? _a : GameConstants.humanifyString(KeyItems.KeyItem[this.name]);
    }
    get name() {
        return this._name();
    }
    get description() {
        return this._description();
    }
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(bool) {
        this._isUnlocked(bool);
    }
}
class KeyItemController {
    static showGainModal(item) {
        this.latestGainedItem = item;
        $('.modal').modal('hide');
        $('#keyItemModal').modal({
            backdrop: 'static',
            keyboard: false,
        });
    }
    static hover(item) {
        this.inspectedItem = item;
    }
    static hoverRelease() {
        this.selectedItem = this.inspectedItem;
    }
    static get inspectedItem() {
        return this._inspectedItem();
    }
    static set inspectedItem(item) {
        this._inspectedItem(item);
    }
    static get selectedItem() {
        return this._selectedItem();
    }
    static set selectedItem(item) {
        this._selectedItem(item);
    }
    static get latestGainedItem() {
        return this._latestGainedItem();
    }
    static set latestGainedItem(item) {
        this._latestGainedItem(item);
    }
}
KeyItemController._inspectedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
KeyItemController._selectedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
KeyItemController._latestGainedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
/**
 * An upgrade that requires experience to level up.
 */
class ExpUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, expList, costList, bonusList, increasing) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
        this.defaults = {
            level: 0,
            exp: 0,
        };
        this.expList = expList;
        this._exp = ko.observable(0);
    }
    gainExp(exp) {
        this.exp = Math.min(this.expList[this.level], this.exp + exp);
    }
    canBuy() {
        return super.canBuy() && this.hasEnoughExp();
    }
    hasEnoughExp() {
        return this.exp >= this.expList[this.level];
    }
    toJSON() {
        const json = super.toJSON();
        json['exp'] = this.exp;
        return json;
    }
    fromJSON(json) {
        var _a;
        super.fromJSON(json);
        this.exp = (_a = json['exp']) !== null && _a !== void 0 ? _a : this.defaults.exp;
    }
    // Knockout getters/setters
    get normalizedExp() {
        if (this.level === 0) {
            return this.exp;
        }
        return this.exp - this.expList[this.level - 1];
    }
    get expPercentage() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return this.normalizedExp / nextLevelExp * 100;
    }
    get progressString() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return `${Math.round(this.normalizedExp)}/${nextLevelExp}`;
    }
    // Private as external sources should use gainExp and normalizedExp
    get exp() {
        return this._exp();
    }
    set exp(exp) {
        this._exp(exp);
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../upgrades/ExpUpgrade.ts" />
class OakItem extends ExpUpgrade {
    constructor(name, displayName, description, increasing, bonusList, inactiveBonus, unlockReq, expGain, expList = [500, 1000, 2500, 5000, 10000], maxLevel = 5, costList = AmountFactory.createArray([50000, 100000, 250000, 500000, 1000000], GameConstants.Currency.money), bonusSymbol = '×') {
        super(name, displayName, maxLevel, expList, costList, bonusList, increasing);
        this.description = description;
        this.inactiveBonus = inactiveBonus;
        this.unlockReq = unlockReq;
        this.expGain = expGain;
        this.bonusSymbol = bonusSymbol;
        this.defaults = {
            level: 0,
            exp: 0,
            isActive: false,
        };
        this.hint = ko.pureComputed(() => {
            return `Capture ${this.unlockReq - App.game.party.caughtPokemon.length} more unique Pokémon`;
        });
        this.tooltip = ko.pureComputed(() => {
            return `<u>${this.displayName}</u><br/><p>${this.description}</p>Level: <strong>${this.level}/${this.maxLevel}</strong><br/>Bonus: <strong>${this.bonusText}</strong>`;
        });
        this._isActive = ko.observable(false);
    }
    use(exp = this.expGain, scale = 1) {
        if (!this.isActive) {
            return;
        }
        if (!this.isMaxLevel()) {
            this.gainExp(exp * scale);
        }
        GameHelper.incrementObservable(App.game.statistics.oakItemUses[this.name]);
    }
    isUnlocked() {
        return App.game.party.caughtPokemon.length >= this.unlockReq;
    }
    getHint() {
        return `Capture ${this.unlockReq - App.game.party.caughtPokemon.length} more unique Pokémon`;
    }
    calculateBonus(level = this.level) {
        if (!this.isActive) {
            return this.inactiveBonus;
        }
        return super.calculateBonus(level);
    }
    calculateBonusIfActive(level = this.level) {
        return super.calculateBonus(level);
    }
    toJSON() {
        const json = super.toJSON();
        json['isActive'] = this.isActive;
        return json;
    }
    fromJSON(json) {
        var _a;
        super.fromJSON(json);
        this.isActive = (_a = json['isActive']) !== null && _a !== void 0 ? _a : this.defaults.isActive;
    }
    // Knockout getters/setters
    get progressString() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return `${Math.floor(this.normalizedExp / this.expGain)} / ${Math.ceil(nextLevelExp / this.expGain)}`;
    }
    get isActive() {
        return this._isActive();
    }
    set isActive(bool) {
        this._isActive(bool);
    }
    get bonusText() {
        return `${this.calculateBonusIfActive()}${this.bonusSymbol}`;
    }
}
///<reference path="./OakItem.ts"/>
class BoughtOakItem extends OakItem {
    constructor(name, displayName, description, shopName, increasing, bonusList, inactiveBonus = 1, expGain = 1, expList = [500, 1000, 2500, 5000, 10000], maxLevel = 5, costList = AmountFactory.createArray([50000, 100000, 250000, 500000, 1000000], GameConstants.Currency.money), bonusSymbol = '×') {
        super(name, displayName, description, increasing, bonusList, inactiveBonus, -1, expGain, expList, maxLevel, costList, bonusSymbol);
        this.shopName = shopName;
        this.hint = ko.pureComputed(() => {
            return `Purchase from the ${this.shopName}`;
        });
        this._purchased = ko.observable(false);
    }
    isUnlocked() {
        return this.purchased;
    }
    toJSON() {
        const json = super.toJSON();
        json['purchased'] = this.purchased;
        return json;
    }
    fromJSON(json) {
        var _a;
        super.fromJSON(json);
        this.purchased = (_a = json['purchased']) !== null && _a !== void 0 ? _a : false;
    }
    get purchased() {
        return this._purchased();
    }
    set purchased(bool) {
        this._purchased(bool);
    }
}
///<reference path="OakItems.ts"/>
class OakItemController {
    static click(item) {
        this.selectedItem = item;
        if (App.game.oakItems.isActive(item)) {
            App.game.oakItems.deactivate(item);
            return;
        }
        if (App.game.challenges.list.disableOakItems.active()) {
            return;
        }
        App.game.oakItems.activate(item);
    }
    static hover(item) {
        this.inspectedItem = item;
    }
    static hoverRelease() {
        this.inspectedItem = this.selectedItem;
    }
    static get inspectedItem() {
        return this._inspectedItem();
    }
    static set inspectedItem(item) {
        this._inspectedItem(item);
    }
    static get selectedItem() {
        return this._selectedItem();
    }
    static set selectedItem(item) {
        this._selectedItem(item);
    }
}
OakItemController._inspectedItem = ko.observable(OakItems.OakItem.Magic_Ball);
OakItemController._selectedItem = ko.observable(OakItems.OakItem.Magic_Ball);
/// <reference path="../../declarations/GameHelper.d.ts" />
class OakItemLoadouts {
    constructor() {
        this.saveKey = 'oakItemLoadouts';
        this.defaults = {};
        this.loadouts = Array(OakItemLoadouts.MAX_SLOTS).fill(0).map(() => ko.observableArray());
        this.selectedLoadout = ko.observable(0).extend({ numeric: 0 });
    }
    activateLoadout(index) {
        if (App.game.challenges.list.disableOakItems.active()) {
            return;
        }
        App.game.oakItems.deactivateAll();
        this.loadouts[index]().forEach((item) => {
            App.game.oakItems.activate(item);
        });
    }
    toggleItem(item) {
        if (App.game.challenges.list.disableOakItems.active()) {
            return;
        }
        const loadout = this.loadouts[this.selectedLoadout()];
        if (loadout().includes(item)) {
            const index = loadout().indexOf(item);
            if (index !== -1) {
                loadout.splice(index, 1);
            }
        }
        else if (loadout().length < App.game.oakItems.maxActiveCount() && App.game.oakItems.isUnlocked(item)) {
            loadout.push(item);
        }
    }
    hasItem(item) {
        return ko.pureComputed(() => {
            return this.loadouts[this.selectedLoadout()]().includes(item);
        });
    }
    fromJSON(json) {
        json === null || json === void 0 ? void 0 : json.forEach((loadout, index) => {
            loadout.forEach(item => { var _a; return (_a = this.loadouts[index]) === null || _a === void 0 ? void 0 : _a.push(item); });
        });
    }
    toJSON() {
        return ko.toJS(App.game.oakItemLoadouts.loadouts);
    }
}
OakItemLoadouts.MAX_SLOTS = 3;
class PokemonCategories {
    constructor() {
        this.saveKey = 'categories';
        this.defaults = {};
    }
    static initialize() {
        this.addCategory('None', '#333'); // dark grey
        this.addCategory('Favorite', '#e74c3c'); // red
    }
    static reset() {
        App.game.party.caughtPokemon.forEach(p => {
            if (p.category) {
                p.category = 0;
            }
        });
        let categoryIndex = this.categories().length;
        while (categoryIndex-- > 0) {
            this.removeCategory(categoryIndex, true);
        }
        this.initialize();
    }
    static addCategory(name, color) {
        this.categories.push({ name: ko.observable(name), color: ko.observable(color) });
        // Subscribe to color change event
        const root = document.documentElement;
        const index = this.categories().length - 1;
        this.categories()[index].subscriber = this.categories()[index].color.subscribe(value => {
            root.style.setProperty(`--pokemon-category-${index + 1}`, value);
        });
        // Update the color now
        this.categories()[index].color.valueHasMutated();
    }
    static removeCategory(index, force = false) {
        var _a;
        // Cannot remove None category
        if ((!force && !index) || !this.categories()[index]) {
            return;
        }
        App.game.party.caughtPokemon.forEach(p => {
            if (p.category == index) {
                p.category = 0;
            }
            if (p.category > index) {
                p.category--;
            }
        });
        // Remove subscriber
        (_a = this.categories()[index].subscriber) === null || _a === void 0 ? void 0 : _a.dispose();
        // Remove category
        PokemonCategories.categories.splice(index, 1);
    }
    toJSON() {
        const categories = [];
        PokemonCategories.categories().forEach((c) => {
            categories.push({
                name: encodeURI(c.name()),
                color: c.color(),
            });
        });
        return {
            categories,
        };
    }
    fromJSON(json) {
        var _a;
        if (!json) {
            return;
        }
        (_a = json.categories) === null || _a === void 0 ? void 0 : _a.forEach((category, index) => {
            const cat = PokemonCategories.categories()[index];
            if (cat) {
                cat.name(decodeURI(category.name));
                cat.color(category.color);
            }
            else {
                PokemonCategories.addCategory(decodeURI(category.name), category.color);
            }
        });
    }
}
PokemonCategories.categories = ko.observableArray([]);
PokemonCategories.initialize();
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
/// <reference path="CaughtStatus.ts" />
class Party {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Pokemon Party';
        this.saveKey = 'party';
        this.defaults = {
            caughtPokemon: [],
        };
        this.pokemonAttackObservable = ko.pureComputed(() => {
            return App.game.party.calculatePokemonAttack();
        }).extend({ rateLimit: 1000 });
        this._caughtPokemon = ko.observableArray([]);
        this.hasMaxLevelPokemon = ko.pureComputed(() => {
            for (let i = 0; i < this.caughtPokemon.length; i++) {
                if (this.caughtPokemon[i].level === 100) {
                    return true;
                }
            }
            return false;
        }).extend({ rateLimit: 1000 });
    }
    gainPokemonById(id, shiny = false, suppressNotification = false) {
        this.gainPokemon(PokemonFactory.generatePartyPokemon(id, shiny), suppressNotification);
    }
    gainPokemon(pokemon, suppressNotification = false) {
        GameHelper.incrementObservable(App.game.statistics.pokemonCaptured[pokemon.id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonCaptured);
        if (pokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonCaptured[pokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonCaptured);
            // Add all shiny catches to the log book
            App.game.logbook.newLog(LogBookTypes.CAUGHT, `You have captured a shiny ${pokemon.name}!`);
            // Already caught (shiny)
            if (this.alreadyCaughtPokemon(pokemon.id, true)) {
                return;
            }
            // Notify if not already caught
            Notifier.notify({
                message: `✨ You have captured a shiny ${pokemon.name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.new_catch,
            });
            // Already caught (non shiny) we need to update the party pokemon directly
            if (this.alreadyCaughtPokemon(pokemon.id, false)) {
                this.getPokemon(pokemon.id).shiny = true;
                return;
            }
        }
        // Already caught (non shiny)
        if (this.alreadyCaughtPokemon(pokemon.id, false)) {
            return;
        }
        if (!suppressNotification) {
            Notifier.notify({
                message: `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.new_catch,
            });
        }
        App.game.logbook.newLog(LogBookTypes.CAUGHT, `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`);
        this._caughtPokemon.push(pokemon);
        // Trigger sorting update of PokemonList UI
        PartyController.sortList();
    }
    gainExp(exp = 0, level = 1, trainer = false) {
        const multBonus = this.multiplier.getBonus('exp', true);
        const trainerBonus = trainer ? 1.5 : 1;
        const expTotal = Math.floor(exp * level * trainerBonus * multBonus / 9);
        const maxLevel = (App.game.badgeCase.badgeCount() + 2) * 10;
        for (const pokemon of this.caughtPokemon) {
            if (pokemon.level < maxLevel) {
                pokemon.gainExp(expTotal);
            }
        }
    }
    /**
     * Calculate the attack of all your Pokémon
     * @param type1
     * @param type2 types of the enemy we're calculating damage against.
     * @returns {number} damage to be done.
     */
    calculatePokemonAttack(type1 = PokemonType.None, type2 = PokemonType.None, ignoreRegionMultiplier = false, region = player.region, includeBreeding = false, useBaseAttack = false, includeWeather = true) {
        let attack = 0;
        for (const pokemon of this.caughtPokemon) {
            attack += this.calculateOnePokemonAttack(pokemon, type1, type2, region, ignoreRegionMultiplier, includeBreeding, useBaseAttack, includeWeather);
        }
        const bonus = this.multiplier.getBonus('pokemonAttack');
        return Math.round(attack * bonus);
    }
    calculateOnePokemonAttack(pokemon, type1 = PokemonType.None, type2 = PokemonType.None, region = player.region, ignoreRegionMultiplier = false, includeBreeding = false, useBaseAttack = false, includeWeather = true) {
        var _a;
        let multiplier = 1, attack = 0;
        const pAttack = useBaseAttack ? pokemon.baseAttack : pokemon.attack;
        const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
        if (!ignoreRegionMultiplier && nativeRegion != region && nativeRegion != GameConstants.Region.none) {
            // Pokemon only retain a % of their total damage in other regions based on highest region.
            multiplier = this.getRegionAttackMultiplier();
        }
        // Check if the Pokemon is currently breeding (no attack)
        if (includeBreeding || !pokemon.breeding) {
            if (type1 == PokemonType.None) {
                attack = pAttack * multiplier;
            }
            else {
                const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
                attack = pAttack * TypeHelper.getAttackModifier(dataPokemon.type1, dataPokemon.type2, type1, type2) * multiplier;
            }
        }
        // Should we take weather boost into account
        if (includeWeather) {
            const weather = Weather.weatherConditions[Weather.currentWeather()];
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            (_a = weather.multipliers) === null || _a === void 0 ? void 0 : _a.forEach(value => {
                if (value.type == dataPokemon.type1) {
                    attack *= value.multiplier;
                }
                if (value.type == dataPokemon.type2) {
                    attack *= value.multiplier;
                }
            });
        }
        return attack;
    }
    getRegionAttackMultiplier(highestRegion = player.highestRegion()) {
        // between 0.2 -> 1 based on highest region
        return Math.min(1, Math.max(0.2, 0.1 + (highestRegion / 10)));
    }
    getPokemon(id) {
        for (let i = 0; i < this.caughtPokemon.length; i++) {
            if (this.caughtPokemon[i].id === id) {
                return this.caughtPokemon[i];
            }
        }
    }
    alreadyCaughtPokemonByName(name, shiny = false) {
        return this.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(name).id, shiny);
    }
    alreadyCaughtPokemon(id, shiny = false) {
        const pokemon = this.caughtPokemon.find(p => p.id == id);
        if (pokemon) {
            return (!shiny || pokemon.shiny);
        }
        return false;
    }
    calculateClickAttack(useItem = false) {
        // Base power
        // Shiny pokemon help with a 50% boost
        const clickAttack = Math.pow(this.caughtPokemon.length + (this.caughtPokemon.filter(p => p.shiny).length / 2) + 1, 1.4);
        const bonus = this.multiplier.getBonus('clickAttack', useItem);
        return Math.floor(clickAttack * bonus);
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const caughtPokemonSave = json['caughtPokemon'];
        for (let i = 0; i < caughtPokemonSave.length; i++) {
            const partyPokemon = PokemonFactory.generatePartyPokemon(caughtPokemonSave[i].id);
            partyPokemon.fromJSON(caughtPokemonSave[i]);
            this._caughtPokemon.push(partyPokemon);
        }
    }
    initialize() {
    }
    toJSON() {
        return {
            caughtPokemon: this._caughtPokemon().map(x => x.toJSON()),
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    get caughtPokemon() {
        return this._caughtPokemon();
    }
    set caughtPokemon(pokemon) {
        this._caughtPokemon(pokemon);
    }
}
class PartyController {
    static getCaughtStatusByName(name) {
        return this.getCaughtStatus(PokemonHelper.getPokemonByName(name).id);
    }
    static getCaughtStatus(id) {
        if (App.game.party.alreadyCaughtPokemon(id, true)) {
            return CaughtStatus.CaughtShiny;
        }
        if (App.game.party.alreadyCaughtPokemon(id, false)) {
            return CaughtStatus.Caught;
        }
        return CaughtStatus.NotCaught;
    }
    static getEvolutionsCaughtStatus(id, evoType) {
        let status = CaughtStatus.CaughtShiny;
        const pokemon = App.game.party.caughtPokemon.find(p => p.id == id);
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && evolution.isSatisfied()) {
                    const pStatus = this.getCaughtStatusByName(evolution.getEvolvedPokemon());
                    if (pStatus < status) {
                        status = pStatus;
                    }
                }
            }
        }
        return status;
    }
    static getMaxLevelPokemonList() {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            return !partyPokemon.breeding && partyPokemon.level >= 100;
        });
    }
    static sortList() {
        App.game.party._caughtPokemon.sort(PartyController.compareBy(Settings.getSetting('partySort').observableValue(), Settings.getSetting('partySortDirection').observableValue()));
    }
    static compareBy(option, direction) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            const config = SortOptionConfigs[option];
            const aValue = config.getValue(a);
            const bValue = config.getValue(b);
            if (config.invert) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by id
                return a.id - b.id;
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
}
PartyController.getSortedList = ko.pureComputed(() => {
    return App.game.party._caughtPokemon.sort(PartyController.compareBy(Settings.getSetting('partySort').observableValue(), Settings.getSetting('partySortDirection').observableValue()));
}).extend({ rateLimit: 500 });
class PartyPokemon {
    constructor(id, name, evolutions, baseAttack, attackBonusPercent = 0, attackBonusAmount = 0, proteinsUsed, exp = 0, breeding = false, shiny = false, category = 0) {
        this.id = id;
        this.name = name;
        this.evolutions = evolutions;
        this.baseAttack = baseAttack;
        this.attackBonusPercent = attackBonusPercent;
        this.attackBonusAmount = attackBonusAmount;
        this.exp = exp;
        this.defaults = {
            evolved: false,
            attackBonusPercent: 0,
            attackBonusAmount: 0,
            proteinsUsed: 0,
            exp: 0,
            breeding: false,
            shiny: false,
            category: 0,
        };
        this.proteinUsesRemaining = () => {
            // Allow 5 for every region visited (including Kanto)
            return (player.highestRegion() + 1) * 5 - this.proteinsUsed();
        };
        this.proteinsUsed = ko.observable(proteinsUsed);
        this._breeding = ko.observable(breeding);
        this._shiny = ko.observable(shiny);
        this._level = ko.observable(1);
        this._attack = ko.observable(this.calculateAttack());
        this._category = ko.observable(category);
    }
    calculateAttack() {
        const attackBonusMultiplier = 1 + this.attackBonusPercent / 100;
        const levelMultiplier = this.level / 100;
        return Math.max(1, Math.floor((this.baseAttack * attackBonusMultiplier + this.attackBonusAmount) * levelMultiplier));
    }
    calculateLevelFromExp() {
        const levelType = PokemonHelper.getPokemonByName(this.name).levelType;
        for (let i = this.level - 1; i < levelRequirements[levelType].length; i++) {
            if (levelRequirements[levelType][i] > this.exp) {
                return i;
            }
        }
        return this.level;
    }
    gainExp(exp) {
        this.exp += exp;
        const oldLevel = this.level;
        const newLevel = this.calculateLevelFromExp();
        if (oldLevel !== newLevel) {
            this.level = newLevel;
            this.attack = this.calculateAttack();
            this.checkForLevelEvolution();
        }
    }
    checkForLevelEvolution() {
        if (this.breeding || this.evolutions == null || this.evolutions.length == 0) {
            return;
        }
        for (const evolution of this.evolutions) {
            if (evolution instanceof LevelEvolution && evolution.isSatisfied()) {
                evolution.evolve();
            }
        }
    }
    useStone(stoneType) {
        const possibleEvolutions = [];
        for (const evolution of this.evolutions) {
            if (evolution instanceof StoneEvolution && evolution.stone == stoneType && evolution.isSatisfied()) {
                possibleEvolutions.push(evolution);
            }
        }
        if (possibleEvolutions.length !== 0) {
            return GameConstants.randomElement(possibleEvolutions).evolve();
        }
        return false;
    }
    useProtein(amount) {
        if (App.game.challenges.list.disableProteins.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Proteins are disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        const usesRemaining = this.proteinUsesRemaining();
        // If no more proteins can be used on this Pokemon
        if (!usesRemaining) {
            Notifier.notify({
                message: 'This Pokémon cannot increase their power any higher!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        // The lowest number of amount they want to use, total in inventory, uses remaining for this Pokemon
        amount = Math.min(amount, player.itemList.Protein(), usesRemaining);
        // Apply the proteins
        if (ItemHandler.useItem('Protein', amount)) {
            GameHelper.incrementObservable(this.proteinsUsed, amount);
        }
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (json == null) {
            return;
        }
        if (json['id'] == null) {
            return;
        }
        this.attackBonusPercent = (_a = json['attackBonusPercent']) !== null && _a !== void 0 ? _a : this.defaults.attackBonusPercent;
        this.attackBonusAmount = (_b = json['attackBonusAmount']) !== null && _b !== void 0 ? _b : this.defaults.attackBonusAmount;
        this.proteinsUsed = ko.observable((_c = json['proteinsUsed']) !== null && _c !== void 0 ? _c : this.defaults.proteinsUsed);
        this.exp = (_d = json['exp']) !== null && _d !== void 0 ? _d : this.defaults.exp;
        this.breeding = (_e = json['breeding']) !== null && _e !== void 0 ? _e : this.defaults.breeding;
        this.shiny = (_f = json['shiny']) !== null && _f !== void 0 ? _f : this.defaults.shiny;
        this.category = (_g = json['category']) !== null && _g !== void 0 ? _g : this.defaults.category;
        this.level = this.calculateLevelFromExp();
        this.attack = this.calculateAttack();
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution) {
                    evolution.triggered = json['levelEvolutionTriggered'];
                }
            }
        }
    }
    toJSON() {
        let levelEvolutionTriggered = false;
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution && evolution.triggered) {
                    levelEvolutionTriggered = true;
                }
            }
        }
        return {
            id: this.id,
            attackBonusPercent: this.attackBonusPercent,
            attackBonusAmount: this.attackBonusAmount,
            proteinsUsed: this.proteinsUsed(),
            exp: this.exp,
            breeding: this.breeding,
            shiny: this.shiny,
            levelEvolutionTriggered: levelEvolutionTriggered,
            category: this.category,
        };
    }
    // Knockout getters/setter
    get level() {
        return this._level();
    }
    set level(level) {
        this._level(level);
    }
    get attack() {
        return this._attack();
    }
    set attack(attack) {
        this._attack(attack);
    }
    get breeding() {
        return this._breeding();
    }
    set breeding(bool) {
        this._breeding(bool);
    }
    get shiny() {
        return this._shiny();
    }
    set shiny(bool) {
        this._shiny(bool);
    }
    get category() {
        return this._category();
    }
    set category(index) {
        this._category(index);
    }
}
class Pokeball {
    constructor(type, catchBonus, catchTime, description, unlockRequirement = new MultiRequirement(), quantity = 0) {
        this.type = type;
        this.catchBonus = catchBonus;
        this.catchTime = catchTime;
        this.description = description;
        this.unlockRequirement = unlockRequirement;
        this.quantity = ko.observable(quantity);
    }
    unlocked() {
        return this.unlockRequirement.isCompleted();
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="Pokeball.ts" />
class Pokeballs {
    constructor() {
        this.name = 'Pokeballs';
        this.saveKey = 'pokeballs';
        this.defaults = {
            alreadyCaughtSelection: GameConstants.Pokeball.None,
            alreadyCaughtShinySelection: GameConstants.Pokeball.Pokeball,
            notCaughtSelection: GameConstants.Pokeball.Pokeball,
            notCaughtShinySelection: GameConstants.Pokeball.Pokeball,
        };
        this.pokeballs = [
            new Pokeball(GameConstants.Pokeball.Pokeball, () => 0, 1250 / GameConstants.POKEBALL_SPEED, 'A standard Pokéball', undefined, 25),
            new Pokeball(GameConstants.Pokeball.Greatball, () => 5, 1000 / GameConstants.POKEBALL_SPEED, '+5% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Ultraball, () => 10, 750 / GameConstants.POKEBALL_SPEED, '+10% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Masterball, () => 100, 500 / GameConstants.POKEBALL_SPEED, '100% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Fastball, () => 0, 500 / GameConstants.POKEBALL_SPEED, 'Reduced catch time', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Quickball, () => {
                var _a, _b;
                if (App.game.gameState == GameConstants.GameState.fighting && player.route()) {
                    const kills = ((_b = (_a = App.game.statistics.routeKills[GameConstants.Region[player.region]]) === null || _a === void 0 ? void 0 : _a[player.route()]) === null || _b === void 0 ? void 0 : _b.call(_a)) || 0;
                    // between 15 (0 kills) → 0 (4012 kills)
                    return Math.min(15, Math.max(0, Math.pow(16, 1 - Math.pow(Math.max(0, kills - 10), 0.6) / 145) - 1));
                }
                return 0;
            }, 1000 / GameConstants.POKEBALL_SPEED, 'Increased catch rate on routes with less Pokémon defeated', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Timerball, () => {
                var _a, _b;
                if (App.game.gameState == GameConstants.GameState.fighting && player.route()) {
                    const kills = ((_b = (_a = App.game.statistics.routeKills[GameConstants.Region[player.region]]) === null || _a === void 0 ? void 0 : _a[player.route()]) === null || _b === void 0 ? void 0 : _b.call(_a)) || 0;
                    // between 0 (0 kills) → 15 (9920 kills)
                    return Math.min(15, Math.max(0, Math.pow(16, Math.pow(kills, 0.6) / 250) - 1));
                }
                return 0;
            }, 1000 / GameConstants.POKEBALL_SPEED, 'Increased catch rate on routes with more Pokémon defeated', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Duskball, () => {
                const now = new Date();
                // If player in a dungeon or it's night time
                if (App.game.gameState == GameConstants.GameState.dungeon || now.getHours() >= 18 || now.getHours() < 6) {
                    return 15;
                }
                return 0;
            }, 1000 / GameConstants.POKEBALL_SPEED, 'Increased catch rate at night time or in dungeons', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            // TODO: this needs some sort of bonus, possibly extra dungeon tokens
            new Pokeball(GameConstants.Pokeball.Luxuryball, () => 0, 1250 / GameConstants.POKEBALL_SPEED, 'A Luxury Pokéball', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
        ];
        this._alreadyCaughtSelection = ko.observable(this.defaults.alreadyCaughtSelection);
        this._alreadyCaughtShinySelection = ko.observable(this.defaults.alreadyCaughtShinySelection);
        this._notCaughtSelection = ko.observable(this.defaults.notCaughtSelection);
        this._notCaughtShinySelection = ko.observable(this.defaults.notCaughtShinySelection);
        this.selectedTitle = ko.observable('');
        this.selectedSelection = ko.observable(this._alreadyCaughtSelection);
    }
    initialize() {
        [this._alreadyCaughtSelection, this._alreadyCaughtShinySelection, this._notCaughtSelection, this._notCaughtShinySelection].forEach((selection) => {
            selection.subscribe((value) => {
                var _a;
                // switch to Ultraball if Masterball is selected
                if (value == GameConstants.Pokeball.Masterball && App.game.challenges.list.disableMasterballs.active()) {
                    selection(GameConstants.Pokeball.Ultraball);
                    Notifier.notify({
                        title: 'Challenge Mode',
                        message: 'Masterballs are disabled!',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
                else if (!((_a = this.pokeballs[value]) === null || _a === void 0 ? void 0 : _a.unlocked())) {
                    selection(GameConstants.Pokeball.None);
                }
            });
        });
    }
    /**
     * Checks the players preferences to see what pokéball needs to be used on the next throw.
     * Checks from the players pref to the most basic ball to see if the player has any.
     * @param id the pokemon we are trying to catch.
     * @param isShiny if the Pokémon is shiny.
     * @returns {GameConstants.Pokeball} pokéball to use.
     */
    calculatePokeballToUse(id, isShiny) {
        var _a;
        const alreadyCaught = App.game.party.alreadyCaughtPokemon(id);
        const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(id, true);
        let pref;
        // just check against alreadyCaughtShiny as this returns false when you don't have the pokemon yet.
        if (isShiny) {
            if (!alreadyCaughtShiny) {
                // if the pokemon is also not caught, use the higher selection since a notCaughtShiny is also a notCaught pokemon
                pref = !alreadyCaught ? Math.max(this.notCaughtSelection, this.notCaughtShinySelection) : this.notCaughtShinySelection;
            }
            else {
                // if the shiny is already caught, use the higher selection since the pokemon is also a caught pokemon
                pref = Math.max(this.alreadyCaughtSelection, this.alreadyCaughtShinySelection);
            }
        }
        else {
            if (!alreadyCaught) {
                pref = this.notCaughtSelection;
            }
            else {
                pref = this.alreadyCaughtSelection;
            }
        }
        let use = GameConstants.Pokeball.None;
        if ((_a = this.pokeballs[pref]) === null || _a === void 0 ? void 0 : _a.quantity()) {
            return pref;
        }
        else if (pref <= GameConstants.Pokeball.Masterball) {
            // Check which Pokeballs we have in stock that are of equal or lesser than selection (upto Masterball)
            for (let i = pref; i >= 0; i--) {
                if (this.pokeballs[i].quantity() > 0) {
                    use = i;
                    break;
                }
            }
            return use;
        }
        else {
            // Use a normal Pokeball or None if we don't have Pokeballs in stock
            return this.pokeballs[GameConstants.Pokeball.Pokeball].quantity() ? GameConstants.Pokeball.Pokeball : GameConstants.Pokeball.None;
        }
    }
    calculateCatchTime(ball) {
        return this.pokeballs[ball].catchTime;
    }
    gainPokeballs(ball, amount) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, amount);
    }
    usePokeball(ball) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, -1);
        GameHelper.incrementObservable(App.game.statistics.pokeballsUsed[ball]);
    }
    getCatchBonus(ball) {
        return this.pokeballs[ball].catchBonus();
    }
    getBallQuantity(ball) {
        const pokeball = this.pokeballs[ball];
        return pokeball ? pokeball.quantity() : 0;
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        var _a, _b, _c, _d;
        if (json == null) {
            return;
        }
        if (json['pokeballs'] != null) {
            json['pokeballs'].map((amt, type) => this.pokeballs[type].quantity(amt));
        }
        this.notCaughtSelection = (_a = json['notCaughtSelection']) !== null && _a !== void 0 ? _a : this.defaults.notCaughtSelection;
        this.notCaughtShinySelection = (_b = json['notCaughtShinySelection']) !== null && _b !== void 0 ? _b : this.defaults.notCaughtShinySelection;
        this.alreadyCaughtSelection = (_c = json['alreadyCaughtSelection']) !== null && _c !== void 0 ? _c : this.defaults.alreadyCaughtSelection;
        this.alreadyCaughtShinySelection = (_d = json['alreadyCaughtShinySelection']) !== null && _d !== void 0 ? _d : this.defaults.alreadyCaughtShinySelection;
    }
    toJSON() {
        return {
            pokeballs: this.pokeballs.map((p) => p.quantity()),
            notCaughtSelection: this.notCaughtSelection,
            notCaughtShinySelection: this.notCaughtShinySelection,
            alreadyCaughtSelection: this.alreadyCaughtSelection,
            alreadyCaughtShinySelection: this.alreadyCaughtShinySelection,
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    // Knockout getters/setters
    get notCaughtSelection() {
        return this._notCaughtSelection();
    }
    set notCaughtSelection(ball) {
        this._notCaughtSelection(ball);
    }
    get notCaughtShinySelection() {
        return this._notCaughtShinySelection();
    }
    set notCaughtShinySelection(ball) {
        this._notCaughtShinySelection(ball);
    }
    get alreadyCaughtSelection() {
        return this._alreadyCaughtSelection();
    }
    set alreadyCaughtSelection(ball) {
        this._alreadyCaughtSelection(ball);
    }
    get alreadyCaughtShinySelection() {
        return this._alreadyCaughtShinySelection();
    }
    set alreadyCaughtShinySelection(ball) {
        this._alreadyCaughtShinySelection(ball);
    }
}
var TypeColor = GameConstants.TypeColor;
class PokedexHelper {
    static getBackgroundColors(name) {
        const pokemon = PokemonHelper.getPokemonByName(name);
        if (!this.pokemonSeen(pokemon.id)()) {
            return 'grey';
        }
        if (pokemon.type2 == PokemonType.None) {
            return TypeColor[pokemon.type1];
        }
        return `linear-gradient(90deg,${TypeColor[pokemon.type1]} 50%, ${TypeColor[pokemon.type2]} 50%)`;
    }
    /**
     * Returns true if you have seen the pokemon
     * @param {number} id
     * @returns {boolean}
     */
    static pokemonSeen(id) {
        return ko.pureComputed(() => {
            try {
                return App.game.statistics.pokemonEncountered[id]() > 0 || App.game.statistics.pokemonDefeated[id]() > 0 || App.game.statistics.pokemonCaptured[id]() > 0 || App.game.party.alreadyCaughtPokemon(id);
            }
            catch (error) {
                return false;
            }
        });
    }
    static populateFilters() {
        let options = $('#pokedex-filter-type1');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-type2');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-region');
        for (let i = 0; i <= GameConstants.MAX_AVAILABLE_REGION; i++) {
            options.append($('<option />').val(i).text(GameConstants.camelCaseToString(GameConstants.Region[i])));
        }
    }
    static updateList() {
        PokedexHelper.filteredList(PokedexHelper.getList());
    }
    static getList() {
        const filter = PokedexHelper.getFilters();
        const highestEncountered = App.game.statistics.pokemonEncountered.highestID;
        const highestDefeated = App.game.statistics.pokemonDefeated.highestID;
        const highestCaught = App.game.statistics.pokemonCaptured.highestID;
        const highestDex = Math.max(highestEncountered, highestDefeated, highestCaught);
        return pokemonList.filter((pokemon) => {
            // Checks based on caught/shiny status
            const alreadyCaught = App.game.party.alreadyCaughtPokemon(pokemon.id);
            const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(pokemon.id, true);
            // If the Pokemon shouldn't be unlocked yet
            const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
            if (nativeRegion > GameConstants.MAX_AVAILABLE_REGION || nativeRegion == GameConstants.Region.none) {
                return false;
            }
            // If not showing this region
            const region = filter['region'] ? parseInt(filter['region'], 10) : null;
            if (region != null && region != nativeRegion) {
                return false;
            }
            // Event Pokemon
            if (pokemon.id <= 0 && !alreadyCaught) {
                return false;
            }
            // If we haven't seen a pokemon this high yet
            if (pokemon.id > highestDex) {
                return false;
            }
            // Check if the name contains the string
            if (filter['name'] && !pokemon.name.toLowerCase().includes(filter['name'].toLowerCase())) {
                return false;
            }
            // Check if either of the types match
            const type1 = filter['type1'] ? parseInt(filter['type1'], 10) : null;
            const type2 = filter['type2'] ? parseInt(filter['type2'], 10) : null;
            if ([type1, type2].includes(PokemonType.None)) {
                const type = (type1 == PokemonType.None) ? type2 : type1;
                if (!PokedexHelper.isPureType(pokemon, type)) {
                    return false;
                }
            }
            else if ((type1 != null && !pokemon.type.includes(type1)) || (type2 != null && !pokemon.type.includes(type2))) {
                return false;
            }
            // Alternate forms that we haven't caught yet
            if (!alreadyCaught && pokemon.id != Math.floor(pokemon.id)) {
                return false;
            }
            // If not caught
            if (filter['caught'] && !alreadyCaught) {
                return false;
            }
            // If not caught shiny variant
            if (filter['shiny'] && !alreadyCaughtShiny) {
                return false;
            }
            // If not caught, or already caught shiny
            if (filter['not-shiny'] && (!alreadyCaught || alreadyCaughtShiny)) {
                return false;
            }
            // If already caught
            if (filter['uncaught'] && alreadyCaught) {
                return false;
            }
            // Only pokemon with a hold item
            if (filter['held-item'] && !BagHandler.displayName(pokemon.heldItem)) {
                return false;
            }
            return true;
        });
    }
    static getFilters() {
        const res = {};
        res['name'] = document.getElementById('nameFilter').value;
        const type1 = document.getElementById('pokedex-filter-type1');
        res['type1'] = type1.options[type1.selectedIndex].value;
        const type2 = document.getElementById('pokedex-filter-type2');
        res['type2'] = type2.options[type2.selectedIndex].value;
        const region = document.getElementById('pokedex-filter-region');
        res['region'] = region.options[region.selectedIndex].value;
        res['caught'] = document.getElementById('pokedex-filter-caught').checked;
        res['uncaught'] = document.getElementById('pokedex-filter-uncaught').checked;
        res['shiny'] = document.getElementById('pokedex-filter-shiny').checked;
        res['not-shiny'] = document.getElementById('pokedex-filter-not-shiny').checked;
        res['held-item'] = document.getElementById('pokedex-filter-held-item').checked;
        return res;
    }
    static getImage(id, name) {
        let src = 'assets/images/';
        if (App.game.party.alreadyCaughtPokemon(id, true) && this.toggleAllShiny()) {
            src += 'shiny';
        }
        src += `pokemon/${id}.png`;
        return src;
    }
    static getImageStatistics(id) {
        let src = 'assets/images/';
        if (App.game.party.alreadyCaughtPokemon(id, true) && this.toggleStatisticShiny()) {
            src += 'shiny';
        }
        src += `pokemon/${id}.png`;
        return src;
    }
    static isPureType(pokemon, type) {
        return (pokemon.type.length === 1 && (type == null || pokemon.type[0] === type));
    }
}
PokedexHelper.toggleStatisticShiny = ko.observable(true);
PokedexHelper.toggleAllShiny = ko.observable(true);
PokedexHelper.filteredList = ko.observableArray([]);
$(document).ready(() => {
    $('#pokemonStatisticsModal').on('hidden.bs.modal', () => {
        PokedexHelper.toggleStatisticShiny(true);
    });
});
class PokedexPokemon {
    constructor(name, id, type1, type2, kills, catches, shiny) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.kills = kills;
        this.catches = catches;
        this.shiny = shiny;
    }
}
class DataPokemon {
    constructor(id, name, catchRate, evolutions, type1, type2, attack, levelType, exp, eggCycles, heldItem) {
        this.id = id;
        this.name = name;
        this.catchRate = catchRate;
        this.evolutions = evolutions;
        this.type1 = type1;
        this.type2 = type2;
        this.attack = attack;
        this.levelType = levelType;
        this.exp = exp;
        this.eggCycles = eggCycles;
        this.heldItem = heldItem;
        this.shiny = false;
    }
}
class RoamingPokemon {
    constructor(pokemonName, unlockRequirement) {
        this.pokemonName = pokemonName;
        this.unlockRequirement = unlockRequirement;
        this.pokemon = pokemonMap[pokemonName];
    }
    isRoaming() {
        return this.unlockRequirement ? this.unlockRequirement.isCompleted() : true;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
class RoamingPokemonList {
    constructor() { }
    static add(region, roamer) {
        if (!RoamingPokemonList.list[region]) {
            RoamingPokemonList.list[region] = [];
        }
        RoamingPokemonList.list[region].push(roamer);
    }
    static remove(region, pokemonName) {
        const index = RoamingPokemonList.list[region].findIndex(r => r.pokemon.name == pokemonName);
        if (index >= 0) {
            RoamingPokemonList.list[region].splice(index, 1);
        }
    }
    static getRegionalRoamers(region) {
        return RoamingPokemonList.list[region] ? RoamingPokemonList.list[region].filter(p => p.isRoaming()) : [];
    }
    static getIncreasedChanceRouteByRegion(region) {
        return this.increasedChanceRoute[region];
    }
    static generateIncreasedChanceRoutes(date = new Date()) {
        // Seed the random runmber generator
        SeededRand.seedWithDateHour(date, this.period);
        this.increasedChanceRoute.forEach((route, region) => {
            const routes = Routes.getRoutesByRegion(region);
            // Select a route
            const selectedRoute = SeededRand.fromArray(routes);
            route(selectedRoute);
        });
    }
}
RoamingPokemonList.list = {};
RoamingPokemonList.increasedChanceRoute = new Array(GameHelper.enumLength(GameConstants.Region)).fill(0).map((route, region) => ko.observable(null));
// How many hours between when the roaming Pokemon change routes for increased chances
RoamingPokemonList.period = 8;
// Kanto
RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon('Mew'));
// Johto
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon('Raikou', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon('Entei', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon('Suicune', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
// Hoenn
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon('Latios', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon('Latias', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
// TODO: these need another way to be obtained
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon('Jirachi', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
// Sinnoh
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon('Manaphy'));
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon('Mesprit', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Verity'))));
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon('Cresselia', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fullmoon Island'))));
// Unova
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon('Tornadus', new GymBadgeRequirement(BadgeEnums.Legend)));
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon('Thundurus', new GymBadgeRequirement(BadgeEnums.Legend)));
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon('Meloetta (aria)', new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)));
// Kalos
RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Zapdos', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Moltres', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Articuno', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, new RoamingPokemon('Hoopa', new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)));
//Galar
RoamingPokemonList.add(GameConstants.Region.galar, new RoamingPokemon('Galarian Articuno', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dyna Tree Hill'))));
//Isle of Armor
RoamingPokemonList.add(GameConstants.Region.armor, new RoamingPokemon('Zarude', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)));
RoamingPokemonList.add(GameConstants.Region.armor, new RoamingPokemon('Galarian Moltres', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dyna Tree Hill'))));
//Crown Tundra
RoamingPokemonList.add(GameConstants.Region.crown, new RoamingPokemon('Spectrier', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)));
RoamingPokemonList.add(GameConstants.Region.crown, new RoamingPokemon('Glastrier', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)));
RoamingPokemonList.add(GameConstants.Region.crown, new RoamingPokemon('Galarian Zapdos', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dyna Tree Hill'))));
/// <reference path="../../declarations/GameHelper.d.ts" />
class Quest {
    constructor(amount, pointsReward) {
        this.amount = amount;
        this.pointsReward = pointsReward;
        this.initial = ko.observable(null);
        this.claimed = ko.observable(false);
        this.notified = false;
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : 'Generic Quest Description. This should be overriden.';
    }
    static generateData() {
        return [1, 0];
    }
    static randomizeReward(pointsReward) {
        const randomPointBonus = 0.9 + SeededRand.next() * 0.2; // random between 0.9 and 1.1
        return Math.ceil(pointsReward * randomPointBonus);
    }
    get xpReward() {
        return 100 + (this.pointsReward / 10);
    }
    //#region Quest Status
    claim() {
        if (this.isCompleted() && !this.claimed()) {
            App.game.quests.addXP(this.xpReward);
            this.claimed(true);
            if (this.pointsReward) {
                App.game.wallet.gainQuestPoints(this.pointsReward);
                Notifier.notify({
                    message: `You have completed your quest and claimed ${this.pointsReward} quest points!`,
                    type: NotificationConstants.NotificationOption.success,
                });
                App.game.logbook.newLog(LogBookTypes.QUEST_COMPLETE, `Completed "${this.description}" for ${this.pointsReward} quest points.`);
            }
            else {
                Notifier.notify({
                    message: 'You have completed a quest!',
                    type: NotificationConstants.NotificationOption.success,
                });
                App.game.logbook.newLog(LogBookTypes.QUEST_COMPLETE, `Completed "${this.description}".`);
            }
            GameHelper.incrementObservable(App.game.statistics.questsCompleted);
            return true;
        }
        return false;
    }
    quit(shouldConfirm = false) {
        if (shouldConfirm) {
            Notifier.confirm({
                title: 'Quit quest',
                message: 'Are you sure?\n\nYou can start the quest again later but you will lose all progress!',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'quit',
            }).then(confirmed => {
                if (confirmed) {
                    this.initial(null);
                }
            });
        }
        else {
            this.initial(null);
        }
    }
    begin() {
        this.initial(this.focus());
    }
    set focus(value) {
        this._focus = value;
        this.createProgressObservables();
    }
    get focus() {
        return this._focus;
    }
    createProgressObservables() {
        this.progress = ko.pureComputed(() => {
            if (this.initial() !== null) {
                return Math.min(1, (this.focus() - this.initial()) / this.amount);
            }
            else {
                return 0;
            }
        });
        this.progressText = ko.pureComputed(() => {
            if (this.initial() !== null) {
                return `${Math.min((this.focus() - this.initial()), this.amount)} / ${this.amount}`;
            }
            else {
                return `0 / ${this.amount}`;
            }
        });
        this.inProgress = ko.pureComputed(() => {
            return this.initial() !== null && !this.claimed();
        });
        // This computed has a side effect - creating a notification - so we cannot safely make it a pureComputed
        // This will only be a problem if we make it subscribe to a function which lives longer than itself
        // Since it is only subscribing to observables on `this`, and the function is being kept on `this`, we shouldn't have a problem
        this.isCompleted = ko.computed(() => {
            const completed = this.progress() == 1 || this.claimed();
            if (!this.autoComplete && completed && !this.notified) {
                Notifier.notify({
                    message: `You can complete your quest for ${this.pointsReward} quest points!`,
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 5e3,
                    sound: NotificationConstants.NotificationSound.quest_ready_to_complete,
                    setting: NotificationConstants.NotificationSetting.quest_ready_to_complete,
                });
                this.notified = true;
            }
            return completed;
        });
    }
    complete() {
        this.initial(this.focus() - this.amount);
    }
    createAutoCompleter() {
        this.autoComplete = true;
        this.autoCompleter = this.isCompleted.subscribe(() => {
            if (this.isCompleted()) {
                this.claim();
                this.autoCompleter.dispose();
            }
        });
    }
    //#endregion
    toJSON() {
        return {
            index: this.index || 0,
            customDescription: this.customDescription,
            data: [this.amount, this.pointsReward],
            initial: this.initial(),
            claimed: this.claimed(),
            notified: this.notified,
        };
    }
    fromJSON(json) {
        if (!json) {
            this.index = 0;
            this.claimed(false);
            this.initial(null);
            this.notified = false;
        }
        this.index = json.hasOwnProperty('index') ? json['index'] : 0;
        this.claimed(json.hasOwnProperty('claimed') ? json['claimed'] : false);
        this.initial(json.hasOwnProperty('initial') ? json['initial'] : null);
        this.notified = json.hasOwnProperty('notified') ? json['notified'] : false;
    }
}
/// <reference path="../Quest.ts" />
class DefeatPokemonsQuest extends Quest {
    constructor(killsNeeded, reward, route, region) {
        super(killsNeeded, reward);
        this.route = route;
        this.region = region;
        this.focus = App.game.statistics.routeKills[this.region][this.route];
    }
    static generateData() {
        const amount = SeededRand.intBetween(100, 500);
        let attempts = 0;
        let region = GameConstants.Region.kanto;
        let route = 1;
        // Try to find unlocked route, end after 10 attempts
        do {
            region = SeededRand.intBetween(0, player.highestRegion());
            route = SeededRand.fromArray(Routes.getRoutesByRegion(region)).number;
        } while (!MapHelper.accessToRoute(route, region) && ++attempts < 10);
        const reward = this.calcReward(amount, route, region);
        return [amount, reward, route, region];
    }
    static calcReward(killsNeeded, route, region) {
        const attacksPerPokemon = Math.ceil(Math.min(4, PokemonFactory.routeHealth(route, region) / Math.max(1, App.game.party.calculatePokemonAttack())));
        const reward = Math.ceil(GameConstants.DEFEAT_POKEMONS_BASE_REWARD * attacksPerPokemon * killsNeeded);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Defeat ${this.amount.toLocaleString('en-US')} Pokémon on ${Routes.getName(this.route, this.region)}.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.route);
        json['data'].push(this.region);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CapturePokemonsQuest extends Quest {
    constructor(capturesNeeded, reward) {
        super(capturesNeeded, reward);
        this.focus = App.game.statistics.totalPokemonCaptured;
    }
    static generateData() {
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = amount * GameConstants.CAPTURE_POKEMONS_BASE_REWARD;
        return super.randomizeReward(reward);
    }
    get description() {
        return `Capture ${this.amount.toLocaleString('en-US')} Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainMoneyQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalMoney;
    }
    static generateData() {
        const amount = SeededRand.intBetween(20000, 60000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_MONEY_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} PokéDollars.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainTokensQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalDungeonTokens;
    }
    static generateData() {
        const amount = SeededRand.intBetween(1000, 8000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_TOKENS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} dungeon tokens.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainShardsQuest extends Quest {
    constructor(amount, reward, type) {
        super(amount, reward);
        this.type = type;
        this.focus = App.game.statistics.shardsGained[this.type];
    }
    static generateData() {
        const type = SeededRand.fromEnum(PokemonType);
        const amount = SeededRand.intBetween(200, 600);
        const reward = this.calcReward(type, amount);
        return [amount, reward, type];
    }
    static calcReward(type, amount) {
        const reward = amount * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * this.rewardWeight[type];
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} ${PokemonType[this.type]} shards.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.type);
        return json;
    }
}
GainShardsQuest.rewardWeight = {
    [PokemonType.None]: 0,
    [PokemonType.Normal]: 1,
    [PokemonType.Fire]: 2,
    [PokemonType.Water]: 1,
    [PokemonType.Electric]: 2,
    [PokemonType.Grass]: 2,
    [PokemonType.Ice]: 4,
    [PokemonType.Fighting]: 1,
    [PokemonType.Poison]: 1,
    [PokemonType.Ground]: 2,
    [PokemonType.Flying]: 1,
    [PokemonType.Psychic]: 4,
    [PokemonType.Bug]: 3,
    [PokemonType.Rock]: 2,
    [PokemonType.Ghost]: 4,
    [PokemonType.Dragon]: 5,
    [PokemonType.Dark]: 3,
    [PokemonType.Steel]: 3,
    [PokemonType.Fairy]: 5,
};
/// <reference path="../Quest.ts" />
class HatchEggsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalPokemonHatched;
    }
    static generateData() {
        const amount = SeededRand.intBetween(1, 30);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.HATCH_EGGS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Hatch ${this.amount.toLocaleString('en-US')} Eggs.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class MineLayersQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.undergroundLayersMined;
    }
    static generateData() {
        const amount = SeededRand.intBetween(1, 3);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.MINE_LAYERS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        const suffix = this.amount > 1 ? 's' : '';
        return `Mine ${this.amount.toLocaleString('en-US')} layer${suffix} in the Underground.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class MineItemsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.undergroundItemsFound;
    }
    static generateData() {
        const amount = SeededRand.intBetween(3, 15);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.MINE_ITEMS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        const suffix = this.amount > 1 ? 's' : '';
        return `Mine ${this.amount.toLocaleString('en-US')} item${suffix} in the Underground.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CatchShiniesQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalShinyPokemonCaptured;
    }
    static generateData() {
        const amount = 1;
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.SHINY_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Catch ${this.amount.toLocaleString('en-US')} shiny Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class DefeatGymQuest extends Quest {
    constructor(amount, reward, gymTown) {
        super(amount, reward);
        this.gymTown = gymTown;
        this.region = GameConstants.getGymRegion(this.gymTown);
        this.focus = App.game.statistics.gymsDefeated[GameConstants.getGymIndex(this.gymTown)];
    }
    static generateData() {
        const amount = SeededRand.intBetween(5, 20);
        let attempts = 0;
        let region = GameConstants.Region.kanto;
        let gymTown = GameConstants.RegionGyms[region][0];
        // Try to find unlocked gym, end after 10 attempts
        do {
            region = SeededRand.intBetween(0, player.highestRegion());
            gymTown = SeededRand.fromArray(GameConstants.RegionGyms[region]);
        } while (!Gym.isUnlocked(gymList[gymTown]) && ++attempts < 10);
        const reward = this.calcReward(amount, gymTown);
        return [amount, reward, gymTown];
    }
    static calcReward(amount, gymTown) {
        const gym = gymList[gymTown];
        if (gym instanceof Champion) {
            gym.setPokemon(player.starter());
        }
        const playerDamage = App.game.party.calculatePokemonAttack();
        let attacksToWin = 0;
        for (const pokemon of gym.pokemons) {
            attacksToWin += Math.ceil(Math.min(4, pokemon.maxHealth / Math.max(1, playerDamage)));
        }
        const reward = Math.min(5000, Math.ceil(attacksToWin * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount));
        return super.randomizeReward(reward);
    }
    get description() {
        const desc = [];
        desc.push(`Defeat ${this.gymTown}`);
        if (!this.gymTown.includes('Elite') && !this.gymTown.includes('Champion')) {
            desc.push('gym');
        }
        desc.push(`in ${GameConstants.camelCaseToString(GameConstants.Region[this.region])}`);
        desc.push(`${this.amount.toLocaleString('en-US')} times.`);
        return desc.join(' ');
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.gymTown);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class DefeatDungeonQuest extends Quest {
    constructor(amount, reward, dungeon) {
        super(amount, reward);
        this.dungeon = dungeon;
        this.region = GameConstants.getDungeonRegion(this.dungeon);
        this.focus = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(this.dungeon)];
    }
    static generateData() {
        // Allow up to highest region
        const amount = SeededRand.intBetween(5, 20);
        let attempts = 0;
        let region = GameConstants.Region.kanto;
        let dungeon = GameConstants.RegionDungeons[region][0];
        // Try to find unlocked dungeon, end after 10 attempts
        do {
            region = SeededRand.intBetween(0, player.highestRegion());
            dungeon = SeededRand.fromArray(GameConstants.RegionDungeons[region]);
        } while (!TownList[dungeon].isUnlocked() && ++attempts < 10);
        const reward = this.calcReward(amount, dungeon);
        return [amount, reward, dungeon];
    }
    static calcReward(amount, dungeon) {
        const playerDamage = App.game.party.calculateClickAttack() + (App.game.party.calculatePokemonAttack() / GameConstants.QUEST_CLICKS_PER_SECOND);
        const attacksToDefeatPokemon = Math.ceil(Math.min(4, dungeonList[dungeon].baseHealth / playerDamage));
        const averageTilesToBoss = 13;
        const attacksToCompleteDungeon = attacksToDefeatPokemon * averageTilesToBoss;
        const completeDungeonsReward = attacksToCompleteDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount;
        let region, route;
        for (region = player.highestRegion; region >= 0; region--) {
            route = QuestHelper.highestOneShotRoute(region); // returns 0 if no routes in this region can be one shot
            if (route) {
                break;
            }
        }
        if (!route) {
            route = 1, region = GameConstants.Region.kanto;
        }
        const tokens = PokemonFactory.routeDungeonTokens(route, region);
        const routeKillsPerDungeon = dungeonList[dungeon].tokenCost / tokens;
        const collectTokensReward = routeKillsPerDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * amount;
        const reward = Math.min(5000, Math.ceil(completeDungeonsReward + collectTokensReward));
        return super.randomizeReward(reward);
    }
    get description() {
        return `Defeat the ${this.dungeon} dungeon in ${GameConstants.camelCaseToString(GameConstants.Region[this.region])} ${this.amount.toLocaleString('en-US')} times.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.dungeon);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class UsePokeballQuest extends Quest {
    constructor(amount, reward, pokeball) {
        super(amount, reward);
        this.pokeball = pokeball;
        this.focus = App.game.statistics.pokeballsUsed[this.pokeball];
    }
    static generateData() {
        const possiblePokeballs = [GameConstants.Pokeball.Pokeball, GameConstants.Pokeball.Greatball, GameConstants.Pokeball.Ultraball];
        const pokeball = SeededRand.fromArray(possiblePokeballs);
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount, pokeball);
        return [amount, reward, pokeball];
    }
    static calcReward(amount, pokeball) {
        // Reward for Greatballs is 4x Pokeballs, Ultraballs are 9x Pokeballs
        const reward = Math.ceil(amount * (pokeball + 1) * (pokeball + 1) * GameConstants.DEFEAT_POKEMONS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Use ${this.amount.toLocaleString('en-US')} ${GameConstants.Pokeball[this.pokeball]}s.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.pokeball);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class UseOakItemQuest extends Quest {
    constructor(amount, reward, item) {
        super(amount, reward);
        this.item = item;
        this.focus = App.game.statistics.oakItemUses[this.item];
    }
    static generateData() {
        const possibleItems = [
            OakItems.OakItem.Magic_Ball,
            OakItems.OakItem.Amulet_Coin,
            // OakItems.OakItem.Poison_Barb,
            OakItems.OakItem.Exp_Share,
        ];
        const oakItem = SeededRand.fromArray(possibleItems);
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount, oakItem);
        return [amount, reward, oakItem];
    }
    static calcReward(amount, item) {
        const reward = amount * GameConstants.USE_OAK_ITEM_BASE_REWARD;
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain the benefit from the ${GameConstants.humanifyString(OakItems.OakItem[this.item])} ${this.amount.toLocaleString('en-US')} times.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.item);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class HarvestBerriesQuest extends Quest {
    constructor(amount, reward, berryType) {
        super(amount, reward);
        this.berryType = berryType;
        this.focus = App.game.statistics.berriesHarvested[this.berryType];
    }
    static generateData() {
        // Getting available Berries (always include Gen 1 Berries)
        const availableBerries = App.game.farming.berryData.filter(berry => App.game.farming.unlockedBerries[berry.type]() || berry.type < BerryType.Persim);
        const berry = SeededRand.fromArray(availableBerries);
        const maxAmt = Math.min(300, Math.ceil(432000 / berry.growthTime[3]));
        const minAmt = Math.min(10, Math.ceil(maxAmt / 2));
        const amount = SeededRand.intBetween(minAmt, maxAmt);
        const reward = this.calcReward(amount, berry.type);
        return [amount, reward, berry.type];
    }
    static calcReward(amount, berryType) {
        const harvestTime = App.game.farming.berryData[berryType].growthTime[3];
        const harvestAmt = Math.max(4, Math.ceil(App.game.farming.berryData[berryType].harvestAmount));
        const plantAmt = amount / harvestAmt;
        const fieldAmt = plantAmt / App.game.farming.plotList.length;
        const reward = Math.ceil(fieldAmt * Math.pow(harvestTime, .7) * 10);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Harvest ${this.amount.toLocaleString('en-US')} ${BerryType[this.berryType]} berries at the farm.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.berryType);
        return json;
    }
}
/// <reference path="./questTypes/DefeatPokemonsQuest.ts" />
/// <reference path="./questTypes/CapturePokemonsQuest.ts" />
/// <reference path="./questTypes/GainMoneyQuest.ts" />
/// <reference path="./questTypes/GainTokensQuest.ts" />
/// <reference path="./questTypes/GainShardsQuest.ts" />
/// <reference path="./questTypes/HatchEggsQuest.ts" />
/// <reference path="./questTypes/MineLayersQuest.ts" />
/// <reference path="./questTypes/MineItemsQuest.ts" />
/// <reference path="./questTypes/CatchShiniesQuest.ts" />
/// <reference path="./questTypes/DefeatGymQuest.ts" />
/// <reference path="./questTypes/DefeatDungeonQuest.ts" />
/// <reference path="./questTypes/UsePokeballQuest.ts" />
/// <reference path="./questTypes/UseOakItemQuest.ts" />
/// <reference path="./questTypes/HarvestBerriesQuest.ts" />
class QuestHelper {
    static createQuest(questType, data) {
        if (!this.quests[questType]) {
            console.error(`Error: Invalid quest type - ${questType}.`);
            return;
        }
        // Creating randomly generated quest
        if (!data) {
            const QuestClass = this.quests[questType];
            return new QuestClass(...QuestClass.generateData());
        }
        return new this.quests[questType](...data);
    }
    static generateQuestList(seed, amount = 10, uniqueQuestTypes = true) {
        const quests = [];
        SeededRand.seed(+seed);
        const QuestTypes = new Set(Object.keys(this.quests));
        const maxAttempts = 20;
        let attempts = 0;
        while (quests.length < amount && attempts++ < maxAttempts) {
            const questType = SeededRand.fromArray(Array.from(QuestTypes));
            if (uniqueQuestTypes) {
                QuestTypes.delete(questType);
            }
            if (questType == 'UseOakItemQuest' && App.game.challenges.list.disableOakItems.active()) {
                continue;
            }
            const quest = this.createQuest(questType);
            quest.index = quests.length;
            quests.push(quest);
        }
        return quests;
    }
    static highestOneShotRoute(region) {
        const routes = Routes.getRoutesByRegion(region).map(r => r.number);
        const first = Math.min(...routes);
        const last = Math.max(...routes);
        const attack = Math.max(1, App.game.party.calculatePokemonAttack(PokemonType.None, PokemonType.None, false, region, true, false, false));
        for (let route = last; route >= first; route--) {
            if (PokemonFactory.routeHealth(route, region) < attack) {
                return route;
            }
        }
        return 0;
    }
}
QuestHelper.quests = {
    DefeatPokemonsQuest,
    CapturePokemonsQuest,
    GainMoneyQuest,
    GainTokensQuest,
    GainShardsQuest,
    HatchEggsQuest,
    MineLayersQuest,
    MineItemsQuest,
    CatchShiniesQuest,
    DefeatGymQuest,
    DefeatDungeonQuest,
    UsePokeballQuest,
    UseOakItemQuest,
    HarvestBerriesQuest,
};
var QuestLineState;
(function (QuestLineState) {
    QuestLineState[QuestLineState["inactive"] = 0] = "inactive";
    QuestLineState[QuestLineState["started"] = 1] = "started";
    QuestLineState[QuestLineState["ended"] = 2] = "ended";
})(QuestLineState || (QuestLineState = {}));
class QuestLine {
    constructor(name, description) {
        this.state = ko.observable(QuestLineState.inactive);
        this.name = name;
        this.description = description;
        this.quests = ko.observableArray();
        this.totalQuests = 0;
        this.curQuest = ko.pureComputed(() => {
            const acc = 0;
            return this.quests().map((quest) => {
                return +quest.isCompleted();
            })
                .reduce((acc, iscompleted) => {
                return acc + iscompleted;
            }, 0);
        });
        this.curQuestInitial = ko.observable();
        this.curQuestInitial.equalityComparer = () => {
            return false;
        }; //Always update subscriptions, even if same data pushed in
        this.curQuestObject = ko.pureComputed(() => {
            this.quests(); //register dependency on this computed so it will update
            if (this.totalQuests > 0 && this.curQuest() < this.totalQuests) {
                return this.quests()[this.curQuest()];
            }
            else {
                return { progress: () => {
                        return 0;
                    }, progressText: () => {
                        return '';
                    } };
            }
        });
        this.autoBegin = this.curQuest.subscribe((num) => {
            if (this.curQuest() < this.totalQuests) {
                if (this.curQuestObject().initial() == null) {
                    setTimeout(() => {
                        this.beginQuest(this.curQuest());
                    }, 2000);
                }
            }
            else {
                this.state(QuestLineState.ended);
            }
        });
    }
    addQuest(quest) {
        this.totalQuests++;
        quest.index = this.totalQuests;
        quest.inQuestLine = true;
        quest.createAutoCompleter();
        this.quests.push(quest);
    }
    beginQuest(index = 0, initial) {
        const quest = this.quests()[index];
        if (initial != undefined) {
            quest.initial(initial);
        }
        else {
            quest.begin();
        }
        this.curQuestInitial(quest.initial());
        this.state(QuestLineState.started);
    }
    resumeAt(index, initial) {
        if (initial != undefined) {
            for (let i = 0; i < Math.min(index, this.totalQuests); i++) {
                this.quests()[i].autoCompleter.dispose();
                this.quests()[i].complete();
            }
            if (index < this.totalQuests) {
                this.beginQuest(index, initial);
            }
        }
        else {
            this.beginQuest(0);
        }
    }
    toJSON() {
        return {
            state: this.state(),
            name: this.name,
            quest: this.curQuest(),
            initial: this.curQuestInitial(),
        };
    }
}
/**
 * Static class used to handle Quest Lines
 */
class QuestLineHelper {
    static createTutorial() {
        const tutorial = new QuestLine('Tutorial Quests', 'A short set of quests to get you going');
        //Defeat Starter
        const defeatStarter = new CapturePokemonsQuest(1, 10);
        //Capture pokemon because start sequence resets route 1 kills to 0, making this quest think it is incomplete
        defeatStarter.customDescription = 'Defeat the Pokémon. Click to deal damage';
        tutorial.addQuest(defeatStarter);
        //Capture 1 pokemon
        const captureOne = new CapturePokemonsQuest(1, 20);
        captureOne.customDescription = 'Capture 1 Pokémon. When you defeat a Pokémon, a Pokéball is thrown and you have a chance to capture it.';
        tutorial.addQuest(captureOne);
        //Kill 5 on route 2
        const routeTwo = new DefeatPokemonsQuest(10, 20, 2, GameConstants.Region.kanto);
        routeTwo.customDescription = 'Defeat 10 Pokémon on route 2. Click route 2 on the map to move there and begin fighting.';
        tutorial.addQuest(routeTwo);
        //Buy pokeballs
        const buyPokeballs = new BuyPokeballsQuest(10, 50, GameConstants.Pokeball.Pokeball);
        buyPokeballs.customDescription = 'Buy 10 Pokéballs. You can find these in the Viridian City Shop.';
        tutorial.addQuest(buyPokeballs);
        //Buy Dungeon ticket
        const buyDungeonTicket = new CustomQuest(1, 50, 'Buy the Dungeon ticket from Viridian City Shop.', () => +App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Dungeon_ticket), 0);
        tutorial.addQuest(buyDungeonTicket);
        //Clear Viridian Forest
        const clearMtMoon = new DefeatDungeonQuest(1, 50, 'Viridian Forest');
        clearMtMoon.customDescription = 'Gather 50 Dungeon tokens by (re)capturing Pokémon, then clear the Viridian Forest dungeon.';
        tutorial.addQuest(clearMtMoon);
        //Defeat Pewter Gym
        const pewterReward = () => {
            Notifier.notify({ message: 'Tutorial completed!', type: NotificationConstants.NotificationOption.success });
            Information.show({
                steps: [
                    {
                        element: document.getElementById('questDisplayContainer'),
                        intro: 'Click "List" to see the current quests that can be completed for <img title="Quest points" src="assets/images/currency/questPoint.svg" height="25px"> Quest Points.',
                    },
                ],
            });
        };
        const pewter = new CustomQuest(1, pewterReward, 'Defeat Pewter City Gym. Click the town on the map to move there, then click the Gym button to start the battle.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Pewter City')](), 0);
        tutorial.addQuest(pewter);
        App.game.quests.questLines().push(tutorial);
    }
    static createDeoxysQuestLine() {
        const deoxysQuestLine = new QuestLine('Mystery of Deoxys', 'Discover the mystery of Deoxys');
        // Defeat 50 Pokemon on route 129
        const route129 = new DefeatPokemonsQuest(50, 0, 129, GameConstants.Region.hoenn);
        deoxysQuestLine.addQuest(route129);
        // Defeat 500 Psychic type Pokemon
        const psychicShardReward = () => {
            App.game.shards.gainShards(500, PokemonType.Psychic);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'You have gained 500 Psychic shards',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const defeatPsychic = new CustomQuest(500, psychicShardReward, 'Defeat 500 Psychic type Pokémon', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        deoxysQuestLine.addQuest(defeatPsychic);
        // Capture 200 Psychic type Pokemon
        const mindPlateReward = () => {
            const mindPlate = UndergroundItem.list.find(item => item.name == 'Mind Plate');
            if (!mindPlate) {
                return console.error('Unable to find item Mind Plate');
            }
            Underground.gainMineItem(mindPlate.id, 20);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: `You have gained 20 ${mindPlate.name}s`,
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const catchPsychic = new CustomQuest(200, mindPlateReward, 'Capture 200 Psychic type Pokémon', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0);
        });
        deoxysQuestLine.addQuest(catchPsychic);
        // Reach stage 100 in battle frontier
        const reachStage100Reward = () => {
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'Quest line completed!<br/><i>You have uncovered the Mystery of Deoxys</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const reachStage100 = new CustomQuest(100, reachStage100Reward, 'Defeat stage 100 in the Battle Frontier', App.game.statistics.battleFrontierHighestStageCompleted, 0);
        deoxysQuestLine.addQuest(reachStage100);
        App.game.quests.questLines().push(deoxysQuestLine);
    }
    static createUndergroundQuestLine() {
        const undergroundQuestLine = new QuestLine('Mining Expedition', 'Explore the underground');
        //Buy Explorer Kit (no reward)
        const buyExplorerKit = new CustomQuest(1, () => { }, 'Buy the Explorer Kit from Cinnabar Island Shop', () => +App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Explorer_kit), 0);
        undergroundQuestLine.addQuest(buyExplorerKit);
        // Mine 5 layers in the Unerground
        const OldAmberReward = () => {
            // Gain an Old Amber
            const oldAmber = UndergroundItem.list.find(item => item.name == 'Old Amber');
            if (!oldAmber) {
                return console.error('Unable to find item Old Amber');
            }
            Underground.gainMineItem(oldAmber.id);
            Notifier.notify({
                title: undergroundQuestLine.name,
                message: 'You have gained an Old Amber fossil!<br/><i>You can breed this in the hatchery.</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
        };
        const mineLayers = new CustomQuest(5, OldAmberReward, 'Mine 5 layers in the Underground', App.game.statistics.undergroundLayersMined);
        undergroundQuestLine.addQuest(mineLayers);
        App.game.quests.questLines().push(undergroundQuestLine);
    }
    static isQuestLineCompleted(name) {
        var _a;
        return ((_a = App.game.quests.getQuestLine(name)) === null || _a === void 0 ? void 0 : _a.state()) == QuestLineState.ended;
    }
    static loadQuestLines() {
        this.createTutorial();
        this.createDeoxysQuestLine();
        this.createUndergroundQuestLine();
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
class Quests {
    constructor() {
        this.saveKey = 'quests';
        this.defaults = {
            xp: 0,
            refreshes: 0,
            freeRefresh: false,
        };
        this.xp = ko.observable(0).extend({ numeric: 0 });
        this.refreshes = ko.observable(0);
        this.lastRefresh = new Date();
        this.lastRefreshLevel = 0;
        this.lastRefreshRegion = 0;
        this.freeRefresh = ko.observable(false);
        this.questList = ko.observableArray();
        this.questLines = ko.observableArray();
        this.level = ko.pureComputed(() => {
            return this.xpToLevel(this.xp());
        });
        this.questSlots = ko.pureComputed(() => {
            // Minimum of 1, Maximum of 4
            return Math.min(4, Math.max(2, Math.floor(this.level() / 5)));
        });
        // Get current quests by status
        this.completedQuests = ko.pureComputed(() => {
            return this.questList().filter((quest) => quest.isCompleted());
        });
        this.currentQuests = ko.pureComputed(() => {
            return this.questList().filter((quest) => quest.inProgress() && !quest.claimed());
        });
        this.incompleteQuests = ko.pureComputed(() => {
            return this.questList().filter((quest) => !quest.isCompleted());
        });
    }
    /**
     * Gets a quest line by name
     * @param name The quest line name
     */
    getQuestLine(name) {
        return this.questLines().find((ql) => ql.name.toLowerCase() == name.toLowerCase());
    }
    beginQuest(index) {
        const quest = this.questList()[index];
        // Check if we can start a new quest, and the requested quest isn't started or completed
        if (this.canStartNewQuest() && quest && !quest.inProgress() && !quest.isCompleted()) {
            quest.begin();
        }
        else {
            Notifier.notify({
                message: 'You cannot start more quests',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    quitQuest(index, shouldConfirm = false) {
        // Check if we can quit this quest
        const quest = this.questList()[index];
        if (quest && quest.inProgress()) {
            quest.quit(shouldConfirm);
        }
        else {
            Notifier.notify({
                message: 'You cannot quit this quest',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    claimQuest(index) {
        // Check if we can claim this quest
        const quest = this.questList()[index];
        if (quest && quest.isCompleted() && !quest.claimed()) {
            quest.claim();
            // Once the player completes every available quest, refresh the list for free
            if (this.allQuestClaimed()) {
                this.refreshQuests(true);
                // Give player a free refresh
                this.freeRefresh(true);
            }
            // Track quest completion and total quest completed
            LogEvent('completed quest', 'quests', `level (${this.level()})`, App.game.statistics.questsCompleted());
        }
        else {
            console.trace('cannot claim quest..');
            Notifier.notify({
                message: 'You cannot claim this quest',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    addXP(amount) {
        if (isNaN(amount)) {
            return;
        }
        const currentLevel = this.level();
        GameHelper.incrementObservable(this.xp, amount);
        // Refresh the list each time a player levels up
        if (this.level() > currentLevel) {
            Notifier.notify({
                message: 'Your quest level has increased!<br/><i>You have a free quest refresh.</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
                sound: NotificationConstants.NotificationSound.quest_level_increased,
            });
            this.freeRefresh(true);
            // Track when users gains a quest level and how long it took in seconds
            LogEvent('gain quest level', 'quests', `level (${this.level()})`, App.game.statistics.secondsPlayed());
        }
    }
    generateQuestList(date = new Date(), level = this.level()) {
        if (this.lastRefresh.toDateString() != date.toDateString()) {
            this.refreshes(0);
        }
        this.lastRefresh = date;
        this.lastRefreshLevel = level;
        this.lastRefreshRegion = player.highestRegion();
        this.currentQuests().forEach((quest) => quest.quit());
        this.questList(QuestHelper.generateQuestList(this.generateSeed(date, level), GameConstants.QUESTS_PER_SET));
    }
    generateSeed(date = new Date(), level = this.level()) {
        return Number(level * (date.getFullYear() + this.refreshes() * 10) * date.getDate() + 1000 * date.getMonth() + 100000 * date.getDate());
    }
    refreshQuests(free = this.freeRefresh(), shouldConfirm = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (free || this.canAffordRefresh()) {
                if (!free) {
                    if (shouldConfirm &&
                        !(yield Notifier.confirm({
                            title: 'Refresh quest list',
                            message: 'Are you sure you want to refresh the quest list?',
                            type: NotificationConstants.NotificationOption.warning,
                            confirm: 'refresh',
                        }))) {
                        return;
                    }
                    App.game.wallet.loseAmount(this.getRefreshCost());
                }
                // Track when users refreshes the quest list and how much it cost
                LogEvent('refresh quest list', 'quests', `level (${this.level()})`, free ? 0 : this.getRefreshCost().amount);
                this.freeRefresh(false);
                GameHelper.incrementObservable(this.refreshes);
                this.generateQuestList();
            }
            else {
                Notifier.notify({
                    message: 'You cannot afford to do that!',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        });
    }
    resetRefreshes() {
        this.refreshes(0);
    }
    canAffordRefresh() {
        return App.game.wallet.hasAmount(this.getRefreshCost());
    }
    /**
     * Formula for the Money cost for refreshing quests
     * @returns 0 when all quests are complete, ~1 million when none are
     */
    getRefreshCost() {
        // If we have a free refersh, just assume all the quest are completed
        const notComplete = this.freeRefresh() ? 0 : this.incompleteQuests().length;
        const cost = Math.floor((250000 * Math.LOG10E * Math.log(Math.pow(notComplete, 4) + 1)) / 1000) * 1000;
        return new Amount(Math.max(0, Math.min(1e6, cost)), GameConstants.Currency.money);
    }
    canStartNewQuest() {
        // Check we haven't already used up all quest slots
        if (this.currentQuests().length >= this.questSlots()) {
            return false;
        }
        // Check at least 1 quest is either not completed or in progress
        if (this.questList().find((quest) => !quest.isCompleted() && !quest.inProgress())) {
            return true;
        }
        return false;
    }
    /**
     * Determines if all quests have been completed and claimed.
     */
    allQuestClaimed() {
        return !this.incompleteQuests().length && !this.currentQuests().length;
    }
    /**
     * Formula for the amount of exp to increase quest level.
     * 1000 XP is needed for level 2, and then increases 20% each level.
     * @param level The current quest level
     */
    levelToXP(level) {
        if (level >= 2) {
            // Sum of geometric series
            const a = 1000, r = 1.2, n = level - 1;
            const sum = (a * (Math.pow(r, n) - 1)) / (r - 1);
            return Math.ceil(sum);
        }
        else {
            return 0;
        }
    }
    xpToLevel(xp) {
        const sum = xp, a = 1000, r = 1.2;
        const n = Math.log(1 + ((r - 1) * sum) / a) / Math.log(r);
        return Math.floor(n + 1);
    }
    percentToNextQuestLevel() {
        const current = this.level();
        const requiredForCurrent = this.levelToXP(current);
        const requiredForNext = this.levelToXP(current + 1);
        return (100 * (this.xp() - requiredForCurrent)) / (requiredForNext - requiredForCurrent);
    }
    loadQuestList(questList) {
        // Sanity Check
        this.questList.removeAll();
        questList.forEach((questData) => {
            if (questData.hasOwnProperty('name')) {
                const quest = QuestHelper.createQuest(questData.name, questData.data);
                quest.fromJSON(questData);
                this.questList.push(quest);
            }
            else {
                this.questList.push(new CapturePokemonsQuest(1, 0));
            }
        });
    }
    loadQuestLines(questLines) {
        questLines.forEach((questLine) => {
            if (questLine.state == QuestLineState.inactive) {
                return;
            }
            const ql = this.questLines().find((ql) => ql.name == questLine.name);
            if (ql) {
                ql.state(questLine.state);
                if (questLine.state == QuestLineState.started) {
                    ql.resumeAt(questLine.quest, questLine.initial);
                }
            }
        });
    }
    toJSON() {
        return {
            xp: this.xp(),
            refreshes: this.refreshes(),
            lastRefresh: this.lastRefresh,
            lastRefreshLevel: this.lastRefreshLevel,
            lastRefreshRegion: this.lastRefreshRegion,
            freeRefresh: this.freeRefresh(),
            questList: this.questList().map((quest) => quest.toJSON()),
            questLines: this.questLines(),
        };
    }
    fromJSON(json) {
        if (!json) {
            // Generate the questList
            this.generateQuestList();
            // Generate the questLines
            QuestLineHelper.loadQuestLines();
            return;
        }
        this.xp(json.xp || this.defaults.xp);
        this.refreshes(json.refreshes || this.defaults.refreshes);
        this.lastRefresh = json.lastRefresh ? new Date(json.lastRefresh) : new Date();
        this.lastRefreshLevel = json.lastRefreshLevel || this.level();
        this.lastRefreshRegion = json.lastRefreshRegion || player.highestRegion();
        if (this.lastRefresh.toDateString() != new Date().toDateString()) {
            this.freeRefresh(true);
        }
        else {
            this.freeRefresh(json.freeRefresh || this.defaults.freeRefresh);
        }
        if (!json.hasOwnProperty('questList') || !json.questList.length) {
            // Generate new quest list
            this.generateQuestList(this.lastRefresh, this.lastRefreshLevel);
        }
        else {
            // Load saved quests
            this.loadQuestList(json.questList);
        }
        // Generate the questLines
        QuestLineHelper.loadQuestLines();
        // Load our quest line quest
        if (json.questLines) {
            this.loadQuestLines(json.questLines);
        }
    }
}
/// <reference path="../Quest.ts" />
class BuyPokeballsQuest extends Quest {
    constructor(amount, reward, pokeball) {
        super(amount, reward);
        this.pokeball = pokeball;
        this.focus = App.game.statistics.pokeballsBought[this.pokeball];
    }
    get description() {
        return `Buy ${this.amount.toLocaleString('en-US')} ${GameConstants.Pokeball[this.pokeball]}s.`;
    }
    toJSON() {
        const json = super.toJSON();
        json['name'] = this.constructor.name;
        json['data'].push(this.pokeball);
        return json;
    }
}
class CustomQuest extends Quest {
    constructor(amount, reward, description, focus, initialValue) {
        const qpReward = typeof reward == 'number' ? reward : 0;
        super(amount, qpReward);
        this.customDescription = description;
        this.focus = focus;
        this.initialValue = initialValue;
        this.customReward = typeof reward == 'function' ? reward : undefined;
    }
    begin() {
        if (this.initialValue !== undefined) {
            this.initial(this.initialValue);
        }
        else {
            super.begin();
        }
    }
    claim() {
        if (this.customReward !== undefined) {
            this.customReward();
        }
        return super.claim();
    }
}
var BaitType;
(function (BaitType) {
    BaitType[BaitType["Bait"] = 0] = "Bait";
    BaitType[BaitType["Razz"] = 1] = "Razz";
    BaitType[BaitType["Nanab"] = 2] = "Nanab";
})(BaitType || (BaitType = {}));
class Bait {
    constructor(type, name, useName, image, amount, use) {
        this.type = type;
        this.name = name;
        this.useName = useName;
        this.image = image;
        this.amount = amount;
        this.use = use;
    }
    get btnName() {
        return `${this.name} (${this.amount()})`;
    }
}
const BaitList = {};
BaitList['Bait'] = new Bait(BaitType.Bait, 'Bait', 'some bait', 'assets/images/safari/bait.png', () => '∞', (pokemon) => {
    pokemon.eatingBait = BaitType.Bait;
    pokemon.eating = Math.max(pokemon.eating, Math.floor(Math.random() * 5 + 2));
    pokemon.angry = 0;
});
BaitList['Razz'] = new Bait(BaitType.Razz, 'Razz Berry', 'a Razz Berry', FarmController.getBerryImage(BerryType.Razz), () => App.game.farming.berryList[BerryType.Razz](), (pokemon) => {
    GameHelper.incrementObservable(App.game.farming.berryList[BerryType.Razz], -1);
    pokemon.eatingBait = BaitType.Razz;
    pokemon.eating = Math.max(pokemon.eating, Math.floor(Math.random() * 6 + 2));
    pokemon.angry = 0;
});
BaitList['Nanab'] = new Bait(BaitType.Nanab, 'Nanab Berry', 'a Nanab Berry', FarmController.getBerryImage(BerryType.Nanab), () => App.game.farming.berryList[BerryType.Nanab](), (pokemon) => {
    GameHelper.incrementObservable(App.game.farming.berryList[BerryType.Nanab], -1);
    pokemon.eatingBait = BaitType.Nanab;
    pokemon.eating = Math.max(pokemon.eating, Math.floor(Math.random() * 6 + 2));
    pokemon.angry = 0;
});
/// <reference path="../../libs/motio.d.ts" />
class Safari {
    static sizeX() {
        return Math.floor(document.querySelector('#safariModal .modal-dialog').scrollWidth / 32);
    }
    static sizeY() {
        return Math.floor((window.innerHeight - 250) / 32);
    }
    static load() {
        Safari.grid = [];
        Safari.pokemonGrid([]);
        Safari.playerXY.x = 0;
        Safari.playerXY.y = 0;
        Safari.lastDirection = 'up';
        Safari.inBattle(false);
        Safari.inProgress(true);
        Safari.balls(this.calculateStartPokeballs());
        for (let i = 0; i < this.sizeY(); i++) {
            Safari.grid.push(Array(this.sizeX()).fill(0));
        }
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.show();
    }
    static addRandomBody(body) {
        let x = Safari.getRandomCoord(this.sizeX() - 2);
        let y = Safari.getRandomCoord(this.sizeY() - 2);
        if (body.type === 'fence') {
            x = Math.max(0, x - 3);
            y = Math.max(0, y - 3);
        }
        const res = Safari.canAddBody(x, y, body);
        if (res || body.type === 'grass') {
            Safari.addBody(x, y, body);
        }
    }
    static getRandomCoord(max) {
        return Math.floor(Math.random() * (max - 3)) + 1;
    }
    static canAddBody(x, y, body) {
        if (x == 0 ||
            y == 0 ||
            y + body.maxY() >= this.sizeY() ||
            x + body.maxX() >= this.sizeX()) {
            return false;
        }
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if ((i + y) < this.sizeY() && (j + x) < this.sizeX()) {
                    if (body.grid[i][j] !== 0) {
                        if (this.grid[i + y][j + x] !== 0) {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    static addBody(x, y, body) {
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if (body.grid[i][j] !== 0) {
                    if ((i + y) < this.sizeY() && (j + x) < this.sizeX()) {
                        if (this.grid[i + y][j + x] === 0) {
                            this.grid[i + y][j + x] = body.grid[i][j];
                        }
                    }
                }
            }
        }
    }
    static openModal() {
        if (this.canAccess()) {
            App.game.gameState = GameConstants.GameState.safari;
            $('#safariModal').modal({ backdrop: 'static', keyboard: false });
        }
        else {
            Notifier.notify({
                message: 'You need the Safari Pass to access this location.<br/><i>Visit the Gym in Fuschia City</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static closeModal() {
        if (!Safari.inBattle()) {
            $('#safariModal').modal('hide');
        }
    }
    static canPay() {
        return App.game.wallet.hasAmount(Safari.cost());
    }
    static cost() {
        return new Amount(100, GameConstants.Currency.questPoint);
    }
    static payEntranceFee() {
        if (Safari.canPay()) {
            // TODO: add increasing cost back
            //typeof player.safariCostModifier == undefined ? 1 : player.safariCostModifier++;
            App.game.wallet.loseAmount(Safari.cost());
            Safari.load();
        }
    }
    static canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Safari_ticket);
    }
    static show() {
        let html = '';
        for (let i = 0; i < Safari.grid.length; i++) {
            html += '<div class="row flex-nowrap">';
            for (let j = 0; j < Safari.grid[0].length; j++) {
                html += Safari.square(i, j);
            }
            html += '</div>';
        }
        $('#safariBody').html(html);
        Safari.addPlayer(Math.floor((this.sizeX() - 1) / 2), this.sizeY() - 1);
    }
    static square(i, j) {
        const img = `assets/images/safari/${this.grid[i][j]}.png`;
        const divId = `safari-${j}-${i}`;
        return `<div id='${divId}' style=background-image:url('${img}') class='safariSquare'></div>`;
    }
    static addPlayer(i, j) {
        const topLeft = $('#safari-0-0').offset();
        const offset = {
            top: 32 * j + topLeft.top,
            left: 32 * i + topLeft.left,
        };
        $('#safariBody').append('<div id="sprite"></div>');
        $('#sprite').css('background', `url('assets/images/safari/walk${Safari.lastDirection}.png')`);
        $('#sprite').css('position', 'absolute');
        $('#sprite').offset(offset);
        Safari.playerXY.x = i;
        Safari.playerXY.y = j;
        Safari.origin = offset;
        const element = document.querySelector('#sprite');
        Safari.sprite = new Motio(element, {
            fps: 8,
            frames: 4,
        }).on('frame', () => {
            if (Safari.sprite.frame % 2 == 0) {
                Safari.sprite.pause();
            }
        });
    }
    static move(dir) {
        if (!Safari.inProgress()) {
            return;
        }
        else if (!Safari.walking && !Safari.isMoving && !Safari.inBattle()) {
            Safari.queue = [];
            Safari.walking = true;
            Safari.queue.unshift(dir);
            Safari.startMoving(dir);
        }
        else {
            if (dir) {
                Safari.setNextDirection(dir);
            }
        }
    }
    static startMoving(dir) {
        Safari.nextDirection = dir;
        if (!Safari.isMoving) {
            if (Safari.sprite.frame == 2) {
                Safari.sprite.to(0, true, () => {
                    Safari.step(dir);
                });
            }
            else {
                Safari.step(dir);
            }
        }
    }
    static step(direction) {
        Safari.lastDirection = direction;
        Safari.sprite.toggle();
        const directionOffset = Safari.directionToXY(direction);
        Safari.isMoving = true;
        const newPos = {
            x: Safari.playerXY.x + directionOffset.x,
            y: Safari.playerXY.y + directionOffset.y,
        };
        if (Safari.canMove(newPos.x, newPos.y)) {
            const next = $(`#safari-${newPos.x}-${newPos.y}`).offset();
            const offset = {
                top: `+=${directionOffset.y * 32}`,
                left: `+=${directionOffset.x * 32}`,
            };
            $('#sprite').css('background', `url('assets/images/safari/walk${direction}.png')`);
            Safari.playerXY.x = newPos.x;
            Safari.playerXY.y = newPos.y;
            $('#sprite').animate(offset, 250, 'linear', () => {
                Safari.checkBattle();
                Safari.isMoving = false;
                if (Safari.walking) {
                    if (!Safari.checkBattle() && Safari.queue[0]) {
                        Safari.step(Safari.queue[0]);
                    }
                }
            });
            App.game.breeding.progressEggs(1);
            this.spawnPokemonCheck();
            this.despawnPokemonCheck();
        }
        else {
            $('#sprite').css('background', `url('assets/images/safari/walk${direction}.png')`);
            setTimeout(() => {
                Safari.walking = false;
                Safari.isMoving = false;
                if (Safari.queue[0]) {
                    Safari.isMoving = true;
                    Safari.walking = true;
                    Safari.step(Safari.queue[0]);
                }
            }, 250);
        }
    }
    static spawnPokemonCheck() {
        this.steps++;
        if (this.steps % 10 === 0 && Math.round(Math.random())) {
            this.spawnRandomPokemon();
        }
    }
    static despawnPokemonCheck() {
        let index = this.pokemonGrid().length;
        while (index-- > 0) {
            if (--this.pokemonGrid()[index].steps <= 0) {
                this.pokemonGrid.splice(index, 1);
            }
        }
    }
    static spawnRandomPokemon() {
        const y = Math.floor(Math.random() * this.sizeY());
        const x = Math.floor(Math.random() * this.sizeX());
        if (!this.canMove(x, y) || (x == this.playerXY.x && y == this.playerXY.y) || this.pokemonGrid().find(p => p.x === x && p.y === y)) {
            return;
        }
        const pokemon = SafariPokemon.random();
        pokemon.x = x;
        pokemon.y = y;
        pokemon.steps = this.sizeX() + this.sizeY() + Math.floor(Math.random() * 21);
        this.pokemonGrid.push(pokemon);
    }
    static directionToXY(dir) {
        let x = 0;
        let y = 0;
        switch (dir) {
            case 'left':
                x = -1;
                break;
            case 'up':
                y = -1;
                break;
            case 'right':
                x = 1;
                break;
            case 'down':
                y = 1;
                break;
        }
        return { x: x, y: y };
    }
    static canMove(x, y) {
        if (!Safari.inProgress()) {
            return false;
        }
        for (let i = 0; i < GameConstants.LEGAL_WALK_BLOCKS.length; i++) {
            if (Safari.grid[y] && Safari.grid[y][x] === GameConstants.LEGAL_WALK_BLOCKS[i]) {
                return true;
            }
        }
        return false;
    }
    static setNextDirection(direction) {
        if (direction != Safari.lastDirection) {
            if (Safari.queue[0] != direction) {
                if (Safari.queue.length == 1) {
                    Safari.queue.unshift(direction);
                }
                else {
                    Safari.queue[0] = direction;
                }
            }
            Safari.nextDirection = direction;
            Safari.walking = true;
        }
    }
    static stop(dir) {
        for (let i = 0; i < Safari.queue.length; i++) {
            if (Safari.queue[i] == dir) {
                Safari.queue.splice(i, 1);
            }
        }
        if (!Safari.queue[0]) {
            Safari.walking = false;
        }
    }
    static checkBattle() {
        if (Safari.inBattle()) {
            return false;
        }
        const pokemonOnPlayer = this.pokemonGrid().findIndex(p => p.x === Safari.playerXY.x && p.y === Safari.playerXY.y);
        if (pokemonOnPlayer >= 0) {
            SafariBattle.load(this.pokemonGrid()[pokemonOnPlayer]);
            Safari.pokemonGrid.splice(pokemonOnPlayer, 1);
            return true;
        }
        if (Safari.grid[Safari.playerXY.y][Safari.playerXY.x] === 10) {
            if (Math.random() * GameConstants.SAFARI_BATTLE_CHANCE < 1) {
                SafariBattle.load();
                return true;
            }
        }
        return false;
    }
    static calculateStartPokeballs() {
        return GameConstants.SAFARI_BASE_POKEBALL_COUNT;
    }
    static completed(shiny = false) {
        return SafariPokemon.list.reduce((all, poke) => {
            return all && App.game.party.alreadyCaughtPokemonByName(poke.name, shiny);
        }, true);
    }
}
Safari.pokemonGrid = ko.observableArray([]);
Safari.player = new Point(12, 20);
Safari.lastDirection = 'up';
Safari.steps = 0;
Safari.walking = false;
Safari.isMoving = false;
Safari.queue = [];
Safari.playerXY = { 'x': 0, 'y': 0 };
Safari.inProgress = ko.observable(false);
Safari.inBattle = ko.observable(false);
Safari.balls = ko.observable();
document.addEventListener('DOMContentLoaded', () => {
    $('#safariModal').on('hide.bs.modal', () => {
        MapHelper.moveToTown('Fuchsia City');
    });
});
class SafariBattle {
    static get enemy() {
        return SafariBattle._enemy();
    }
    static set enemy(pokemon) {
        SafariBattle._enemy(pokemon);
    }
    static load(enemy = SafariPokemon.random()) {
        // Stop left over keypresses
        GameController.simulateKey('ArrowUp', 'up');
        GameController.simulateKey('ArrowDown', 'up');
        GameController.simulateKey('ArrowLeft', 'up');
        GameController.simulateKey('ArrowRight', 'up');
        // Generate enemy
        SafariBattle.enemy = enemy;
        Safari.inBattle(true);
        SafariBattle.text('What will you do?');
        SafariBattle.unlockButtons();
        SafariBattle.escapeAttempts = 0;
        $('#safariBattleModal').modal({ backdrop: 'static', keyboard: false });
    }
    static throwBall() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            Safari.balls(Safari.balls() - 1);
            $('#safariBattleModal .enemy').css('transition-duration', `${0.75 * SafariBattle.Speed.enemyTransition}ms`);
            SafariBattle.text('You throw a ball...');
            const enemyImg = $('#safariBattleModal .enemy').offset();
            enemyImg.left += 36;
            enemyImg.top += 16;
            const ptclhtml = '<div><img id="safariBall" class="spin" src="assets/images/safari/safariball.png"></div>';
            SafariBattle.particle = SafariBattle.dropParticle(ptclhtml, $('#safariBattleModal .pageItemFooter').offset(), enemyImg, SafariBattle.Speed.ballThrow, 'cubic-bezier(0,0,0.4,1)', true).css('z-index', 9999);
            SafariBattle.delay(1.1 * SafariBattle.Speed.ballThrow)(0) // throwing the ball
                .then(SafariBattle.startCapture) // pokemon being sucked into ball
                .then(SafariBattle.delay(0.75 * SafariBattle.Speed.enemyTransition))
                .then(SafariBattle.startBounce) // pokeball dropping to ground
                .then(SafariBattle.delay(1.7 * SafariBattle.Speed.ballBounce))
                .then(SafariBattle.calcIndex) // roll a dice for catching, use dice roll to determine how many pokeball rolls
                .then(SafariBattle.delayRoll)
                .then(SafariBattle.finishCapture); // capture pokemon or break free
        }
    }
    static delay(ms) {
        return function (pass) {
            return new Promise((resolve, reject) => {
                setTimeout((pass) => {
                    resolve(pass);
                }, ms);
            });
        };
    }
    static startCapture() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal .enemy').addClass('safariCapture');
            $('#safariBall').removeClass('spin');
            resolve();
        });
    }
    static startBounce() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal').css('animation-duration', `${1.6 * SafariBattle.Speed.ballBounce}ms`);
            $('#safariBattleModal .enemy > img').css('opacity', '0');
            SafariBattle.particle.addClass('bounce');
            resolve();
        });
    }
    static calcIndex() {
        return new Promise((resolve, reject) => {
            const random = Math.random();
            const catchF = SafariBattle.enemy.catchFactor / 100;
            const index = catchF >= 1 ? 3 : Math.floor(4 * (1 - Math.max(random, catchF)) / (1 - catchF));
            if (index != 0) {
                $('#safariBattleModal').css('animation-duration', `${SafariBattle.Speed.ballRoll}ms`);
                SafariBattle.startRoll(index);
            }
            resolve([random, index]);
        });
    }
    static delayRoll(result) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve(result);
            }, (0.2 + 1.2 * result[1]) * SafariBattle.Speed.ballRoll);
        });
    }
    static finishCapture(result) {
        const [random, index] = result;
        const isgameOver = (Safari.balls() == 0);
        return new Promise((resolve, reject) => {
            if (random * 100 < SafariBattle.enemy.catchFactor) {
                SafariBattle.capturePokemon();
                $('#safariBall').css('filter', 'brightness(0.4) grayscale(100%)');
                setTimeout(() => {
                    SafariBattle.particle.remove();
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.endBattle();
                }, 1.7 * SafariBattle.Speed.enemyTransition);
            }
            else {
                $('#safariBattleModal .enemy > img').css('opacity', '1');
                $('#safariBattleModal .enemy').removeClass('safariCapture');
                SafariBattle.text(SafariBattle.CATCH_MESSAGES[index]);
                SafariBattle.particle.remove();
                setTimeout(() => {
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.enemyTurn();
                }, 1 * SafariBattle.Speed.enemyTransition);
            }
        });
    }
    static capturePokemon() {
        SafariBattle.text(`GOTCHA!<br>${SafariBattle.enemy.name} was caught!`);
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(SafariBattle.enemy.name).id, SafariBattle.enemy.shiny);
    }
    static throwBait(baitType) {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            const bait = BaitList[BaitType[baitType]];
            SafariBattle.text(`You throw ${bait.useName} at ${SafariBattle.enemy.name}`);
            bait.use(SafariBattle.enemy);
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 30;
            enemy.top += 70;
            SafariBattle.dropParticle(`<img width=16px src="${bait.image}">`, $('#safariBattleModal .pageItemFooter').offset(), enemy, 1000, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(SafariBattle.enemyTurn, 1500);
        }
    }
    static throwRock() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text(`You throw a rock at ${SafariBattle.enemy.name}`);
            SafariBattle.enemy.angry = Math.max(SafariBattle.enemy.angry, Math.floor(Math.random() * 5 + 2));
            SafariBattle.enemy.eating = 0;
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 40;
            enemy.top += 10;
            SafariBattle.dropParticle('<img src="assets/images/safari/rock.png">', $('#safariBattleModal .pageItemFooter').offset(), enemy, 800, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(() => {
                const hitSplash = $('<ptcl>').html('<img src="assets/images/safari/hit.png">').children().appendTo('#safariBattleModal');
                hitSplash.offset(enemy).css({ 'opacity': 0.8, 'z-index': 9998 });
                hitSplash.fadeOut(400, () => {
                    hitSplash.remove();
                });
                setTimeout(() => {
                    const newOffset = {
                        top: enemy.top + 4,
                        left: enemy.left - 20,
                    };
                    const ang = $('<ptcl>').html('<img src="assets/images/safari/angry.png">').children().appendTo('#safariBattleModal');
                    ang.css('position', 'absolute').css('z-index', 9999);
                    ang.offset(newOffset);
                    ang.addClass('pulse');
                    setTimeout(() => {
                        newOffset.top -= 10;
                        newOffset.left += 60;
                        ang.offset(newOffset);
                        setTimeout(() => {
                            ang.remove();
                        }, 350);
                    }, 350);
                }, 300);
            }, 800);
            setTimeout(SafariBattle.enemyTurn, 2000);
        }
    }
    static run() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text('You flee.');
            setTimeout(SafariBattle.endBattle, 1500);
        }
    }
    static enemyTurn() {
        // Enemy turn to flee;
        const random = Math.floor(Math.random() * 100);
        if (random < SafariBattle.enemy.escapeFactor) {
            SafariBattle.text(`${SafariBattle.enemy.name} has fled.`);
            setTimeout(SafariBattle.endBattle, 1000);
        }
        else if (SafariBattle.enemy.eating > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is eating..`);
        }
        else if (SafariBattle.enemy.angry > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is angry!`);
        }
        else {
            SafariBattle.text(`${SafariBattle.enemy.name} is watching carefully...`);
        }
        SafariBattle.enemy.eating = Math.max(0, SafariBattle.enemy.eating - 1);
        SafariBattle.enemy.angry = Math.max(0, SafariBattle.enemy.angry - 1);
        setTimeout(() => {
            SafariBattle.text('What will you do?');
            SafariBattle.busy = false;
            SafariBattle.unlockButtons();
        }, 1500);
    }
    static lockButtons() {
        SafariBattle.disableButtons = true;
        $('#safariBattleModal .modal-footer button').attr('disabled', 'true');
    }
    static unlockButtons() {
        SafariBattle.disableButtons = false;
        $('#safariBattleModal .modal-footer button').attr('disabled', null);
    }
    static endBattle() {
        $('#safariBattleModal').one('hidden.bs.modal', () => {
            Safari.inBattle(false);
            SafariBattle.busy = false;
        }).modal('hide');
    }
    static gameOver() {
        SafariBattle.text(GameConstants.SAFARI_OUT_OF_BALLS);
        setTimeout(() => {
            Safari.inBattle(false);
            Safari.inProgress(false);
            SafariBattle.busy = false;
            $('#safariBattleModal').modal('hide');
            $('#safariModal').modal('hide');
        }, 2000);
    }
    static dropParticle(html, pos, target, time = 2, top, persistentParticle = false) {
        const p = $('<ptcl>').html(html).children().appendTo('#safariBattleModal');
        p.css('position', 'absolute');
        p.offset(pos);
        if (!top) {
            top = 'cubic-bezier(0.6, -0.3, 0.7, 0)';
        }
        p[0].style.transition = `left ${time}ms linear, top ${time}ms ${top}`;
        p.offset(target);
        if (!persistentParticle) {
            setTimeout(() => {
                p.fadeOut();
            }, time - 200);
            setTimeout(() => {
                p.remove();
            }, time);
        }
        return p;
    }
}
SafariBattle._enemy = ko.observable();
SafariBattle.busy = false;
SafariBattle.text = ko.observable('What will you do?');
SafariBattle.escapeAttempts = 0;
SafariBattle.disableButtons = false;
SafariBattle.startRoll = function (n) {
    if (n == 4) {
        n--;
    }
    $('#safariBall').addClass('safari-roll-left');
    setTimeout(() => {
        SafariBattle.safariRoll(n - 1);
    }, 1200);
};
SafariBattle.safariRoll = function (n) {
    if (n != 0) {
        $('#safariBall').toggleClass('safari-roll-left').toggleClass('safari-roll-right');
        setTimeout(() => {
            SafariBattle.safariRoll(n - 1);
        }, 1200);
    }
};
(function (SafariBattle) {
    SafariBattle.Speed = {
        animation: 1000,
        ballThrow: 750,
        ballBounce: 850,
        ballRoll: 700,
        enemyTransition: 1000,
    };
    SafariBattle.CATCH_MESSAGES = [
        'Oh, no!<br>The Pokémon broke free!',
        'Aww! It appeared to be caught!',
        'Aargh! Almost had it!',
        'Shoot! It was so close, too!',
    ];
})(SafariBattle || (SafariBattle = {}));
class SafariBody {
    constructor() {
    }
    getTileNeighbours(x, y) {
        const ret = Array(4); //["N", "E", "S", "W"]
        const cross = Array(4); //["NE", "SE", "SW", "NW"]
        if (x === 0) {
            ret[3] = false;
        }
        else {
            ret[3] = this.grid[y][x - 1] !== 0;
        }
        if (y === 0) {
            ret[0] = false;
        }
        else {
            ret[0] = this.grid[y - 1][x] !== 0;
        }
        if (x === this.grid[0].length - 1) {
            ret[1] = false;
        }
        else {
            ret[1] = this.grid[y][x + 1] !== 0;
        }
        if (y === this.grid.length - 1) {
            ret[2] = false;
        }
        else {
            ret[2] = this.grid[y + 1][x] !== 0 && this.grid[y + 1][x] !== undefined;
        }
        if (ret.equals([true, true, true, true])) {
            cross[0] = this.grid[y - 1][x + 1] !== 0;
            cross[1] = this.grid[y + 1][x + 1] !== 0;
            cross[2] = this.grid[y + 1][x - 1] !== 0;
            cross[3] = this.grid[y - 1][x - 1] !== 0;
        }
        return {
            plus: ret,
            cross: cross,
        };
    }
    //duplicated in DungeonMap
    static shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Math.floor(Math.random() * i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
    maxY() {
        return this.grid.length;
    }
    maxX() {
        let max = 0;
        for (const row of this.grid) {
            if (row.length > max) {
                max = row.length;
            }
        }
        return max;
    }
}
class SandBody extends SafariBody {
    constructor(x = SandBody.randomInt(), y = SandBody.randomInt(), type = 'sand') {
        super();
        this.edgeDetectCheck = 15;
        this.type = type;
        this.grid = this.generateCube(x, y);
        this.edgeDetect();
    }
    static randomInt() {
        return Math.floor(Math.random() * 3) + 3;
    }
    generateCube(sizeX, sizeY) {
        let body = [];
        for (let i = 0; i < sizeY; i++) {
            const row = [...Array(sizeX)].map(Number.prototype.valueOf, 0);
            body.push(row);
        }
        const amount = this.type === 'fence' ? 20 : 4;
        for (let i = 0; i < amount; i++) {
            const x = Math.floor(Math.random() * (sizeX - 2));
            const y = Math.floor(Math.random() * (sizeY - 2));
            body = SandBody.addCube(x, y, body);
        }
        return body;
    }
    static addCube(x, y, body) {
        if (Math.random() >= 0.5) {
            body[y + 2][x] = 15;
            body[y + 2][x + 1] = 15;
            body[y][x + 2] = 15;
            body[y + 1][x + 2] = 15;
            body[y + 2][x + 2] = 15;
        }
        body[y][x] = 15;
        body[y + 1][x] = 15;
        body[y][x + 1] = 15;
        body[y + 1][x + 1] = 15;
        return body;
    }
    edgeDetect() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[i].length; j++) {
                if (this.grid[i][j] === this.edgeDetectCheck) {
                    this.grid[i][j] = this.getNumber(this.getTileNeighbours(j, i));
                }
            }
        }
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 11;
        }
        if (plus.equals([false, true, true, true])) {
            return 12;
        }
        if (plus.equals([false, false, true, true])) {
            return 13;
        }
        if (plus.equals([true, true, true, false])) {
            return 14;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 21;
            }
            if (!cross[1]) {
                return 22;
            }
            if (!cross[2]) {
                return 23;
            }
            if (!cross[3]) {
                return 24;
            }
            return 15;
        }
        if (plus.equals([true, false, true, true])) {
            return 16;
        }
        if (plus.equals([true, true, false, false])) {
            return 17;
        }
        if (plus.equals([true, true, false, true])) {
            return 18;
        }
        if (plus.equals([true, false, false, true])) {
            return 19;
        }
        return 10;
    }
}
class FenceBody extends SandBody {
    constructor() {
        super(7, 7, 'fence');
        this.edgeDetectCheck = 0;
        this.openFence();
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 25;
        }
        if (plus.equals([false, true, true, true])) {
            return 26;
        }
        if (plus.equals([false, false, true, true])) {
            return 27;
        }
        if (plus.equals([true, true, true, false])) {
            return 28;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 33;
            }
            if (!cross[1]) {
                return 34;
            }
            if (!cross[2]) {
                return 35;
            }
            if (!cross[3]) {
                return 36;
            }
            return 10;
        }
        if (plus.equals([true, false, true, true])) {
            return 29;
        }
        if (plus.equals([true, true, false, false])) {
            return 30;
        }
        if (plus.equals([true, true, false, true])) {
            return 31;
        }
        if (plus.equals([true, false, false, true])) {
            return 32;
        }
        return 10;
    }
    openFence() {
        const options = [26, 28, 29, 31];
        const pick = options[Math.floor(Math.random() * options.length)];
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === pick) {
                    this.grid[i][j] = 0;
                }
            }
        }
    }
}
class WaterBody extends SafariBody {
    constructor() {
        super();
        const x = Math.floor(Math.random() * 3) + 3;
        const y = Math.floor(Math.random() * 3) + 3;
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (i === 0) {
                    if (j === 0) {
                        row.push(1);
                    }
                    else if (j < x - 1) {
                        row.push(2);
                    }
                    else if (j === x - 1) {
                        row.push(3);
                    }
                }
                else if (i < y - 1) {
                    if (j === 0) {
                        row.push(4);
                    }
                    else if (j < x - 1) {
                        row.push(5);
                    }
                    else if (j === x - 1) {
                        row.push(6);
                    }
                }
                else if (i === y - 1) {
                    if (j === 0) {
                        row.push(7);
                    }
                    else if (j < x - 1) {
                        row.push(8);
                    }
                    else if (j === x - 1) {
                        row.push(9);
                    }
                }
            }
            body.push(row);
        }
        this.grid = body;
        this.type = 'water';
    }
}
class GrassBody extends SafariBody {
    constructor() {
        super();
        const x = Math.floor(Math.random() * 3) + 4;
        const y = Math.floor(Math.random() * 3) + 4;
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (j < x * 2 / 3 - 1) {
                    row.push(10);
                }
                else {
                    row.push(0);
                }
            }
            SafariBody.shuffle(row);
            body.push(row);
        }
        this.grid = body;
        this.fillHoles();
        this.type = 'grass';
    }
    fillHoles() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (i !== 0 && i !== this.grid.length - 1) {
                        if (this.grid[i - 1][j] === 10 && this.grid[i + 1][j] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (j !== 0 && j !== this.grid[0].length - 1) {
                        if (this.grid[i][j - 1] === 10 && this.grid[i][j + 1] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
    }
}
class TreeBody extends SafariBody {
    constructor() {
        super();
        this.grid = [[37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48]];
        this.type = 'tree';
    }
}
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array) {
        return false;
    }
    // compare lengths - can save a lot of time
    if (this.length != array.length) {
        return false;
    }
    for (let i = 0, l = this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i])) {
                return false;
            }
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
class SafariPokemon {
    constructor(name) {
        // Used for overworld sprites
        this.x = 0;
        this.y = 0;
        this.steps = 0;
        const data = PokemonHelper.getPokemonByName(name);
        this.name = data.name;
        this.id = data.id;
        this.type1 = data.type1;
        this.type2 = data.type2;
        this.shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SAFARI);
        GameHelper.incrementObservable(App.game.statistics.pokemonEncountered[this.id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonEncountered);
        if (this.shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonEncountered[this.id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonEncountered);
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'safari encounter', Math.floor(App.game.statistics.totalPokemonEncountered() / App.game.statistics.totalShinyPokemonEncountered()));
        }
        this.baseCatchFactor = data.catchRate * 1 / 6;
        this.baseEscapeFactor = 30;
        this._angry = ko.observable(0);
        this._eating = ko.observable(0);
        this._eatingBait = ko.observable(BaitType.Bait);
    }
    static listWeight() {
        return SafariPokemon.list.reduce((sum, pokemon) => {
            // double the chance if pokemon has not been captured yet
            return sum += this.calcPokemonWeight(pokemon);
        }, 0);
    }
    static calcPokemonWeight(pokemon) {
        return pokemon.weight * (App.game.party.alreadyCaughtPokemonByName(pokemon.name) ? 1 : 2);
    }
    get catchFactor() {
        const oakBonus = App.game.oakItems.calculateBonus(OakItems.OakItem.Magic_Ball);
        let catchF = this.baseCatchFactor + oakBonus;
        if (this.eating > 0) {
            catchF /= 2;
        }
        if (this.angry > 0) {
            catchF *= 2;
        }
        if (this.eatingBait === BaitType.Nanab) {
            catchF *= 1.5;
        }
        return Math.min(100, catchF);
    }
    get escapeFactor() {
        let escapeF = this.baseEscapeFactor;
        if (this.eating > 0) {
            escapeF /= 4;
        }
        if (this.angry > 0) {
            escapeF *= 2;
        }
        if (this.eatingBait === BaitType.Razz) {
            escapeF /= 1.5;
        }
        return escapeF;
    }
    get angry() {
        return this._angry();
    }
    set angry(value) {
        this._angry(value);
    }
    get eating() {
        return this._eating();
    }
    set eating(value) {
        this._eating(value);
    }
    get eatingBait() {
        return this._eatingBait();
    }
    set eatingBait(value) {
        this._eatingBait(value);
    }
    static random() {
        const rand = Math.random() * SafariPokemon.listWeight();
        let i = 0;
        const pokemon = SafariPokemon.list.find(p => (i += this.calcPokemonWeight(p)) && rand < i);
        return new SafariPokemon(pokemon.name);
    }
}
// Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
SafariPokemon.list = [
    { name: 'Nidoran(F)', weight: 15 },
    { name: 'Nidorina', weight: 10 },
    { name: 'Nidoran(M)', weight: 25 },
    { name: 'Nidorino', weight: 10 },
    { name: 'Exeggcute', weight: 20 },
    { name: 'Paras', weight: 5 },
    { name: 'Parasect', weight: 15 },
    { name: 'Rhyhorn', weight: 10 },
    { name: 'Chansey', weight: 4 },
    { name: 'Scyther', weight: 4 },
    { name: 'Pinsir', weight: 4 },
    { name: 'Kangaskhan', weight: 15 },
    { name: 'Tauros', weight: 10 },
    { name: 'Cubone', weight: 10 },
    { name: 'Marowak', weight: 5 },
    { name: 'Tangela', weight: 4 },
];
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class Shards {
    constructor() {
        this.name = 'Shards';
        this.saveKey = 'shards';
        this.defaults = {
            'shardWallet': Array(Shards.nTypes).fill(0),
            'shardUpgrades': Array(Shards.nTypes * Shards.nEffects).fill(0),
        };
        this.validUpgrades = {};
        this.shardWallet = this.defaults.shardWallet.map((v) => ko.observable(v));
        this.shardUpgrades = this.defaults.shardUpgrades.map((v) => ko.observable(v));
        GameHelper.enumNumbers(PokemonType).map(type => {
            var _a, _b, _c, _d;
            this.validUpgrades[type] = {};
            this.validUpgrades[type][GameConstants.TypeEffectiveness.Immune] = !!((_a = TypeHelper.typeMatrix[type]) === null || _a === void 0 ? void 0 : _a.includes(GameConstants.TypeEffectivenessValue.Immune));
            this.validUpgrades[type][GameConstants.TypeEffectiveness.NotVery] = !!((_b = TypeHelper.typeMatrix[type]) === null || _b === void 0 ? void 0 : _b.includes(GameConstants.TypeEffectivenessValue.NotVery));
            this.validUpgrades[type][GameConstants.TypeEffectiveness.Normal] = !!((_c = TypeHelper.typeMatrix[type]) === null || _c === void 0 ? void 0 : _c.includes(GameConstants.TypeEffectivenessValue.Normal));
            this.validUpgrades[type][GameConstants.TypeEffectiveness.Very] = !!((_d = TypeHelper.typeMatrix[type]) === null || _d === void 0 ? void 0 : _d.includes(GameConstants.TypeEffectivenessValue.Very));
        });
    }
    gainShards(amt, typeNum) {
        if (!this.canAccess()) {
            return;
        }
        if (typeNum == PokemonType.None) {
            return;
        }
        GameHelper.incrementObservable(this.shardWallet[typeNum], amt);
        if (amt > 0) {
            GameHelper.incrementObservable(App.game.statistics.totalShardsGained, amt);
            GameHelper.incrementObservable(App.game.statistics.shardsGained[typeNum], amt);
        }
    }
    getShardUpgradeCost(typeNum, effectNum) {
        const cost = (this.getShardUpgrade(typeNum, effectNum) + 1) * Shards.SHARD_UPGRADE_COST;
        return cost;
    }
    hasMaxUpgrade(typeNum, effectNum) {
        return this.getShardUpgrade(typeNum, effectNum) >= Shards.MAX_SHARD_UPGRADES;
    }
    canBuyShardUpgrade(typeNum, effectNum) {
        if (App.game.challenges.list.disableShards.active()) {
            return false;
        }
        const lessThanMax = !this.hasMaxUpgrade(typeNum, effectNum);
        const hasEnoughShards = this.shardWallet[typeNum]() >= this.getShardUpgradeCost(typeNum, effectNum);
        return lessThanMax && hasEnoughShards;
    }
    buyShardUpgrade(typeNum, effectNum) {
        if (this.canBuyShardUpgrade(typeNum, effectNum)) {
            this.gainShards(-this.getShardUpgradeCost(typeNum, effectNum), typeNum);
            GameHelper.incrementObservable(this.shardUpgrades[typeNum * Shards.nEffects + effectNum]);
        }
    }
    isValidUpgrade(typeNum, effectNum) {
        var _a;
        return !!((_a = this.validUpgrades[typeNum]) === null || _a === void 0 ? void 0 : _a[effectNum]);
    }
    getShardUpgrade(typeNum, effectNum) {
        return this.shardUpgrades[typeNum * Shards.nEffects + effectNum]();
    }
    initialize() {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Shard_case);
    }
    update(delta) {
    }
    toJSON() {
        return {
            'shardWallet': this.shardWallet.map(ko.unwrap),
            'shardUpgrades': this.shardUpgrades.map(ko.unwrap),
        };
    }
    fromJSON(json) {
        if (json != null) {
            json['shardWallet'].forEach((v, i) => {
                this.shardWallet[i](v);
            });
            json['shardUpgrades'].forEach((v, i) => {
                this.shardUpgrades[i](v);
            });
        }
    }
    static image(type) {
        return `assets/images/shards/${PokemonType[type]} Shard.png`;
    }
    openShardModal() {
        if (this.canAccess()) {
            $('#shardModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You do not have the Shard Case',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
}
Shards.nTypes = GameHelper.enumLength(PokemonType) - 1;
Shards.nEffects = GameHelper.enumLength(GameConstants.TypeEffectiveness);
(function (Shards) {
    Shards.SHARD_UPGRADE_COST = 500;
    Shards.SHARD_UPGRADE_STEP = 0.1;
    Shards.MAX_SHARD_UPGRADES = 10;
})(Shards || (Shards = {}));
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class SpecialEvents {
    constructor() {
        this.name = 'Events';
        this.saveKey = 'events';
    }
    static newEvent(title, description, startTime, startFunction, endTime, endFunction) {
        // Check if the event exist before adding it again
        if (!SpecialEvents.events.find(event => event.title == title)) {
            SpecialEvents.events.push(new SpecialEvent(title, description, startTime, startFunction, endTime, endFunction));
        }
    }
    initialize() { }
    fromJSON(json) {
        if (!json) {
            return;
        }
    }
    toJSON() {
        return {
        // no data to save yet
        };
    }
    canAccess() {
        return true;
    }
    update(delta) { } // This method intentionally left blank
}
SpecialEvents.events = [];
// TODO: Fetch events from a server each 1/2/3/6/12/24 hours?
// Create our events here for now
/*
 *  ONE TIME/TEMP EVENTS
 */
/*
 *  YEARLY EVENTS
 */
// First Event
SpecialEvents.newEvent('Flying Pikachu', 'Encounter Flying Pikachu for a limited time roaming Kanto.', 
// Start
new Date(new Date().getFullYear(), 6, 6, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon('Flying Pikachu'));
}, 
// End
new Date(new Date().getFullYear(), 6, 12, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.kanto, 'Flying Pikachu');
});
// Pokemon the first movie release date
SpecialEvents.newEvent('Mewtwo strikes back!', 'Encounter Armored Mewtwo for a limited time in Cerulean Cave.<br/>Encounter clone Pokémon roaming in Kanto.', 
// Start
new Date(new Date().getFullYear(), 6, 18, 1), () => {
    dungeonList['Cerulean Cave'].bossList.push(new DungeonBossPokemon('Armored Mewtwo', 1000000, 80));
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon('Bulbasaur (clone)'));
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon('Charmander (clone)'));
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon('Squirtle (clone)'));
}, 
// End
new Date(new Date().getFullYear(), 6, 24, 23), () => {
    dungeonList['Cerulean Cave'].bossList = dungeonList['Cerulean Cave'].bossList.filter(boss => boss.name != 'Armored Mewtwo');
    RoamingPokemonList.list[GameConstants.Region.kanto] = RoamingPokemonList.list[GameConstants.Region.kanto].filter(r => !['Bulbasaur (clone)', 'Charmander (clone)', 'Squirtle (clone)'].includes(r.pokemon.name));
});
// Halloween
SpecialEvents.newEvent('Halloween!', 'Encounter Spooky Pokémon for a limited time around Kanto, Johto and Hoenn.', 
// Start
new Date(new Date().getFullYear(), 9, 30, 1), () => {
    SeededRand.seed(new Date().getFullYear());
    Routes.getRoutesByRegion(GameConstants.Region.kanto).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Spooky Bulbasaur') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Gastly') : null;
    });
    Routes.getRoutesByRegion(GameConstants.Region.johto).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Spooky Togepi') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Misdreavus') : null;
    });
    Routes.getRoutesByRegion(GameConstants.Region.hoenn).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Pikachu (Gengar)') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Shuppet') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Duskull') : null;
    });
}, 
// End
new Date(new Date().getFullYear(), 10, 5, 23), () => {
    Routes.getRoutesByRegion(GameConstants.Region.kanto).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Spooky Bulbasaur', 'Gastly'].includes(p)));
    Routes.getRoutesByRegion(GameConstants.Region.johto).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Spooky Togepi', 'Misdreavus'].includes(p)));
    Routes.getRoutesByRegion(GameConstants.Region.hoenn).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Pikachu (Gengar)', 'Shuppet', 'Duskull'].includes(p)));
});
// Let's Go P/E release date
SpecialEvents.newEvent('Let\'s GO!', 'Encounter special Eevee and Pikachu roaming in the Kanto region.', 
// Start
new Date(new Date().getFullYear(), 10, 16, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon('Let\'s Go Pikachu'));
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon('Let\'s Go Eevee'));
}, 
// End
new Date(new Date().getFullYear(), 10, 23, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.kanto, 'Let\'s Go Pikachu');
    RoamingPokemonList.remove(GameConstants.Region.kanto, 'Let\'s Go Eevee');
});
// Christmas
SpecialEvents.newEvent('Merry Christmas!', 'Encounter Santa Snorlax for a limited time roaming around Kanto, Johto and Hoenn.', 
// Start
new Date(new Date().getFullYear(), 11, 24, 1), () => {
    // Add to every region excluding None
    GameHelper.enumNumbers(GameConstants.Region).filter(i => i != GameConstants.Region.none).forEach(region => {
        RoamingPokemonList.add(region, new RoamingPokemon('Santa Snorlax'));
    });
}, 
// End
new Date(new Date().getFullYear(), 11, 30, 23), () => {
    // Remove from every region excluding None
    GameHelper.enumNumbers(GameConstants.Region).filter(i => i != GameConstants.Region.none).forEach(region => {
        RoamingPokemonList.remove(region, 'Santa Snorlax');
    });
});
class NPC {
    constructor(name, dialog, options = {}) {
        this.name = name;
        this.dialog = dialog;
        this.options = options;
    }
    get dialogHTML() {
        return this.dialog.map(line => `<p>${line}</p>`).join('\n');
    }
    isVisible() {
        var _a, _b;
        return (_b = (_a = this.options.requirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    openDialog() {
        $('#npc-modal .npc-name').text(this.name);
        $('#npc-modal .npc-dialog').html(this.dialogHTML);
        if (this.options.image) {
            $('#npc-modal .npc-image').attr('src', this.options.image);
            $('#npc-modal .npc-image').show();
        }
        else {
            $('#npc-modal .npc-image').hide();
        }
        $('#npc-modal').modal();
        return;
    }
}
///<reference path="./NPC.ts"/>
class KantoBerryMasterNPC extends NPC {
    constructor(name, dialog) {
        super(name, dialog);
        this.name = name;
        this.dialog = dialog;
    }
    get dialogHTML() {
        // Before the player has unlocked the farm
        if (!App.game.farming.canAccess()) {
            return super.dialogHTML;
        }
        // After the farm is unlocked
        return `<p>${KantoBerryMasterNPC.generateMessage(new Date())}</p>`;
    }
    static generateMessage(date) {
        if (App.game.farming.unlockedBerries.every(berry => berry())) {
            return 'The disciple has surpassed the master. I have nothing more to teach you.';
        }
        const possibleMutations = App.game.farming.mutations.filter((mut) => mut.unlocked && mut.showHint && !App.game.farming.unlockedBerries[mut.mutatedBerry]());
        if (possibleMutations.length === 0) {
            return 'It seems as though you have hit a roadblock in your Berry progress. Focus on other areas before returning..';
        }
        SeededRand.seedWithDate(date);
        possibleMutations.forEach(b => SeededRand.boolean());
        const mutationToShow = SeededRand.fromArray(possibleMutations);
        mutationToShow.hintSeen = true;
        if (mutationToShow instanceof EnigmaMutation) {
            if (App.game.discord.ID !== null) {
                mutationToShow.hintsSeen[mutationToShow.hintIndex](true);
            }
            return mutationToShow.partialHint;
        }
        return mutationToShow.hint;
    }
}
class ProfOakNPC extends NPC {
    constructor(name, dialog) {
        super(name, dialog, { image: 'assets/images/oak.png' });
        this.name = name;
        this.dialog = dialog;
    }
    get dialogHTML() {
        const uniquePokemonCaught = new Set(App.game.party.caughtPokemon.filter(p => p.id > 0).map(p => Math.floor(p.id))).size;
        if (uniquePokemonCaught >= GameConstants.TotalPokemonsPerRegion[GameConstants.Region.unova]) {
            return `<p>Let me see your progress...Ah, fantastic, as usual!</p>
                    <p>Allow me some time to arrange tickets for your next destination.</p>`;
        }
        if (uniquePokemonCaught >= GameConstants.TotalPokemonsPerRegion[GameConstants.Region.sinnoh]) {
            return `<p>Congratulations, you're more than half-way completed on the national Pokédex!</p>
                    <p>Next stop is Unova! I've always wanted to visit Castelia City personally...</p>`;
        }
        if (uniquePokemonCaught >= GameConstants.TotalPokemonsPerRegion[GameConstants.Region.hoenn]) {
            return `<p>That's another regional Pokédex completed! Fantastic.</p>
                    <p>I really appreciate being able to see your outstanding progress, thank you!</p>`;
        }
        if (uniquePokemonCaught >= GameConstants.TotalPokemonsPerRegion[GameConstants.Region.johto]) {
            return `<p>Oh, another regional Pokédex completed so soon?</p>
                    <p>Amazing! Next stop is Hoenn, enjoy the sunshine while you're there!</p>`;
        }
        if (uniquePokemonCaught >= GameConstants.TotalPokemonsPerRegion[GameConstants.Region.kanto]) {
            return `<p>Congratulations on completing your Kanto Pokédex!</p>
                    <p>Your journey isn't over yet, a whole world awaits you! Onwards to Johto!</p>`;
        }
        if (App.game.badgeCase.badgeCount() >= 13) {
            return `<p>Hello, new Champion, you've come a long way!</p>
                    <p>If you complete your Pokédex I can arrange for you to travel to Johto!</p>`;
        }
        //Else, it does the default message.
        return super.dialogHTML;
    }
}
class RoamerNPC extends NPC {
    constructor(name, dialog, region) {
        super(name, dialog);
        this.name = name;
        this.dialog = dialog;
        this.region = region;
    }
    get dialogHTML() {
        var _a;
        const route = RoamingPokemonList.getIncreasedChanceRouteByRegion(this.region);
        const roamers = RoamingPokemonList.getRegionalRoamers(this.region);
        // If no roaming Pokemon yet
        if (!roamers.length) {
            return `There hasn't been any reports of roaming Pokémon around ${GameConstants.camelCaseToString(GameConstants.Region[this.region])} lately..`;
        }
        const roamersHTML = roamers.map(r => `<img width="64px" src="assets/images/pokemon/${r.pokemon.id}.png" />`).join('');
        return super.dialogHTML.replace(/{ROUTE_NAME}/g, (_a = route()) === null || _a === void 0 ? void 0 : _a.routeName) + roamersHTML;
    }
}
/* eslint-disable array-bracket-newline */
///<reference path="../achievements/GymBadgeRequirement.ts"/>
///<reference path="../achievements/OneFromManyRequirement.ts"/>
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="NPC.ts"/>
///<reference path="KantoBerryMasterNPC.ts"/>
///<reference path="ProfOakNPC.ts"/>
///<reference path="RoamerNPC.ts"/>
class Town {
    constructor(name, region, 
    // Optional arguments are in a named object, so that we don't need
    // to pass undefined to get to the one we want
    optional = {}) {
        this.name = name;
        this.region = region;
        this.gym = gymList[name];
        this.requirements = optional.requirements || [];
        this.shop = optional.shop;
        this.berryMaster = optional.berryMaster;
        this.dungeon = optional.dungeon;
        this.npcs = optional.npcs;
        this.startingTown = GameConstants.StartingTowns.includes(this.name);
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
}
class DungeonTown extends Town {
    constructor(name, region, requirements = []) {
        super(name, region, { requirements, dungeon: dungeonList[name] });
    }
}
const TownList = {};
const pokeMartShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Item_magnet'],
    ItemList['Token_collector'],
    ItemList['Lucky_incense'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
], 'Poké Mart');
//Kanto Shops
const PewterCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Token_collector'],
    ItemList['Lucky_egg'],
    ItemList['Mystery_egg'],
]);
const CeruleanCityShop = new Shop([
    ItemList['Water_stone'],
    ItemList['xAttack'],
    ItemList['Water_egg'],
]);
const VermilionCityShop = new Shop([
    ItemList['Thunder_stone'],
    ItemList['Lucky_egg'],
    ItemList['Electric_egg'],
]);
const CeladonCityShop = new Shop([
    ItemList['Eevee'],
    ItemList['Porygon'],
    ItemList['Jynx'],
    ItemList['Mr. Mime'],
    ItemList['Lickitung'],
]);
const SaffronCityShop = new Shop([
    ItemList['Moon_stone'],
    ItemList['xClick'],
    ItemList['Leaf_stone'],
    ItemList['Fighting_egg'],
]);
const FuchsiaCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Trade_stone'],
    ItemList['Lucky_egg'],
    ItemList['Dragon_egg'],
]);
const CinnabarIslandShop = new Shop([
    ItemList['Fire_stone'],
    ItemList['Fire_egg'],
    ItemList['SmallRestore'],
    ItemList['Explorer_kit'],
    ItemList['Explosive_Charge'],
    ItemList['Treasure_Scanner'],
]);
const ViridianCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Dungeon_ticket'],
]);
const LavenderTownShop = new Shop([
    ItemList['Greatball'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
    ItemList['Grass_egg'],
]);
// Kanto NPCs
const ViridianCityOldMan = new NPC('Old Man', [
    'Ahh, I\'ve had my coffee now and I feel great!',
    'You can use the Pokéball Selector to select which type of Pokéball to use on specific Pokémon based on caught status.',
]);
const CinnabarIslandResearcher = new NPC('Researcher', [
    'They were trying to clone an ancient Pokémon in the mansion, I wonder if they succeeded.',
    'Apparently the ancient Pokémon escaped, And can be found roaming around Kanto!',
]);
const BigSpender = new NPC('Big Spender', [
    'I love shopping! When I come in, the cashiers know I want tons of items.',
    'You can use the Shop Amount Button settings to make it easy for big purchases, too!',
]);
const KantoBerryMaster = new KantoBerryMasterNPC('Berry Master', [
    'Bah! You younglings have no appreciation of the art of Berry farming!',
    'Come back when you are ready to learn!',
]);
const ProfOak = new ProfOakNPC('Prof. Oak', [
    'Good luck on your journey!',
    'Come visit me when you complete your Pokédex!',
]);
const BattleItemRival = new NPC('Battle Item Master', [
    'Hey kid, you look new! Let me offer some advice, Battle Items like xAttack can be acquired along Routes, inside Dungeons and in Shops!',
    'Use them to help you out whenever you feel like time is against you!',
]);
const BattleItemRival2 = new NPC('Battle Item Master', [
    'Do I know you? Wait... Have you met my worthless rival? Ha! Let me guess, he gave you some unwanted advice?',
    'I bet he forget to tell you that although all Battle Items only last for 30 seconds they can stack and last for days! Now scram!',
]);
const KantoRoamerNPC = new RoamerNPC('Youngster Wendy', [
    'There\'s been some recent sightings of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.kanto);
//Kanto Towns
TownList['Pewter City'] = new Town('Pewter City', GameConstants.Region.kanto, {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 2),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Viridian Forest')),
    ],
    shop: PewterCityShop,
    npcs: [BattleItemRival],
});
TownList['Cerulean City'] = new Town('Cerulean City', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)],
    shop: CeruleanCityShop,
    dungeon: dungeonList['Cerulean Cave'],
    npcs: [KantoBerryMaster],
});
TownList['Vermilion City'] = new Town('Vermilion City', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)],
    shop: VermilionCityShop,
});
TownList['Celadon City'] = new Town('Celadon City', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 7)],
    shop: CeladonCityShop,
    npcs: [BigSpender],
});
TownList['Saffron City'] = new Town('Saffron City', GameConstants.Region.kanto, {
    requirements: [new GymBadgeRequirement(BadgeEnums.Rainbow)],
    shop: SaffronCityShop,
    npcs: [BattleItemRival2],
});
TownList['Fuchsia City'] = new Town('Fuchsia City', GameConstants.Region.kanto, {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
            new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
        ])],
    shop: FuchsiaCityShop,
    npcs: [KantoRoamerNPC],
});
TownList['Cinnabar Island'] = new Town('Cinnabar Island', GameConstants.Region.kanto, {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.kanto, 20),
            new RouteKillRequirement(10, GameConstants.Region.kanto, 21),
        ])],
    shop: CinnabarIslandShop,
    dungeon: dungeonList['Pokemon Mansion'],
    npcs: [CinnabarIslandResearcher],
});
TownList['Viridian City'] = new Town('Viridian City', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 1)],
    shop: ViridianCityShop,
    npcs: [ViridianCityOldMan],
});
TownList['Pallet Town'] = new Town('Pallet Town', GameConstants.Region.kanto, {
    npcs: [ProfOak],
});
TownList['Lavender Town'] = new Town('Lavender Town', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 10)],
    shop: LavenderTownShop,
    dungeon: dungeonList['Pokemon Tower'],
});
//Kanto Dungeons
TownList['Viridian Forest'] = new DungeonTown('Viridian Forest', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 2)]);
TownList['Mt. Moon'] = new DungeonTown('Mt. Moon', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 3)]);
TownList['Digletts Cave'] = new DungeonTown('Digletts Cave', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)]);
TownList['Rock Tunnel'] = new DungeonTown('Rock Tunnel', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 9),
    new GymBadgeRequirement(BadgeEnums.Cascade),
]);
TownList['Power Plant'] = new DungeonTown('Power Plant', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 9),
    new GymBadgeRequirement(BadgeEnums.Soul),
]);
TownList['Pokemon Tower'] = new DungeonTown('Pokemon Tower', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 10),
    new GymBadgeRequirement(BadgeEnums.Rainbow),
]);
TownList['Seafoam Islands'] = new DungeonTown('Seafoam Islands', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 19)]);
TownList['Pokemon Mansion'] = new DungeonTown('Pokemon Mansion', GameConstants.Region.kanto, [new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 20),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 21),
    ])]);
TownList['Victory Road'] = new DungeonTown('Victory Road', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 23)]);
TownList['Cerulean Cave'] = new DungeonTown('Cerulean Cave', GameConstants.Region.kanto, [new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion)]);
//Johto Shops
const NewBarkTownShop = new Shop([
    ItemList['Pokeball'],
]);
const CherrygroveCityShop = new Shop([
    ItemList['Greatball'],
]);
const VioletCityShop = new Shop([
    ItemList['MediumRestore'],
    ItemList['Togepi'],
    ItemList['Mystery_egg'],
]);
const AzaleaTownShop = new Shop([
    ItemList['Kings_rock'],
    ItemList['Grass_egg'],
]);
const GoldenrodCityShop = new Shop([
    ItemList['Sun_stone'],
    ItemList['Upgrade'],
    ItemList['Soothe_bell'],
]);
const EcruteakCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Fire_egg'],
]);
const OlivineCityShop = new Shop([
    ItemList['Metal_coat'],
    ItemList['Water_egg'],
    ItemList['Electric_egg'],
]);
const CianwoodCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Fighting_egg'],
]);
const MahoganyTownShop = new Shop([
    ItemList['Fighting_egg'],
]);
const BlackthornCityShop = new Shop([
    ItemList['LargeRestore'],
    ItemList['Dragon_scale'],
]);
// Johto NPCs
const JohtoBerryMaster = new Shop([
    ItemList['Boost_Mulch'],
    ItemList['Rich_Mulch'],
    ItemList['Surprise_Mulch'],
    ItemList['Amaze_Mulch'],
    ItemList['Berry_Shovel'],
    ItemList['Squirtbottle'],
]);
const CherrygroveMrPokemon = new NPC('Mr Pokémon', [
    'Welcome to Johto! This is where the first ever Pokémon egg was found long ago.',
    'Astounding breakthroughs have been made since then. We can now store Pokémon eggs for longer and queue them up for breeding.',
    'This new technology only allows up to four stored eggs, for now.',
]);
const AzaleaOldMan = new NPC('Wise Old Man', [
    'There is an old tale about the Guardian of Ilex Forest.',
    'It says that the mythical Pokémon Celebi will appear before anyone who has proven they are a Champion Pokémon Trainer.',
]);
const EcruteakKimonoGirl = new NPC('Kimono Girl', [
    'Legends say that Ho-Oh is searching for a trainer of pure heart.',
    'To prove yourself, you must tame the three legendary beasts of Johto, and bring them to the nearby Tin Tower.',
]);
const JohtoRoamerNPC = new RoamerNPC('Pokéfan Trevor', [
    'On the news they are getting more reports of roaming Pokémon appearing on {ROUTE_NAME}!',
], GameConstants.Region.johto);
//Johto Towns
TownList['New Bark Town'] = new Town('New Bark Town', GameConstants.Region.johto, {
    shop: NewBarkTownShop,
});
TownList['Cherrygrove City'] = new Town('Cherrygrove City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 29)],
    shop: CherrygroveCityShop,
    npcs: [CherrygroveMrPokemon],
});
TownList['Violet City'] = new Town('Violet City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 31)],
    shop: VioletCityShop,
    dungeon: dungeonList['Sprout Tower'],
});
TownList['Azalea Town'] = new Town('Azalea Town', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 33)],
    shop: AzaleaTownShop,
    dungeon: dungeonList['Slowpoke Well'],
    npcs: [AzaleaOldMan],
});
TownList['Goldenrod City'] = new Town('Goldenrod City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 34)],
    shop: GoldenrodCityShop,
    berryMaster: JohtoBerryMaster,
    npcs: [BigSpender],
});
TownList['Ecruteak City'] = new Town('Ecruteak City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 37)],
    shop: EcruteakCityShop,
    npcs: [EcruteakKimonoGirl],
});
TownList['Olivine City'] = new Town('Olivine City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 39)],
    shop: OlivineCityShop,
});
TownList['Cianwood City'] = new Town('Cianwood City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 41)],
    shop: CianwoodCityShop,
});
TownList['Mahogany Town'] = new Town('Mahogany Town', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 42)],
    shop: MahoganyTownShop,
});
TownList['Blackthorn City'] = new Town('Blackthorn City', GameConstants.Region.johto, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))],
    shop: BlackthornCityShop,
    npcs: [JohtoRoamerNPC],
});
//Johto Dungeons
TownList['Sprout Tower'] = new DungeonTown('Sprout Tower', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 31)]);
TownList['Ruins of Alph'] = new DungeonTown('Ruins of Alph', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 32)]);
TownList['Union Cave'] = new DungeonTown('Union Cave', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 32)]);
TownList['Slowpoke Well'] = new DungeonTown('Slowpoke Well', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 33)]);
TownList['Ilex Forest'] = new DungeonTown('Ilex Forest', GameConstants.Region.johto, [new GymBadgeRequirement(BadgeEnums.Hive)]);
TownList['Burned Tower'] = new DungeonTown('Burned Tower', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 37)]);
TownList['Tin Tower'] = new DungeonTown('Tin Tower', GameConstants.Region.johto, [
    new GymBadgeRequirement(BadgeEnums.Mineral),
    new GymBadgeRequirement(BadgeEnums.Glacier),
]);
TownList['Whirl Islands'] = new DungeonTown('Whirl Islands', GameConstants.Region.johto, [
    new GymBadgeRequirement(BadgeEnums.Mineral),
    new GymBadgeRequirement(BadgeEnums.Glacier),
]);
TownList['Mt Mortar'] = new DungeonTown('Mt Mortar', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 42)]);
TownList['Ice Path'] = new DungeonTown('Ice Path', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 44)]);
TownList['Dark Cave'] = new DungeonTown('Dark Cave', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 45)]);
TownList['Mt Silver'] = new DungeonTown('Mt Silver', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 28)]);
//Hoenn Shops
const LittleRootTownShop = new Shop([
    ItemList['Pokeball'],
]);
const RustboroCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const DewfordTownShop = new Shop([
    ItemList['Fighting_egg'],
]);
const SlateportCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Water_egg'],
]);
const MauvilleCityShop = new Shop([
    ItemList['Electric_egg'],
]);
const VerdanturfTownShop = new Shop([
    ItemList['Grass_egg'],
    ItemList['Soothe_bell'],
]);
const LavaridgeTownShop = new Shop([
    ItemList['Fire_egg'],
]);
const FallarborTownShop = new Shop([
    ItemList['Moon_stone'],
]);
const FortreeCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Leaf_stone'],
]);
const LilyCoveCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Token_collector'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
]);
const MossdeepCityShop = new Shop([
    ItemList['Beldum'],
    ItemList['Prism_scale'],
]);
const SootopolisCityShop = new Shop([
    ItemList['Water_stone'],
]);
const PacifidlogTownShop = new Shop([
    ItemList['Deepsea_tooth'],
    ItemList['Deepsea_scale'],
]);
const EverGrandeCityShop = new Shop([
    ItemList['Dragon_egg'],
]);
// TODO: finalize items and prices
const BattleFrontierShop = new Shop([
    new PokeballItem(GameConstants.Pokeball.Ultraball, 1, GameConstants.Currency.battlePoint),
    new PokeballItem(GameConstants.Pokeball.Masterball, 500, GameConstants.Currency.battlePoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.battlePoint]}` }),
    new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 10, GameConstants.Currency.battlePoint),
    new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 20, GameConstants.Currency.battlePoint),
    new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 40, GameConstants.Currency.battlePoint),
]);
//Hoenn Berry Master
const HoennBerryMaster = new Shop([
    ItemList['Boost_Mulch'],
    ItemList['Rich_Mulch'],
    ItemList['Surprise_Mulch'],
    ItemList['Amaze_Mulch'],
    ItemList['Berry_Shovel'],
    ItemList['Sprinklotad'],
]);
//Hoenn NPCs
const LittlerootAide = new NPC('Professor Birch\'s Aide', [
    'We have received word from Mr. Pokémon in Johto! He has made another breakthrough.',
    'You can now store an additional four eggs in the queue! His research has really gained speed.',
    'He wants you to know that he will have an additional eight slots ready by the time you reach Sinnoh.',
]);
const SootopolisWallace = new NPC('Gym Leader Wallace', [
    'The creators of the lands and ocean slumber within the Cave of Origin.',
    'However, they will only awaken when in the presence of a truly great trainer.',
    'You will have to overcome the Pokémon League before you have any chance to encounter them.',
]);
const Weatherman = new NPC('Weatherman', [
    'Castform is a very finnicky pokemon.',
    'It changes forms when the weather is drastically different.',
    'If you want to collect them all, wait for the weather to change.',
]);
const HoennRoamerNPC = new RoamerNPC('Reporter Gabby', [
    'Our sources indicate that roaming Pokémon are gathering on {ROUTE_NAME}!',
], GameConstants.Region.hoenn);
//Hoenn Towns
TownList['Littleroot Town'] = new Town('Littleroot Town', GameConstants.Region.hoenn, {
    shop: LittleRootTownShop,
    npcs: [LittlerootAide],
});
TownList['Oldale Town'] = new Town('Oldale Town', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)],
});
TownList['Petalburg City'] = new Town('Petalburg City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 102)],
});
TownList['Rustboro City'] = new Town('Rustboro City', GameConstants.Region.hoenn, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))],
    shop: RustboroCityShop,
});
TownList['Dewford Town'] = new Town('Dewford Town', GameConstants.Region.hoenn, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))],
    shop: DewfordTownShop,
});
TownList['Slateport City'] = new Town('Slateport City', GameConstants.Region.hoenn, {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave')),
        new GymBadgeRequirement(BadgeEnums.Knuckle),
    ],
    shop: SlateportCityShop,
    npcs: [HoennRoamerNPC],
});
TownList['Mauville City'] = new Town('Mauville City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 110)],
    shop: MauvilleCityShop,
    berryMaster: HoennBerryMaster,
});
TownList['Verdanturf Town'] = new Town('Verdanturf Town', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 117)],
    shop: VerdanturfTownShop,
});
TownList['Lavaridge Town'] = new Town('Lavaridge Town', GameConstants.Region.hoenn, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Jagged Pass'))],
    shop: LavaridgeTownShop,
});
TownList['Fallarbor Town'] = new Town('Fallarbor Town', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 113)],
    shop: FallarborTownShop,
});
TownList['Fortree City'] = new Town('Fortree City', GameConstants.Region.hoenn, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute'))],
    shop: FortreeCityShop,
    npcs: [Weatherman],
});
TownList['LilyCove City'] = new Town('LilyCove City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 121)],
    shop: LilyCoveCityShop,
    npcs: [BigSpender],
});
TownList['Mossdeep City'] = new Town('Mossdeep City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)],
    shop: MossdeepCityShop,
});
TownList['Sootopolis City'] = new Town('Sootopolis City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 126), new GymBadgeRequirement(BadgeEnums.Mind)],
    shop: SootopolisCityShop,
    npcs: [SootopolisWallace],
});
TownList['Ever Grande City'] = new Town('Ever Grande City', GameConstants.Region.hoenn, {
    requirements: [new GymBadgeRequirement(BadgeEnums.Rain)],
    shop: EverGrandeCityShop,
});
TownList['Pokémon League Hoenn'] = new Town('Pokémon League', GameConstants.Region.hoenn, {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Hoenn')),
    ],
});
TownList['Pacifidlog Town'] = new Town('Pacifidlog Town', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 131)],
    shop: PacifidlogTownShop,
});
TownList['Battle Frontier'] = new Town('Battle Frontier', GameConstants.Region.hoenn, {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)],
    shop: BattleFrontierShop,
});
//Hoenn Dungeons
TownList['Petalburg Woods'] = new DungeonTown('Petalburg Woods', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 104)]);
TownList['Rusturf Tunnel'] = new DungeonTown('Rusturf Tunnel', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 116),
    new GymBadgeRequirement(BadgeEnums.Stone),
]);
TownList['Granite Cave'] = new DungeonTown('Granite Cave', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))]);
TownList['Fiery Path'] = new DungeonTown('Fiery Path', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 112)]);
TownList['Meteor Falls'] = new DungeonTown('Meteor Falls', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 114)]);
TownList['Mt. Chimney'] = new DungeonTown('Mt. Chimney', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))]);
TownList['Jagged Pass'] = new DungeonTown('Jagged Pass', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Chimney'))]);
TownList['New Mauville'] = new DungeonTown('New Mauville', GameConstants.Region.hoenn, [new GymBadgeRequirement(BadgeEnums.Balance)]);
TownList['Weather Institute'] = new DungeonTown('Weather Institute', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 119)]);
TownList['Mt. Pyre'] = new DungeonTown('Mt. Pyre', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 122)]);
TownList['Magma Hideout'] = new DungeonTown('Magma Hideout', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Pyre'))]);
TownList['Aqua Hideout'] = new DungeonTown('Aqua Hideout', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Magma Hideout'))]);
TownList['Shoal Cave'] = new DungeonTown('Shoal Cave', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)]);
TownList['Cave of Origin'] = new DungeonTown('Cave of Origin', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 126),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seafloor Cavern')),
]);
TownList['Seafloor Cavern'] = new DungeonTown('Seafloor Cavern', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
    new GymBadgeRequirement(BadgeEnums.Mind),
]);
TownList['Sky Pillar'] = new DungeonTown('Sky Pillar', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 131),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Cave of Origin')),
]);
TownList['Victory Road Hoenn'] = new DungeonTown('Victory Road Hoenn', GameConstants.Region.hoenn, [new GymBadgeRequirement(BadgeEnums.Rain)]);
TownList['Sealed Chamber'] = new DungeonTown('Sealed Chamber', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 134),
    new GymBadgeRequirement(BadgeEnums.Mind),
]);
//Sinnoh Shops
const TwinleafTownShop = new Shop([
    ItemList['Pokeball'],
]);
const OreburghCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const EternaCityShop = new Shop([
    ItemList['Grass_egg'],
]);
const HearthomeCityShop = new Shop([
    ItemList['Soothe_bell'],
    ItemList['Fire_egg'],
]);
const SolaceonTownShop = new Shop([
    ItemList['Dawn_stone'],
    ItemList['Dusk_stone'],
    ItemList['Shiny_stone'],
    ItemList['Spiritomb'],
]);
const VeilstoneCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Token_collector'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
]);
const CelesticTownShop = new Shop([
    ItemList['Dragon_egg'],
]);
const CanalaveCityShop = new Shop([
    ItemList['Fighting_egg'],
]);
const PalParkShop = new Shop([
    ItemList['Razor_claw'],
    ItemList['Razor_fang'],
    ItemList['Combee'],
    ItemList['Burmy (plant)'],
    ItemList['Cherubi'],
]);
const SunyshoreCityShop = new Shop([
    ItemList['Electric_egg'],
]);
const SurvivalAreaShop = new Shop([
    ItemList['Electirizer'],
    ItemList['Magmarizer'],
]);
const ResortAreaShop = new Shop([
    ItemList['Reaper_cloth'],
    ItemList['Dubious_disc'],
    ItemList['Protector'],
]);
const PastoriaShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Skorupi'],
    ItemList['Water_egg'],
]);
//Sinnoh Berry Master
const SinnohBerryMaster = new Shop([
    ItemList['Boost_Mulch'],
    ItemList['Rich_Mulch'],
    ItemList['Surprise_Mulch'],
    ItemList['Amaze_Mulch'],
    ItemList['Berry_Shovel'],
]);
//Sinnoh NPCs
const FloaramaLeafeonTip = new NPC('Flower Girl', [
    'Something amazing just happened!',
    'My friend was taking their Eevee on a walk through Eterna Forest, and it suddenly evolved into a Leafeon!',
    'Can you believe that?',
]);
const SnowpointGlaceonTip = new NPC('Young Girl', [
    'Someone told me that training an Eevee in Lake Acuity will make it evolve something new.',
    'They must be lying, how can that be true?!',
]);
const OreburghConstructionWorker = new NPC('Construction Worker', [
    'I was doing some exploring in Mt. Coronet last week, and my Nosepass gained a lot of levels.',
    'I had a big suprise when he reached level 20 though!',
]);
const HearthomeContestFan = new NPC('Contest Fan', [
    'My favourite contestant had a big reveal for us this week!',
    'Their prized Magneton had evolved into a Magnezone!',
    'I\'m so happy for them, all of that training in Mt. Coronet must have paid off!',
]);
const SinnohRoamerNPC = new RoamerNPC('Hiker Kevin', [
    'I spotted a bunch of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.sinnoh);
//Sinnoh Towns
TownList['Twinleaf Town'] = new Town('Twinleaf Town', GameConstants.Region.sinnoh, {
    shop: TwinleafTownShop,
});
TownList['Sandgem Town'] = new Town('Sandgem Town', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 201)],
});
TownList['Jubilife City'] = new Town('Jubilife City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)],
});
TownList['Oreburgh City'] = new Town('Oreburgh City', GameConstants.Region.sinnoh, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Oreburgh Gate'))],
    shop: OreburghCityShop,
    npcs: [OreburghConstructionWorker],
});
TownList['Floaroma Town'] = new Town('Floaroma Town', GameConstants.Region.sinnoh, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ravaged Path'))],
    npcs: [FloaramaLeafeonTip],
});
TownList['Eterna City'] = new Town('Eterna City', GameConstants.Region.sinnoh, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Eterna Forest'))],
    shop: EternaCityShop,
});
TownList['Hearthome City'] = new Town('Hearthome City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 208)],
    shop: HearthomeCityShop,
    berryMaster: SinnohBerryMaster,
    npcs: [HearthomeContestFan],
});
TownList['Solaceon Town'] = new Town('Solaceon Town', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)],
    shop: SolaceonTownShop,
});
TownList['Veilstone City'] = new Town('Veilstone City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 215)],
    shop: VeilstoneCityShop,
    npcs: [BigSpender],
});
TownList['Pastoria City'] = new Town('Pastoria City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213)],
    shop: PastoriaShop,
});
TownList['Celestic Town'] = new Town('Celestic Town', GameConstants.Region.sinnoh, {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.sinnoh, 210),
        new GymBadgeRequirement(BadgeEnums.Fen),
    ],
    shop: CelesticTownShop,
});
TownList['Pal Park'] = new Town('Pal Park', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 221)],
    shop: PalParkShop,
});
TownList['Canalave City'] = new Town('Canalave City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)],
    shop: CanalaveCityShop,
});
TownList['Snowpoint City'] = new Town('Snowpoint City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 217)],
    npcs: [SnowpointGlaceonTip],
});
TownList['Sunyshore City'] = new Town('Sunyshore City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 222)],
    shop: SunyshoreCityShop,
});
TownList['Pokémon League Sinnoh'] = new Town('Pokémon League Sinnoh', GameConstants.Region.sinnoh, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh'))],
});
TownList['Fight Area'] = new Town('Fight Area', GameConstants.Region.sinnoh, {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)],
});
TownList['Survival Area'] = new Town('Survival Area', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 225)],
    shop: SurvivalAreaShop,
    npcs: [SinnohRoamerNPC],
});
TownList['Resort Area'] = new Town('Resort Area', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 229)],
    shop: ResortAreaShop,
});
//Sinnoh Dungeons
TownList['Oreburgh Gate'] = new DungeonTown('Oreburgh Gate', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 203)]);
TownList['Ravaged Path'] = new DungeonTown('Ravaged Path', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 204),
    new GymBadgeRequirement(BadgeEnums.Coal),
]);
TownList['Eterna Forest'] = new DungeonTown('Eterna Forest', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Coal),
]);
TownList['Old Chateau'] = new DungeonTown('Old Chateau', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Forest),
]);
TownList['Wayward Cave'] = new DungeonTown('Wayward Cave', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 206)]);
TownList['Mt. Coronet South'] = new DungeonTown('Mt. Coronet South', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 207)]);
TownList['Solaceon Ruins'] = new DungeonTown('Solaceon Ruins', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)]);
TownList['Iron Island'] = new DungeonTown('Iron Island', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)]);
TownList['Mt. Coronet North'] = new DungeonTown('Mt. Coronet North', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 211),
    new GymBadgeRequirement(BadgeEnums.Mine),
]);
TownList['Distortion World'] = new DungeonTown('Distortion World', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 214),
    new GymBadgeRequirement(BadgeEnums.Icicle),
]);
TownList['Lake Valor'] = new DungeonTown('Lake Valor', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213),
    new GymBadgeRequirement(BadgeEnums.Icicle),
]);
TownList['Lake Verity'] = new DungeonTown('Lake Verity', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 201),
    new GymBadgeRequirement(BadgeEnums.Icicle),
]);
TownList['Lake Acuity'] = new DungeonTown('Lake Acuity', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 217),
    new GymBadgeRequirement(BadgeEnums.Icicle),
]);
TownList['Victory Road Sinnoh'] = new DungeonTown('Victory Road Sinnoh', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223),
    new GymBadgeRequirement(BadgeEnums.Beacon),
]);
TownList['Spear Pillar'] = new DungeonTown('Spear Pillar', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 211),
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
]);
TownList['Hall of Origin'] = new DungeonTown('Hall of Origin', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Spear Pillar'))]);
TownList['Fullmoon Island'] = new DungeonTown('Fullmoon Island', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Newmoon Island'] = new DungeonTown('Newmoon Island', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Flower Paradise'] = new DungeonTown('Flower Paradise', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 224),
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
]);
TownList['Stark Mountain'] = new DungeonTown('Stark Mountain', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 227),
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
]);
TownList['Snowpoint Temple'] = new DungeonTown('Snowpoint Temple', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 217),
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
]);
//Unova Shops
const AspertiaCityShop = new Shop([
    ItemList['Pokeball'],
]);
const VirbankCityShop = new Shop([
    ItemList['Greatball'],
]);
const CasteliaCityShop = new Shop([
    ItemList['Trade_stone'],
    ItemList['Water_egg'],
]);
const NimbasaCityShop = new Shop([
    ItemList['Grass_egg'],
    ItemList['Electric_egg'],
]);
const DriftveilCityShop = new Shop([
    ItemList['Zorua'],
]);
const MistraltonCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Thunder_stone'],
]);
const LentimasTownShop = new Shop([
    ItemList['Fire_egg'],
]);
const LacunosaTownShop = new Shop([
    ItemList['Fighting_egg'],
]);
const OpelucidCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Token_collector'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
]);
const IcirrusCityShop = new Shop([
    ItemList['Dragon_egg'],
]);
const BlackAndWhiteParkShop = new Shop([
    ItemList['Moon_stone'],
    ItemList['Sun_stone'],
]);
const NacreneCityShop = new Shop([
    ItemList['Soothe_bell'],
]);
const StriatonCityShop = new Shop([
    ItemList['Leaf_stone'],
    ItemList['Water_stone'],
    ItemList['Fire_stone'],
]);
const AccumulaTownShop = new Shop([
    ItemList['Dusk_stone'],
    ItemList['Shiny_stone'],
]);
const AnvilleTownShop = new Shop([
    ItemList['Meloetta (pirouette)'],
]);
//Unova NPCs
const ExcitedChild = new NPC('Excited Child', [
    'Did you hear? Did you see? It was on TV!',
    'I was just watching my favorite show, The National Gymquirer. It was a live segment! Some hot shot trainer from Kanto defeated Drayden! It was amazing! That trainer is so cool! Drayden is like unbeatable.',
    'Then my programme got interrupted by an emergency broadcast. A report on the first confirmed sightings of Tornadus and Thundurus in over twenty-five years! I\'ve read so much about them, they are my favorites.',
    'Last time they were spotted they just roamed around, causing all kinds of mischief. According to my books anyway. I\'m sure that amazing trainer from the TV will want to catch these mighty forces of nature.',
]);
const UnovaRoamerNPC = new RoamerNPC('Youngster Sarah', [
    'My friends told me roaming Pokémon have been spotted on {ROUTE_NAME}!',
], GameConstants.Region.unova);
//Unova Towns
TownList['Aspertia City'] = new Town('Aspertia City', GameConstants.Region.unova, {
    shop: AspertiaCityShop,
});
TownList['Floccesy Town'] = new Town('Floccesy Town', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 19)],
});
TownList['Virbank City'] = new Town('Virbank City', GameConstants.Region.unova, {
    requirements: [new GymBadgeRequirement(BadgeEnums.Basic)],
    shop: VirbankCityShop,
});
TownList['Castelia City'] = new Town('Castelia City', GameConstants.Region.unova, {
    requirements: [new GymBadgeRequirement(BadgeEnums.Toxic)],
    shop: CasteliaCityShop,
    dungeon: dungeonList['Castelia Sewers'],
});
TownList['Nimbasa City'] = new Town('Nimbasa City', GameConstants.Region.unova, {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 4),
        new GymBadgeRequirement(BadgeEnums.Insect),
    ],
    shop: NimbasaCityShop,
});
TownList['Driftveil City'] = new Town('Driftveil City', GameConstants.Region.unova, {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 5),
        new GymBadgeRequirement(BadgeEnums.Bolt),
    ],
    shop: DriftveilCityShop,
});
TownList['Mistralton City'] = new Town('Mistralton City', GameConstants.Region.unova, {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
        new GymBadgeRequirement(BadgeEnums.Quake),
    ],
    shop: MistraltonCityShop,
});
TownList['Lentimas Town'] = new Town('Lentimas Town', GameConstants.Region.unova, {
    requirements: [new GymBadgeRequirement(BadgeEnums.Jet)],
    shop: LentimasTownShop,
});
TownList['Undella Town'] = new Town('Undella Town', GameConstants.Region.unova, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))],
});
TownList['Lacunosa Town'] = new Town('Lacunosa Town', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 13)],
    shop: LacunosaTownShop,
});
TownList['Opelucid City'] = new Town('Opelucid City', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 11)],
    shop: OpelucidCityShop,
    dungeon: dungeonList['Team Plasma Assault'],
});
TownList['Humilau City'] = new Town('Humilau City', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 21)],
    npcs: [ExcitedChild],
});
TownList['Pokémon League Unova'] = new Town('Pokémon League Unova', GameConstants.Region.unova, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Unova'))],
});
TownList['Icirrus City'] = new Town('Icirrus City', GameConstants.Region.unova, {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.unova, 8),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        ])],
    shop: IcirrusCityShop,
    npcs: [UnovaRoamerNPC],
});
TownList['Black and White Park'] = new Town('Black and White Park', GameConstants.Region.unova, {
    requirements: [new OneFromManyRequirement([
            new MultiRequirement([
                new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
                new RouteKillRequirement(10, GameConstants.Region.unova, 14),
            ]),
            new RouteKillRequirement(10, GameConstants.Region.unova, 15),
        ])],
    shop: BlackAndWhiteParkShop,
});
TownList['Nacrene City'] = new Town('Nacrene City', GameConstants.Region.unova, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))],
    shop: NacreneCityShop,
});
TownList['Striaton City'] = new Town('Striaton City', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 3)],
    shop: StriatonCityShop,
});
TownList['Accumula Town'] = new Town('Accumula Town', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 2)],
    shop: AccumulaTownShop,
});
TownList['Nuvema Town'] = new Town('Nuvema Town', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 1)],
});
TownList['Anville Town'] = new Town('Anville Town', GameConstants.Region.unova, {
    requirements: [new ObtainedPokemonRequirement(pokemonMap['Meloetta (aria)'])],
    shop: AnvilleTownShop,
});
//Unova Dungeons
TownList['Pledge Grove'] = new DungeonTown('Pledge Grove', GameConstants.Region.unova, [new ObtainedPokemonRequirement(pokemonMap.Keldeo)]);
TownList['Floccesy Ranch'] = new DungeonTown('Floccesy Ranch', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 20)]);
TownList['Liberty Garden'] = new DungeonTown('Liberty Garden', GameConstants.Region.unova, 
//Victini dungeon, maybe unlock later
[new GymBadgeRequirement(BadgeEnums.Toxic)]);
TownList['Castelia Sewers'] = new DungeonTown('Castelia Sewers', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Toxic)]);
TownList['Relic Passage'] = new DungeonTown('Relic Passage', GameConstants.Region.unova, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Castelia Sewers'))]);
TownList['Relic Castle'] = new DungeonTown('Relic Castle', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 25)]);
TownList['Lostlorn Forest'] = new DungeonTown('Lostlorn Forest', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 16)]);
TownList['Chargestone Cave'] = new DungeonTown('Chargestone Cave', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 6)]);
TownList['Mistralton Cave'] = new DungeonTown('Mistralton Cave', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Quake)]);
TownList['Celestial Tower'] = new DungeonTown('Celestial Tower', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 7)]);
TownList['Reversal Mountain'] = new DungeonTown('Reversal Mountain', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Jet)]);
TownList['Team Plasma Assault'] = new DungeonTown('Team Plasma Assault', GameConstants.Region.unova, [
    new GymBadgeRequirement(BadgeEnums.Legend),
]);
TownList['Seaside Cave'] = new DungeonTown('Seaside Cave', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 24),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Plasma Assault')),
]);
TownList['Plasma Frigate'] = new DungeonTown('Plasma Frigate', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 22),
    new GymBadgeRequirement(BadgeEnums.Wave),
]);
TownList['Giant Chasm'] = new DungeonTown('Giant Chasm', GameConstants.Region.unova, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Plasma Frigate'))]);
TownList['Cave of Being'] = new DungeonTown('Cave of Being', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 23)]);
TownList['Abundant Shrine'] = new DungeonTown('Abundant Shrine', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 23),
    new RouteKillRequirement(10, GameConstants.Region.unova, 14),
    new ObtainedPokemonRequirement(pokemonMap.Tornadus),
    new ObtainedPokemonRequirement(pokemonMap.Thundurus),
]);
TownList['Victory Road Unova'] = new DungeonTown('Victory Road Unova', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 23)]);
TownList['Twist Mountain'] = new DungeonTown('Twist Mountain', GameConstants.Region.unova, [new OneFromManyRequirement([
        new MultiRequirement([
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
            new RouteKillRequirement(10, GameConstants.Region.unova, 7),
        ]),
        new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    ])]);
TownList['Dragonspiral Tower'] = new DungeonTown('Dragonspiral Tower', GameConstants.Region.unova, [new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    ])]);
TownList['Moor of Icirrus'] = new DungeonTown('Moor of Icirrus', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    new ObtainedPokemonRequirement(pokemonMap.Cobalion),
    new ObtainedPokemonRequirement(pokemonMap.Terrakion),
    new ObtainedPokemonRequirement(pokemonMap.Virizion),
]);
TownList['Pinwheel Forest'] = new DungeonTown('Pinwheel Forest', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)]);
TownList['Dreamyard'] = new DungeonTown('Dreamyard', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 3)]);
TownList['P2 Laboratory'] = new DungeonTown('P2 Laboratory', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 17)]);
//Kalos Shops
const VanivilleTownShop = new Shop([
    ItemList['Pokeball'],
]);
const SantaluneCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const LumioseCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Electric_egg'],
]);
const AmbretteTownShop = new Shop([
    ItemList['Water_egg'],
]);
const GeosengeTownShop = new Shop([
    ItemList['Fire_egg'],
]);
const ShalourCityShop = new Shop([
    ItemList['Fighting_egg'],
]);
const CoumarineCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Grass_egg'],
]);
const LaverreCityShop = new Shop([
    ItemList['Sachet'],
    ItemList['Whipped_dream'],
]);
const DendemilleTownShop = new Shop([
    ItemList['Dusk_stone'],
    ItemList['Shiny_stone'],
]);
const AnistarCityShop = new Shop([
    ItemList['Sun_stone'],
]);
const CouriwayTownShop = new Shop([
    ItemList['Dragon_egg'],
]);
//Kalos NPCs
const Birdwatcher = new NPC('Birdwatcher', [
    'I\'ve heard there is a cave you can find if you go out on the ocean a little ways.',
    'Apparently defeating a strong creature there unleashes some energy.',
    'There are rumors that the energy calls some legendary birds to roam Kalos!',
]);
//Kalos Towns
TownList['Vaniville Town'] = new Town('Vaniville Town', GameConstants.Region.kalos, {
    shop: VanivilleTownShop,
});
TownList['Aquacorde Town'] = new Town('Aquacorde Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 1)],
});
TownList['Santalune City'] = new Town('Santalune City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)],
    shop: SantaluneCityShop,
});
TownList['Lumiose City'] = new Town('Lumiose City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 4)],
    shop: LumioseCityShop,
});
TownList['Camphrier Town'] = new Town('Camphrier Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 5)],
});
TownList['Ambrette Town'] = new Town('Ambrette Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 8)],
    shop: AmbretteTownShop,
});
TownList['Cyllage City'] = new Town('Cyllage City', GameConstants.Region.kalos, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glittering Cave'))],
});
TownList['Geosenge Town'] = new Town('Geosenge Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 10)],
    shop: GeosengeTownShop,
    dungeon: dungeonList['Team Flare Secret HQ'],
});
TownList['Shalour City'] = new Town('Shalour City', GameConstants.Region.kalos, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reflection Cave'))],
    shop: ShalourCityShop,
});
TownList['Coumarine City'] = new Town('Coumarine City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)],
    shop: CoumarineCityShop,
    npcs: [Birdwatcher],
});
TownList['Laverre City'] = new Town('Laverre City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 14)],
    shop: LaverreCityShop,
});
TownList['Dendemille Town'] = new Town('Dendemille Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)],
    shop: DendemilleTownShop,
});
TownList['Anistar City'] = new Town('Anistar City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 17)],
    shop: AnistarCityShop,
});
TownList['Couriway Town'] = new Town('Couriway Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)],
    shop: CouriwayTownShop,
});
TownList['Snowbelle City'] = new Town('Snowbelle City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)],
});
TownList['Pokémon League Kalos'] = new Town('Pokémon League Kalos', GameConstants.Region.kalos, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Kalos'))],
});
TownList['Kiloude City'] = new Town('Kiloude City', GameConstants.Region.kalos, {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)],
});
//Kalos Dungeons
TownList['Santalune Forest'] = new DungeonTown('Santalune Forest', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 2)]);
TownList['Parfum Palace'] = new DungeonTown('Parfum Palace', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 6)]);
TownList['Connecting Cave'] = new DungeonTown('Connecting Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 7)]);
TownList['Glittering Cave'] = new DungeonTown('Glittering Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 9)]);
TownList['Reflection Cave'] = new DungeonTown('Reflection Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 11)]);
//Tower of Mastery?
TownList['Sea Spirit\'s Den'] = new DungeonTown('Sea Spirit\'s Den', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 23)]);
TownList['Pokéball Factory'] = new DungeonTown('Pokéball Factory', GameConstants.Region.kalos, [new GymBadgeRequirement(BadgeEnums.Fairy)]);
TownList['Kalos Power Plant'] = new DungeonTown('Kalos Power Plant', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 13), new GymBadgeRequirement(BadgeEnums.Plant)]);
TownList['Lost Hotel'] = new DungeonTown('Lost Hotel', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]);
TownList['Frost Cavern'] = new DungeonTown('Frost Cavern', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]);
TownList['Team Flare Secret HQ'] = new DungeonTown('Team Flare Secret HQ', GameConstants.Region.kalos, [new GymBadgeRequirement(BadgeEnums.Psychic)]);
TownList['Terminus Cave'] = new DungeonTown('Terminus Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)]);
TownList['Pokémon Village'] = new DungeonTown('Pokémon Village', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 20)]);
TownList['Victory Road Kalos'] = new DungeonTown('Victory Road Kalos', GameConstants.Region.kalos, [
    new GymBadgeRequirement(BadgeEnums.Iceberg),
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kalos, 21),
        new RouteKillRequirement(10, GameConstants.Region.kalos, 22),
    ]),
]);
//Unknown Cave?
//Alola Towns
TownList['Iki Town'] = new Town('Iki Town', GameConstants.Region.alola, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 1)],
});
TownList['Hau\'oli City'] = new Town('Hau\'oli City', GameConstants.Region.alola, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Trainers\' School'))],
});
TownList['Heahea City'] = new Town('Heahea City', GameConstants.Region.alola, {
    requirements: [new GymBadgeRequirement(BadgeEnums.MelemeleKahuna)],
});
TownList['Paniola Town'] = new Town('Paniola Town', GameConstants.Region.alola, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 4)],
});
TownList['Royal Avenue'] = new Town('Royal Avenue', GameConstants.Region.alola, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 6)],
});
TownList['Konikoni City'] = new Town('Konikoni City', GameConstants.Region.alola, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 9)],
});
TownList['Malie City'] = new Town('Malie City', GameConstants.Region.alola, {
    requirements: [new GymBadgeRequirement(BadgeEnums.AkalaKahuna)],
});
TownList['Aether Paradise'] = new Town('Aether Paradise', GameConstants.Region.alola, {
    requirements: [new GymBadgeRequirement(BadgeEnums.AkalaKahuna)],
});
TownList['Tapu Village'] = new Town('Tapu Village', GameConstants.Region.alola, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 13)],
});
TownList['Seafolk Village'] = new Town('Seafolk Village', GameConstants.Region.alola, {
    requirements: [new GymBadgeRequirement(BadgeEnums.UlaulaKahuna)],
});
TownList['Exeggutor Island'] = new Town('Exeggutor Island', GameConstants.Region.alola, {
    dungeon: dungeonList['Exeggutor Island Hill'],
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 25)],
});
TownList['Altar of the Sunne and Moone'] = new Town('Altar of the Sunne and Moone', GameConstants.Region.alola, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vast Poni Canyon'))],
});
//Alola Dungeons
TownList['Trainers\' School'] = new DungeonTown('Trainers\' School', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 18)]);
TownList['Hau\'oli Cemetery'] = new DungeonTown('Hau\'oli Cemetery', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 2)]);
TownList['Verdant Cavern'] = new DungeonTown('Verdant Cavern', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 2)]);
TownList['Melemele Meadow'] = new DungeonTown('Melemele Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 3)]);
TownList['Seaward Cave'] = new DungeonTown('Seaward Cave', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Melemele Meadow'))]);
TownList['Ten Carat Hill'] = new DungeonTown('Ten Carat Hill', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.MelemeleKahuna)]);
TownList['Ruins of Conflict'] = new DungeonTown('Ruins of Conflict', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)]);
TownList['Pikachu Valley'] = new DungeonTown('Pikachu Valley', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 4)]);
TownList['Paniola Ranch'] = new DungeonTown('Paniola Ranch', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 4)]);
TownList['Brooklet Hill'] = new DungeonTown('Brooklet Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 5)]);
TownList['Wela Volcano Park'] = new DungeonTown('Wela Volcano Park', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 7)]);
TownList['Lush Jungle'] = new DungeonTown('Lush Jungle', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 8)]);
TownList['Diglett\'s Tunnel'] = new DungeonTown('Diglett\'s Tunnel', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lush Jungle'))]);
TownList['Memorial Hill'] = new DungeonTown('Memorial Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 9)]);
TownList['Ruins of Life'] = new DungeonTown('Ruins of Life', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 21),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Malie Garden'] = new DungeonTown('Malie Garden', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.AkalaKahuna)] //Replace with Ather Paradise 1 if implemented
);
TownList['Hokulani Observatory'] = new DungeonTown('Hokulani Observatory', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 22)]);
TownList['Thrifty Megamart'] = new DungeonTown('Thrifty Megamart', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 14)]);
TownList['Ula\'ula Meadow'] = new DungeonTown('Ula\'ula Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 16)]);
TownList['Po Town'] = new DungeonTown('Po Town', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 17)]);
TownList['Mount Lanikala'] = new DungeonTown('Mount Lanikala', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.PoniKahuna)]);
TownList['Ruins of Abundance'] = new DungeonTown('Ruins of Abundance', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 23),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Exeggutor Island Hill'] = new DungeonTown('Exeggutor Island Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 25)]);
TownList['Vast Poni Canyon'] = new DungeonTown('Vast Poni Canyon', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Exeggutor Island Hill'))]);
TownList['Nebby'] = new DungeonTown('Nebby', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.Elite_UltraNecrozma)]);
TownList['Ruins of Hope'] = new DungeonTown('Ruins of Hope', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 26),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Poni Meadow'] = new DungeonTown('Poni Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 28)]);
TownList['Resolution Cave'] = new DungeonTown('Resolution Cave', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Poni Meadow'))]);
//Galar Shops
const PostwickShop = new Shop([
    ItemList['Pokeball'],
]);
const WedgehurstShop = new Shop([
    ItemList['Greatball'],
    ItemList['Mystery_egg'],
]);
const CirchesterShop = new Shop([
    ItemList['Ice_stone'],
]);
const TurffieldShop = new Shop([
    ItemList['Grass_egg'],
]);
const HulburyShop = new Shop([
    ItemList['Water_egg'],
    ItemList['Toxel'],
]);
const MotostokeShop = new Shop([
    ItemList['Fire_egg'],
]);
const HammerlockeShop = new Shop([
    ItemList['Dragon_egg'],
    ItemList['Eternatus'],
]);
const StowonSideShop = new Shop([
    ItemList['Fighting_egg'],
]);
const SpikemuthShop = new Shop([
    ItemList['Electric_egg'],
]);
const WyndonShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Token_collector'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
]);
//Galar NPC
const Mom = new NPC('Mom', [
    'Don\'t go too far into the Slumbering Weald.',
    'I\'ve heard there are some very strong Pokemon in there.',
    'Only those who beat the champion are strong enough to face them!',
]);
const TrainStationGuy = new NPC('Train Station Guy', [
    'There are some areas around Galar that you can only reach after beating the Champion.',
    'One is sparsely populated, but the other is teeming with Pokemon.',
    'There are plenty of unique, powerful ones there, too!',
]);
//Galar towns
TownList['Postwick'] = new Town('Postwick', GameConstants.Region.galar, {
    shop: PostwickShop,
    npcs: [Mom],
});
TownList['Wedgehurst'] = new Town('Wedgehurst', GameConstants.Region.galar, {
    shop: WedgehurstShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 1)],
    npcs: [TrainStationGuy],
});
TownList['Motostoke'] = new Town('Motostoke', GameConstants.Region.galar, {
    shop: MotostokeShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 6)],
});
TownList['Turffield'] = new Town('Turffield', GameConstants.Region.galar, {
    shop: TurffieldShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 11)],
});
TownList['Hulbury'] = new Town('Hulbury', GameConstants.Region.galar, {
    shop: HulburyShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 12)],
});
TownList['Stow-on-Side'] = new Town('Stow-on-Side', GameConstants.Region.galar, {
    shop: StowonSideShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 15)],
});
TownList['Ballonlea'] = new Town('Ballonlea', GameConstants.Region.galar, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glimwood Tangle'))],
});
TownList['Hammerlocke'] = new Town('Hammerlocke', GameConstants.Region.galar, {
    shop: HammerlockeShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 14)],
});
TownList['Circhester'] = new Town('Circhester', GameConstants.Region.galar, {
    shop: CirchesterShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 18)],
});
TownList['Spikemuth'] = new Town('Spikemuth', GameConstants.Region.galar, {
    shop: SpikemuthShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 22)],
});
TownList['Wyndon'] = new Town('Wyndon', GameConstants.Region.galar, {
    shop: WyndonShop,
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 24)],
    dungeon: dungeonList['Rose Tower'],
});
TownList['Wyndon Stadium'] = new Town('Wyndon Stadium', GameConstants.Region.galar, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rose Tower'))],
});
//Isle of Armor towns
TownList['Master Dojo'] = new Town('Master Dojo', GameConstants.Region.armor, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.armor, 1)],
    dungeon: dungeonList['Master Dojo Trial'],
});
//Crown Tundra Towns
TownList['Freezington'] = new Town('Freezington', GameConstants.Region.crown, {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.crown, 1)],
});
//Galar Dungeons
TownList['Slumbering Weald'] = new DungeonTown('Slumbering Weald', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)]);
TownList['Inner Slumbering Weald'] = new DungeonTown('Inner Slumbering Weald', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]);
TownList['Galar Mine'] = new DungeonTown('Galar Mine', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 10)]);
TownList['Galar Mine No. 2'] = new DungeonTown('Galar Mine No. 2', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Galar_Water)]);
TownList['Glimwood Tangle'] = new DungeonTown('Glimwood Tangle', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Galar_Fighting)]);
TownList['Rose Tower'] = new DungeonTown('Rose Tower', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 24)]);
TownList['Watchtower Ruins'] = new DungeonTown('Watchtower Ruins', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 4)]);
TownList['Dusty Bowl'] = new DungeonTown('Dusty Bowl', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Galar_Fire)]);
TownList['Lake of Outrage'] = new DungeonTown('Lake of Outrage', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]);
TownList['Towers of Two Fists'] = new DungeonTown('Towers of Two Fists', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]);
TownList['Split-Decision Ruins'] = new DungeonTown('Split-Decision Ruins', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]);
TownList['The Crown Tundra'] = new DungeonTown('The Crown Tundra', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]);
TownList['Freezington Ruins'] = new DungeonTown('Freezington Ruins', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]);
/* eslint-disable array-bracket-newline */
///<reference path="Town.ts"/>
class PokemonLeague extends Town {
    constructor(name, region, requirements, shop, gyms) {
        super(name, region, { requirements, shop });
        this.gym = null;
        this.gymList = [];
        for (const gym of gyms) {
            this.gymList.push(gymList[gym]);
        }
    }
    setupGymTowns() {
        for (const gym of this.gymList) {
            TownList[gym.town] = TownList[this.name];
        }
    }
}
// Share a shop across all Elite 4s
const indigoPlateauShop = new Shop([
    new PokeballItem(GameConstants.Pokeball.Masterball, 10000000, GameConstants.Currency.money, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.money]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 75000, GameConstants.Currency.dungeonToken, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.dungeonToken]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.questPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.questPoint]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.farmPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.farmPoint]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 50, GameConstants.Currency.diamond, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.diamond]}` }),
    ItemList['RareCandy'],
    ItemList['Protein'],
]);
TownList['Indigo Plateau Kanto'] = new PokemonLeague('Indigo Plateau Kanto', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 23),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road')),
], indigoPlateauShop, ['Elite Lorelei', 'Elite Bruno', 'Elite Agatha', 'Elite Lance', 'Champion Blue']);
TownList['Indigo Plateau Kanto'].setupGymTowns();
TownList['Indigo Plateau Johto'] = new PokemonLeague('Indigo Plateau Johto', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 27)], indigoPlateauShop, ['Elite Will', 'Elite Koga', 'Elite Bruno2', 'Elite Karen', 'Champion Lance']);
TownList['Indigo Plateau Johto'].setupGymTowns();
TownList['Pokémon League Hoenn'] = new PokemonLeague('Pokémon League Hoenn', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Hoenn')),
], indigoPlateauShop, ['Elite Sidney', 'Elite Phoebe', 'Elite Glacia', 'Elite Drake', 'Champion Wallace']);
TownList['Pokémon League Hoenn'].setupGymTowns();
TownList['Pokémon League Sinnoh'] = new PokemonLeague('Pokémon League Sinnoh', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh')),
], indigoPlateauShop, ['Elite Aaron', 'Elite Bertha', 'Elite Flint', 'Elite Lucian', 'Champion Cynthia']);
TownList['Pokémon League Sinnoh'].setupGymTowns();
TownList['Pokémon League Unova'] = new PokemonLeague('Pokémon League Unova', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 23),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Unova')),
], indigoPlateauShop, ['Elite Shauntal', 'Elite Marshal', 'Elite Grimsley', 'Elite Caitlin', 'Champion Iris']);
TownList['Pokémon League Unova'].setupGymTowns();
TownList['Pokémon League Kalos'] = new PokemonLeague('Pokémon League Kalos', GameConstants.Region.kalos, [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kalos, 21),
        new RouteKillRequirement(10, GameConstants.Region.kalos, 22),
    ]),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Kalos')),
], indigoPlateauShop, ['Elite Malva', 'Elite Siebold', 'Elite Wikstrom', 'Elite Drasna', 'Champion Diantha']);
TownList['Pokémon League Kalos'].setupGymTowns();
TownList['Pokémon League Alola'] = new PokemonLeague('Pokémon League Alola', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mount Lanikala'))], indigoPlateauShop, ['Elite Molayne', 'Elite Olivia', 'Elite Acerola', 'Elite Kahili', 'Champion Hao']);
TownList['Pokémon League Alola'].setupGymTowns();
TownList['Wyndon Stadium'] = new PokemonLeague('Wyndon Stadium', GameConstants.Region.galar, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rose Tower'))], indigoPlateauShop, ['Trainer Marnie', 'Trainer Hop', 'Trainer Bede', 'Champion Leon']);
TownList['Wyndon Stadium'].setupGymTowns();
TownList['Master Dojo Battlefield'] = new PokemonLeague('Master Dojo Battlefield', GameConstants.Region.armor, [new MultiRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Darkness')),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Water'))
    ])], indigoPlateauShop, ['Gym Leader Klara', 'Gym Leader Avery', 'Dojo Master Mustard']);
TownList['Master Dojo Battlefield'].setupGymTowns();
/// <reference path="../../declarations/GameHelper.d.ts" />
class DamageCalculator {
    static totalDamage() {
        const ignoreRegionMultiplier = DamageCalculator.region() == GameConstants.Region.none;
        return App.game.party.calculatePokemonAttack(DamageCalculator.type1(), DamageCalculator.type2(), ignoreRegionMultiplier, DamageCalculator.region(), DamageCalculator.includeBreeding(), DamageCalculator.baseAttackOnly(), false);
    }
    static getDamageByTypes() {
        const typedamage = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        const ignoreRegionMultiplier = this.region() == GameConstants.Region.none;
        for (const pokemon of App.game.party.caughtPokemon) {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            if (dataPokemon.type1 === PokemonType.None) {
                continue;
            }
            const attack = App.game.party.calculateOnePokemonAttack(pokemon, this.type1(), this.type2(), this.region(), ignoreRegionMultiplier, this.includeBreeding(), this.baseAttackOnly());
            typedamage[dataPokemon.type1] += attack / 2;
            const otherType = dataPokemon.type2 !== PokemonType.None ? dataPokemon.type2 : dataPokemon.type1;
            typedamage[otherType] += attack / 2;
        }
        return typedamage;
    }
    static getTypeDetail() {
        return App.game.party.caughtPokemon.filter(pokemon => {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            return dataPokemon.type1 == DamageCalculator.detailType() || dataPokemon.type2 == DamageCalculator.detailType();
        }).reduce((details, pokemon) => {
            details.push(DamageCalculator.getOneTypeDetail(pokemon));
            return details;
        }, []).sort((a, b) => b.damage - a.damage);
    }
    static getOneTypeDetail(pokemon) {
        const ignoreRegionMultiplier = DamageCalculator.region() == GameConstants.Region.none;
        const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
        return {
            id: dataPokemon.id,
            name: dataPokemon.name,
            type1: dataPokemon.type1,
            type2: dataPokemon.type2,
            damage: App.game.party.calculateOnePokemonAttack(pokemon, DamageCalculator.type1(), DamageCalculator.type2(), DamageCalculator.region(), ignoreRegionMultiplier, DamageCalculator.includeBreeding(), DamageCalculator.baseAttackOnly()),
        };
    }
}
DamageCalculator.type1 = ko.observable(PokemonType.None);
DamageCalculator.type2 = ko.observable(PokemonType.None);
DamageCalculator.region = ko.observable(GameConstants.Region.none);
DamageCalculator.includeBreeding = ko.observable(false);
DamageCalculator.baseAttackOnly = ko.observable(false);
DamageCalculator.detailType = ko.observable(PokemonType.None);
DamageCalculator.observableTypeDamageArray = ko.pureComputed(DamageCalculator.getDamageByTypes, DamageCalculator);
DamageCalculator.observableTypeDetails = ko.pureComputed(DamageCalculator.getTypeDetail);
DamageCalculator.observableTotalDamage = ko.pureComputed(DamageCalculator.totalDamage);
class TypeHelper {
    //@formatter:on
    /*eslint-enable */
    static getAttackModifier(a1, a2, d1, d2) {
        if (a1 == PokemonType.None || d1 == PokemonType.None) {
            return 1;
        }
        // Apply second type as the first type when None
        a2 = a2 != PokemonType.None ? a2 : a1;
        d2 = d2 != PokemonType.None ? d2 : d1;
        let m1 = TypeHelper.typeMatrix[a1][d1];
        let m2 = TypeHelper.typeMatrix[a1][d2];
        let m3 = TypeHelper.typeMatrix[a2][d1];
        let m4 = TypeHelper.typeMatrix[a2][d2];
        if (!App.game.challenges.list.disableShards.active()) {
            m1 += (App.game.shards.getShardUpgrade(a1, this.valueToType(m1)) * Shards.SHARD_UPGRADE_STEP);
            m2 += (App.game.shards.getShardUpgrade(a1, this.valueToType(m2)) * Shards.SHARD_UPGRADE_STEP);
            m3 += (App.game.shards.getShardUpgrade(a2, this.valueToType(m3)) * Shards.SHARD_UPGRADE_STEP);
            m4 += (App.game.shards.getShardUpgrade(a2, this.valueToType(m4)) * Shards.SHARD_UPGRADE_STEP);
        }
        return Math.max(m1 * m2, m3 * m4);
    }
    static typeToValue(type) {
        return GameConstants.TypeEffectivenessValue[GameConstants.TypeEffectivenessValue[type]];
    }
    static valueToType(value) {
        switch (value) {
            case GameConstants.TypeEffectivenessValue.Immune:
                return GameConstants.TypeEffectiveness.Immune;
            case GameConstants.TypeEffectivenessValue.NotVery:
                return GameConstants.TypeEffectiveness.NotVery;
            case GameConstants.TypeEffectivenessValue.Normal:
                return GameConstants.TypeEffectiveness.Normal;
            case GameConstants.TypeEffectivenessValue.Very:
                return GameConstants.TypeEffectiveness.Very;
        }
    }
}
//@formatter:off
/*eslint-disable */
TypeHelper.typeMatrix = (() => {
    const imm = GameConstants.TypeEffectivenessValue.Immune;
    const not = GameConstants.TypeEffectivenessValue.NotVery;
    const nrm = GameConstants.TypeEffectivenessValue.Normal;
    const vry = GameConstants.TypeEffectivenessValue.Very;
    return [
        //                 E              F
        //                 L              I                   P
        //  N              E              G    P    G    F    S                   D
        //  O         W    C    G         H    O    R    L    Y              G    R         S    F  <- Defending type
        //  R    F    A    T    R         T    I    O    Y    C         R    H    A    D    T    A
        //  M    I    T    R    A    I    I    S    U    I    H    B    O    O    G    A    E    I   Attack type
        //  A    R    E    I    S    C    N    O    N    N    I    U    C    S    O    R    E    R        |
        //  L    E    R    C    S    E    G    N    D    G    C    G    K    T    N    K    L    Y        v
        [nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, not, imm, nrm, nrm, not, nrm],
        [nrm, not, not, nrm, vry, vry, nrm, nrm, nrm, nrm, nrm, vry, not, nrm, not, nrm, vry, nrm],
        [nrm, vry, not, nrm, not, nrm, nrm, nrm, vry, nrm, nrm, nrm, vry, nrm, not, nrm, nrm, nrm],
        [nrm, nrm, vry, not, not, nrm, nrm, nrm, imm, vry, nrm, nrm, nrm, nrm, not, nrm, nrm, nrm],
        [nrm, not, vry, nrm, not, nrm, nrm, not, vry, not, nrm, not, vry, nrm, not, nrm, not, nrm],
        [nrm, not, not, nrm, vry, not, nrm, nrm, vry, vry, nrm, nrm, nrm, nrm, vry, nrm, not, nrm],
        [vry, nrm, nrm, nrm, nrm, vry, nrm, not, nrm, not, not, not, vry, imm, nrm, vry, vry, not],
        [nrm, nrm, nrm, nrm, vry, nrm, nrm, not, not, nrm, nrm, nrm, not, not, nrm, nrm, imm, vry],
        [nrm, vry, nrm, vry, not, nrm, nrm, vry, nrm, imm, nrm, not, vry, nrm, nrm, nrm, vry, nrm],
        [nrm, nrm, nrm, not, vry, nrm, vry, nrm, nrm, nrm, nrm, vry, not, nrm, nrm, nrm, not, nrm],
        [nrm, nrm, nrm, nrm, nrm, nrm, vry, vry, nrm, nrm, not, nrm, nrm, nrm, nrm, imm, not, nrm],
        [nrm, not, nrm, nrm, vry, nrm, not, not, nrm, not, vry, nrm, nrm, not, nrm, vry, not, not],
        [nrm, vry, nrm, nrm, nrm, vry, not, nrm, not, vry, nrm, vry, nrm, nrm, nrm, nrm, not, nrm],
        [imm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, vry, nrm, nrm, vry, nrm, not, nrm, nrm],
        [nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, nrm, vry, nrm, not, imm],
        [nrm, nrm, nrm, nrm, nrm, nrm, not, nrm, nrm, nrm, vry, nrm, nrm, vry, nrm, not, nrm, not],
        [nrm, not, not, not, nrm, vry, nrm, nrm, nrm, nrm, nrm, nrm, vry, nrm, nrm, nrm, not, vry],
        [nrm, not, nrm, nrm, nrm, nrm, vry, not, nrm, nrm, nrm, nrm, nrm, nrm, vry, vry, not, nrm],
    ];
})();
TypeHelper.typeColors = [
    '595c3b',
    'b10818',
    '294a94',
    'b57b31',
    '4a944a',
    '42a59c',
    'b54a4a',
    '7b42c6',
    '946b4a',
    '218cb5',
    'ce6363',
    '8cb521',
    'a58c4a',
    '605a72',
    '8c424a',
    '4a6b84',
    '737373',
    'd694ce',
];
TypeHelper.typeColorsLocked = [
    'd3d4c4',
    'fb9d9d',
    '99b6ff',
    'ffda99',
    'aff1a7',
    'b5efef',
    'f1bba7',
    'e7ccff',
    'e3d1b5',
    '99dfff',
    'ffb5ad',
    'dbf99f',
    'e3d1b5',
    'c8c3d5',
    'e7b1b1',
    'bcccdc',
    'cccccc',
    'ffc6e7',
];
/// <reference path="../../declarations/GameHelper.d.ts" />
class DailyDeal {
    constructor() {
        this.item1 = DailyDeal.randomItem();
        this.amount1 = DailyDeal.randomAmount();
        this.item2 = DailyDeal.randomItem();
        this.amount2 = DailyDeal.randomAmount();
    }
    static generateDeals(maxDeals, date) {
        SeededRand.seedWithDate(date);
        DailyDeal.list.removeAll();
        const temp = [];
        const maxTries = maxDeals * 10;
        let i = 0;
        while (i < maxTries && temp.length < maxDeals) {
            const deal = new DailyDeal();
            if (deal.isValid(temp)) {
                temp.push(deal);
            }
            i++;
        }
        DailyDeal.list.push(...temp);
    }
    static randomItem() {
        return SeededRand.fromArray(UndergroundItem.list);
    }
    static randomAmount() {
        return SeededRand.intBetween(1, 3);
    }
    isValid(dealList) {
        const item1Name = this.item1.name;
        const item2Name = this.item2.name;
        if (item1Name == item2Name) {
            return false;
        }
        if (this.item1.isStone()) {
            return false;
        }
        if (DailyDeal.sameDealExists(item1Name, item2Name, dealList)) {
            return false;
        }
        if (DailyDeal.reverseDealExists(item1Name, item2Name, dealList)) {
            return false;
        }
        return true;
    }
    static sameDealExists(name1, name2, dealList) {
        for (const deal of dealList) {
            if (deal.item1.name == name1 && deal.item2.name == name2) {
                return true;
            }
        }
        return false;
    }
    static reverseDealExists(name1, name2, dealList) {
        for (const deal of dealList) {
            if (deal.item2.name == name1) {
                if (deal.item1.name == name2) {
                    return true;
                }
                else {
                    return DailyDeal.reverseDealExists(deal.item1.name, name2, dealList);
                }
            }
        }
        return false;
    }
    static canUse(i) {
        const deal = DailyDeal.list.peek()[i];
        const amount = player.getUndergroundItemAmount(deal.item1.id);
        return amount >= deal.amount1;
    }
    static use(i, tradeTimes = 1) {
        const deal = DailyDeal.list.peek()[i];
        const item1Index = player.mineInventoryIndex(deal.item1.id);
        if (DailyDeal.canUse(i)) {
            const amt = player.mineInventory()[item1Index].amount();
            const maxTrades = Math.floor(amt / deal.amount1);
            tradeTimes = Math.min(tradeTimes, maxTrades);
            player.mineInventory()[item1Index].amount(amt - (deal.amount1 * tradeTimes));
            Underground.gainMineItem(deal.item2.id, deal.amount2 * tradeTimes);
            GameHelper.incrementObservable(App.game.statistics.undergroundDailyDealTrades, tradeTimes);
            Underground.sortMineItems(Underground.lastPropSort, false);
        }
    }
}
DailyDeal.list = ko.observableArray();
/// <reference path="../../declarations/GameHelper.d.ts" />
class Mine {
    static loadMine() {
        const tmpGrid = [];
        const tmpRewardGrid = [];
        Mine.rewardNumbers = [];
        Mine.itemsBuried(0);
        Mine.surveyResult(null);
        for (let i = 0; i < App.game.underground.getSizeY(); i++) {
            const row = [];
            const rewardRow = [];
            for (let j = 0; j < Underground.sizeX; j++) {
                row.push(ko.observable(Math.min(5, Math.max(1, Math.floor(Math.random() * 2 + Math.random() * 3) + 1))));
                rewardRow.push(0);
            }
            tmpGrid.push(row);
            tmpRewardGrid.push(rewardRow);
        }
        Mine.grid = tmpGrid;
        Mine.rewardGrid = tmpRewardGrid;
        let added = 0;
        for (let i = 0; i < App.game.underground.getMaxItems(); i++) {
            const item = UndergroundItem.getRandomItem();
            const x = Mine.getRandomCoord(Underground.sizeX, item.space[0].length);
            const y = Mine.getRandomCoord(App.game.underground.getSizeY(), item.space.length);
            const res = Mine.canAddReward(x, y, item);
            if (res) {
                Mine.addReward(x, y, item);
                added = added + 1;
            }
        }
        // Check in case player upgrade min above max
        const min = Math.min(App.game.underground.getMinItems(), App.game.underground.getMaxItems());
        while (added < min) {
            const item = UndergroundItem.getRandomItem();
            const x = Mine.getRandomCoord(Underground.sizeX, item.space[0].length);
            const y = Mine.getRandomCoord(App.game.underground.getSizeY(), item.space.length);
            const res = Mine.canAddReward(x, y, item);
            if (res) {
                Mine.addReward(x, y, item);
                added = added + 1;
                //This should loop until it's added.
            }
        }
        Mine.loadingNewLayer = false;
        Mine.itemsFound(0);
        Underground.showMine();
        //Check if Explosive_Charge is equipped.
        if (App.game.oakItems.isActive(OakItems.OakItem.Explosive_Charge)) {
            const tiles = App.game.oakItems.calculateBonus(OakItems.OakItem.Explosive_Charge);
            for (let i = 1; i < tiles; i++) {
                const x = GameConstants.randomIntBetween(0, App.game.underground.getSizeY() - 1);
                const y = GameConstants.randomIntBetween(0, Underground.sizeX - 1);
                this.breakTile(x, y, 1);
            }
        }
    }
    static getRandomCoord(max, size) {
        return Math.floor(Math.random() * (max - size));
    }
    static canAddReward(x, y, reward) {
        if (Mine.alreadyHasRewardId(reward.id)) {
            return false;
        }
        this.rotateReward(reward);
        if (y + reward.space.length >= App.game.underground.getSizeY() || x + reward.space[0].length >= Underground.sizeX) {
            return false;
        }
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    if (Mine.rewardGrid[i + y][j + x] !== 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    static alreadyHasRewardId(id) {
        for (const row of Mine.rewardGrid) {
            for (const item of row) {
                if (item.value === id) {
                    return true;
                }
            }
        }
        return false;
    }
    static addReward(x, y, reward) {
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j].value != 0) {
                    Mine.rewardGrid[i + y][j + x] = Object.assign(Object.assign({}, reward.space[i][j]), { revealed: 0 });
                }
            }
        }
        GameHelper.incrementObservable(Mine.itemsBuried);
        Mine.rewardNumbers.push(reward.id);
    }
    static rotateReward(reward) {
        let rotations = Math.floor(Math.random() * 4);
        while (rotations-- > 0) {
            reward.space = reward.space[0].map((val, index) => reward.space.map((row) => row[index]).reverse());
        }
        const currentRotation = this.calculateRotation(reward);
        reward.space = reward.space.map((r) => r.map((v) => {
            v.rotations = currentRotation;
            return v;
        }));
        return reward;
    }
    static calculateRotation(reward) {
        let indexX = 0;
        const indexY = reward.space.findIndex((y) => {
            indexX = y.findIndex((x) => !x.x && !x.y);
            return indexX >= 0;
        });
        return (indexX ? 1 : 0) + (indexY ? 2 : 0);
    }
    static survey() {
        if (Mine.surveyResult()) {
            $('#mine-survey-result').tooltip('show');
            return;
        }
        const surveyCost = App.game.underground.getSurvey_Cost();
        if (App.game.underground.energy < surveyCost) {
            return;
        }
        const tiles = App.game.underground.getSurvey_Efficiency();
        for (let i = 0; i < tiles; i++) {
            const x = GameConstants.randomIntBetween(0, App.game.underground.getSizeY() - 1);
            const y = GameConstants.randomIntBetween(0, Underground.sizeX - 1);
            this.breakTile(x, y, 5);
        }
        App.game.underground.energy -= surveyCost;
        const rewards = Mine.rewardSummary();
        Mine.updatesurveyResult(rewards);
    }
    static rewardSummary() {
        return Mine.rewardNumbers.reduce((res, id) => {
            const reward = UndergroundItem.list.find((x) => x.id == id);
            if (ItemList[reward.valueType]) {
                res.evoItems++;
            }
            else {
                switch (reward.valueType) {
                    case 'Diamond': {
                        res.totalValue += reward.value;
                        break;
                    }
                    case 'Mine Egg': {
                        res.fossils++;
                        break;
                    }
                    default: {
                        res.plates++;
                    }
                }
            }
            return res;
        }, { fossils: 0, plates: 0, evoItems: 0, totalValue: 0 });
    }
    static updatesurveyResult(summary) {
        const text = [];
        if (summary.fossils) {
            text.push(`Fossils: ${summary.fossils}`);
        }
        if (summary.evoItems) {
            text.push(`Evolution Items: ${summary.evoItems}`);
        }
        if (summary.plates) {
            text.push(`Shard Plates: ${summary.plates}`);
        }
        text.push(`Diamond Value: ${summary.totalValue}`);
        Mine.surveyResult(text.join('<br>'));
        $('#mine-survey-result').tooltip('show');
    }
    static click(i, j) {
        if (Mine.toolSelected() == Mine.Tool.Hammer) {
            Mine.hammer(i, j);
        }
        else {
            Mine.chisel(i, j);
        }
    }
    static hammer(x, y) {
        if (App.game.underground.energy >= Underground.HAMMER_ENERGY) {
            if (x < 0 || y < 0) {
                return;
            }
            let hasMined = false;
            for (let i = -1; i < 2; i++) {
                for (let j = -1; j < 2; j++) {
                    if (Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)]() > 0) {
                        hasMined = true;
                    }
                    this.breakTile(x + i, y + j, 1);
                }
            }
            if (hasMined) {
                App.game.underground.energy -= Underground.HAMMER_ENERGY;
            }
        }
    }
    static chisel(x, y) {
        if (Mine.grid[x][y]() > 0) {
            if (App.game.underground.energy >= Underground.CHISEL_ENERGY) {
                this.breakTile(x, y, 2);
                App.game.underground.energy -= Underground.CHISEL_ENERGY;
            }
        }
    }
    static bomb() {
        let tiles = App.game.underground.getBombEfficiency();
        if (App.game.underground.energy >= Underground.BOMB_ENERGY) {
            while (tiles-- > 0) {
                const x = GameConstants.randomIntBetween(0, App.game.underground.getSizeY() - 1);
                const y = GameConstants.randomIntBetween(0, Underground.sizeX - 1);
                this.breakTile(x, y, 2);
            }
            App.game.underground.energy -= Underground.BOMB_ENERGY;
        }
    }
    static skipLayer(shouldConfirm = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.skipsRemaining()) {
                return;
            }
            if (!shouldConfirm ||
                (yield Notifier.confirm({
                    title: 'Underground',
                    message: 'Skip this mine layer?',
                    type: NotificationConstants.NotificationOption.warning,
                    confirm: 'skip',
                }))) {
                setTimeout(Mine.completed, 1500);
                Mine.loadingNewLayer = true;
                GameHelper.incrementObservable(this.skipsRemaining, -1);
            }
        });
    }
    static breakTile(_x, _y, layers = 1) {
        const x = Mine.normalizeY(_x);
        const y = Mine.normalizeX(_y);
        const newlayer = Math.max(0, Mine.grid[x][y]() - layers);
        Mine.grid[x][y](newlayer);
        const reward = Mine.rewardGrid[x][y];
        if (newlayer == 0 && reward != 0 && reward.revealed != 1) {
            reward.revealed = 1;
            const image = Underground.getMineItemById(reward.value).undergroundImage;
            $(`div[data-i=${x}][data-j=${y}]`).html(`<div class="mineReward size-${reward.sizeX}-${reward.sizeY} pos-${reward.x}-${reward.y} rotations-${reward.rotations}" style="background-image: url('${image}');"></div>`);
            Mine.checkItemsRevealed();
        }
    }
    static normalizeX(x) {
        return Math.min(Underground.sizeX - 1, Math.max(0, x));
    }
    static normalizeY(y) {
        return Math.min(App.game.underground.getSizeY() - 1, Math.max(0, y));
    }
    static checkItemsRevealed() {
        for (let i = 0; i < Mine.rewardNumbers.length; i++) {
            if (Mine.checkItemRevealed(Mine.rewardNumbers[i])) {
                Underground.gainMineItem(Mine.rewardNumbers[i]);
                const itemName = Underground.getMineItemById(Mine.rewardNumbers[i]).name;
                Notifier.notify({
                    message: `You found ${GameHelper.anOrA(itemName)} ${GameConstants.humanifyString(itemName)}`,
                    type: NotificationConstants.NotificationOption.success,
                });
                if (App.game.oakItems.isActive(OakItems.OakItem.Treasure_Scanner)) {
                    const giveDouble = App.game.oakItems.calculateBonus(OakItems.OakItem.Treasure_Scanner) / 100;
                    let random = Math.random();
                    if (giveDouble >= random) {
                        Underground.gainMineItem(Mine.rewardNumbers[i]);
                        Notifier.notify({
                            message: `You found an extra ${GameConstants.humanifyString(itemName)} in the Mine!`,
                            type: NotificationConstants.NotificationOption.success,
                            title: 'Treasure Scanner',
                            timeout: 4000,
                        });
                        random = Math.random();
                        if (giveDouble >= random) {
                            Underground.gainMineItem(Mine.rewardNumbers[i]);
                            Notifier.notify({
                                message: `Lucky! You found another ${GameConstants.humanifyString(itemName)}!`,
                                type: NotificationConstants.NotificationOption.success,
                                title: 'Treasure Scanner',
                                timeout: 6000,
                            });
                            random = Math.random();
                            if (giveDouble >= random) {
                                Underground.gainMineItem(Mine.rewardNumbers[i]);
                                Notifier.notify({
                                    message: `Jackpot! You found another ${GameConstants.humanifyString(itemName)}!`,
                                    type: NotificationConstants.NotificationOption.success,
                                    title: 'Treasure Scanner',
                                    timeout: 8000,
                                });
                            }
                        }
                    }
                }
                App.game.oakItems.use(OakItems.OakItem.Treasure_Scanner);
                Mine.itemsFound(Mine.itemsFound() + 1);
                GameHelper.incrementObservable(App.game.statistics.undergroundItemsFound);
                Mine.rewardNumbers.splice(i, 1);
                i--;
                Mine.checkCompleted();
            }
        }
    }
    static checkItemRevealed(id) {
        for (let i = 0; i < Underground.sizeX; i++) {
            for (let j = 0; j < App.game.underground.getSizeY(); j++) {
                if (Mine.rewardGrid[j][i] != 0) {
                    if (Mine.rewardGrid[j][i].value == id) {
                        if (Mine.rewardGrid[j][i].revealed === 0) {
                            return false;
                        }
                    }
                }
            }
        }
        App.game.oakItems.use(OakItems.OakItem.Cell_Battery);
        return true;
    }
    static checkCompleted() {
        if (Mine.itemsFound() >= Mine.itemsBuried()) {
            // Don't resolve queued up calls to checkCompleted() until completed() is finished and sets loadingNewLayer to false
            if (Mine.loadingNewLayer == true) {
                return;
            }
            Mine.loadingNewLayer = true;
            setTimeout(Mine.completed, 1500);
            GameHelper.incrementObservable(App.game.statistics.undergroundLayersMined);
            if (this.skipsRemaining() < this.maxSkips) {
                GameHelper.incrementObservable(this.skipsRemaining);
            }
        }
    }
    static completed() {
        Notifier.notify({
            message: 'You dig deeper...',
            type: NotificationConstants.NotificationOption.info,
        });
        ko.cleanNode(document.getElementById('mineBody'));
        App.game.oakItems.use(OakItems.OakItem.Explosive_Charge);
        Mine.loadMine();
        ko.applyBindings(null, document.getElementById('mineBody'));
    }
    static loadSavedMine(mine) {
        var _a, _b;
        (this.grid = mine.grid.map((row) => row.map((val) => ko.observable(val)))), (this.rewardGrid = mine.rewardGrid);
        this.itemsFound(mine.itemsFound);
        this.itemsBuried(mine.itemsBuried);
        this.rewardNumbers = mine.rewardNumbers;
        this.loadingNewLayer = false;
        this.surveyResult((_a = mine.surveyResult) !== null && _a !== void 0 ? _a : this.surveyResult());
        this.skipsRemaining((_b = mine.skipsRemaining) !== null && _b !== void 0 ? _b : this.maxSkips);
        Underground.showMine();
        // Check if completed in case the mine was saved after completion and before creating a new mine
        // TODO: Remove setTimeout after TypeScript module migration is complete. Needed so that `App.game` is available
        setTimeout(Mine.checkCompleted, 0);
    }
    static save() {
        if (this.grid == null) {
            Mine.loadMine();
        }
        const mineSave = {
            grid: this.grid.map((row) => row.map((val) => val())),
            rewardGrid: this.rewardGrid,
            itemsFound: this.itemsFound(),
            itemsBuried: this.itemsBuried(),
            rewardNumbers: this.rewardNumbers,
            surveyResult: this.surveyResult(),
            skipsRemaining: this.skipsRemaining(),
        };
        return mineSave;
    }
}
Mine.maxSkips = 5;
Mine.itemsFound = ko.observable(0);
Mine.itemsBuried = ko.observable(0);
Mine.surveyResult = ko.observable(null);
Mine.skipsRemaining = ko.observable(Mine.maxSkips);
// 0 represents the Mine.Tool.Chisel but it's not loaded here yet.
Mine.toolSelected = ko.observable(0);
Mine.loadingNewLayer = true;
(function (Mine) {
    let Tool;
    (function (Tool) {
        Tool[Tool["Chisel"] = 0] = "Chisel";
        Tool[Tool["Hammer"] = 1] = "Hammer";
    })(Tool = Mine.Tool || (Mine.Tool = {}));
})(Mine || (Mine = {}));
class UndergroundUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
    }
    canBuy() {
        return super.canBuy() && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Explorer_kit);
    }
}
(function (UndergroundUpgrade) {
    let Upgrades;
    (function (Upgrades) {
        Upgrades[Upgrades["Energy_Max"] = 0] = "Energy_Max";
        Upgrades[Upgrades["Items_Max"] = 1] = "Items_Max";
        Upgrades[Upgrades["Items_Min"] = 2] = "Items_Min";
        Upgrades[Upgrades["Energy_Gain"] = 3] = "Energy_Gain";
        Upgrades[Upgrades["Energy_Regen_Time"] = 4] = "Energy_Regen_Time";
        Upgrades[Upgrades["Daily_Deals_Max"] = 5] = "Daily_Deals_Max";
        Upgrades[Upgrades["Bomb_Efficiency"] = 6] = "Bomb_Efficiency";
        Upgrades[Upgrades["Survey_Cost"] = 7] = "Survey_Cost";
        Upgrades[Upgrades["Survey_Efficiency"] = 8] = "Survey_Efficiency";
        Upgrades[Upgrades["NewYLayer"] = 9] = "NewYLayer";
    })(Upgrades = UndergroundUpgrade.Upgrades || (UndergroundUpgrade.Upgrades = {}));
})(UndergroundUpgrade || (UndergroundUpgrade = {}));
/// <reference path="../../declarations/GameHelper.d.ts" />
///<reference path="../underground/UndergroundUpgrade.ts"/>
class Underground {
    constructor() {
        this.name = 'Underground';
        this.saveKey = 'underground';
        this._energy = ko.observable(Underground.BASE_ENERGY_MAX);
        this.upgradeList = [];
    }
    initialize() {
        this.upgradeList = [
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Max, 'Max Energy', 10, AmountFactory.createArray(GameHelper.createArray(50, 500, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 100, 10)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Items_Max, 'Max items', 4, AmountFactory.createArray(GameHelper.createArray(200, 800, 200), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Items_Min, 'Min Items', 4, AmountFactory.createArray(GameHelper.createArray(500, 5000, 1500), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Gain, 'Energy restored', 17, AmountFactory.createArray(GameHelper.createArray(100, 1700, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 17, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Regen_Time, 'Energy regen time', 20, AmountFactory.createArray(GameHelper.createArray(20, 400, 20), GameConstants.Currency.diamond), GameHelper.createArray(0, 20, 1), false),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Daily_Deals_Max, 'Daily deals', 2, AmountFactory.createArray(GameHelper.createArray(150, 300, 150), GameConstants.Currency.diamond), GameHelper.createArray(0, 2, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Bomb_Efficiency, 'Bomb Efficiency', 5, AmountFactory.createArray(GameHelper.createArray(50, 250, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 10, 2)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Survey_Cost, 'Survey Cost', 5, AmountFactory.createArray(GameHelper.createArray(50, 250, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 5, 1), false),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Survey_Efficiency, 'Survey Efficiency', 4, AmountFactory.createArray(GameHelper.createArray(100, 400, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.NewYLayer, 'Larger underground, +1 Max Item', 1, AmountFactory.createArray(GameHelper.createArray(3000, 3000, 3000), GameConstants.Currency.diamond), GameHelper.createArray(0, 1, 1)),
        ];
    }
    update(delta) { }
    getMaxEnergy() {
        return Underground.BASE_ENERGY_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Max).calculateBonus();
    }
    getMaxItems() {
        return Underground.BASE_ITEMS_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Items_Max).calculateBonus() + this.getUpgrade(UndergroundUpgrade.Upgrades.NewYLayer).calculateBonus();
    }
    getEnergyGain() {
        return Underground.BASE_ENERGY_GAIN + this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Gain).calculateBonus();
    }
    getEnergyRegenTime() {
        return Underground.BASE_ENERGY_REGEN_TIME - this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Regen_Time).calculateBonus();
    }
    getDailyDealsMax() {
        return Underground.BASE_DAILY_DEALS_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Daily_Deals_Max).calculateBonus();
    }
    getBombEfficiency() {
        return Underground.BASE_BOMB_EFFICIENCY + this.getUpgrade(UndergroundUpgrade.Upgrades.Bomb_Efficiency).calculateBonus();
    }
    getSurvey_Cost() {
        return Underground.SURVEY_ENERGY - this.getUpgrade(UndergroundUpgrade.Upgrades.Survey_Cost).calculateBonus();
    }
    getSurvey_Efficiency() {
        return Underground.BASE_SURVEY_CHARGE_EFFICIENCY + this.getUpgrade(UndergroundUpgrade.Upgrades.Survey_Efficiency).calculateBonus();
    }
    getSizeY() {
        return Underground.sizeY + this.getUpgrade(UndergroundUpgrade.Upgrades.NewYLayer).calculateBonus();
    }
    getMinItems() {
        return Underground.BASE_ITEMS_MIN + this.getUpgrade(UndergroundUpgrade.Upgrades.Items_Min).calculateBonus();
    }
    getUpgrade(upgrade) {
        for (let i = 0; i < this.upgradeList.length; i++) {
            if (this.upgradeList[i].name == upgrade) {
                return this.upgradeList[i];
            }
        }
    }
    static showMine() {
        let html = '';
        for (let i = 0; i < Mine.grid.length; i++) {
            html += '<div class="row">';
            for (let j = 0; j < Mine.grid[0].length; j++) {
                html += Underground.mineSquare(Mine.grid[i][j](), i, j);
            }
            html += '</div>';
        }
        $('#mineBody').html(html);
    }
    static mineSquare(amount, i, j) {
        if (Mine.rewardGrid[i][j] != 0 && Mine.grid[i][j]() == 0) {
            Mine.rewardGrid[i][j].revealed = 1;
            const image = Underground.getMineItemById(Mine.rewardGrid[i][j].value).undergroundImage;
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})' data-i='${i}' data-j='${j}'><div class="mineReward size-${Mine.rewardGrid[i][j].sizeX}-${Mine.rewardGrid[i][j].sizeY} pos-${Mine.rewardGrid[i][j].x}-${Mine.rewardGrid[i][j].y} rotations-${Mine.rewardGrid[i][j].rotations}" style="background-image: url('${image}');"></div></div>`;
        }
        else {
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})' data-i='${i}' data-j='${j}'></div>`;
        }
    }
    static calculateCssClass(i, j) {
        return `col-sm-1 rock${Math.max(Mine.grid[i][j](), 0)} mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
    }
    static gainMineItem(id, num = 1) {
        const index = player.mineInventoryIndex(id);
        const item = Underground.getMineItemById(id);
        if (item.isStone()) {
            const evostone = ItemList[item.valueType];
            evostone.gain(num);
            return;
        }
        if (index == -1) {
            const tempItem = {
                name: item.name,
                amount: ko.observable(num),
                id: id,
                value: item.value,
                valueType: item.valueType,
            };
            player.mineInventory.push(tempItem);
        }
        else {
            const amt = player.mineInventory()[index].amount();
            player.mineInventory()[index].amount(amt + num);
            this.sortMineItems(this.lastPropSort, false);
        }
    }
    static getMineItemByName(name) {
        return UndergroundItem.list.find((i) => i.name == name);
    }
    static getMineItemById(id) {
        for (const item of UndergroundItem.list) {
            if (item.id == id) {
                return item;
            }
        }
    }
    gainEnergy() {
        if (this.energy < this.getMaxEnergy()) {
            const oakMultiplier = App.game.oakItems.calculateBonus(OakItems.OakItem.Cell_Battery);
            const newEnergy = this.energy + oakMultiplier * this.getEnergyGain();
            if (newEnergy > this.getMaxEnergy() && Settings.getSetting('autoBomb').value) {
                Mine.bomb();
            }
            this.energy = Math.min(this.getMaxEnergy(), this.energy + oakMultiplier * this.getEnergyGain());
            if (this.energy === this.getMaxEnergy()) {
                Notifier.notify({
                    message: 'Your mining energy has reached maximum capacity!',
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                    sound: NotificationConstants.NotificationSound.underground_energy_full,
                    setting: NotificationConstants.NotificationSetting.underground_energy_full,
                });
            }
        }
    }
    gainEnergyThroughItem(item) {
        // Restore a percentage of maximum energy
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        const gain = Math.min(this.getMaxEnergy() - this.energy, effect * this.getMaxEnergy());
        this.energy = this.energy + gain;
        Notifier.notify({
            message: `You restored ${gain} mining energy!`,
            type: NotificationConstants.NotificationOption.success,
        });
    }
    static sortMineItems(prop, flip = true) {
        const prevEl = document.querySelector(`[data-undergroundsort=${Underground.lastPropSort}]`);
        const nextEl = prop == this.lastPropSort ? prevEl : document.querySelector(`[data-undergroundsort=${prop}]`);
        // If new sort by, update old sort by
        if (prop != this.lastPropSort) {
            // Remove sort direction from previous element
            if (prevEl) {
                prevEl.textContent = this.lastPropSort;
            }
            this.lastPropSort = prop;
        }
        else if (flip) {
            // Flip sort direction
            this.sortDirection *= -1;
        }
        // Update element text to dispaly sort direction
        if (nextEl) {
            nextEl.textContent = `${prop} ${this.sortDirection > 0 ? '▴' : '▾'}`;
        }
        player.mineInventory.sort((a, b) => {
            switch (prop) {
                case 'Amount':
                    return (a.amount() - b.amount()) * this.sortDirection;
                case 'Value':
                    return (a.value - b.value) * this.sortDirection;
                case 'Item':
                    return a.name > b.name ? 1 * this.sortDirection : -1 * this.sortDirection;
            }
        });
    }
    static sellMineItem(id, amount = 1) {
        for (let i = 0; i < player.mineInventory().length; i++) {
            const item = player.mineInventory()[i];
            if (item.id == id) {
                if (item.valueType == 'Mine Egg') {
                    amount = 1;
                }
                const curAmt = item.amount();
                if (curAmt > 0) {
                    const sellAmt = Math.min(curAmt, amount);
                    const success = Underground.gainProfit(item, sellAmt);
                    if (success) {
                        player.mineInventory()[i].amount(curAmt - sellAmt);
                        this.sortMineItems(this.lastPropSort, false);
                    }
                    return;
                }
            }
        }
    }
    static gainProfit(item, amount) {
        let success = true;
        switch (item.valueType) {
            case 'Diamond':
                App.game.wallet.gainDiamonds(item.value * amount);
                break;
            case 'Mine Egg':
                if (!App.game.breeding.hasFreeEggSlot()) {
                    return false;
                }
                success = App.game.breeding.gainEgg(App.game.breeding.createFossilEgg(item.name));
                break;
            default:
                const type = item.valueType.charAt(0).toUpperCase() + item.valueType.slice(1); //Capitalizes string
                const typeNum = PokemonType[type];
                App.game.shards.gainShards(GameConstants.PLATE_VALUE * amount, typeNum);
        }
        return success;
    }
    openUndergroundModal() {
        if (this.canAccess()) {
            $('#mineModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You need the Explorer Kit to access this location.<br/><i>Check out the shop at Cinnabar Island</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    canAccess() {
        return MapHelper.accessToRoute(11, 0) && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Explorer_kit);
    }
    calculateItemEffect(item) {
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        return effect * this.getMaxEnergy();
    }
    fromJSON(json) {
        if (!json) {
            console.warn('Underground not loaded.');
            return;
        }
        const upgrades = json['upgrades'];
        for (const item in UndergroundUpgrade.Upgrades) {
            if (isNaN(Number(item))) {
                this.getUpgrade(UndergroundUpgrade.Upgrades[item]).level = upgrades[item] || 0;
            }
        }
        this.energy = json['energy'] || 0;
        const mine = json['mine'];
        if (mine) {
            Mine.loadSavedMine(mine);
        }
        else {
            Mine.loadMine();
        }
    }
    toJSON() {
        const undergroundSave = {};
        const upgradesSave = {};
        for (const item in UndergroundUpgrade.Upgrades) {
            if (isNaN(Number(item))) {
                upgradesSave[item] = this.getUpgrade(UndergroundUpgrade.Upgrades[item]).level;
            }
        }
        undergroundSave['upgrades'] = upgradesSave;
        undergroundSave['energy'] = this.energy;
        undergroundSave['mine'] = Mine.save();
        return undergroundSave;
    }
    // Knockout getters/setters
    get energy() {
        return this._energy();
    }
    set energy(value) {
        this._energy(value);
    }
}
Underground.energyTick = ko.observable(60);
Underground.counter = 0;
Underground.sortDirection = -1;
Underground.lastPropSort = 'none';
Underground.rewardCssClass = ko.pureComputed(() => {
    return `col-sm-1 mineReward mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
});
$(document).ready(() => {
    $('body').on('click', '.mineSquare', function () {
        Mine.click(parseInt(this.dataset.i, 10), parseInt(this.dataset.j, 10));
    });
});
(function (Underground) {
    Underground.BASE_ENERGY_MAX = 50;
    Underground.BASE_ITEMS_MAX = 3;
    Underground.BASE_ITEMS_MIN = 1;
    Underground.BASE_ENERGY_GAIN = 3;
    Underground.BASE_ENERGY_REGEN_TIME = 60;
    Underground.BASE_DAILY_DEALS_MAX = 3;
    Underground.BASE_BOMB_EFFICIENCY = 10;
    Underground.BASE_SURVEY_CHARGE_EFFICIENCY = 1;
    Underground.sizeX = 25;
    Underground.sizeY = 12;
    Underground.CHISEL_ENERGY = 1;
    Underground.HAMMER_ENERGY = 3;
    Underground.BOMB_ENERGY = 10;
    Underground.SURVEY_ENERGY = 15;
})(Underground || (Underground = {}));
///<reference path="../achievements/MaxRegionRequirement.ts"/>
class UndergroundItem {
    constructor(name, id, space, value = 1, valueType = 'Diamond', requirement) {
        this.name = name;
        this.id = id;
        this.value = value;
        this.valueType = valueType;
        this.requirement = requirement;
        this.space = space.map((r, y) => r.map((v, x) => ({
            sizeX: r.length,
            sizeY: space.length,
            x,
            y,
            value: v ? this.id : 0,
            rotations: 0,
        })));
    }
    static addItem(name, id, space, value = 1, valueType = 'Diamond', requirement) {
        UndergroundItem.list.push(new UndergroundItem(name, id, space, value, valueType, requirement));
    }
    // Returns a random unlocked item
    static getRandomItem() {
        const unlockedItems = UndergroundItem.list.filter(i => i.isUnlocked());
        const i = Math.floor(Math.random() * (unlockedItems.length));
        return unlockedItems[i] || UndergroundItem.list[0];
    }
    static getFullResourceName(valuetype, amt) {
        if (valuetype != 'Diamond' && amt >= 50) {
            valuetype += ' shard';
        }
        if (amt > 1) {
            valuetype += 's';
        }
        return GameConstants.humanifyString(valuetype);
    }
    isUnlocked() {
        return this.requirement ? this.requirement.isCompleted() : true;
    }
    isStone() {
        return ItemList[this.valueType] instanceof EvolutionStone;
    }
    get displayName() {
        return this.name;
    }
    get image() {
        // Have to add extra logic here since images are all over the place in location and naming standards
        // Maybe one day we refactor the item system to be cleaner
        if (this.isStone()) {
            const evostone = ItemList[this.valueType];
            return evostone.image;
        }
        else if (this.valueType == 'Mine Egg') {
            return `assets/images/breeding/${this.name}.png`;
        }
        else {
            return `assets/images/items/underground/${this.name}.png`;
        }
    }
    get undergroundImage() {
        return `assets/images/underground/${this.name}.png`;
    }
}
UndergroundItem.list = [];
// Diamond Items
UndergroundItem.addItem('Rare Bone', 1, [[1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1]], 3);
UndergroundItem.addItem('Star Piece', 2, [[0, 1, 0], [1, 1, 1], [0, 1, 0]], 5);
UndergroundItem.addItem('Revive', 3, [[0, 1, 0], [1, 1, 1], [0, 1, 0]], 2);
UndergroundItem.addItem('Max Revive', 4, [[1, 1, 1], [1, 1, 1], [1, 1, 1]], 4);
UndergroundItem.addItem('Iron Ball', 5, [[1, 1, 1], [1, 1, 1], [1, 1, 1]], 2);
UndergroundItem.addItem('Heart Scale', 6, [[1, 0], [1, 1]], 10);
UndergroundItem.addItem('Light Clay', 7, [[1, 0, 1, 0], [1, 1, 1, 0], [1, 1, 1, 1], [0, 1, 0, 1]], 2);
UndergroundItem.addItem('Odd Keystone', 8, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 6);
UndergroundItem.addItem('Hard Stone', 9, [[1, 1], [1, 1]], 4);
UndergroundItem.addItem('Oval Stone', 10, [[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3);
UndergroundItem.addItem('Everstone', 11, [[1, 1, 1, 1], [1, 1, 1, 1]], 3);
UndergroundItem.addItem('Smooth Rock', 12, [[0, 0, 1, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 1, 0, 0]], 2);
UndergroundItem.addItem('Heat Rock', 13, [[1, 0, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1]], 2);
UndergroundItem.addItem('Icy Rock', 14, [[0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 0, 1]], 2);
UndergroundItem.addItem('Damp Rock', 15, [[1, 1, 1], [1, 1, 1], [1, 0, 1]], 2);
// Shard Plates
UndergroundItem.addItem('Draco Plate', 100, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'dragon');
UndergroundItem.addItem('Dread Plate', 101, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'dark');
UndergroundItem.addItem('Earth Plate', 102, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'ground');
UndergroundItem.addItem('Fist Plate', 103, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'fighting');
UndergroundItem.addItem('Flame Plate', 104, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'fire');
UndergroundItem.addItem('Icicle Plate', 105, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'ice');
UndergroundItem.addItem('Insect Plate', 106, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'bug');
UndergroundItem.addItem('Iron Plate', 107, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'steel');
UndergroundItem.addItem('Meadow Plate', 108, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'grass');
UndergroundItem.addItem('Mind Plate', 109, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'psychic');
UndergroundItem.addItem('Sky Plate', 110, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'flying');
UndergroundItem.addItem('Splash Plate', 111, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'water');
UndergroundItem.addItem('Spooky Plate', 112, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'ghost');
UndergroundItem.addItem('Stone Plate', 113, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'rock');
UndergroundItem.addItem('Toxic Plate', 114, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'poison');
UndergroundItem.addItem('Zap Plate', 115, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'electric');
UndergroundItem.addItem('Pixie Plate', 116, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 100, 'fairy');
// Fossils
UndergroundItem.addItem('Helix Fossil', 200, [[0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Dome Fossil', 201, [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Old Amber', 202, [[0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Root Fossil', 203, [[0, 0, 1, 1, 1], [0, 0, 1, 1, 1], [1, 0, 0, 1, 1], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.johto));
UndergroundItem.addItem('Claw Fossil', 204, [[1, 1, 1, 0, 0], [1, 1, 1, 1, 0], [0, 1, 1, 1, 1], [0, 0, 0, 1, 1]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.johto));
UndergroundItem.addItem('Armor Fossil', 205, [[0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.sinnoh));
UndergroundItem.addItem('Skull Fossil', 206, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.sinnoh));
UndergroundItem.addItem('Cover Fossil', 207, [[1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 1, 1, 1]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.unova));
UndergroundItem.addItem('Plume Fossil', 208, [[0, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [1, 1, 0, 0, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.unova));
UndergroundItem.addItem('Jaw Fossil', 209, [[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.kalos));
UndergroundItem.addItem('Sail Fossil', 210, [[1, 1, 1, 0, 0], [1, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 0]], 0, 'Mine Egg', new MaxRegionRequirement(GameConstants.Region.kalos));
// Evolution Stones
UndergroundItem.addItem('Fire Stone', 300, [[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1, 'Fire_stone');
UndergroundItem.addItem('Water Stone', 301, [[1, 1, 1], [1, 1, 1], [1, 1, 0]], 1, 'Water_stone');
UndergroundItem.addItem('Thunder Stone', 302, [[0, 1, 1], [1, 1, 1], [1, 1, 0]], 1, 'Thunder_stone');
UndergroundItem.addItem('Leaf Stone', 303, [[0, 1, 0], [1, 1, 1], [1, 1, 1], [0, 1, 0]], 1, 'Leaf_stone');
UndergroundItem.addItem('Moon Stone', 304, [[0, 1, 1, 1], [1, 1, 1, 0]], 1, 'Moon_stone');
UndergroundItem.addItem('Sun Stone', 305, [[0, 1, 0], [1, 1, 1], [1, 1, 1]], 1, 'Sun_stone', new MaxRegionRequirement(GameConstants.Region.johto));
class Information {
    constructor() { }
    static show(options = {}) {
        return introJs().setOptions(Object.assign(Object.assign({}, this.defaultOptions), options)).start();
    }
    static hide() {
        return introJs().exit();
    }
}
Information.defaultOptions = {
    showStepNumbers: false,
    hideNext: true,
    hidePrev: true,
    exitOnOverlayClick: false,
    showBullets: false,
};
class Preload {
    static itemLoading(item = 0) {
        this.itemsToLoad.push(item);
        this.updateProgressBar();
    }
    static itemLoaded(item = 0) {
        this.itemsLoaded.push(item);
        this.updateProgressBar();
    }
    static itemErrored(item = 0) {
        this.itemsErrored.push(item);
        this.updateProgressBar();
    }
    static updateProgressBar() {
        const toLoad = this.itemsToLoad.length;
        const loaded = this.itemsLoaded.length;
        const errored = this.itemsErrored.length;
        // Update the progress bar
        const progressBarEl = document.getElementById('preload-progress-bar');
        progressBarEl.style.width = `${(loaded + errored) / toLoad * 100}%`;
        // Update the text
        const progressTextEl = document.getElementById('preload-progress-text');
        progressTextEl.innerText = `${loaded + errored} / ${toLoad}`;
    }
    static hideSplashScreen(fast = false) {
        $('#game').removeClass('loading');
        if (fast) {
            $('.loader').hide();
        }
        else {
            $('.loader').fadeOut('slow');
        }
    }
    static load(skipWait = false) {
        console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading Images..`, 'color:#8e44ad;font-weight:900;');
        if (skipWait) {
            return new Promise(resolve => {
                //If you want to skip waiting, resolve immediately
                resolve();
                Preload.loadTowns();
                Preload.loadUndergroundItems();
                // Preload.loadMap();
                // Preload.loadPokemon(),
                Preload.hideSplashScreen(true);
            });
        }
        else {
            return new Promise(resolve => {
                // Incase something is taking too long to load
                const forceLoad = setTimeout(() => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading images taking too long, Skipping..`, 'color:#c0392b;font-weight:900;');
                    resolve();
                }, GameConstants.MAX_LOAD_TIME);
                Promise.all([
                    Preload.loadTowns(),
                    Preload.loadUndergroundItems(),
                    // Preload.loadMap(),
                    // Preload.loadPokemon(),
                    Preload.minimumTime(),
                ]).then(() => {
                    clearTimeout(forceLoad);
                    // Give the progress bar a little bit of time to finish the animation
                    setTimeout(() => {
                        resolve();
                    }, 600);
                }).catch((reason => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreload images failed..`, 'color:#c0392b;font-weight:900;');
                    console.error('Preload images failed:', reason);
                    clearTimeout(forceLoad);
                    resolve();
                }));
            });
        }
    }
    static loadTowns() {
        var _a;
        const p = Array();
        for (const name in TownList) {
            // Skip unreleased towns unless a feature flag has enabled them
            if (!((_a = window.featureFlags) === null || _a === void 0 ? void 0 : _a.preloadUnreleasedTowns) && TownList[name].region > GameConstants.MAX_AVAILABLE_REGION) {
                continue;
            }
            // Skip fake towns that exist for the Elite
            if (name.includes('Elite') || name.includes('Champion')) {
                continue;
            }
            Preload.itemLoading(name);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(`town-${name}`);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(`town-${name}`);
                    console.warn('Failed to load town image:', name);
                    resolve();
                };
                img.src = `assets/images/towns/${name}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadPokemon() {
        const p = Array();
        for (let i = 1; i <= GameConstants.TotalPokemonsPerRegion[GameConstants.MAX_AVAILABLE_REGION]; i++) {
            Preload.itemLoading(i);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(i);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(i);
                    console.warn('Failed to load image for pokemon:', i);
                    resolve();
                };
                img.src = `assets/images/pokemon/${i}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadUndergroundItems() {
        const p = Array();
        UndergroundItem.list.forEach(item => {
            Preload.itemLoading(item.id);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(item.id);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(item.id);
                    console.warn('Failed to load image for Underground item:', item.name);
                    resolve();
                };
                img.src = item.undergroundImage;
            }));
        });
        return Promise.all(p);
    }
    static minimumTime() {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, GameConstants.MIN_LOAD_TIME);
        });
    }
    static loadMap() {
        // TODO: preload the map background images?
        /*
        return new Promise<number>(resolve => {
            let img = new Image();
            img.onload = () => {
                document.querySelector('image')
                    .setAttributeNS('http://www.w3.org/1999/xlink', 'href', 'assets/images/kanto.png');
                resolve();
            };
            img.onerror = () => {
                console.log('Failed to load map image:', name);
                resolve();
            }
            img.src = 'assets/images/kanto.png';
        })
        */
    }
}
Preload.itemsToLoad = [];
Preload.itemsLoaded = [];
Preload.itemsErrored = [];
class RegionRoute {
    constructor(routeName, region, number, pokemon, requirements = [], orderNumber) {
        this.routeName = routeName;
        this.region = region;
        this.number = number;
        this.pokemon = pokemon;
        this.requirements = requirements;
        this.orderNumber = orderNumber;
        this.orderNumber = orderNumber || number;
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
}
/**
 * Datalist of all Pokémon that are encountered on the routes
 * No need to ever use this list, use RouteHelper instead
 * If you ever need to use this list, request changes in RouteHelper instead.
 */
class SpecialRoutePokemon {
    constructor(pokemon, req) {
        this.pokemon = pokemon;
        this.req = req;
    }
    isAvailable() {
        return this.req.isCompleted();
    }
}
class RoutePokemon {
    constructor({ land = [], water = [], headbutt = [], special = [], }) {
        this.land = land;
        this.water = water;
        this.headbutt = headbutt;
        this.special = special;
    }
}
///<reference path="RoutePokemon.ts"/>
/**
 * Helper class to retrieve information from RoutePokemon
 */
class RouteHelper {
    /**
     * Retrieves a list of all Pokémon that can be caught on that route.
     * @param route
     * @param region
     * @param includeHeadbutt
     * @returns {string[]} list of all Pokémons that can be caught
     */
    static getAvailablePokemonList(route, region, includeHeadbutt = true) {
        var _a;
        // If the route is somehow higher than allowed, use the first route to generateWildPokemon Pokémon
        const possiblePokemons = (_a = Routes.getRoute(region, route)) === null || _a === void 0 ? void 0 : _a.pokemon;
        if (!possiblePokemons) {
            return ['Rattata'];
        }
        // Land Pokémon
        let pokemonList = possiblePokemons.land;
        // Water Pokémon
        if (App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Super_rod) || possiblePokemons.land.length == 0) {
            pokemonList = pokemonList.concat(possiblePokemons.water);
        }
        // Headbutt Pokémon
        if (includeHeadbutt) {
            pokemonList = pokemonList.concat(possiblePokemons.headbutt);
        }
        // Special requirement Pokémon
        pokemonList = pokemonList.concat(...possiblePokemons.special.filter(p => p.isAvailable()).map(p => p.pokemon));
        return pokemonList;
    }
    /**
     * Checks if all Pokémons on this route are caught by the player.
     * @param route
     * @param region
     * @param includeShiny
     * @param includeHeadbutt
     * @returns {boolean} true if all Pokémon on this route are caught.
     */
    static routeCompleted(route, region, includeShiny, includeHeadbutt = true) {
        const possiblePokemon = RouteHelper.getAvailablePokemonList(route, region, includeHeadbutt);
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static listCompleted(possiblePokemon, includeShiny) {
        for (let i = 0; i < possiblePokemon.length; i++) {
            if (!App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id)) {
                return false;
            }
            if (includeShiny && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id, true)) {
                return false;
            }
        }
        return true;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="RegionRoute.ts"/>
///<reference path="../../scripts/GameConstants.d.ts" />
/// <reference path="../../declarations/weather/WeatherType.d.ts"/>
/// <reference path="../achievements/WeatherRequirement.ts"/>
class Routes {
    constructor() { }
    static add(route) {
        this.regionRoutes.push(route);
        // Sort the routes so we can normalize the route number
        this.sortRegionRoutes();
    }
    static sortRegionRoutes() {
        this.regionRoutes
            .sort((routeA, routeB) => routeA.orderNumber - routeB.orderNumber)
            .sort((routeA, routeB) => routeA.region - routeB.region);
    }
    static getRoute(region, route) {
        return this.regionRoutes.find(routeData => routeData.region == region && routeData.number == route);
    }
    static getRoutesByRegion(region) {
        return this.regionRoutes.filter(routeData => routeData.region == region);
    }
    static getRegionByRoute(route) {
        return this.regionRoutes.find(routeData => routeData.number == route).region;
    }
    static getName(route, region) {
        return this.regionRoutes.find(routeData => routeData.region == region && routeData.number == route).routeName;
    }
    static unnormalizeRoute(normalizedRoute) {
        return this.regionRoutes[normalizedRoute - 1].number;
    }
    static normalizedNumber(region, route) {
        if (region == GameConstants.Region.none) {
            return route;
        }
        return this.regionRoutes.findIndex(routeData => routeData.region == region && routeData.number == route) + 1;
    }
}
Routes.regionRoutes = [];
/*
KANTO
*/
Routes.add(new RegionRoute('Kanto Route 1', GameConstants.Region.kanto, 1, new RoutePokemon({
    land: ['Pidgey', 'Rattata'],
})));
Routes.add(new RegionRoute('Kanto Route 22', GameConstants.Region.kanto, 22, new RoutePokemon({
    land: ['Rattata', 'Spearow', 'Nidoran(F)', 'Nidoran(M)', 'Mankey'],
    water: ['Magikarp', 'Poliwag', 'Poliwhirl', 'Goldeen'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 1)], 1.1));
Routes.add(new RegionRoute('Kanto Route 2', GameConstants.Region.kanto, 2, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Nidoran(F)', 'Nidoran(M)'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 1)]));
Routes.add(new RegionRoute('Kanto Route 3', GameConstants.Region.kanto, 3, new RoutePokemon({
    land: ['Rattata', 'Spearow', 'Sandshrew', 'Mankey'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 2),
    new GymBadgeRequirement(BadgeEnums.Boulder),
]));
Routes.add(new RegionRoute('Kanto Route 4', GameConstants.Region.kanto, 4, new RoutePokemon({
    land: ['Rattata', 'Spearow', 'Ekans', 'Sandshrew', 'Mankey'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Seaking'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 3),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Moon')),
]));
Routes.add(new RegionRoute('Kanto Route 24', GameConstants.Region.kanto, 24, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Venonat', 'Bellsprout'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Seaking'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)], 4.1));
Routes.add(new RegionRoute('Kanto Route 25', GameConstants.Region.kanto, 25, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Venonat', 'Bellsprout'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Krabby', 'Kingler'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 24)], 4.2));
Routes.add(new RegionRoute('Kanto Route 5', GameConstants.Region.kanto, 5, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Jigglypuff', 'Meowth', 'Abra'],
}), [
    // Need to reach bills house
    new RouteKillRequirement(10, GameConstants.Region.kanto, 25),
]));
Routes.add(new RegionRoute('Kanto Route 6', GameConstants.Region.kanto, 6, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Jigglypuff', 'Meowth', 'Abra'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Poliwag', 'Goldeen'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 5)]));
Routes.add(new RegionRoute('Kanto Route 11', GameConstants.Region.kanto, 11, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Raticate', 'Rattata', 'Drowzee'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Tentacool', 'Horsea'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)], 6.1));
Routes.add(new RegionRoute('Kanto Route 9', GameConstants.Region.kanto, 9, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Nidoran(F)', 'Nidoran(M)', 'Nidorina', 'Nidorino'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 6),
    new GymBadgeRequirement(BadgeEnums.Cascade),
]));
Routes.add(new RegionRoute('Kanto Route 10', GameConstants.Region.kanto, 10, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Nidoran(F)', 'Nidoran(M)', 'Machop', 'Magnemite'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Krabby', 'Kingler', 'Horsea'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 9),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rock Tunnel')),
]));
Routes.add(new RegionRoute('Kanto Route 8', GameConstants.Region.kanto, 8, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Vulpix', 'Jigglypuff', 'Meowth', 'Abra', 'Kadabra'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 10)], 10.1));
Routes.add(new RegionRoute('Kanto Route 7', GameConstants.Region.kanto, 7, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Vulpix', 'Jigglypuff', 'Meowth', 'Abra'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 8)], 10.2));
Routes.add(new RegionRoute('Kanto Route 12', GameConstants.Region.kanto, 12, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Farfetch\'d', 'Snorlax'],
    water: ['Slowpoke', 'Slowbro', 'Magikarp', 'Poliwag', 'Goldeen', 'Horsea', 'Seadra'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokemon Tower'))]));
Routes.add(new RegionRoute('Kanto Route 13', GameConstants.Region.kanto, 13, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Farfetch\'d'],
    water: ['Slowpoke', 'Slowbro', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacool', 'Horsea', 'Seadra'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 12),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 14),
    ]),
]));
Routes.add(new RegionRoute('Kanto Route 14', GameConstants.Region.kanto, 14, new RoutePokemon({
    land: ['Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Venomoth', 'Bellsprout', 'Weepinbell'],
    water: ['Magikarp', 'Poliwag', 'Goldeen'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 13),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
    ]),
]));
Routes.add(new RegionRoute('Kanto Route 15', GameConstants.Region.kanto, 15, new RoutePokemon({
    land: ['Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Venomoth', 'Bellsprout', 'Weepinbell'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 14),
    ]),
]));
Routes.add(new RegionRoute('Kanto Route 16', GameConstants.Region.kanto, 16, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Doduo', 'Snorlax'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokemon Tower'))]));
Routes.add(new RegionRoute('Kanto Route 17', GameConstants.Region.kanto, 17, new RoutePokemon({
    land: ['Fearow', 'Ponyta', 'Doduo', 'Dodrio'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Tentacool', 'Shellder'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 16),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
    ]),
]));
Routes.add(new RegionRoute('Kanto Route 18', GameConstants.Region.kanto, 18, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Doduo'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Tentacool', 'Shellder'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 17),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
    ]),
]));
Routes.add(new RegionRoute('Kanto Route 19', GameConstants.Region.kanto, 19, new RoutePokemon({
    water: ['Tentacool', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Staryu'],
}), [new GymBadgeRequirement(BadgeEnums.Soul)]));
Routes.add(new RegionRoute('Kanto Route 20', GameConstants.Region.kanto, 20, new RoutePokemon({
    water: ['Tentacool', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Staryu'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 21),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seafoam Islands')),
    ]),
]));
Routes.add(new RegionRoute('Kanto Route 21', GameConstants.Region.kanto, 21, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Raticate', 'Tangela'],
    water: ['Tentacool', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Staryu'],
}), [new GymBadgeRequirement(BadgeEnums.Soul)]));
Routes.add(new RegionRoute('Kanto Route 23', GameConstants.Region.kanto, 23, new RoutePokemon({
    land: ['Fearow', 'Nidorina', 'Nidorino', 'Mankey', 'Primeape'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Poliwhirl'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 22),
    new GymBadgeRequirement(BadgeEnums.Earth),
]));
/*
JOHTO
*/
Routes.add(new RegionRoute('Johto Route 29', GameConstants.Region.johto, 29, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Sentret', 'Hoothoot'],
    headbutt: ['Exeggcute', 'Ledyba', 'Spinarak', 'Hoothoot', 'Pineco'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion)]));
Routes.add(new RegionRoute('Johto Route 30', GameConstants.Region.johto, 30, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Hoothoot', 'Ledyba', 'Spinarak'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 29)]));
Routes.add(new RegionRoute('Johto Route 31', GameConstants.Region.johto, 31, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Poliwag', 'Hoothoot', 'Ledyba', 'Spinarak', 'Bellsprout'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Spearow', 'Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Aipom', 'Pineco', 'Heracross'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 30)]));
Routes.add(new RegionRoute('Johto Route 32', GameConstants.Region.johto, 32, new RoutePokemon({
    land: ['Rattata', 'Ekans', 'Zubat', 'Bellsprout', 'Mareep', 'Hoppip', 'Wooper'],
    water: ['Tentacool', 'Tentacruel', 'Quagsire', 'Magikarp', 'Qwilfish'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Pineco'],
}), [new GymBadgeRequirement(BadgeEnums.Zephyr)]));
Routes.add(new RegionRoute('Johto Route 33', GameConstants.Region.johto, 33, new RoutePokemon({
    land: ['Spearow', 'Rattata', 'Ekans', 'Zubat', 'Hoppip'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Union Cave'))]));
Routes.add(new RegionRoute('Johto Route 34', GameConstants.Region.johto, 34, new RoutePokemon({
    land: ['Rattata', 'Abra', 'Drowzee', 'Ditto'],
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Magikarp', 'Staryu', 'Corsola', 'Kingler'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ilex Forest'))]));
Routes.add(new RegionRoute('Johto Route 35', GameConstants.Region.johto, 35, new RoutePokemon({
    land: ['Pidgey', 'Nidoran(F)', 'Nidoran(M)', 'Abra', 'Drowzee', 'Ditto', 'Hoothoot', 'Yanma'],
    water: ['Psyduck', 'Golduck', 'Poliwag', 'Magikarp'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 34)]));
Routes.add(new RegionRoute('Johto Route 36', GameConstants.Region.johto, 36, new RoutePokemon({
    land: ['Pidgey', 'Nidoran(M)', 'Nidoran(F)', 'Vulpix', 'Growlithe', 'Hoothoot', 'Stantler', 'Sudowoodo'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new GymBadgeRequirement(BadgeEnums.Plain)]));
Routes.add(new RegionRoute('Johto Route 37', GameConstants.Region.johto, 37, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Vulpix', 'Growlithe', 'Hoothoot', 'Ledyba', 'Spinarak', 'Stantler'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 36)]));
Routes.add(new RegionRoute('Johto Route 38', GameConstants.Region.johto, 38, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Meowth', 'Magnemite', 'Farfetch\'d', 'Tauros', 'Snubbull', 'Miltank'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 37)]));
Routes.add(new RegionRoute('Johto Route 39', GameConstants.Region.johto, 39, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Meowth', 'Magnemite', 'Farfetch\'d', 'Tauros', 'Miltank'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 38)]));
Routes.add(new RegionRoute('Johto Route 40', GameConstants.Region.johto, 40, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Magikarp', 'Staryu', 'Corsola', 'Kingler'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.johto, 39),
    new GymBadgeRequirement(BadgeEnums.Fog),
]));
Routes.add(new RegionRoute('Johto Route 41', GameConstants.Region.johto, 41, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Mantine', 'Magikarp', 'Chinchou', 'Shellder'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 40)]));
Routes.add(new RegionRoute('Johto Route 42', GameConstants.Region.johto, 42, new RoutePokemon({
    land: ['Spearow', 'Zubat', 'Mankey', 'Mareep', 'Flaaffy'],
    water: ['Goldeen', 'Seaking', 'Magikarp'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new GymBadgeRequirement(BadgeEnums.Fog)]));
Routes.add(new RegionRoute('Johto Route 43', GameConstants.Region.johto, 43, new RoutePokemon({
    land: ['Pidgeotto', 'Venonat', 'Noctowl', 'Mareep', 'Flaaffy', 'Girafarig'],
    water: ['Magikarp', 'Poliwag'],
    headbutt: ['Venonat', 'Exeggcute', 'Hoothoot', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 42)]));
Routes.add(new RegionRoute('Johto Route 44', GameConstants.Region.johto, 44, new RoutePokemon({
    land: ['Bellsprout', 'Weepinbell', 'Lickitung', 'Tangela'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Remoraid'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [
    new GymBadgeRequirement(BadgeEnums.Mineral),
    new GymBadgeRequirement(BadgeEnums.Glacier),
]));
Routes.add(new RegionRoute('Johto Route 45', GameConstants.Region.johto, 45, new RoutePokemon({
    land: ['Geodude', 'Graveler', 'Gligar', 'Teddiursa', 'Skarmory', 'Phanpy'],
    water: ['Magikarp', 'Poliwag', 'Dratini'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))]));
Routes.add(new RegionRoute('Johto Route 46', GameConstants.Region.johto, 46, new RoutePokemon({
    land: ['Spearow', 'Rattata', 'Geodude'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 29)], 29.1));
Routes.add(new RegionRoute('Johto Route 47', GameConstants.Region.johto, 47, new RoutePokemon({
    land: ['Raticate', 'Spearow', 'Fearow', 'Gloom', 'Farfetch\'d', 'Ditto', 'Noctowl', 'Miltank'],
    water: ['Tentacool', 'Seel', 'Staryu', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Metapod', 'Butterfree', 'Kakuna', 'Beedrill', 'Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco', 'Heracross'],
}), [new GymBadgeRequirement(BadgeEnums.Mineral)]));
Routes.add(new RegionRoute('Johto Route 48', GameConstants.Region.johto, 48, new RoutePokemon({
    land: ['Fearow', 'Vulpix', 'Gloom', 'Diglett', 'Growlithe', 'Farfetch\'d', 'Tauros', 'Hoppip', 'Girafarig'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 47)]));
Routes.add(new RegionRoute('Johto Route 26', GameConstants.Region.johto, 26, new RoutePokemon({
    land: ['Raticate', 'Arbok', 'Sandslash', 'Ponyta', 'Doduo', 'Dodrio', 'Quagsire'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 27)], 50));
Routes.add(new RegionRoute('Johto Route 27', GameConstants.Region.johto, 27, new RoutePokemon({
    land: ['Raticate', 'Arbok', 'Sandslash', 'Ponyta', 'Doduo', 'Dodrio', 'Quagsire'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new GymBadgeRequirement(BadgeEnums.Rising)], 49));
Routes.add(new RegionRoute('Johto Route 28', GameConstants.Region.johto, 28, new RoutePokemon({
    land: ['Ponyta', 'Tangela', 'Donphan', 'Ursaring', 'Rapidash', 'Doduo', 'Dodrio', 'Sneasel', 'Murkrow'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Natu', 'Aipom', 'Heracross'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)], 51));
/*
HOENN
*/
Routes.add(new RegionRoute('Hoenn Route 101', GameConstants.Region.hoenn, 101, new RoutePokemon({
    land: ['Wurmple', 'Poochyena', 'Zigzagoon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]));
Routes.add(new RegionRoute('Hoenn Route 102', GameConstants.Region.hoenn, 102, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Wurmple', 'Lotad', 'Zigzagoon', 'Ralts', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Corphish'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)]));
Routes.add(new RegionRoute('Hoenn Route 103', GameConstants.Region.hoenn, 103, new RoutePokemon({
    land: ['Poochyena', 'Wingull', 'Zigzagoon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)], 101.1));
Routes.add(new RegionRoute('Hoenn Route 104', GameConstants.Region.hoenn, 104, new RoutePokemon({
    land: ['Poochyena', 'Wurmple', 'Marill', 'Taillow', 'Wingull'],
    water: ['Wingull', 'Pelipper', 'Magikarp'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 102)]));
Routes.add(new RegionRoute('Hoenn Route 105', GameConstants.Region.hoenn, 105, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)], 115.1));
Routes.add(new RegionRoute('Hoenn Route 106', GameConstants.Region.hoenn, 106, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 105),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 107),
    ]),
], 115.2));
Routes.add(new RegionRoute('Hoenn Route 107', GameConstants.Region.hoenn, 107, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 106),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 108),
    ]),
], 115.3));
Routes.add(new RegionRoute('Hoenn Route 108', GameConstants.Region.hoenn, 108, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 107),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 109),
    ]),
], 115.4));
Routes.add(new RegionRoute('Hoenn Route 109', GameConstants.Region.hoenn, 109, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)], 115.5));
Routes.add(new RegionRoute('Hoenn Route 110', GameConstants.Region.hoenn, 110, new RoutePokemon({
    land: ['Poochyena', 'Gulpin', 'Minun', 'Oddish', 'Wingull', 'Plusle'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave')),
    new GymBadgeRequirement(BadgeEnums.Knuckle),
]));
Routes.add(new RegionRoute('Hoenn Route 111', GameConstants.Region.hoenn, 111, new RoutePokemon({
    land: ['Sandshrew', 'Trapinch', 'Baltoy', 'Cacnea'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
    headbutt: ['Geodude'],
}), [new GymBadgeRequirement(BadgeEnums.Dynamo)]));
Routes.add(new RegionRoute('Hoenn Route 112', GameConstants.Region.hoenn, 112, new RoutePokemon({
    land: ['Numel', 'Marill'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 111)]));
Routes.add(new RegionRoute('Hoenn Route 113', GameConstants.Region.hoenn, 113, new RoutePokemon({
    land: ['Spinda', 'Slugma', 'Skarmory'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fiery Path'))]));
Routes.add(new RegionRoute('Hoenn Route 114', GameConstants.Region.hoenn, 114, new RoutePokemon({
    land: ['Zangoose', 'Surskit', 'Swablu', 'Lotad', 'Lombre', 'Seviper', 'Nuzleaf'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
    headbutt: ['Geodude'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 113)]));
Routes.add(new RegionRoute('Hoenn Route 115', GameConstants.Region.hoenn, 115, new RoutePokemon({
    land: ['Swablu', 'Taillow', 'Swellow', 'Jigglypuff', 'Wingull'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))]));
Routes.add(new RegionRoute('Hoenn Route 116', GameConstants.Region.hoenn, 116, new RoutePokemon({
    land: ['Poochyena', 'Whismur', 'Nincada', 'Abra', 'Taillow', 'Skitty'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))], 104.1));
Routes.add(new RegionRoute('Hoenn Route 117', GameConstants.Region.hoenn, 117, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Oddish', 'Marill', 'Illumise', 'Volbeat', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Corphish'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 110)], 110.1));
Routes.add(new RegionRoute('Hoenn Route 118', GameConstants.Region.hoenn, 118, new RoutePokemon({
    land: ['Zigzagoon', 'Linoone', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Carvanha', 'Sharpedo'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)]));
Routes.add(new RegionRoute('Hoenn Route 119', GameConstants.Region.hoenn, 119, new RoutePokemon({
    land: ['Zigzagoon', 'Linoone', 'Oddish', 'Tropius', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Carvanha'],
    special: [
        new SpecialRoutePokemon(['Castform'], new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Sandstorm, WeatherType.Windy])),
        new SpecialRoutePokemon(['Castform (sunny)'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Castform (rainy)'], new WeatherRequirement([WeatherType.Rain, WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Castform (snowy)'], new WeatherRequirement([WeatherType.Snow, WeatherType.Blizzard, WeatherType.Hail, WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 118)]));
Routes.add(new RegionRoute('Hoenn Route 120', GameConstants.Region.hoenn, 120, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Mightyena', 'Oddish', 'Marill', 'Absol', 'Kecleon', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 119)]));
Routes.add(new RegionRoute('Hoenn Route 121', GameConstants.Region.hoenn, 121, new RoutePokemon({
    land: ['Poochyena', 'Shuppet', 'Mightyena', 'Oddish', 'Gloom', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 120)]));
Routes.add(new RegionRoute('Hoenn Route 122', GameConstants.Region.hoenn, 122, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 121),
    new GymBadgeRequirement(BadgeEnums.Feather),
]));
Routes.add(new RegionRoute('Hoenn Route 123', GameConstants.Region.hoenn, 123, new RoutePokemon({
    land: ['Poochyena', 'Shuppet', 'Mightyena', 'Oddish', 'Gloom', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 122)]));
Routes.add(new RegionRoute('Hoenn Route 124', GameConstants.Region.hoenn, 124, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Clamperl', 'Relicanth'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Aqua Hideout'))]));
Routes.add(new RegionRoute('Hoenn Route 125', GameConstants.Region.hoenn, 125, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 124)]));
Routes.add(new RegionRoute('Hoenn Route 126', GameConstants.Region.hoenn, 126, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Clamperl', 'Relicanth'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 124)]));
Routes.add(new RegionRoute('Hoenn Route 127', GameConstants.Region.hoenn, 127, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 125),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 126),
    ]),
]));
Routes.add(new RegionRoute('Hoenn Route 128', GameConstants.Region.hoenn, 128, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Luvdisc', 'Wailmer', 'Corsola'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 127)]));
Routes.add(new RegionRoute('Hoenn Route 129', GameConstants.Region.hoenn, 129, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Wailord', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 128)]));
Routes.add(new RegionRoute('Hoenn Route 130', GameConstants.Region.hoenn, 130, new RoutePokemon({
    land: ['Wynaut'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 129)]));
Routes.add(new RegionRoute('Hoenn Route 131', GameConstants.Region.hoenn, 131, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 130)]));
Routes.add(new RegionRoute('Hoenn Route 132', GameConstants.Region.hoenn, 132, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 131)]));
Routes.add(new RegionRoute('Hoenn Route 133', GameConstants.Region.hoenn, 133, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 132)]));
Routes.add(new RegionRoute('Hoenn Route 134', GameConstants.Region.hoenn, 134, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 133)]));
/*
SINNOH
*/
Routes.add(new RegionRoute('Sinnoh Route 201', GameConstants.Region.sinnoh, 201, new RoutePokemon({
    land: ['Starly', 'Bidoof', 'Kricketot'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)]));
Routes.add(new RegionRoute('Sinnoh Route 202', GameConstants.Region.sinnoh, 202, new RoutePokemon({
    land: ['Starly', 'Bidoof', 'Kricketot', 'Shinx'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 201)]));
Routes.add(new RegionRoute('Sinnoh Route 203', GameConstants.Region.sinnoh, 203, new RoutePokemon({
    land: ['Zubat', 'Abra', 'Starly', 'Bidoof', 'Kricketot', 'Shinx'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)]));
Routes.add(new RegionRoute('Sinnoh Route 204', GameConstants.Region.sinnoh, 204, new RoutePokemon({
    land: ['Zubat', 'Wurmple', 'Starly', 'Bidoof', 'Kricketot', 'Shinx', 'Budew'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)]));
Routes.add(new RegionRoute('Sinnoh Route 205', GameConstants.Region.sinnoh, 205, new RoutePokemon({
    land: ['Bidoof', 'Hoothoot', 'Wurmple', 'Silcoon', 'Beautifly', 'Cascoon', 'Dustox', 'Kricketot', 'Budew', 'Drifloon'],
    water: ['Wingull', 'Pelipper', 'Buizel', 'Tentacool', 'Tentacruel', 'Shellos (west)', 'Gastrodon (west)', 'Magikarp', 'Finneon', 'Shellder', 'Gyarados', 'Lumineon', 'Psyduck', 'Golduck', 'Barboach', 'Whiscash'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 204),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ravaged Path')),
]));
Routes.add(new RegionRoute('Sinnoh Route 206', GameConstants.Region.sinnoh, 206, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Geodude', 'Ponyta', 'Gligar', 'Kricketot', 'Kricketune', 'Stunky', 'Bronzor'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Forest),
]));
Routes.add(new RegionRoute('Sinnoh Route 207', GameConstants.Region.sinnoh, 207, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Geodude', 'Ponyta', 'Kricketot'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 206)]));
Routes.add(new RegionRoute('Sinnoh Route 208', GameConstants.Region.sinnoh, 208, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Ralts', 'Meditite', 'Roselia', 'Bidoof', 'Bibarel', 'Budew'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Barboach', 'Gyarados', 'Whiscash', 'Seaking'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 207),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Coronet South')),
]));
Routes.add(new RegionRoute('Sinnoh Route 209', GameConstants.Region.sinnoh, 209, new RoutePokemon({
    land: ['Zubat', 'Gastly', 'Chansey', 'Ralts', 'Roselia', 'Duskull', 'Starly', 'Staravia', 'Bibarel', 'Bonsly', 'Mime Jr.'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 208),
    new GymBadgeRequirement(BadgeEnums.Relic),
]));
Routes.add(new RegionRoute('Sinnoh Route 210', GameConstants.Region.sinnoh, 210, new RoutePokemon({
    land: ['Geodude', 'Ponyta', 'Chansey', 'Scyther', 'Hoothoot', 'Noctowl', 'Roselia', 'Staravia', 'Kricketune', 'Bonsly', 'Mime Jr.', 'Machop', 'Machoke', 'Meditite', 'Swablu', 'Bibarel'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Barboach', 'Whiscash', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)]));
Routes.add(new RegionRoute('Sinnoh Route 211', GameConstants.Region.sinnoh, 211, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Geodude', 'Ponyta', 'Hoothoot', 'Meditite', 'Bidoof', 'Machoke', 'Graveler', 'Noctowl', 'Chingling', 'Bronzor'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213),
    new GymBadgeRequirement(BadgeEnums.Fen),
], 210.5));
Routes.add(new RegionRoute('Sinnoh Route 212', GameConstants.Region.sinnoh, 212, new RoutePokemon({
    land: ['Ralts', 'Kirlia', 'Roselia', 'Starly', 'Staravia', 'Kricketune', 'Budew', 'Croagunk'],
    water: ['Marill', 'Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Gyarados', 'Seaking'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213),
    new GymBadgeRequirement(BadgeEnums.Fen),
], 210.4));
Routes.add(new RegionRoute('Sinnoh Route 213', GameConstants.Region.sinnoh, 213, new RoutePokemon({
    land: ['Chatot'],
    water: ['Buizel', 'Floatzel', 'Tentacool', 'Tentacruel', 'Wingull', 'Pelipper', 'Shellos (east)', 'Gastrodon (east)', 'Magikarp', 'Remoraid', 'Gyarados', 'Octillery', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 214)], 210.3));
Routes.add(new RegionRoute('Sinnoh Route 214', GameConstants.Region.sinnoh, 214, new RoutePokemon({
    land: ['Zubat', 'Geodude', 'Graveler', 'Ponyta', 'Rhyhorn', 'Sudowoodo', 'Girafarig', 'Houndour', 'Kricketune', 'Stunky'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 215)], 210.2));
Routes.add(new RegionRoute('Sinnoh Route 215', GameConstants.Region.sinnoh, 215, new RoutePokemon({
    land: ['Abra', 'Kadabra', 'Geodude', 'Ponyta', 'Lickitung', 'Scyther', 'Staravia', 'Kricketune', 'Marill'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 210)], 210.1));
Routes.add(new RegionRoute('Sinnoh Route 216', GameConstants.Region.sinnoh, 216, new RoutePokemon({
    land: ['Zubat', 'Machoke', 'Graveler', 'Noctowl', 'Sneasel', 'Meditite', 'Snorunt', 'Snover'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Coronet North')),
]));
Routes.add(new RegionRoute('Sinnoh Route 217', GameConstants.Region.sinnoh, 217, new RoutePokemon({
    land: ['Zubat', 'Machoke', 'Noctowl', 'Sneasel', 'Swinub', 'Meditite', 'Medicham', 'Snorunt', 'Snover'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 216)]));
Routes.add(new RegionRoute('Sinnoh Route 218', GameConstants.Region.sinnoh, 218, new RoutePokemon({
    land: ['Mr. Mime', 'Glameow', 'Chatot'],
    water: ['Wingull', 'Floatzel', 'Shellos (west)', 'Gastrodon (west)', 'Tentacool', 'Tentacruel', 'Pelipper', 'Magikarp', 'Finneon', 'Gyarados', 'Lumineon'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213),
    new GymBadgeRequirement(BadgeEnums.Fen),
]));
Routes.add(new RegionRoute('Sinnoh Route 219', GameConstants.Region.sinnoh, 219, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Wingull', 'Pelipper', 'Magikarp', 'Finneon', 'Lumineon', 'Gyarados', 'Clamperl'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213),
    new GymBadgeRequirement(BadgeEnums.Fen),
]));
Routes.add(new RegionRoute('Sinnoh Route 220', GameConstants.Region.sinnoh, 220, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Wingull', 'Pelipper', 'Magikarp', 'Finneon', 'Lumineon', 'Gyarados', 'Chinchou', 'Lanturn'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 219)]));
Routes.add(new RegionRoute('Sinnoh Route 221', GameConstants.Region.sinnoh, 221, new RoutePokemon({
    land: ['Sudowoodo', 'Girafarig', 'Roselia', 'Stunky', 'Skuntank'],
    water: ['Wingull', 'Floatzel', 'Shellos (west)', 'Gastrodon (west)', 'Tentacool', 'Tentacruel', 'Pelipper', 'Magikarp', 'Finneon', 'Lumineon', 'Gyarados', 'Clamperl'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 220)]));
Routes.add(new RegionRoute('Sinnoh Route 222', GameConstants.Region.sinnoh, 222, new RoutePokemon({
    land: ['Magnemite', 'Magneton', 'Mr. Mime', 'Electabuzz', 'Luxio', 'Glameow', 'Purugly', 'Chatot'],
    water: ['Wingull', 'Pelipper', 'Floatzel', 'Gastrodon (east)', 'Tentacool', 'Tentacruel', 'Magikarp', 'Remoraid', 'Gyarados', 'Octillery', 'Sharpedo'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 217),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World')),
]));
Routes.add(new RegionRoute('Sinnoh Route 223', GameConstants.Region.sinnoh, 223, new RoutePokemon({
    water: ['Tentacruel', 'Pelipper', 'Mantyke', 'Magikarp', 'Remoraid', 'Octillery', 'Gyarados', 'Wailmer', 'Wailord'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 222),
    new GymBadgeRequirement(BadgeEnums.Beacon),
]));
Routes.add(new RegionRoute('Sinnoh Route 224', GameConstants.Region.sinnoh, 224, new RoutePokemon({
    land: ['Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Beautifly', 'Dustox', 'Roselia', 'Chatot'],
    water: ['Pelipper', 'Buizel', 'Floatzel', 'Shellos (east)', 'Gastrodon (east)', 'Tentacruel', 'Magikarp', 'Remoraid', 'Gyarados', 'Octillery', 'Luvdisc'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh')),
]));
Routes.add(new RegionRoute('Sinnoh Route 225', GameConstants.Region.sinnoh, 225, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Machoke', 'Graveler', 'Roselia', 'Skuntank', 'Banette'],
    water: ['Psyduck', 'Golduck', 'Poliwhirl', 'Magikarp', 'Barboach', 'Gyarados', 'Whiscash'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 224),
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
]));
Routes.add(new RegionRoute('Sinnoh Route 226', GameConstants.Region.sinnoh, 226, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Machoke', 'Graveler', 'Banette'],
    water: ['Golduck', 'Tentacruel', 'Seel', 'Dewgong', 'Wingull', 'Pelipper', 'Spheal', 'Sealeo', 'Magikarp', 'Horsea', 'Seadra', 'Gyarados', 'Relicanth'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 225)]));
Routes.add(new RegionRoute('Sinnoh Route 227', GameConstants.Region.sinnoh, 227, new RoutePokemon({
    land: ['Fearow', 'Golbat', 'Graveler', 'Weezing', 'Rhyhorn', 'Rhydon', 'Skarmory', 'Numel', 'Camerupt', 'Banette'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Barboach', 'Gyarados', 'Whiscash'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 226)]));
Routes.add(new RegionRoute('Sinnoh Route 228', GameConstants.Region.sinnoh, 228, new RoutePokemon({
    land: ['Diglett', 'Dugtrio', 'Rhydon', 'Cacnea', 'Cacturne', 'Hippowdon'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Barboach', 'Whiscash', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 226)]));
Routes.add(new RegionRoute('Sinnoh Route 229', GameConstants.Region.sinnoh, 229, new RoutePokemon({
    land: ['Pidgey', 'Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Scyther', 'Pinsir', 'Ledian', 'Ariados', 'Beautifly', 'Dustox', 'Volbeat', 'Illumise', 'Roselia', 'Purugly'],
    water: ['Wingull', 'Pelipper', 'Surskit', 'Masquerain', 'Magikarp', 'Goldeen', 'Gyarados', 'Seaking'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 228)]));
Routes.add(new RegionRoute('Sinnoh Route 230', GameConstants.Region.sinnoh, 230, new RoutePokemon({
    land: ['Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Beautifly', 'Dustox', 'Roselia'],
    water: ['Golduck', 'Wingull', 'Pelipper', 'Floatzel', 'Gastrodon (east)', 'Tentacruel', 'Seel', 'Dewgong', 'Spheal', 'Sealeo', 'Magikarp', 'Remoraid', 'Gyarados', 'Octillery', 'Wailmer', 'Wailord'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 229)]));
/*
UNOVA
*/
Routes.add(new RegionRoute('Unova Route 19', GameConstants.Region.unova, 19, new RoutePokemon({
    land: ['Patrat', 'Purrloin'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)], 0.1));
Routes.add(new RegionRoute('Unova Route 20', GameConstants.Region.unova, 20, new RoutePokemon({
    land: ['Sunkern', 'Pidove', 'Venipede', 'Patrat', 'Purrloin', 'Sewaddle'],
    water: ['Azurill', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 19)], 0.2));
Routes.add(new RegionRoute('Unova Route 4', GameConstants.Region.unova, 4, new RoutePokemon({
    land: ['Sandile', 'Darumaka', 'Trubbish', 'Minccino', 'Scraggy'],
    water: ['Frillish'],
}), [new GymBadgeRequirement(BadgeEnums.Toxic)]));
Routes.add(new RegionRoute('Desert Resort', GameConstants.Region.unova, 25, new RoutePokemon({
    land: ['Sandshrew', 'Trapinch', 'Maractus', 'Darumaka', 'Dwebble', 'Scraggy', 'Sigilyph', 'Sandile'],
    water: [],
}), [
    new MultiRequirement([
        new RouteKillRequirement(10, GameConstants.Region.unova, 4),
        new GymBadgeRequirement(BadgeEnums.Insect),
    ]),
], 4));
Routes.add(new RegionRoute('Unova Route 5', GameConstants.Region.unova, 5, new RoutePokemon({
    land: ['Gothita', 'Minccino', 'Trubbish', 'Liepard', 'Solosis'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 4),
    new GymBadgeRequirement(BadgeEnums.Insect),
]));
Routes.add(new RegionRoute('Unova Route 16', GameConstants.Region.unova, 16, new RoutePokemon({
    land: ['Gothita', 'Minccino', 'Trubbish', 'Liepard', 'Solosis'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 4),
    new GymBadgeRequirement(BadgeEnums.Insect),
], 5));
Routes.add(new RegionRoute('Unova Route 6', GameConstants.Region.unova, 6, new RoutePokemon({
    land: ['Marill', 'Deerling (Spring)', 'Deerling (Autumn)', 'Karrablast', 'Tranquill', 'Foongus', 'Swadloon', 'Vanillite', 'Shelmet'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 5),
    new GymBadgeRequirement(BadgeEnums.Bolt),
]));
Routes.add(new RegionRoute('Unova Route 7', GameConstants.Region.unova, 7, new RoutePokemon({
    land: ['Zangoose', 'Seviper', 'Cubchoo', 'Deerling (Summer)', 'Deerling (Winter)', 'Watchog', 'Tranquill', 'Foongus'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
    new GymBadgeRequirement(BadgeEnums.Quake),
]));
Routes.add(new RegionRoute('Unova Route 13', GameConstants.Region.unova, 13, new RoutePokemon({
    land: ['Tangela', 'Pelipper', 'Drifblim', 'Absol', 'Lunatone', 'Solrock'],
    water: ['Staryu', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Frillish'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))]));
Routes.add(new RegionRoute('Undella Bay', GameConstants.Region.unova, 24, new RoutePokemon({
    land: [],
    water: ['Frillish', 'Mantyke', 'Spheal', 'Remoraid', 'Jellicent', 'Wailmer', 'Chinchou', 'Ducklett'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))], 13));
Routes.add(new RegionRoute('Unova Route 14', GameConstants.Region.unova, 14, new RoutePokemon({
    land: ['Golduck', 'Swablu', 'Mienfoo', 'Drifblim', 'Absol', 'Altaria'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))], 13));
Routes.add(new RegionRoute('Unova Route 12', GameConstants.Region.unova, 12, new RoutePokemon({
    land: ['Pinsir', 'Heracross', 'Roselia', 'Combee', 'Tranquill', 'Sewaddle'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 13)], 13.1));
Routes.add(new RegionRoute('Unova Route 11', GameConstants.Region.unova, 11, new RoutePokemon({
    land: ['Golduck', 'Marill', 'Gligar', 'Zangoose', 'Seviper', 'Karrablast', 'Amoonguss', 'Shelmet'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 12)], 13.2));
Routes.add(new RegionRoute('Unova Route 9', GameConstants.Region.unova, 9, new RoutePokemon({
    land: ['Muk', 'Liepard', 'Garbodor', 'Minccino', 'Gothorita', 'Duosion', 'Pawniard'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 11)], 13.3));
Routes.add(new RegionRoute('Unova Route 21', GameConstants.Region.unova, 21, new RoutePokemon({
    water: ['Mantyke', 'Remoraid', 'Spheal', 'Luvdisc'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seaside Cave'))]));
Routes.add(new RegionRoute('Unova Route 22', GameConstants.Region.unova, 22, new RoutePokemon({
    land: ['Golduck', 'Marill', 'Delibird', 'Pelipper', 'Lunatone', 'Solrock', 'Amoonguss', 'Mienfoo'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 21)]));
Routes.add(new RegionRoute('Unova Route 23', GameConstants.Region.unova, 23, new RoutePokemon({
    land: ['Golduck', 'Gligar', 'Amoonguss', 'Mienfoo', 'Bouffalant', 'Rufflet', 'Vullaby'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm'))]));
Routes.add(new RegionRoute('Unova Route 8', GameConstants.Region.unova, 8, new RoutePokemon({
    land: ['Croagunk', 'Tympole', 'Palpitoad', 'Karrablast', 'Shelmet', 'Stunfisk'],
}), [
    new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new MultiRequirement([
            new RouteKillRequirement(10, GameConstants.Region.unova, 9),
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
        ]),
    ]),
], 23.1));
Routes.add(new RegionRoute('Unova Route 15', GameConstants.Region.unova, 15, new RoutePokemon({
    land: ['Sandslash', 'Gligar', 'Pupitar'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.unova, 14),
        new RouteKillRequirement(10, GameConstants.Region.unova, 16),
    ]),
    new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
], 23.1));
Routes.add(new RegionRoute('Unova Route 3', GameConstants.Region.unova, 3, new RoutePokemon({
    land: ['Yanma', 'Watchog', 'Herdier', 'Purrloin', 'Tranquill'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))], 23.1));
Routes.add(new RegionRoute('Unova Route 2', GameConstants.Region.unova, 2, new RoutePokemon({
    land: ['Jigglypuff', 'Lickitung', 'Watchog', 'Herdier', 'Liepard'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 3)], 23.2));
Routes.add(new RegionRoute('Unova Route 1', GameConstants.Region.unova, 1, new RoutePokemon({
    land: ['Jigglypuff', 'Watchog', 'Herdier', 'Scrafty'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 2)], 23.3));
Routes.add(new RegionRoute('Unova Route 17', GameConstants.Region.unova, 17, new RoutePokemon({
    land: ['Frillish', 'Alomomola'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 1)], 23.4));
Routes.add(new RegionRoute('Unova Route 18', GameConstants.Region.unova, 18, new RoutePokemon({
    land: ['Tropius', 'Carnivine', 'Watchog', 'Crustle', 'Scrafty'],
    water: ['Frillish', 'Alomomola'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 17)], 23.5));
/*
KALOS
*/
Routes.add(new RegionRoute('Kalos Route 1', GameConstants.Region.kalos, 1, new RoutePokemon({
    land: ['Rattata'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)]));
Routes.add(new RegionRoute('Kalos Route 2', GameConstants.Region.kalos, 2, new RoutePokemon({
    land: ['Caterpie', 'Weedle', 'Pidgey', 'Zigzagoon', 'Fletchling', 'Bunnelby', 'Scatterbug'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 1)]));
Routes.add(new RegionRoute('Kalos Route 3', GameConstants.Region.kalos, 3, new RoutePokemon({
    land: ['Pidgey', 'Pikachu', 'Dunsparce', 'Azurill', 'Bidoof', 'Burmy (plant)', 'Bunnelby', 'Fletchling', 'Dunsparce'],
    water: ['Magikarp', 'Goldeen', 'Marill', 'Masquerain'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Santalune Forest'))]));
Routes.add(new RegionRoute('Kalos Route 4', GameConstants.Region.kalos, 4, new RoutePokemon({
    land: ['Ledyba', 'Ralts', 'Skitty', 'Budew', 'Combee', 'Flabébé (Red)', 'Flabébé (Orange)', 'Flabébé (White)'],
}), [new GymBadgeRequirement(BadgeEnums.Bug)]));
Routes.add(new RegionRoute('Kalos Route 5', GameConstants.Region.kalos, 5, new RoutePokemon({
    land: ['Abra', 'Doduo', 'Plusle', 'Minun', 'Gulpin', 'Bunnelby', 'Skiddo', 'Pancham', 'Furfrou'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 4)]));
Routes.add(new RegionRoute('Kalos Route 6', GameConstants.Region.kalos, 6, new RoutePokemon({
    land: ['Oddish', 'Sentret', 'Nincada', 'Kecleon', 'Espurr', 'Honedge'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 5)]));
Routes.add(new RegionRoute('Kalos Route 7', GameConstants.Region.kalos, 7, new RoutePokemon({
    land: ['Smeargle', 'Volbeat', 'Illumise', 'Roselia', 'Croagunk', 'Ducklett', 'Flabébé (Orange)', 'Flabébé (White)', 'Spritzee', 'Swirlix'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Parfum Palace'))]));
Routes.add(new RegionRoute('Kalos Route 8', GameConstants.Region.kalos, 8, new RoutePokemon({
    land: ['Spoink', 'Zangoose', 'Seviper', 'Absol', 'Bagon', 'Drifloon', 'Mienfoo', 'Inkay'],
    water: ['Tentacool', 'Shellder', 'Staryu', 'Wailmer', 'Luvdisc', 'Skrelp', 'Clauncher'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Connecting Cave'))]));
Routes.add(new RegionRoute('Kalos Route 9', GameConstants.Region.kalos, 9, new RoutePokemon({
    land: ['Hippopotas', 'Sandile', 'Helioptile'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 8)]));
Routes.add(new RegionRoute('Kalos Route 10', GameConstants.Region.kalos, 10, new RoutePokemon({
    land: ['Eevee', 'Snubbull', 'Houndour', 'Electrike', 'Sigilyph', 'Emolga', 'Golett', 'Hawlucha'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glittering Cave'))]));
Routes.add(new RegionRoute('Kalos Route 11', GameConstants.Region.kalos, 11, new RoutePokemon({
    land: ['Nidorina', 'Nidorino', 'Hariyama', 'Staravia', 'Chingling', 'Stunky', 'Throh', 'Sawk', 'Dedenne'],
}), [
    new GymBadgeRequirement(BadgeEnums.Cliff),
    new RouteKillRequirement(10, GameConstants.Region.kalos, 10),
]));
Routes.add(new RegionRoute('Kalos Route 12', GameConstants.Region.kalos, 12, new RoutePokemon({
    land: ['Slowpoke', 'Exeggcute', 'Pinsir', 'Tauros', 'Heracross', 'Miltank', 'Pachirisu', 'Chatot'],
    water: ['Tentacool', 'Lapras', 'Remoraid', 'Clamperl', 'Mantyke'],
}), [new GymBadgeRequirement(BadgeEnums.Rumble)]
//Replace req with Tower of Mastery dungeon if implemented.
));
Routes.add(new RegionRoute('Kalos Route 13', GameConstants.Region.kalos, 13, new RoutePokemon({
    land: ['Dugtrio', 'Trapinch', 'Gible'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)]));
Routes.add(new RegionRoute('Kalos Route 14', GameConstants.Region.kalos, 14, new RoutePokemon({
    land: ['Weepinbell', 'Haunter', 'Quagsire', 'Skorupi', 'Carnivine', 'Karrablast', 'Shelmet', 'Goomy'],
    water: ['Poliwag', 'Poliwhirl', 'Barboach', 'Stunfisk'],
}), [new GymBadgeRequirement(BadgeEnums.Voltage)]));
Routes.add(new RegionRoute('Kalos Route 15', GameConstants.Region.kalos, 15, new RoutePokemon({
    land: ['Mightyena', 'Skorupi', 'Watchog', 'Liepard', 'Foongus', 'Pawniard', 'Klefki'],
    water: ['Poliwag', 'Poliwhirl', 'Lombre', 'Floatzel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokéball Factory'))]
//Replace req with Pokéball Factory dungeon if implemented.
));
Routes.add(new RegionRoute('Kalos Route 16', GameConstants.Region.kalos, 16, new RoutePokemon({
    land: ['Weepinbell', 'Floatzel', 'Skorupi', 'Foongus', 'Klefki', 'Phantump', 'Pumpkaboo'],
    water: ['Poliwag', 'Poliwhirl', 'Lombre', 'Floatzel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]));
Routes.add(new RegionRoute('Kalos Route 17', GameConstants.Region.kalos, 17, new RoutePokemon({
    land: ['Sneasel', 'Delibird', 'Snover', 'Abomasnow'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Frost Cavern'))]));
Routes.add(new RegionRoute('Kalos Route 18', GameConstants.Region.kalos, 18, new RoutePokemon({
    land: ['Sandslash', 'Graveler', 'Pupitar', 'Lairon', 'Torkoal', 'Gurdurr', 'Heatmor', 'Durant'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ'))]));
Routes.add(new RegionRoute('Kalos Route 19', GameConstants.Region.kalos, 19, new RoutePokemon({
    land: ['Weepinbell', 'Haunter', 'Quagsire', 'Drapion', 'Carnivine', 'Karrablast', 'Shelmet', 'Sliggoo'],
    water: ['Poliwag', 'Poliwhirl', 'Barboach', 'Stunfisk', 'Politoed'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)]));
Routes.add(new RegionRoute('Kalos Route 20', GameConstants.Region.kalos, 20, new RoutePokemon({
    land: ['Jigglypuff', 'Noctowl', 'Zoroark', 'Gothorita', 'Amoonguss', 'Trevenant'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)]));
Routes.add(new RegionRoute('Kalos Route 21', GameConstants.Region.kalos, 21, new RoutePokemon({
    land: ['Scyther', 'Ursaring', 'Spinda', 'Altaria', 'Floatzel'],
    water: ['Poliwag', 'Poliwhirl', 'Lombre', 'Floatzel', 'Basculin (Red-Striped)', 'Dratini'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)]));
Routes.add(new RegionRoute('Kalos Route 22', GameConstants.Region.kalos, 22, new RoutePokemon({
    land: ['Psyduck', 'Farfetch\'d', 'Azumarill', 'Dunsparce', 'Azurill', 'Bidoof', 'Bibarel', 'Riolu', 'Bunnelby', 'Diggersby', 'Litleo'],
    water: ['Magikarp', 'Goldeen', 'Azumarill', 'Carvanha'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)]));
Routes.add(new RegionRoute('Azure Bay', GameConstants.Region.kalos, 23, new RoutePokemon({
    land: ['Slowpoke', 'Exeggcute', 'Chatot', 'Inkay'],
    water: ['Tentacool', 'Lapras', 'Chinchou', 'Remoraid', 'Luvdisc', 'Mantyke'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)], 12));
// From here down :
// - No named routes
// - Missing numbered route
// - No requirements
/*
ALOLA
*/
Routes.add(new RegionRoute('Alola Route 1', GameConstants.Region.alola, 1, new RoutePokemon({
    land: ['Caterpie', 'Alolan Rattata', 'Ledyba', 'Spinarak', 'Pichu', 'Buneary', 'Pikipek', 'Yungoos', 'Grubbin'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)]));
Routes.add(new RegionRoute('Route 1 Hau\'oli Outskirts', GameConstants.Region.alola, 18, new RoutePokemon({
    land: ['Slowpoke', 'Wingull', 'Inkay'],
    water: ['Tentacool', 'Mantyke', 'Finneon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 1)], 1.1));
Routes.add(new RegionRoute('Alola Route 2', GameConstants.Region.alola, 2, new RoutePokemon({
    land: ['Alolan Rattata', 'Spearow', 'Ekans', 'Alolan Meowth', 'Growlithe', 'Abra', 'Drowzee', 'Smeargle', 'Makuhita', 'Furfrou', 'Yungoos', 'Cutiefly'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Trainers\' School'))]));
Routes.add(new RegionRoute('Alola Route 3', GameConstants.Region.alola, 3, new RoutePokemon({
    land: ['Spearow', 'Mankey', 'Bagon', 'Rufflet', 'Vullaby', 'Hawlucha', 'Cutiefly'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Verdant Cavern'))]));
Routes.add(new RegionRoute('Melemele Sea', GameConstants.Region.alola, 19, new RoutePokemon({
    water: ['Tentacool', 'Magikarp', 'Corsola', 'Remoraid', 'Wingull', 'Clamperl', 'Luvdisc', 'Mantyke', 'Finneon', 'Wishiwashi (Solo)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill'))], 5.1));
Routes.add(new RegionRoute('Kala\'e Bay', GameConstants.Region.alola, 20, new RoutePokemon({
    land: ['Alolan Rattata', 'Slowpoke', 'Wingull', 'Bagon', 'Yungoos'],
    water: ['Tentacool', 'Shellder', 'Magikarp', 'Remoraid', 'Wingull', 'Finneon', 'Mantyke', 'Wishiwashi (Solo)'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seaward Cave')),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill')),
], 5.2));
Routes.add(new RegionRoute('Alola Route 4', GameConstants.Region.alola, 4, new RoutePokemon({
    land: ['Alolan Rattata', 'Eevee', 'Igglybuff', 'Lillipup', 'Pikipek', 'Yungoos', 'Grubbin', 'Mudbray'],
}), [new GymBadgeRequirement(BadgeEnums.MelemeleKahuna)]));
Routes.add(new RegionRoute('Alola Route 5', GameConstants.Region.alola, 5, new RoutePokemon({
    land: ['Caterpie', 'Metapod', 'Butterfree', 'Bonsly', 'Lillipup', 'Pikipek', 'Trumbeak', 'Grubbin', 'Fomantis'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Paniola Ranch'))]));
Routes.add(new RegionRoute('Alola Route 6', GameConstants.Region.alola, 6, new RoutePokemon({
    land: ['Alolan Rattata', 'Eevee', 'Igglybuff', 'Lillipup', 'Pikipek', 'Yungoos', 'Grubbin', 'Mudbray', 'Oricorio (Pa\'u)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill'))]));
Routes.add(new RegionRoute('Alola Route 7', GameConstants.Region.alola, 7, new RoutePokemon({
    water: ['Tentacool', 'Staryu', 'Magikarp', 'Wingull', 'Finneon', 'Wishiwashi (Solo)', 'Pyukumuku'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 6)]));
Routes.add(new RegionRoute('Alola Route 8', GameConstants.Region.alola, 8, new RoutePokemon({
    land: ['Alolan Rattata', 'Fletchling', 'Trumbeak', 'Yungoos', 'Stufful'],
    water: ['Tentacool', 'Magikarp', 'Chinchou', 'Remoraid', 'Finneon', 'Mantyke', 'Wishiwashi (Solo)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Wela Volcano Park'))]));
Routes.add(new RegionRoute('Alola Route 9', GameConstants.Region.alola, 9, new RoutePokemon({
    water: ['Magikarp', 'Corsola', 'Luvdisc', 'Wishiwashi (Solo)', 'Mareanie'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Diglett\'s Tunnel'))]));
Routes.add(new RegionRoute('Akala Outskirts', GameConstants.Region.alola, 21, new RoutePokemon({
    land: ['Alolan Raticate', 'Natu', 'Wingull', 'Nosepass', 'Gumshoos', 'Stufful'],
    water: ['Magikarp', 'Chinchou', 'Wishiwashi (Solo)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Memorial Hill'))], 9.1));
Routes.add(new RegionRoute('Alola Route 10', GameConstants.Region.alola, 10, new RoutePokemon({
    land: ['Alolan Raticate', 'Fearow', 'Ledian', 'Ariados', 'Skarmory', 'Pancham', 'Gumshoos'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Malie Garden'))]));
Routes.add(new RegionRoute('Mount Hokulani', GameConstants.Region.alola, 22, new RoutePokemon({
    land: ['Fearow', 'Ditto', 'Cleffa', 'Skarmory', 'Elekid', 'Beldum', 'Elgyem', 'Minior (Meteor)', 'Minior (Blue-core)', 'Minior (Green-core)', 'Minior (Indigo-core)', 'Minior (Orange-core)', 'Minior (Red-core)', 'Minior (Violet-core)', 'Minior (Yellow-core)'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 10)], 10.1));
Routes.add(new RegionRoute('Alola Route 11', GameConstants.Region.alola, 11, new RoutePokemon({
    land: ['Parasect', 'Ledian', 'Ariados', 'Pancham', 'Trumbeak', 'Komala'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Malie Garden'))]));
Routes.add(new RegionRoute('Alola Route 12', GameConstants.Region.alola, 12, new RoutePokemon({
    land: ['Alolan Geodude', 'Alolan Graveler', 'Houndoom', 'Manectric', 'Torkoal', 'Mudbray'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.alola, 11),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Hokulani Observatory')),
]));
Routes.add(new RegionRoute('Alola Route 13', GameConstants.Region.alola, 13, new RoutePokemon({
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Bruxish'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 12)]));
Routes.add(new RegionRoute('Alola Route 14', GameConstants.Region.alola, 14, new RoutePokemon({
    water: ['Tentacruel', 'Magikarp', 'Pelipper', 'Finneon', 'Frillish', 'Wishiwashi (Solo)', 'Bruxish'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 13)]));
Routes.add(new RegionRoute('Alola Haina Desert', GameConstants.Region.alola, 23, new RoutePokemon({
    land: ['Alolan Dugtrio', 'Trapinch', 'Baltoy', 'Gabite', 'Krokorok', 'Golett'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Thrifty Megamart'))]));
Routes.add(new RegionRoute('Alola Route 15', GameConstants.Region.alola, 15, new RoutePokemon({
    land: ['Alolan Raticate', 'Slowpoke', 'Pelipper', 'Gumshoos'],
    water: ['Tentacruel', 'Magikarp', 'Clamperl', 'Finneon', 'Wishiwashi (Solo)', 'Bruxish'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Thrifty Megamart'))]));
Routes.add(new RegionRoute('Alola Route 16', GameConstants.Region.alola, 16, new RoutePokemon({
    land: ['Alolan Raticate', 'Slowpoke', 'Pelipper', 'Scraggy', 'Gumshoos'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 15)]));
Routes.add(new RegionRoute('Alola Route 17', GameConstants.Region.alola, 17, new RoutePokemon({
    land: ['Alolan Raticate', 'Fearow', 'Alolan Graveler', 'Ledian', 'Ariados', 'Scraggy', 'Bisharp', 'Gumshoos'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ula\'ula Meadow'))]));
Routes.add(new RegionRoute('Poni Wilds', GameConstants.Region.alola, 24, new RoutePokemon({
    land: ['Granbull', 'Pelipper', 'Gastrodon (east)', 'Furfrou', 'Inkay'],
    water: ['Dhelmise'],
}), [new GymBadgeRequirement(BadgeEnums.UlaulaKahuna)] //replace with Aether Paradise 2 if implemented
));
Routes.add(new RegionRoute('Ancient Poni Path', GameConstants.Region.alola, 25, new RoutePokemon({
    land: ['Granbull', 'Pelipper', 'Gastrodon (east)', 'Furfrou', 'Inkay'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 24)]));
Routes.add(new RegionRoute('Poni Breaker Coast', GameConstants.Region.alola, 26, new RoutePokemon({
    water: ['Tentacruel', 'Lapras', 'Magikarp', 'Pelipper', 'Carvanha', 'Wailmer', 'Relicanth', 'Gastrodon (east)', 'Lumineon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 25)]));
Routes.add(new RegionRoute('Poni Grove', GameConstants.Region.alola, 27, new RoutePokemon({
    land: ['Pinsir', 'Heracross', 'Buneary', 'Riolu', 'Zoroark', 'Trumbeak'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)]));
Routes.add(new RegionRoute('Poni Plains', GameConstants.Region.alola, 28, new RoutePokemon({
    land: ['Alolan Raticate', 'Fearow', 'Hypno', 'Tauros', 'Miltank', 'Pelipper', 'Hariyama', 'Cottonee', 'Petilil', 'Trumbeak', 'Gumshoos', 'Mudsdale'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 27)]));
Routes.add(new RegionRoute('Poni Coast', GameConstants.Region.alola, 29, new RoutePokemon({
    land: ['Alolan Dugtrio'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 28)]));
Routes.add(new RegionRoute('Poni Gauntlet', GameConstants.Region.alola, 30, new RoutePokemon({
    land: ['Pelipper', 'Lickitung', 'Golduck', 'Granbull', 'Inkay', 'Bewear'],
    water: ['Magikarp', 'Dratini', 'Barboach'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 29)]));
/*
GALAR
*/
Routes.add(new RegionRoute('Galar Route 1', GameConstants.Region.galar, 1, new RoutePokemon({
    land: ['Skwovet', 'Rookidee', 'Blipbug', 'Wooloo', 'Nickit', 'Caterpie', 'Hoothoot', 'Grubbin'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slumbering Weald'))]));
Routes.add(new RegionRoute('Galar Route 2', GameConstants.Region.galar, 2, new RoutePokemon({
    land: ['Skwovet', 'Rookidee', 'Nickit', 'Chewtle', 'Yamper', 'Galarian Zigzagoon', 'Seedot', 'Hoothoot', 'Lotad', 'Purrloin'],
    water: ['Magikarp', 'Arrokuda'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 1)]));
Routes.add(new RegionRoute('Rolling Fields', GameConstants.Region.galar, 3, new RoutePokemon({
    land: ['Diglett', 'Butterfree', 'Pidove', 'Roggenrola', 'Tyrogue', 'Metapod', 'Pancham', 'Bunnelby', 'Onix', 'Ninjask', 'Diggersby', 'Dubwool'],
    headbutt: ['Cherubi', 'Skwovet'],
    special: [
        new SpecialRoutePokemon(['Combee', 'Mudsdale', 'Pangoro', 'Roselia', 'Vespiquen', 'Bounsweet', 'Minccino'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Pangoro', 'Mudsdale', 'Roselia', 'Ralts', 'Budew', 'Oddish'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Roselia', 'Lotad', 'Nuzleaf', 'Wingull', 'Pelipper', 'Pangoro', 'Haunter'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Electrike', 'Haunter', 'Pangoro', 'Pikachu', 'Manectric', 'Wingull', 'Joltik'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Vanillite', 'Piloswine', 'Roselia', 'Minccino', 'Swinub'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Swinub', 'Snorunt', 'Vanillite', 'Mime Jr.', 'Piloswine'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Baltoy', 'Mudbray', 'Roselia', 'Pangoro', 'Mudsdale'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Baltoy', 'Dwebble', 'Golett', 'Roselia', 'Crustle', 'Mudsdale'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Mudsdale', 'Natu', 'Munna', 'Ralts', 'Kirlia', 'Roselia', 'Gardevoir'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 2)]));
Routes.add(new RegionRoute('Dappled Grove', GameConstants.Region.galar, 4, new RoutePokemon({
    land: ['Lombre', 'Nuzleaf', 'Orbeetle', 'Bewear'],
    headbutt: ['Cherubi', 'Skwovet'],
    special: [
        new SpecialRoutePokemon(['Shiftry', 'Ludicolo', 'Vileplume', 'Bunnelby', 'Hoothoot', 'Oddish', 'Bounsweet', 'Budew', 'Seedot', 'Lotad'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Shiftry', 'Ludicolo', 'Vileplume', 'Tyrogue', 'Hoothoot', 'Oddish', 'Stufful', 'Stunky', 'Budew', 'Seedot', 'Lotad'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Lotad', 'Seedot', 'Budew', 'Tympole', 'Grubbin', 'Oddish', 'Bunnelby', 'Seismitoad', 'Ludicolo', 'Shiftry'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Electrike', 'Tympole', 'Seismitoad', 'Shiftry', 'Ludicolo', 'Oddish', 'Lotad', 'Seedot', 'Joltik', 'Budew', 'Grubbin'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snorunt', 'Snover', 'Vanillite', 'Bunnelby', 'Hoothoot', 'Delibird', 'Vanillish', 'Pangoro'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Vanillish', 'Snorunt', 'Vanillite', 'Klink', 'Bunnelby', 'Pangoro'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Baltoy', 'Mudbray', 'Budew', 'Pangoro', 'Claydol', 'Bunnelby'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Baltoy', 'Golett', 'Bunnelby', 'Bounsweet', 'Hoothoot', 'Claydol', 'Pangoro'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Mudsdale', 'Natu', 'Munna', 'Ralts', 'Kirlia', 'Roselia', 'Gardevoir'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)]));
Routes.add(new RegionRoute('West Lake Axwell', GameConstants.Region.galar, 5, new RoutePokemon({
    water: ['Goldeen', 'Magikarp', 'Remoraid', 'Wishiwashi (Solo)', 'Drednaw', 'Gyarados'],
    special: [
        new SpecialRoutePokemon(['Krabby', 'Wooper', 'Wingull', 'Bounsweet', 'Purrloin', 'Tympole', 'Frillish', 'Kingler', 'Quagsire', 'Pelipper', 'Grapploct', 'Cloyster', 'Lapras', 'Seaking'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Krabby', 'Wooper', 'Tyrogue', 'Pancham', 'Lotad', 'Seedot', 'Budew', 'Purrloin', 'Tympole', 'Frillish', 'Palpitoad', 'Quagsire', 'Pelipper', 'Grapploct', 'Jellicent', 'Seaking'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Krabby', 'Wooper', 'Wingull', 'Tympole', 'Frillish', 'Pelipper', 'Quagsire', 'Jellicent', 'Lapras'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Krabby', 'Electrike', 'Tympole', 'Joltik', 'Wooper', 'Wingull', 'Chinchou', 'Pelipper', 'Quagsire', 'Lanturn', 'Lapras'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Delibird', 'Wingull', 'Snorunt', 'Vanillite', 'Purrloin', 'Tympole', 'Shellder', 'Frillish', 'Palpitoad', 'Diggersby', 'Vanilluxe', 'Grapploct', 'Lapras'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Vanillite', 'Klink', 'Bunnelby', 'Krabby', 'Tympole', 'Frillish', 'Palpitoad', 'Vanilluxe', 'Grapploct', 'Lapras'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Baltoy', 'Bunnelby', 'Pancham', 'Purrloin', 'Dwebble', 'Frillish', 'Diggersby', 'Pelipper', 'Grapploct'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Wooper', 'Nincada', 'Baltoy', 'Mudbray', 'Purrloin', 'Dwebble', 'Bunnelby', 'Frillish', 'Palpitoad', 'Diggersby', 'Seaking', 'Grapploct'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Krabby', 'Natu', 'Wingull', 'Ralts', 'Wooper', 'Purrloin', 'Tympole', 'Frillish', 'Palpitoad', 'Quagsire', 'Jellicent', 'Grapploct', 'Cloyster', 'Lapras'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)]));
Routes.add(new RegionRoute('East Lake Axwell', GameConstants.Region.galar, 6, new RoutePokemon({
    land: ['Stufful', 'Butterfree', 'Pidove'],
    water: ['Shellder', 'Magikarp', 'Goldeen', 'Wishiwashi (Solo)', 'Gyarados', 'Wingull'],
    special: [
        new SpecialRoutePokemon(['Oddish', 'Bounsweet', 'Bunnelby', 'Frillish', 'Xatu', 'Garbodor', 'Jellicent', 'Seaking', 'Pelipper', 'Lanturn', 'Cloyster'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Oddish', 'Budew', 'Minccino', 'Pancham', 'Frillish', 'Xatu', 'Garbodor', 'Jellicent', 'Pelipper', 'Seaking'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Oddish', 'Grubbin', 'Frillish', 'Pelipper', 'Garbodor', 'Jellicent'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Oddish', 'Electrike', 'Joltik', 'Pancham', 'Chinchou', 'Pelipper', 'Garbodor', 'Jellicent', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snorunt', 'Snover', 'Minccino', 'Pancham', 'Vanillite', 'Frillish', 'Xatu', 'Piloswine', 'Vanilluxe'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Snover', 'Minccino', 'Vanillite', 'Snorunt', 'Pancham', 'Xatu', 'Piloswine', 'Vanilluxe'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Onix', 'Minccino', 'Mudbray', 'Pancham', 'Frillish', 'Xatu', 'Mudsdale', 'Pelipper', 'Seaking'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Onix', 'Baltoy', 'Dwebble', 'Minccino', 'Pancham', 'Mudbray', 'Frillish', 'Xatu', 'Mudsdale', 'Seaking'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Purrloin', 'Munna', 'Minccino', 'Oddish', 'Frillish', 'Xatu', 'Bronzong', 'Jellicent', 'Lanturn', 'Cloyster'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 5)]));
Routes.add(new RegionRoute('Giant\'s Seat', GameConstants.Region.galar, 7, new RoutePokemon({
    land: ['Bewear', 'Bronzor', 'Steelix', 'Duraludon', 'Bisharp'],
    water: ['Shellder', 'Cloyster', 'Gyarados', 'Pyukumuku'],
    headbutt: ['Cherubi', 'Greedent'],
    special: [
        new SpecialRoutePokemon(['Onix', 'Tranquill', 'Diggersby', 'Machop', 'Machoke', 'Lombre', 'Nuzleaf', 'Stufful', 'Rhydon', 'Vikavolt'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Machoke', 'Haunter', 'Onix', 'Machop', 'Gastly', 'Tyrogue', 'Bronzong', 'Vikavolt'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Quagsire', 'Lombre', 'Nuzleaf', 'Gastly', 'Wooper', 'Bronzong', 'Galvantula'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Crawdaunt', 'Manectric', 'Electrike', 'Palpitoad', 'Bronzong', 'Galvantula'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Swinub', 'Delibird', 'Machop', 'Snorunt', 'Snover', 'Abomasnow', 'Glalie'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Swinub', 'Delibird', 'Snorunt', 'Snover', 'Abomasnow', 'Glalie'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Onix', 'Dwebble', 'Mudsdale', 'Vulpix', 'Growlithe', 'Gastly', 'Mudbray', 'Vikavolt'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Onix', 'Dwebble', 'Mudsdale', 'Machop', 'Golett', 'Stufful', 'Golurk', 'Vikavolt'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Xatu', 'Liepard', 'Gastly', 'Natu', 'Duskull', 'Munna', 'Dusclops', 'Musharna'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)]));
Routes.add(new RegionRoute('South Lake Miloch', GameConstants.Region.galar, 8, new RoutePokemon({
    land: ['Machop', 'Tyrogue', 'Galvantula', 'Machoke', 'Thievul', 'Wingull', 'Drifloon'],
    water: ['Magikarp', 'Remoraid', 'Barboach', 'Pyukumuku', 'Goldeen'],
    special: [
        new SpecialRoutePokemon(['Corphish', 'Tympole', 'Stunky', 'Krabby', 'Lombre', 'Nuzleaf', 'Skuntank', 'Kingler', 'Crawdaunt', 'Drifblim', 'Seaking', 'Gyarados', 'Octillery'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Tyrogue', 'Roselia', 'Corphish', 'Stunky', 'Krabby', 'Lombre', 'Nuzleaf', 'Skuntank', 'Machoke', 'Drifblim', 'Seaking', 'Gyarados', 'Pelipper'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Corphish', 'Tympole', 'Stunky', 'Krabby', 'Palpitoad', 'Pelipper', 'Seaking', 'Jellicent', 'Gyarados'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Electrike', 'Corphish', 'Joltik', 'Stunky', 'Krabby', 'Tympole', 'Pyukumuku', 'Palpitoad', 'Kingler', 'Crawdaunt', 'Seaking', 'Lanturn', 'Gyarados', 'Pelipper'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Corphish', 'Snorunt', 'Vanillite', 'Snover', 'Krabby', 'Skuntank', 'Machoke', 'Vanilluxe', 'Gyarados'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Snover', 'Klink', 'Vanillite', 'Delibird', 'Skuntank', 'Machoke', 'Vanilluxe', 'Drifblim', 'Gyarados'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Nincada', 'Roselia', 'Baltoy', 'Stunky', 'Mudbray', 'Crustle', 'Machoke', 'Whiscash', 'Pelipper', 'Gyarados', 'Octillery'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Wooper', 'Nincada', 'Baltoy', 'Tympole', 'Dwebble', 'Stunky', 'Mudbray', 'Skuntank', 'Machoke', 'Whiscash', 'Seaking', 'Gyarados', 'Octillery'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Natu', 'Ralts', 'Corphish', 'Bronzor', 'Drifloon', 'Skuntank', 'Drifblim', 'Jellicent', 'Milotic', 'Octillery'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)]));
Routes.add(new RegionRoute('North Lake Miloch', GameConstants.Region.galar, 9, new RoutePokemon({
    land: ['Stunky', 'Boltund', 'Liepard', 'Corviknight'],
    headbutt: ['Skwovet', 'Cherubi'],
    water: ['Frillish', 'Magikarp', 'Basculin (Blue-Striped)', 'Basculin (Red-Striped)', 'Barboach'],
    special: [
        new SpecialRoutePokemon(['Pidove', 'Diggersby', 'Stufful', 'Bunnelby', 'Drifloon', 'Wingull', 'Lucario', 'Xatu', 'Lapras', 'Jellicent', 'Drifblim', 'Whiscash'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Machop', 'Gastly', 'Stufful', 'Purrloin', 'Drifloon', 'Wingull', 'Seismitoad', 'Xatu', 'Gyarados', 'Jellicent', 'Drifblim', 'Whiscash'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Tympole', 'Grubbin', 'Stufful', 'Purrloin', 'Palpitoad', 'Wingull', 'Skuntank', 'Pelipper', 'Lapras', 'Jellicent', 'Seaking'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Joltik', 'Grubbin', 'Stufful', 'Purrloin', 'Palpitoad', 'Drifloon', 'Seismitoad', 'Pelipper', 'Lapras', 'Jellicent', 'Seaking', 'Whiscash'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Delibird', 'Snorunt', 'Snover', 'Stufful', 'Purrloin', 'Vanillite', 'Drifloon', 'Wingull', 'Vanillish', 'Xatu', 'Lapras', 'Vanilluxe'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Snorunt', 'Snover', 'Purrloin', 'Vanillite', 'Klink', 'Drifloon', 'Vanillish', 'Xatu', 'Lapras', 'Vanilluxe', 'Drifblim'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Baltoy', 'Dwebble', 'Mudbray', 'Stufful', 'Bunnelby', 'Drifloon', 'Wingull', 'Skuntank', 'Xatu', 'Gyarados', 'Pelipper', 'Whiscash'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Baltoy', 'Dwebble', 'Mudbray', 'Golett', 'Bunnelby', 'Drifloon', 'Skuntank', 'Xatu', 'Gyarados', 'Seaking', 'Whiscash'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Natu', 'Ralts', 'Stufful', 'Drifloon', 'Ralts', 'Purrloin', 'Wingull', 'Drifblim', 'Xatu', 'Lapras', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 7)]));
Routes.add(new RegionRoute('Galar Route 3', GameConstants.Region.galar, 10, new RoutePokemon({
    land: ['Gossifleur', 'Corvisquire', 'Rookidee', 'Skwovet', 'Rolycoly', 'Sizzlipede', 'Vulpix', 'Growlithe', 'Tyrogue', 'Galarian Zigzagoon', 'Stunky', 'Trubbish', 'Cherubi', 'Mudbray', 'Pancham', 'Klink', 'Machop'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 6)]));
Routes.add(new RegionRoute('Galar Route 4', GameConstants.Region.galar, 11, new RoutePokemon({
    land: ['Yamper', 'Cutiefly', 'Wooloo', 'Milcery', 'Galarian Meowth', 'Budew', 'Ferroseed', 'Joltik', 'Pikachu', 'Eevee', 'Electrike', 'Pumpkaboo', 'Diglett'],
    water: ['Magikarp', 'Goldeen', 'Chewtle'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Galar Mine'))]));
Routes.add(new RegionRoute('Galar Route 5', GameConstants.Region.galar, 12, new RoutePokemon({
    land: ['Dottler', 'Drifloon', 'Applin', 'Eldegoss', 'Galarian Farfetch\'d', 'Wobbuffet', 'Minccino', 'Spritzee', 'Swirlix', 'Stufful', 'Espurr', 'Nincada', 'Dewpider', 'Nuzleaf', 'Lombre'],
    water: ['Magikarp', 'Chewtle', 'Goldeen'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Grass)]));
Routes.add(new RegionRoute('Motostoke Outskirts', GameConstants.Region.galar, 13, new RoutePokemon({
    land: ['Impidimp', 'Chewtle', 'Koffing', 'Hatenna', 'Noctowl', 'Throh', 'Sawk', 'Sudowoodo', 'Salandit', 'Pawniard', 'Scraggy', 'Croagunk', 'Roggenrola'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Galar Mine No. 2'))]));
Routes.add(new RegionRoute('Hammerlocke Hills', GameConstants.Region.galar, 14, new RoutePokemon({
    land: ['Pumpkaboo', 'Klink', 'Unfezant', 'Corvisquire', 'Hawlucha', 'Corviknight', 'Copperajah', 'Gourgeist'],
    special: [
        new SpecialRoutePokemon(['Espurr', 'Inkay', 'Dubwool', 'Machoke', 'Sudowoodo', 'Wobbuffet', 'Stufful', 'Vileplume', 'Klang'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Machoke', 'Espurr', 'Inkay', 'Hawlucha', 'Thievul', 'Wobbuffet', 'Stufful', 'Roserade', 'Klang'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Klang', 'Vileplume', 'Palpitoad', 'Wobbuffet', 'Machoke', 'Inkay', 'Shelmet', 'Karrablast', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Karrablast', 'Shelmet', 'Espurr', 'Charjabug', 'Machoke', 'Wobbuffet', 'Wimpod', 'Vileplume', 'Klinklang'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Espurr', 'Inkay', 'Wobbuffet', 'Sneasel', 'Snorunt', 'Cubchoo', 'Abomasnow', 'Klang'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Klinklang', 'Abomasnow', 'Snorunt', 'Sneasel', 'Wobbuffet', 'Machoke', 'Inkay', 'Honedge', 'Vanillite'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Baltoy', 'Espurr', 'Inkay', 'Machoke', 'Sudowoodo', 'Wobbuffet', 'Maractus', 'Vileplume', 'Klinklang'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Dugtrio', 'Drilbur', 'Dwebble', 'Espurr', 'Machoke', 'Sudowoodo', 'Trapinch', 'Axew', 'Wobbuffet', 'Vileplume', 'Klinklang'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Klinklang', 'Roserade', 'Morelull', 'Honedge', 'Gastly', 'Impidimp', 'Hatenna', 'Inkay', 'Espurr'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dusty Bowl'))]));
Routes.add(new RegionRoute('Galar Route 6', GameConstants.Region.galar, 15, new RoutePokemon({
    land: ['Silicobra', 'Torkoal', 'Duskull', 'Hippopotas', 'Skorupi', 'Heatmor', 'Durant', 'Hawlucha', 'Dugtrio', 'Trapinch', 'Axew', 'Maractus', 'Galarian Yamask', 'Helioptile'],
    water: ['Goldeen', 'Magikarp', 'Drednaw'],
    headbutt: ['Greedent'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Fire)]));
Routes.add(new RegionRoute('Galar Route 7', GameConstants.Region.galar, 16, new RoutePokemon({
    land: ['Thievul', 'Corviknight', 'Perrserker', 'Morpeko', 'Liepard', 'Seismitoad', 'Karrablast', 'Shelmet', 'Meowstic', 'Corviknight', 'Galvantula', 'Inkay', 'Thievul', 'Perrserker', 'Morpeko'],
    headbutt: ['Greedent'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Fairy)]));
Routes.add(new RegionRoute('Galar Route 8', GameConstants.Region.galar, 17, new RoutePokemon({
    land: ['Sandaconda', 'Haunter', 'Rhyhorn', 'Dusclops', 'Bronzong', 'Hippowdon', 'Drapion', 'Solrock', 'Lunatone', 'Boldore', 'Gurdurr', 'Golett', 'Pawniard', 'Rufflet', 'Vullaby', 'Togedemaru', 'Crustle'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 16)]));
Routes.add(new RegionRoute('Steamdrift Way', GameConstants.Region.galar, 18, new RoutePokemon({
    land: ['Sneasel', 'Delibird', 'Snover', 'Galarian Darumaka', 'Snorunt', 'Snom', 'Throh', 'Sawk', 'Vanillish'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 17)]));
Routes.add(new RegionRoute('Galar Route 2 Lakeside', GameConstants.Region.galar, 19, new RoutePokemon({
    land: ['Lotad', 'Seedot', 'Purrloin', 'Blipbug', 'Gossifleur', 'Chewtle', 'Galarian Zigzagoon', 'Nickit', 'Yamper', 'Obstagoon'],
    water: ['Lapras', 'Drednaw', 'Gyarados', 'Arrokuda', 'Barraskewda', 'Magikarp', 'Feebas'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Rock)]));
Routes.add(new RegionRoute('Galar Route 9', GameConstants.Region.galar, 20, new RoutePokemon({
    land: ['Cramorant', 'Octillery', 'Kingler', 'Pyukumuku', 'Gastrodon (east)', 'Jellicent', 'Mareanie', 'Glalie'],
    water: ['Wishiwashi (Solo)', 'Qwilfish', 'Mantyke'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Rock)]));
Routes.add(new RegionRoute('Circhester Bay', GameConstants.Region.galar, 21, new RoutePokemon({
    land: ['Gastrodon (east)', 'Inkay', 'Cramorant', 'Octillery', 'Barbaracle', 'Bergmite', 'Toxapex', 'Dhelmise', 'Clobbopus'],
    water: ['Lapras', 'Mantine', 'Mantyke', 'Wailmer', 'Wailord', 'Remoraid', 'Grapploct'],
    headbutt: ['Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 20)]));
Routes.add(new RegionRoute('Outer Spikemuth', GameConstants.Region.galar, 22, new RoutePokemon({
    land: ['Liepard', 'Thievul', 'Perrserker', 'Morpeko', 'Morpeko (hangry)', 'Jellicent', 'Bergmite', 'Mareanie', 'Toxapex', 'Dhelmise', 'Clobbopus'],
    headbutt: ['Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 21)]));
Routes.add(new RegionRoute('Galar Route 10 Station', GameConstants.Region.galar, 23, new RoutePokemon({
    land: ['Snom', 'Rhydon', 'Galarian Darumaka', 'Galarian Mr. Mime', 'Vanillish', 'Klang', 'Glalie', 'Snover', 'Vanilluxe', 'Cubchoo'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Dragon)]));
Routes.add(new RegionRoute('Galar Route 10 North', GameConstants.Region.galar, 24, new RoutePokemon({
    land: ['Snom', 'Duraludon', 'Stonjourner', 'Eiscue', 'Eiscue (noice)', 'Beartic', 'Vanillish', 'Abomasnow', 'Galarian Darumaka', 'Galarian Mr. Mime', 'Sneasel', 'Snover', 'Cubchoo'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 23)]));
/*
ISLE OF ARMOR
*/
Routes.add(new RegionRoute('Fields of Honor', GameConstants.Region.armor, 1, new RoutePokemon({
    land: ['Galarian Slowpoke', 'Buneary', 'Jigglypuff', 'Abra', 'Klefki', 'Blipbug', 'Happiny'],
    water: ['Magikarp', 'Remoraid', 'Octillery', 'Tentacool', 'Wingull', 'Mantyke', 'Starmie'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Kingler', 'Rockruff', 'Lopunny', 'Toxapex', 'Comfey'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Inkay', 'Chansey', 'Toxapex', 'Zorua', 'Malamar', 'Kingler', 'Tentacruel'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Krabby', 'Chansey', 'Marill', 'Malamar', 'Kingler', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Krabby', 'Chansey', 'Pikachu', 'Luxio', 'Kingler', 'Pelipper'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Fomantis', 'Chansey', 'Kingler', 'Rockruff', 'Lopunny', 'Drednaw', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Comfey', 'Lopunny', 'Kingler'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Ralts', 'Blissey', 'Zorua', 'Wigglytuff', 'Toxapex', 'Kadabra', 'Drifloon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]));
Routes.add(new RegionRoute('Soothing Wetlands', GameConstants.Region.armor, 2, new RoutePokemon({
    land: ['Skorupi', 'Dunsparce', 'Bouffalant', 'Lickitung', 'Shelmet', 'Happiny'],
    water: ['Magikarp', 'Barboach', 'Whiscash', 'Wooper', 'Chewtle'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Lickilicky', 'Lopunny', 'Rockruff', 'Quagsire', 'Drapion', 'Drednaw', 'Comfey'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Pawniard', 'Croagunk', 'Drapion', 'Malamar', 'Zorua', 'Quagsire', 'Drednaw', 'Scraggy'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Drapion', 'Malamar', 'Quagsire', 'Lickilicky', 'Marill', 'Poliwhirl', 'Politoed'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Luxray', 'Luxio', 'Raichu', 'Pikachu', 'Poliwhirl', 'Politoed'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Talonflame', 'Lilligant', 'Fletchinder', 'Comfey', 'Drednaw', 'Quagsire'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Lickilicky', 'Lopunny', 'Comfey', 'Quagsire', 'Drapion', 'Drednaw'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Kadabra', 'Wigglytuff', 'Zorua', 'Quagsire', 'Azumarill', 'Comfey', 'Poliwhirl'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 1),
        new RouteKillRequirement(10, GameConstants.Region.armor, 3),
        new RouteKillRequirement(10, GameConstants.Region.armor, 4),
        new RouteKillRequirement(10, GameConstants.Region.armor, 5),
        new RouteKillRequirement(10, GameConstants.Region.armor, 11),
    ]),
]));
Routes.add(new RegionRoute('Forest of Focus', GameConstants.Region.armor, 3, new RoutePokemon({
    land: ['Venipede', 'Foongus', 'Tangela', 'Pikachu', 'Passimian', 'Oranguru', 'Happiny', 'Karrablast'],
    water: ['Magikarp', 'Goldeen', 'Arrokuda', 'Corphish', 'Cramorant'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Tangrowth', 'Amoonguss', 'Whiscash'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Pawniard', 'Croagunk', 'Amoonguss', 'Scolipede', 'Crawdaunt', 'Whiscash'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Crawdaunt', 'Shelmet', 'Accelgor', 'Goomy', 'Golduck', 'Amoonguss', 'Barraskewda'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Raichu', 'Luxray', 'Pichu', 'Shelmet', 'Crawdaunt', 'Barraskewda'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Pinsir', 'Heracross', 'Tangrowth', 'Lurantis', 'Larvesta', 'Comfey', 'Amoonguss', 'Whiscash'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Silicobra', 'Sandslash', 'Escavalier', 'Cubone', 'Whiscash'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Zorua', 'Wigglytuff', 'Comfey', 'Azumarill', 'Gardevoir', 'Jigglypuff', 'Barraskewda'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin', 'Emolga'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 2),
        new RouteKillRequirement(10, GameConstants.Region.armor, 4),
        new RouteKillRequirement(10, GameConstants.Region.armor, 7),
    ]),
]));
Routes.add(new RegionRoute('Challenge Beach', GameConstants.Region.armor, 4, new RoutePokemon({
    land: ['Magnemite', 'Psyduck', 'Dedenne', 'Morpeko', 'Blipbug', 'Buneary', 'Jigglypuff', 'Happiny'],
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Dhelmise', 'Staryu', 'Pelipper', 'Tentacool', 'Wingull'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Lopunny', 'Comfey', 'Drednaw', 'Marill', 'Cramorant', 'Kingler', 'Starmie', 'Tentacruel', 'Gyarados', 'Octillery', 'Barraskewda'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Inkay', 'Drapion', 'Malamar', 'Drednaw', 'Crawdaunt', 'Drifblim', 'Swoobat', 'Cramorant', 'Toxapex', 'Starmie', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Malamar', 'Crawdaunt', 'Golisopod', 'Cramorant', 'Drapion', 'Starmie', 'Kingler', 'Toxapex', 'Tentacruel', 'Cloyster', 'Gyarados', 'Jellicent', 'Barraskewda'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Magneton', 'Raichu', 'Drednaw', 'Golduck', 'Luxray', 'Magnezone', 'Starmie', 'Toxapex', 'Lanturn', 'Barraskewda'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Lilligant', 'Lurantis', 'Fletchinder', 'Drednaw', 'Golduck', 'Volcarona', 'Cramorant', 'Kingler', 'Starmie', 'Tentacruel', 'Gyarados', 'Octillery', 'Barraskewda'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Lopunny', 'Drednaw', 'Cramorant', 'Marill', 'Kingler', 'Starmie', 'Tentacruel', 'Gyarados', 'Octillery', 'Barraskewda'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Wigglytuff', 'Comfey', 'Lopunny', 'Drifblim', 'Azumarill', 'Cramorant', 'Starmie', 'Toxapex', 'Cloyster', 'Lanturn', 'Jellicent', 'Barraskewda'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 2),
        new RouteKillRequirement(10, GameConstants.Region.armor, 3),
        new RouteKillRequirement(10, GameConstants.Region.armor, 15),
    ]),
]));
Routes.add(new RegionRoute('Courageous Cavern', GameConstants.Region.armor, 5, new RoutePokemon({
    land: ['Pincurchin', 'Dwebble', 'Crustle', 'Druddigon', 'Golisopod', 'Swoobat', 'Drednaw'],
    water: ['Magikarp', 'Shellder', 'Cloyster', 'Tentacool', 'Clobbopus', 'Chewtle', 'Tentacruel', 'Whiscash'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Woobat', 'Wimpod'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Woobat', 'Wimpod'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Woobat', 'Wimpod'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Woobat', 'Wimpod'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Woobat', 'Wimpod'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Woobat', 'Wimpod'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 1),
        new RouteKillRequirement(10, GameConstants.Region.armor, 2),
        new RouteKillRequirement(10, GameConstants.Region.armor, 4),
        new RouteKillRequirement(10, GameConstants.Region.armor, 6),
    ]),
]));
Routes.add(new RegionRoute('Loop Lagoon', GameConstants.Region.armor, 6, new RoutePokemon({
    land: ['Sandygast', 'Clobbopus', 'Wingull', 'Mareanie', 'Pincurchin', 'Dwebble', 'Blipbug', 'Happiny'],
    water: ['Magikarp', 'Shellder', 'Cloyster'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Drednaw', 'Grapploct', 'Alakazam', 'Rockruff', 'Gyarados', 'Tentacruel', 'Octillery'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Inkay', 'Malamar', 'Toxapex', 'Grapploct', 'Palossand', 'Zoroark', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Krabby', 'Malamar', 'Toxapex', 'Alakazam', 'Pelipper', 'Tentacruel', 'Gyarados'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Krabby', 'Luxio', 'Magnezone', 'Luxray', 'Lanturn', 'Gyarados'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fletchling', 'Drednaw', 'Grapploct', 'Larvesta', 'Talonflame', 'Tentacruel', 'Octillery', 'Gyarados'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Drednaw', 'Grapploct', 'Palossand', 'Alakazam', 'Larvesta', 'Tentacruel', 'Octillery', 'Gyarados'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Drifloon', 'Wigglytuff', 'Toxapex', 'Grapploct', 'Palossand', 'Zoroark', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 5),
        new RouteKillRequirement(10, GameConstants.Region.armor, 13),
    ]),
]));
Routes.add(new RegionRoute('Training Lowlands', GameConstants.Region.armor, 7, new RoutePokemon({
    land: ['Lillipup', 'Tauros', 'Miltank', 'Scyther', 'Pinsir', 'Heracross', 'Blipbug', 'Happiny'],
    water: ['Magikarp', 'Carvanha', 'Sharpedo', 'Corphish', 'Arrokuda', 'Cramorant', 'Staryu'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Stoutland', 'Kangaskhan', 'Herdier', 'Golduck', 'Kingler', 'Barraskewda'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Inkay', 'Bisharp', 'Drapion', 'Swoobat', 'Kangaskhan', 'Karrablast', 'Golduck', 'Malamar', 'Kingler', 'Crawdaunt'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Kingler', 'Pelipper', 'Malamar', 'Shelmet', 'Scrafty', 'Toxicroak', 'Golduck', 'Barraskewda'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Luxray', 'Luxio', 'Magneton', 'Accelgor', 'Scrafty', 'Toxicroak', 'Golduck', 'Kingler', 'Barraskewda'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Lilligant', 'Fletchinder', 'Talonflame', 'Drapion', 'Golduck', 'Kingler', 'Barraskewda'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Silicobra', 'Scizor', 'Crustle', 'Skarmory', 'Escavalier', 'Jangmo-o', 'Kingler', 'Barraskewda'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Wigglytuff', 'Comfey', 'Drifblim', 'Herdier', 'Azumarill', 'Gardevoir', 'Barraskewda'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 2),
        new RouteKillRequirement(10, GameConstants.Region.armor, 10),
        new RouteKillRequirement(10, GameConstants.Region.armor, 15),
    ]),
]));
Routes.add(new RegionRoute('Warm-Up Tunnel', GameConstants.Region.armor, 8, new RoutePokemon({
    land: ['Sandshrew', 'Cubone', 'Torkoal', 'Kangaskhan'],
    special: [
        new SpecialRoutePokemon(['Chansey'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.armor, 7)]));
Routes.add(new RegionRoute('Potbottom Desert', GameConstants.Region.armor, 9, new RoutePokemon({
    land: ['Sandile', 'Rhyhorn', 'Torkoal', 'Rufflet', 'Vullaby', 'Braviary', 'Mandibuzz'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Rhyperior', 'Marowak', 'Rhydon', 'Sandaconda'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Pawniard', 'Jangmo-o', 'Krookodile', 'Krokorok'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Krookodile', 'Krokorok'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Krookodile', 'Krokorok'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fletchling', 'Rhyperior', 'Marowak', 'Sandaconda', 'Rhydon', 'Volcarona'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Silicobra', 'Scraggy', 'Rhyperior', 'Sandslash', 'Rhydon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Rhyperior', 'Marowak', 'Sandaconda'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.armor, 8)]));
Routes.add(new RegionRoute('Challenge Road', GameConstants.Region.armor, 10, new RoutePokemon({
    land: ['Skorupi', 'Dunsparce', 'Bouffalant', 'Lickitung', 'Shelmet', 'Happiny'],
    water: ['Magikarp', 'Barboach', 'Whiscash', 'Wooper', 'Chewtle'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Lickilicky', 'Lopunny', 'Rockruff', 'Quagsire', 'Drapion', 'Drednaw', 'Comfey'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Pawniard', 'Croagunk', 'Drapion', 'Malamar', 'Zorua', 'Quagsire', 'Drednaw', 'Scraggy'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Drapion', 'Malamar', 'Quagsire', 'Lickilicky', 'Marill', 'Poliwhirl', 'Politoed'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Luxray', 'Luxio', 'Raichu', 'Pikachu', 'Poliwhirl', 'Politoed'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Talonflame', 'Lilligant', 'Fletchinder', 'Comfey', 'Drednaw', 'Quagsire'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Lickilicky', 'Lopunny', 'Comfey', 'Quagsire', 'Drapion', 'Drednaw'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Kadabra', 'Wigglytuff', 'Zorua', 'Quagsire', 'Azumarill', 'Comfey', 'Poliwhirl'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 7),
        new RouteKillRequirement(10, GameConstants.Region.armor, 11),
    ]),
]));
Routes.add(new RegionRoute('Brawlers Cave', GameConstants.Region.armor, 11, new RoutePokemon({
    land: ['Whismur', 'Woobat', 'Azurill', 'Lickitung', 'Poliwrath', 'Loudred', 'Swoobat', 'Druddigon', 'Golduck', 'Gigalith'],
    water: ['Poliwag', 'Barboach', 'Whiscash'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Poliwag'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Poliwag'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Poliwag'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Poliwag'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Poliwag'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Psyduck'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Psyduck'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 2),
        new RouteKillRequirement(10, GameConstants.Region.armor, 10),
    ]),
]));
Routes.add(new RegionRoute('Workout Sea', GameConstants.Region.armor, 12, new RoutePokemon({
    land: ['Blipbug', 'Ditto', 'Exeggcute', 'Happiny'],
    water: ['Magikarp', 'Remoraid', 'Octillery', 'Sharpedo', 'Mantyke', 'Wingull', 'Tentacool', 'Clauncher', 'Skrelp', 'Gyarados', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Exeggutor', 'Rotom (mow)'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Rotom (fan)', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Rotom (frost)', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Rotom (wash)', 'Pelipper', 'Chinchou', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Exeggutor', 'Rotom (heat)', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Rotom'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Rotom', 'Drifloon', 'Jellicent', 'Wailord'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 1),
        new RouteKillRequirement(10, GameConstants.Region.armor, 11),
        new RouteKillRequirement(10, GameConstants.Region.armor, 13),
    ]),
]));
Routes.add(new RegionRoute('Stepping-Stone Sea', GameConstants.Region.armor, 13, new RoutePokemon({
    land: ['Blipbug', 'Exeggcute', 'Happiny', 'Wingull'],
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Sharpedo', 'Tentacool', 'Frillish', 'Gyarados', 'Clauncher', 'Skrelp', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Mantyke'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Pelipper', 'Chinchou', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Mantyke'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Drifloon', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin', 'Flapple', 'Appletun'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 4),
        new RouteKillRequirement(10, GameConstants.Region.armor, 6),
        new RouteKillRequirement(10, GameConstants.Region.armor, 12),
        new RouteKillRequirement(10, GameConstants.Region.armor, 14),
        new RouteKillRequirement(10, GameConstants.Region.armor, 15),
    ]),
]));
Routes.add(new RegionRoute('Insular Sea', GameConstants.Region.armor, 14, new RoutePokemon({
    land: ['Blipbug', 'Wingull', 'Exeggcute', 'Happiny'],
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Sharpedo', 'Tentacool', 'Horsea', 'Gyarados', 'Clauncher', 'Skrelp', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Exeggutor', 'Mantyke'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Zoroark', 'Pelipper', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Exeggutor', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Magnezone', 'Pelipper', 'Chinchou', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Volcarona', 'Exeggutor', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Exeggutor', 'Mantyke'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Alakazam', 'Comfey', 'Drifloon', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 13),
        new RouteKillRequirement(10, GameConstants.Region.armor, 15),
    ]),
]));
Routes.add(new RegionRoute('Honeycalm Sea', GameConstants.Region.armor, 15, new RoutePokemon({
    water: ['Tentacool', 'Magikarp', 'Wishiwashi (Solo)', 'Sharpedo', 'Wingull', 'Wailmer', 'Clauncher', 'Skrelp', 'Gyarados', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Mantyke', 'Seadra'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Tentacruel', 'Jellicent', 'Seadra'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Pelipper', 'Seadra'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Pelipper', 'Chinchou', 'Lanturn', 'Kingdra'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Fletchinder', 'Seadra'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Mantyke', 'Seadra'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Drifloon', 'Jellicent', 'Seadra'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.armor, 4),
        new RouteKillRequirement(10, GameConstants.Region.armor, 7),
        new RouteKillRequirement(10, GameConstants.Region.armor, 13),
        new RouteKillRequirement(10, GameConstants.Region.armor, 15),
    ]),
]));
Routes.add(new RegionRoute('Honeycalm Island', GameConstants.Region.armor, 16, new RoutePokemon({
    land: ['Blipbug', 'Combee', 'Petilil', 'Happiny'],
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Wingull', 'Tentacool', 'Wailmer', 'Gyarados', 'Clauncher', 'Skrelp', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Lilligant', 'Mantyke'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Pelipper', 'Chinchou', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Lilligant', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Lilligant', 'Mantyke'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Comfey', 'Drifloon', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [new RouteKillRequirement(10, GameConstants.Region.armor, 15)]));
//Crown Tundra
Routes.add(new RegionRoute('Slippery Slope', GameConstants.Region.crown, 1, new RoutePokemon({
    land: ['Snom', 'Piloswine', 'Jynx', 'Amaura', 'Audino', 'Mime Jr.', 'Smoochum', 'Swinub'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Wooloo', 'Mamoswine', 'Snorlax'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Sneasel', 'Phantump', 'Trevenant', 'Weavile', 'Mamoswine'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Cryogonal', 'Mamoswine', 'Abomasnow', 'Swablu'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Mamoswine', 'Glalie', 'Froslass'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Wooloo', 'Magby', 'Snorlax', 'Magmar', 'Mamoswine', 'Magmortar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hatenna', 'Impidimp', 'Gothorita', 'Mimikyu', 'Duosion', 'Gothita', 'Solosis', 'Hattrem', 'Grimmsnarl', 'Gothitelle', 'Reuniclus'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Greedent'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)]));
Routes.add(new RegionRoute('Frostpoint Field', GameConstants.Region.crown, 2, new RoutePokemon({
    land: ['Abomasnow', 'Jynx', 'Amaura', 'Audino', 'Mime Jr.', 'Snover', 'Smoochum'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Wooloo', 'Nidoran(M)', 'Nidoran(F)', 'Snorlax'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Sneasel', 'Nidoran(M)', 'Nidoran(F)', 'Weavile', 'Snorlax'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Vanillite', 'Nidoran(M)', 'Nidoran(F)', 'Vanilluxe'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Vanillite', 'Nidoran(M)', 'Nidoran(F)', 'Vanilluxe', 'Absol', 'Eevee'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Magby', 'Nidoran(M)', 'Nidoran(F)', 'Snorlax', 'Magmar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Gothorita', 'Duosion', 'Mimikyu', 'Hatenna', 'Gothita', 'Solosis', 'Hatterene', 'Gothitelle', 'Reuniclus'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 1)]));
Routes.add(new RegionRoute('Giants Bed', GameConstants.Region.crown, 3, new RoutePokemon({
    land: ['Nidoran(M)', 'Nidoran(F)', 'Stonjourner', 'Bronzong', 'Audino', 'Mime Jr.', 'Shelmet', 'Nidorino', 'Nidorina', 'Aerodactyl'],
    water: ['Magikarp', 'Barboach', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Gyarados', 'Whiscash', 'Lileep', 'Feebas'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Gurdurr', 'Eevee', 'Wooloo', 'Nidoking', 'Nidoqueen', 'Conkeldurr', 'Leafeon', 'Snorlax'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Galarian Linoone', 'Lampent', 'Nidoking', 'Nidoqueen', 'Obstagoon', 'Umbreon', 'Snorlax', 'Chandelure', 'Altaria'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider', 'Nidoking', 'Nidoqueen', 'Obstagoon', 'Vaporeon', 'Snorlax'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Galvantula', 'Electabuzz', 'Dewpider', 'Elekid', 'Electivire', 'Jolteon', 'Nidoking', 'Snorlax'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snorunt', 'Cryogonal', 'Vanillish', 'Vanillite', 'Nidoking', 'Nidoqueen', 'Vanilluxe', 'Espeon', 'Glalie', 'Froslass', 'Snorlax'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Snorunt', 'Cryogonal', 'Vanillish', 'Absol', 'Vanillite', 'Glalie', 'Froslass', 'Glaceon', 'Greedent', 'Nidoking', 'Nidoqueen', 'Vanilluxe', 'Snorlax'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Heatmor', 'Durant', 'Wooloo', 'Magby', 'Nidoqueen', 'Flareon', 'Magmortar', 'Snorlax'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Morgrem', 'Lampent', 'Clefairy', 'Mimikyu', 'Hatenna', 'Nidoking', 'Nidoqueen', 'Grimmsnarl', 'Hatterene', 'Clefable', 'Snorlax', 'Sylveon', 'Chandelure', 'Milotic'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 2)]));
Routes.add(new RegionRoute('Old Cemetery', GameConstants.Region.crown, 4, new RoutePokemon({
    land: ['Nidoran(M)', 'Nidoran(F)', 'Sinistea', 'Drakloak', 'Audino', 'Mime Jr.', 'Karrablast'],
    special: [
        new SpecialRoutePokemon(['Polteageist', 'Dragapult'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Lampent', 'Phantump', 'Trevenant', 'Dragapult'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider', 'Polteageist', 'Dragapult'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Galvantula', 'Electabuzz', 'Elekid', 'Dragapult', 'Polteageist'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Vanillite', 'Froslass', 'Dragapult'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Absol', 'Vanillite', 'Polteageist', 'Froslass'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Magmar', 'Heatmor', 'Durant', 'Magby', 'Polteageist', 'Dragapult'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Lampent', 'Galarian Ponyta', 'Mimikyu', 'Hatenna', 'Polteageist', 'Galarian Rapidash'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 3)]));
Routes.add(new RegionRoute('Giants Foot', GameConstants.Region.crown, 5, new RoutePokemon({
    land: ['Copperajah', 'Bronzong', 'Stonjourner', 'Archen', 'Audino', 'Claydol', 'Mime Jr.', 'Cufant', 'Bronzor'],
    water: ['Magikarp', 'Barboach', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Gyarados', 'Whiscash', 'Lileep', 'Feebas', 'Omanyte', 'Kabuto'],
    special: [
        new SpecialRoutePokemon(['Centiskorch', 'Gurdurr', 'Sizzlipede'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Phantump', 'Altaria'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider', 'Electabuzz', 'Galvantula', 'Elekid'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snorunt', 'Cryogonal', 'Vanillish', 'Vanillite'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Snorunt', 'Cryogonal', 'Vanillish', 'Vanillite', 'Absol'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Centiskorch', 'Magmar', 'Sizzlipede', 'Magby'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Morgrem', 'Mimikyu', 'Hatenna'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 3)]));
Routes.add(new RegionRoute('Roaring-Sea Caves', GameConstants.Region.crown, 6, new RoutePokemon({
    land: ['Zubat', 'Carbink', 'Piloswine', 'Deino', 'Larvitar', 'Riolu', 'Audino', 'Lucario', 'Golbat', 'Hydreigon', 'Tyranitar', 'Omastar', 'Kabutops', 'Barboach', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Magikarp', 'Omanyte', 'Kabuto', 'Feebas'],
    special: [
        new SpecialRoutePokemon(['Vanillish'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Vanillish'], new WeatherRequirement([WeatherType.Blizzard])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 5)]));
Routes.add(new RegionRoute('Frigid Sea', GameConstants.Region.crown, 7, new RoutePokemon({
    land: ['Bergmite', 'Mime Jr.', 'Audino'],
    water: ['Magikarp', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Wailmer', 'Gyarados', 'Dhelmise', 'Spheal', 'Avalugg', 'Eiscue', 'Tirtouga', 'Wailmer'],
    special: [
        new SpecialRoutePokemon(['Sealeo', 'Walrein', 'Carracosta'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Sneasel', 'Altaria', 'Sealeo', 'Walrein'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider', 'Sealeo', 'Carracosta'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Electabuzz', 'Pincurchin', 'Dewpider', 'Elekid', 'Electivire', 'Sealeo', 'Carracosta'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Vanillish', 'Beartic', 'Vanillite', 'Sealeo', 'Walrein', 'Cryogonal', 'Lapras'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Vanillish', 'Beartic', 'Vanillite', 'Sealeo', 'Walrein', 'Cryogonal', 'Lapras', 'Beartic', 'Lapras', 'Absol'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Hattrem', 'Mimikyu', 'Hatenna', 'Hatterene', 'Sealeo', 'Walrein'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 6)]));
Routes.add(new RegionRoute('Three-Point Pass', GameConstants.Region.crown, 8, new RoutePokemon({
    land: ['Bronzong', 'Avalugg', 'Claydol', 'Golurk', 'Audino', 'Mime Jr.', 'Bronzor', 'Bergmite'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Wooloo', 'Dragapult'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Phantump', 'Dragapult'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider', 'Dragapult'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Galvantula', 'Electabuzz', 'Dewpider', 'Elekid', 'Electivire'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Vanillite', 'Dragapult'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Absol', 'Vanillite', 'Dragapult'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Druddigon', 'Heatmor', 'Durant', 'Wooloo', 'Magby', 'Dragapult'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Mimikyu', 'Hatenna', 'Dragapult'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 7)]));
Routes.add(new RegionRoute('Lakeside Cave', GameConstants.Region.crown, 9, new RoutePokemon({
    land: ['Zubat', 'Aron', 'Carbink', 'Carkol', 'Ferroseed', 'Mawile', 'Sableye', 'Noivern', 'Audino', 'Aggron', 'Coalossal', 'Lairon'],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 10)]));
Routes.add(new RegionRoute('Ballimere Lake', GameConstants.Region.crown, 10, new RoutePokemon({
    land: ['Boltund', 'Tyrunt', 'Audino', 'Skwovet', 'Yamper', 'Mime Jr.', 'Spiritomb', 'Tyrantrum', 'Aron'],
    water: ['Magikarp', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Barboach', 'Gyarados', 'Whiscash', 'Feebas', 'Dratini', 'Anorith', 'Relicanth'],
    special: [
        new SpecialRoutePokemon(['Gossifleur', 'Cottonee', 'Corvisquire', 'Shuckle', 'Eevee', 'Indeedee', 'Corviknight', 'Whimsicott', 'Coalossal'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Linoone', 'Morpeko', 'Noivern', 'Altaria', 'Obstagoon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Cottonee', 'Noivern', 'Dewpider', 'Whimsicott', 'Dragonite', 'Eldegoss', 'Armaldo'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Galvantula', 'Electabuzz', 'Morpeko', 'Dewpider', 'Elekid', 'Electivire', 'Dragonite', 'Armaldo', 'Coalossal', 'Dragonair'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Corvisquire', 'Vanillite', 'Vanilluxe', 'Coalossal'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Carkol', 'Magmar', 'Gossifleur', 'Shuckle', 'Magby', 'Magmortar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Mimikyu', 'Indeedee', 'Hatenna', 'Hatterene', 'Coalossal', 'Dragonair'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Greedent', 'Munchlax'],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 3)]));
Routes.add(new RegionRoute('Snowslide Slope', GameConstants.Region.crown, 11, new RoutePokemon({
    land: ['Snom', 'Beldum', 'Amaura', 'Audino', 'Mime Jr.', 'Metang', 'Metagross'],
    water: ['Magikarp', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Gyarados'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Druddigon', 'Wooloo', 'Aurorus'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Phantump', 'Sneasel', 'Weavile', 'Trevenant', 'Aurorus'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Cryogonal', 'Snorunt', 'Vanillish', 'Beartic', 'Delibird', 'Vanillite', 'Glalie', 'Vanilluxe', 'Froslass', 'Aurorus'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Snorunt', 'Vanillish', 'Beartic', 'Delibird', 'Vanillite', 'Glalie', 'Vanilluxe', 'Froslass', 'Aurorus', 'Galarian Darumaka', 'Absol', 'Galarian Darmanitan'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Wooloo', 'Magby', 'Magmortar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Morgrem', 'Mimikyu', 'Clefairy', 'Clefable', 'Grimmsnarl', 'Aurorus'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 3)]));
Routes.add(new RegionRoute('Tunnel to the Top', GameConstants.Region.crown, 12, new RoutePokemon({
    land: ['Zubat', 'Carbink', 'Snorunt', 'Bagon', 'Gible', 'Clefairy', 'Audino', 'Froslass', 'Salamence', 'Garchomp', 'Clefable', 'Druddigon'],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 11)]));
Routes.add(new RegionRoute('Path to the Peak', GameConstants.Region.crown, 13, new RoutePokemon({
    land: ['Snom', 'Frosmoth', 'Audino'],
    special: [
        new SpecialRoutePokemon(['Druddigon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Altaria'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Absol'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Druddigon', 'Salamence', 'Garchomp'], new WeatherRequirement([WeatherType.Sunny])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.crown, 12)]));
/// <reference path="../../declarations/DataStore/StatisticStore/index.d.ts" />
/// <reference path="../GameConstants.d.ts" />
class MapHelper {
    static routeExist(route, region) {
        return !!Routes.getRoute(region, route);
    }
    static normalizeRoute(route, region) {
        return Routes.normalizedNumber(region, route);
    }
    static getCurrentEnvironment() {
        var _a;
        const area = player.route() || ((_a = player.town()) === null || _a === void 0 ? void 0 : _a.name) || undefined;
        const [env] = Object.entries(GameConstants.Environments).find(([, regions]) => { var _a; return (_a = regions[player.region]) === null || _a === void 0 ? void 0 : _a.has(area); }) || [];
        return env;
    }
    static calculateBattleCssClass() {
        return GameConstants.EnvironmentCssClass[this.getCurrentEnvironment()];
    }
    static calculateRouteCssClass(route, region) {
        var _a;
        let cls;
        if (player.route() == route && player.region == region) {
            cls = 'currentRoute';
        }
        else if (MapHelper.accessToRoute(route, region)) {
            if (App.game.statistics.routeKills[region][route]() >= GameConstants.ROUTE_KILLS_NEEDED) {
                if (RouteHelper.routeCompleted(route, region, true)) {
                    cls = 'completedShinyRoute';
                }
                else if (RouteHelper.routeCompleted(route, region, false)) {
                    cls = 'completedRoute';
                }
                else {
                    cls = 'unlockedRoute';
                }
            }
            else {
                cls = 'unlockedUnfinishedRoute';
            }
        }
        else {
            cls = 'lockedRoute';
        }
        // Water routes
        if ((_a = GameConstants.Environments.Water[region]) === null || _a === void 0 ? void 0 : _a.has(route)) {
            cls = `${cls} waterRoute`;
        }
        return cls;
    }
    static calculateTownCssClass(town) {
        if (!player.route() && player.town().name == town) {
            return 'city currentTown';
        }
        if (MapHelper.accessToTown(town)) {
            if (dungeonList.hasOwnProperty(town)) {
                if (App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(town)]()) {
                    if (DungeonRunner.dungeonCompleted(dungeonList[town], true)) {
                        return 'dungeon completedShinyRoute';
                    }
                    else if (DungeonRunner.dungeonCompleted(dungeonList[town], false)) {
                        return 'dungeon completedRoute';
                    }
                    else {
                        return 'dungeon completedDungeon';
                    }
                }
                return 'dungeon unlockedDungeon';
            }
            if (gymList.hasOwnProperty(town)) {
                const gym = gymList[town];
                // If defeated the previous gym, but not this one
                const gymIndex = GameConstants.getGymIndex(town);
                if (Gym.isUnlocked(gym) && !App.game.badgeCase.hasBadge(gym.badgeReward)) {
                    return 'city unlockedUnfinishedTown';
                }
            }
            return 'city unlockedTown';
        }
        if (dungeonList.hasOwnProperty(town)) {
            return 'dungeon';
        }
        return 'city';
    }
    static accessToTown(townName) {
        const town = TownList[townName];
        if (!town) {
            return false;
        }
        return town.isUnlocked();
    }
    static moveToTown(townName) {
        var _a;
        if (MapHelper.accessToTown(townName)) {
            App.game.gameState = GameConstants.GameState.idle;
            player.route(0);
            const town = TownList[townName];
            player.town(town);
            Battle.enemyPokemon(null);
            //this should happen last, so all the values all set beforehand
            App.game.gameState = GameConstants.GameState.town;
        }
        else {
            const town = TownList[townName];
            const reqsList = [];
            (_a = town.requirements) === null || _a === void 0 ? void 0 : _a.forEach((requirement) => {
                if (!requirement.isCompleted()) {
                    reqsList.push(requirement.hint());
                }
            });
            Notifier.notify({
                message: `You don't have access to that location yet.<br/>${reqsList.join('<br/>')}`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static validRoute(route = 0, region = 0) {
        return !!Routes.getRoute(region, route);
    }
    static openShipModal() {
        const openModal = () => {
            $('#ShipModal').modal('show');
        };
        switch (player.region) {
            case 0:
                if (TownList['Vermilion City'].isUnlocked() && player.highestRegion() > 0) {
                    openModal();
                    return;
                }
            case 1:
                if (TownList['Olivine City'].isUnlocked()) {
                    openModal();
                    return;
                }
            case 2:
                if (TownList['Slateport City'].isUnlocked()) {
                    openModal();
                    return;
                }
            case 3:
                if (TownList['Canalave City'].isUnlocked()) {
                    openModal();
                    return;
                }
            case 4:
                if (TownList['Castelia City'].isUnlocked()) {
                    openModal();
                    return;
                }
            case 5:
                if (TownList['Coumarine City'].isUnlocked()) {
                    openModal();
                    return;
                }
        }
        Notifier.notify({
            message: 'You cannot access this dock yet',
            type: NotificationConstants.NotificationOption.warning,
        });
    }
    static ableToTravel() {
        return player.highestRegion() < GameConstants.MAX_AVAILABLE_REGION && new Set(App.game.party.caughtPokemon.filter((p) => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) <= player.highestRegion()).map((p) => Math.floor(p.id))).size >= GameConstants.TotalPokemonsPerRegion[player.highestRegion()];
    }
    static travelToNextRegion() {
        if (MapHelper.ableToTravel()) {
            // Gain queue slots based on highest region
            App.game.breeding.gainQueueSlot(App.game.breeding.queueSlotsGainedFromRegion(player.highestRegion()));
            GameHelper.incrementObservable(player.highestRegion);
            MapHelper.moveToTown(GameConstants.StartingTowns[player.highestRegion()]);
            player.region = player.highestRegion();
            // Track when users move region and how long it took in seconds
            LogEvent('new region', 'new region', GameConstants.Region[player.highestRegion()], App.game.statistics.secondsPlayed());
            // Gather users attack when they moved regions
            LogEvent('attack measurement', 'new region', GameConstants.Region[player.highestRegion()], App.game.party.calculatePokemonAttack(undefined, undefined, true, undefined, true, false, false));
        }
    }
}
MapHelper.moveToRoute = function (route, region) {
    var _a;
    if (isNaN(route)) {
        return;
    }
    let genNewEnemy = false;
    if (route != player.route()) {
        genNewEnemy = true;
    }
    if (this.accessToRoute(route, region)) {
        player.route(route);
        player.region = region;
        if (genNewEnemy && !Battle.catching()) {
            Battle.generateNewEnemy();
        }
        App.game.gameState = GameConstants.GameState.fighting;
    }
    else {
        if (!MapHelper.routeExist(route, region)) {
            return Notifier.notify({
                message: `${Routes.getName(route, region)} does not exist in the ${GameConstants.Region[region]} region.`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        const routeData = Routes.getRoute(region, route);
        const reqsList = [];
        (_a = routeData.requirements) === null || _a === void 0 ? void 0 : _a.forEach((requirement) => {
            if (!requirement.isCompleted()) {
                reqsList.push(requirement.hint());
            }
        });
        Notifier.notify({
            message: `You don't have access to that route yet.<br/>${reqsList.join('<br/>')}`,
            type: NotificationConstants.NotificationOption.warning,
        });
    }
};
MapHelper.accessToRoute = function (route, region) {
    return this.routeExist(route, region) && Routes.getRoute(region, route).isUnlocked();
};
